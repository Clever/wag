// Code generated by go-bindata.
// sources:
// _hardcoded/doer.go
// _hardcoded/middleware.go
// DO NOT EDIT!

package hardcoded

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __hardcodedDoerGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xa4\x54\x51\x6f\xdb\x36\x10\x7e\x96\x7e\xc5\x55\xc0\x50\x69\xf5\xe4\xbc\xf4\xa5\x5d\xb1\x07\xa7\x5d\xfa\xb0\x65\xe8\x8c\x6d\xaf\xb4\x48\xc9\x6c\x24\x92\x23\xa9\x24\x46\xe0\xff\xbe\x3b\x92\x92\x65\xa7\x28\x06\x24\x08\x60\x91\x77\xfc\xee\xfb\x8e\x1f\xcf\xb0\xe6\x8e\x75\x02\x9a\x5e\x0a\xe5\xf3\x5c\x0e\x46\x5b\x0f\x65\x9e\x15\x8d\x56\x5e\x3c\xfa\x02\x3f\xdb\x21\xfc\x28\xe1\xd7\x7b\xef\x4d\x91\xe7\x99\x36\x98\x6f\x59\x23\x55\x07\x45\x27\xfd\x7e\xdc\xd5\x8d\x1e\xd6\x8b\xfd\xe5\xf7\x4f\x9d\x26\x84\x4e\xf7\x4c\x75\xb5\xb6\xdd\xfa\x71\x4d\x70\xa9\xc8\xba\xf1\x8f\x11\xb9\xca\xf3\xf5\x1a\xb8\x16\x16\xa4\x03\xa6\x40\x62\x82\x6d\x59\x23\xa0\xd5\x16\x0a\xae\x11\xad\x00\x4a\x06\x2b\xfe\x1d\x85\xf3\x0e\x8c\x76\x4e\xee\xfa\x03\x3c\x20\x11\x78\xb0\xcc\x18\xcc\xca\xfd\xc1\x88\x04\x35\x83\x3c\xe5\xd9\xb5\x2e\x1b\xf8\x91\x10\xea\x4d\x90\xbd\x02\x9b\xd6\x5f\x22\x62\x05\xe5\xb4\x76\x46\x2b\x27\x56\x20\xac\xd5\xb6\xca\x8f\x79\x44\xd5\xe6\x77\x36\x88\x8d\x7f\x04\xe7\xed\xd8\xf8\xa7\x63\xe0\xbd\x63\x4e\x24\x8c\x1b\xa6\x78\x8f\xa5\x0d\x16\xd6\x76\x70\xe0\xf7\x22\xc4\xcf\xb8\x47\x34\xda\xbe\x26\x9e\x27\xb0\x76\x54\x0d\x94\x7c\x0e\x55\xf0\x02\xda\xa4\xda\x0a\x3f\x5a\x05\xa9\xd1\x35\xa2\xd9\x7a\x13\xbb\x5f\x56\x2b\x68\x10\x2d\xc8\x43\x15\xe9\xce\x02\x23\xc6\xb9\x9b\x36\xc0\xeb\xf3\xc6\x47\xf6\xcb\xf4\x28\x80\xea\xf1\xd0\xf9\x7c\x21\x65\x91\xf7\x52\x35\x79\x86\x3a\xe0\xdd\x07\x58\x68\x20\x4f\xd2\xa5\xd0\x36\x46\xeb\xbf\x58\x3f\x8a\x72\xbe\xa8\xa7\x63\x55\x97\x48\x0f\x19\x60\xea\x3d\x43\xae\x06\x16\x0e\xad\xff\x34\x4c\xe5\x19\xca\xdf\xde\x5e\xdf\xbe\x23\xe1\xe0\x59\xe7\x50\x6c\xcf\x7c\x52\x2f\x95\x19\x3d\x70\xe6\xd9\x2f\x79\x26\x5b\x30\xcc\x22\x00\x9d\xa4\xaa\x97\x68\x9f\xac\x1e\x26\x7a\xc8\xa8\x7a\xbf\xcc\x7f\xf5\x01\x94\xec\xa9\x53\x19\x12\xb9\x38\xec\x99\x0d\x59\x89\xfe\xea\x2c\xba\xd9\xcb\x9e\xdf\xb6\xe5\x09\xec\xd4\x84\x0a\xb5\x1d\x41\xf4\x4e\xfc\x3f\x64\x4a\x0f\x4a\xb0\xb5\x24\xc1\x99\x7a\x8b\xa9\xc2\x96\x55\xfd\x59\x7d\x15\x8d\x2f\x71\xeb\xe4\x13\xc4\x5c\xc2\xdd\x6c\xb7\x7f\xdc\x08\xc6\x85\x75\xdf\x09\x6d\x98\xb5\x12\x21\x6d\x1d\x37\x2a\xec\x04\xd5\x5b\xb4\x20\xb9\x13\x97\x2b\xc0\x69\x53\x7f\xa4\x9b\x6e\x4b\x1c\x42\x63\xcf\xd5\x6b\x8f\x9d\x27\x32\xb3\x13\xf7\x11\x19\xca\x1f\xee\xab\x22\x18\x23\x2a\x49\x38\xbc\xe6\xe4\xf0\xa5\xa9\x31\x62\x0f\xd3\xa3\xa4\x85\x14\x0e\xde\x5e\xfd\xf3\x2d\x47\x87\xdc\x67\x7e\x3e\xfb\x0b\xe6\xce\xb8\x68\xd9\xd8\xfb\x2f\x09\x0e\xc7\x4c\xaa\xf6\x37\x0e\xa2\x69\x37\x72\xc2\x61\x06\x4a\x3c\x40\x9a\x78\x38\x0e\x98\x07\x7d\x8f\xcc\x25\x17\x71\x3a\xa8\x71\xd8\x61\x4d\xdd\xce\xfc\xd0\x72\x5c\x87\xc1\xc7\xc8\x3b\x5e\x36\x63\xcf\x6c\x94\x13\x08\xd7\xf1\x75\x2d\xca\x91\xd3\xa6\x22\xd3\xc5\xad\x66\x40\x64\x58\x5d\x46\x97\xd3\x21\x45\x08\x2f\xbe\x1f\x44\x8b\xa7\x0f\x29\xfb\xe9\x38\xa3\x9d\xb5\x76\x02\x93\x51\xcb\x9d\x38\x84\xdf\x10\x23\xdc\x56\x76\xa3\xc5\x87\xa4\x55\x0d\x9f\x50\x10\x17\x03\x3e\x6a\x1f\xb7\xc0\x8c\x16\x87\x38\x11\xf4\xaf\x1d\x7c\x1d\x9d\x47\xc5\x78\xf9\xd8\x50\x2c\x80\x1d\xf9\x76\x7f\xac\xec\xf6\x1e\x94\x7e\xa8\x17\x17\x37\x31\x79\x3e\x4c\xe7\x7b\x7d\xf9\xfc\xb1\xb8\xb9\x9a\x5e\xcd\x99\xdd\xa6\xd7\xf4\xdc\xdd\xf3\x19\xb2\x6a\x18\x35\x9f\xdb\xd4\xa4\x50\x11\x1a\x46\x56\xdf\x89\xa4\x8f\x53\x50\xc5\x6e\x24\x08\x39\x0c\x82\x4b\xe6\x45\x7f\x88\x6d\xf4\x7b\x6c\xb8\xb1\x1a\x9b\x82\xff\xd8\xe7\x46\x18\xf4\x95\xea\x0f\xa1\xc0\xaf\x1f\xb7\x8e\x60\x17\xa0\x81\xa0\xad\x7f\x13\x7e\xaf\x39\xb1\x2c\x30\xa9\xf8\x0e\x4f\x9a\x95\x0b\xff\x04\xb3\xd0\x02\xa7\xd2\xdd\xc5\x0c\x4e\x43\xf7\xdc\x2f\x38\x77\xc9\x76\xa1\xee\x2b\x3c\x92\x2a\x05\xbc\xd0\xbb\xb3\x47\x14\x6b\x92\xe5\x25\x81\x5f\xbd\xc7\xdf\x9f\xa7\xfa\xb8\x78\xf3\x26\x00\x90\x06\xa4\x49\x03\xcd\x8f\x6e\xa3\xb9\xc0\xac\xb7\x57\x57\x21\x98\xed\xac\x60\x77\xf8\x71\x0c\xa5\xa6\x9b\xba\xbc\xa8\xd3\xbc\x38\x29\xc6\xe2\xff\x05\x00\x00\xff\xff\xbe\xf4\x27\xca\x14\x09\x00\x00")

func _hardcodedDoerGoBytes() ([]byte, error) {
	return bindataRead(
		__hardcodedDoerGo,
		"_hardcoded/doer.go",
	)
}

func _hardcodedDoerGo() (*asset, error) {
	bytes, err := _hardcodedDoerGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "_hardcoded/doer.go", size: 2324, mode: os.FileMode(436), modTime: time.Unix(1475084902, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __hardcodedMiddlewareGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x56\x5f\x6f\xdb\x36\x10\x7f\x8e\x3e\xc5\x4d\x43\x31\x69\x50\xe9\x97\x3d\xb5\xc8\x43\x91\x26\x4b\x80\xa6\x2b\x1a\x17\x7d\x28\x8a\x81\x91\x4e\x16\x6b\x99\xd4\x48\xda\x4e\x10\xe4\xbb\xef\x8e\xa4\x6c\x39\x4e\xb6\x3d\xed\x21\x31\x7d\xbc\xfb\xdd\xdd\xef\xfe\xd0\x83\xac\x97\x72\x81\xe0\xd0\x6e\xd0\x66\x99\x5a\x0d\xc6\x7a\x28\xb2\x93\xbc\x5d\xf9\x9c\x3e\x34\xfa\x59\xe7\xfd\xc0\x67\xbb\xd6\x5e\xad\x70\xd6\xe0\xed\x7a\x91\x67\x24\x59\x98\x61\xb9\x10\x4a\xcf\xce\x7a\x24\x80\xd9\x52\xde\x6f\x10\x5f\x2f\x8c\xd8\xfc\x36\xeb\xcd\x62\x81\x96\x0c\x97\x9b\x6b\xd5\x34\x3d\x6e\xa5\x45\xf8\x67\x9b\xd5\x4e\x91\xf1\xcd\x80\xda\x5b\x59\x2b\xbd\x20\x3b\xe5\xbb\xf5\xad\xa8\xcd\x6a\x36\x91\x4f\xcf\x84\x91\x67\x65\x96\xb5\x6b\x5d\xc3\x96\xd4\xf7\x6e\x0b\xce\x50\xd5\xf8\x51\xae\x28\x5b\x6f\x49\xbb\x02\x6b\xd6\x1e\x2d\x70\x7a\xe2\x52\x6a\x52\xb5\xe5\xc1\x37\x78\xc8\x4e\xba\x74\x7c\x73\x0a\xc9\xcd\x04\x35\x22\x94\x7b\xad\x53\x18\xa4\x56\xf5\x44\x25\xdd\x90\xce\x6c\x06\x1f\x88\x12\x4e\x66\x9f\x26\x50\x3e\xe8\xa0\x97\xce\x57\xa0\x04\x0a\x0a\xbc\xef\xe1\x16\x81\xd8\x86\x56\x59\xe7\x45\x30\x9d\x77\xca\xc1\x4a\x2e\x49\x59\x79\x70\x06\x7c\x27\x3d\x18\xdf\x91\xd7\x09\x5c\x27\x1d\xc8\xba\x46\xe7\xc0\xb3\x0e\x42\x2c\x43\xc0\x08\x26\x07\xd5\x50\xfa\x07\xd6\x9e\x20\x75\xd2\xb6\xf8\xd7\x1a\x9d\xa7\xb0\xb4\xc7\x3b\xf6\xbd\x4f\x6d\x6a\x29\x3e\xe2\x76\xcc\xad\x4a\x3e\x82\x6c\x42\x74\x49\x49\x5b\xf4\x6b\xab\x21\x69\x66\x8f\x59\x46\x71\x3c\xe1\x88\xcd\x29\x6a\x7d\x1f\x2f\x9c\x80\x0b\x63\x41\x9b\x6d\x05\x5b\xfc\x25\x70\x44\x8d\xa7\xd7\x48\x11\x5a\xb3\x65\x02\x39\xd4\xa0\x0c\xeb\x21\x0b\x99\x71\x59\xa9\x9b\x23\x33\x81\xaa\x7b\xa8\xad\x74\x5d\xd4\xb5\x86\x39\x11\xb1\x37\x8e\x6a\xf4\x2f\x3d\x30\x26\x31\x11\x5f\x10\x4e\xc1\x60\xc5\x36\xca\x3f\xa3\x1b\x8c\x76\xf8\xd5\x2a\xcf\x94\x58\xf8\x35\xc9\x03\xa1\x25\xe3\x9c\x34\xd8\x12\x62\x30\x8b\x82\x93\x10\xca\xb9\x0d\xfd\x65\xb1\x36\x34\x11\x45\xc9\x17\xaa\x85\xdd\xdd\xe9\x29\x68\xd5\x47\x83\x14\x0c\x1f\x1f\xf9\xdf\x46\x5a\x40\x1b\xfe\x0c\x4d\x30\x49\x1c\xb5\x7e\xdd\xc1\x14\x79\x3c\x8b\xc2\xdf\x0f\x98\x5c\xd7\xd2\x8d\xb3\xf0\x26\x20\x33\xcc\x29\xd0\xe0\x8b\x73\x06\x6b\x8b\xd1\xac\xdc\xa9\x07\x2f\x53\xed\x51\x85\x45\x94\x9d\x5c\xf7\xfe\x05\xb0\xfc\x8b\x5e\x52\x4d\x75\xaa\xdb\xab\x9f\x37\x60\x5a\xe0\x78\xe0\xd5\x3c\xaf\x76\x48\xfb\x53\x19\x93\xe4\xff\xa9\xc1\x2e\xac\x59\x9d\xc5\xce\x2c\xac\x18\x4f\x65\x19\x7d\xbc\x2f\xf2\x60\x9a\x57\x21\x82\x64\x73\xfd\x90\x53\x2c\xf9\x1b\x8e\xbd\x82\x3c\x74\xc9\x6b\x1e\x65\x24\x59\x4c\xbf\x08\x1b\x4d\xdc\xf0\x15\xa1\x3d\x96\xbb\xca\x1c\x50\xf0\x18\x2a\xd3\x89\x1b\xde\x96\x97\xf3\xf9\xa7\x82\x3a\x94\x6f\xc8\x20\x36\xf6\xd1\x86\xa0\x16\x44\xe9\x69\x66\x25\x68\xdc\x82\x23\x38\xd0\x34\x1a\x0d\xc8\x96\x77\x0f\xf7\xe6\x97\xcf\x1f\x28\x65\xdf\x05\x3a\xf6\x23\x28\x18\xf0\xca\xc3\xd0\x53\xa8\x2e\x36\x75\xb0\x57\xfa\xb9\x49\xad\xa0\xa5\xa1\x59\x53\x8d\x6e\xef\xd3\x5a\x48\x43\xe7\x60\xa3\x24\x4c\xf6\xa4\xb8\x21\x98\x29\x95\x65\x70\xd5\x52\x90\xc1\x01\xde\x29\x17\x76\xc2\xce\x47\x87\xb2\x21\xa0\x2a\xce\x19\xeb\xc4\xbc\x1a\x76\x16\xc7\x6d\x9f\xf2\xb8\xc0\x24\xd4\x9d\xea\x9b\x98\x16\x2d\x1e\xb6\x4b\x03\x78\xbc\x49\xff\xb7\x11\xa4\x4c\xdf\x79\x8f\xab\xc1\xf3\x82\xfc\x61\x28\xcb\x94\x36\xa5\xb2\x40\xef\xc3\x7a\xe1\xf6\x20\x02\x5a\x03\x2d\xf1\x14\xd2\x4e\x1c\xd0\x46\xa4\x77\x29\xbc\x23\x3c\xb2\x82\xaa\x27\x3e\x51\xf5\xb2\x38\x8a\x6e\x38\x62\x3a\x0b\xc3\xec\xea\x2a\xcc\x29\x19\x4d\x15\x7e\xef\xcd\xad\xec\xe7\xec\x8f\x06\x9f\xc1\x4f\xce\xef\xf8\xd2\x17\x53\x35\xee\xb6\xcb\x54\x04\xd6\x79\xe1\xee\x4c\x5a\xab\x08\xc8\x8a\x28\x28\xcb\xb7\xc1\xe9\x4f\x93\x05\x42\x11\x1e\x86\x40\x6d\x6f\x3d\x07\x5a\xc4\xbc\x42\xab\x03\xf6\xd4\x4a\xff\xcd\xa0\x3a\xb8\x3d\xe3\xa2\xff\xd1\x16\xae\x2e\x03\xd2\x6e\xed\xb9\x41\x5c\x28\xad\x5c\x47\xfd\x16\x0b\x11\x5f\x9f\xc8\xfe\xd5\xfb\xf8\x08\x85\xb7\x80\x3e\xa5\x6a\xa6\x1d\x18\x26\x94\xdf\x4e\xb2\xf4\x4c\x22\x3f\x85\xc5\x4a\x0e\xdf\xe2\x08\x7f\x8f\x1f\x65\x24\x3b\x11\x4d\x1e\x77\xcc\x5e\x05\x5f\x05\x89\x76\x5d\x7f\x18\xf7\x9c\x64\xd7\x72\x38\xa2\x37\xc9\x47\x6a\xfd\xc8\xe9\x74\x29\x73\x7d\x79\x53\x34\x04\xb9\x0c\x3f\x15\xbe\xe5\xc6\xc7\x2d\x63\x5f\xc7\xab\xfc\xfb\x5b\xbe\x7c\x98\xee\xa6\x17\xf7\xd9\xbb\xa6\x19\xbf\x1d\x03\x55\xc9\x59\x39\x3e\x02\x61\x47\x52\x66\xf4\xf3\xe2\x7c\x43\x91\x17\x79\xa2\xed\x4f\x7a\x52\x50\x6d\xb0\xc9\xcb\x67\x5f\x9f\x67\x6d\xda\x50\xa4\x64\x13\x77\x1e\xed\xae\x33\x7f\xf7\xb4\x77\x53\x84\x5f\xe9\x97\x56\xe8\x06\x3b\xa5\xd6\x0d\xa1\xca\x4f\xb7\xa5\x60\xed\x51\x2d\xc2\x96\xe3\x06\xfd\x3b\x00\x00\xff\xff\x60\xc9\x76\xc0\x8e\x0a\x00\x00")

func _hardcodedMiddlewareGoBytes() ([]byte, error) {
	return bindataRead(
		__hardcodedMiddlewareGo,
		"_hardcoded/middleware.go",
	)
}

func _hardcodedMiddlewareGo() (*asset, error) {
	bytes, err := _hardcodedMiddlewareGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "_hardcoded/middleware.go", size: 2702, mode: os.FileMode(436), modTime: time.Unix(1475084902, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"_hardcoded/doer.go":       _hardcodedDoerGo,
	"_hardcoded/middleware.go": _hardcodedMiddlewareGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"_hardcoded": &bintree{nil, map[string]*bintree{
		"doer.go":       &bintree{_hardcodedDoerGo, map[string]*bintree{}},
		"middleware.go": &bintree{_hardcodedMiddlewareGo, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
