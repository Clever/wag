// Code generated by go-bindata.
// sources:
// _hardcoded/doer.go
// _hardcoded/middleware.go
// DO NOT EDIT!

package hardcoded

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __hardcodedDoerGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x3a\x7f\x6f\xdb\x46\xb2\x7f\x4b\x9f\x62\x2a\xa0\x17\xd2\x91\x49\x3b\x3d\xa7\x07\xf7\xf9\x1e\x5a\xdb\x7d\x29\xae\x4d\x82\xc8\x7d\x17\x20\x08\xae\x2b\x72\x28\x6d\x4d\xee\xb2\xbb\x4b\xc9\x82\xcf\xdf\xfd\x61\x66\x97\x14\x29\xc9\x4e\xee\x5a\x3c\xbc\xa7\x3f\x2c\x91\x3b\x33\x3b\x33\x3b\xbf\xd7\xb5\xc8\x6e\xc5\x02\x21\x2b\x25\x2a\x37\x1e\xcb\xaa\xd6\xc6\x41\x34\x1e\x4d\xe6\x1b\x87\x76\x32\x1e\x4d\x32\xad\x1c\xde\x39\xfa\x89\x2a\xd3\xb9\x54\x8b\xf4\x57\xab\x15\xbf\x30\x46\x1b\x86\x2a\x2a\x86\x90\x3a\x95\xba\x71\xb2\xa4\x87\x52\x2f\xe8\xab\x12\x6e\x99\x1a\xa1\x72\x7a\x50\xe8\xc2\x57\xba\x74\xae\xa6\xdf\x76\xa3\x32\xfa\x76\xb2\xc2\xc9\x78\x3c\x9a\x2c\xa4\x5b\x36\xf3\x24\xd3\x55\x2a\x0a\xbc\x4b\x97\x1b\xeb\x8c\xbc\x3b\x5e\xe8\xf6\xe7\x64\x08\x95\x6b\xa5\x57\x42\x2d\x65\x8e\x29\xae\x50\x39\xab\x1b\x93\xe1\x64\x3c\xd2\x35\x2a\x67\x44\x26\xd5\x02\xfa\x18\xbd\xf7\xfd\xdf\xc7\x0b\x3d\x19\x8f\x9c\x58\xd8\xcf\x84\x4e\x83\x66\x16\xba\x14\x6a\x91\x68\xb3\x48\xef\x52\x12\x2e\x68\x2d\xcd\xdc\x5d\x90\xb3\xd4\x8b\x05\x1a\x98\x2c\x74\x7d\xbb\x48\xa4\x4a\x2f\x4b\x5c\xa1\x49\x6f\xc5\x66\x85\x78\xbc\xd0\xc9\xea\x65\xea\x81\x26\xe3\x78\x3c\x4e\x53\xc8\x35\x1a\x90\x16\x84\x02\xa9\x1c\x9a\x42\x64\x08\x85\x36\x30\xc9\xb5\x54\x8b\x09\x10\x69\x30\xf8\x5b\x83\xd6\x59\xa8\xb5\xb5\x72\x5e\x6e\x60\x2d\xdd\x12\xd6\x46\xd4\xb5\x54\x8b\xb1\xdb\xd4\x18\x48\x75\x44\xee\xc7\xa3\x2b\x1d\x65\x70\x44\x14\x92\x4b\x3e\xfe\x29\x98\xf0\xfc\xce\x53\x8c\x21\x6a\x9f\x6d\xad\x95\xc5\x29\xf0\x81\xc7\xe3\x87\xb1\xa7\xaa\xeb\xd7\xa2\xc2\x4b\x77\x07\xd6\x99\x26\x73\xf7\x0f\xcc\xf7\x5c\x58\x0c\x34\x5e\x09\x95\x97\x68\xa0\x46\x53\x68\x53\x59\x70\x4b\xe4\xf5\x01\xef\x9e\x1a\xbd\xbe\x22\x3e\xb7\xc4\x8a\x46\x65\x10\xe5\xdd\x52\x0c\xbf\x83\x6d\x92\xda\xa0\x6b\x8c\x82\x70\x2c\xc9\x95\x8e\x4c\x72\xe9\xcf\x2a\x8a\xa7\x90\x4d\xc1\x8b\x97\xa6\x10\x4e\x99\x39\x12\x79\x6e\xdb\x17\xe0\xf4\x50\xf1\x9e\xfb\x3e\xb8\x17\x80\xf6\xcb\x59\xf3\xe3\x9e\x28\x3d\xb8\xdf\x2b\xcd\x78\x94\xb9\x3b\x38\xbf\x80\x9e\x0c\x64\xf3\x74\x28\xf4\x3a\x73\x77\xc9\x7f\x8b\xb2\xc1\xa8\x3b\xa8\xfb\x87\x38\x89\xc8\x87\xd4\x22\x1e\x8f\x56\xc2\x80\xad\xa1\x67\xd3\xc9\xac\x16\x6a\x3c\x4a\x53\xb8\x79\x73\xf5\xe6\x9c\x04\x07\xf6\x07\x83\xa5\x70\x41\x7a\xa9\xea\xc6\x41\x2e\x9c\xf8\xcf\xf1\x48\x16\x50\x0b\x83\xca\x11\x26\xed\xba\x4b\xed\x7b\xa3\xab\x96\xbd\xcc\xdd\xc5\xdf\xf4\xe1\xbf\xb8\x00\x25\x4b\xd2\xd4\xc8\xd6\xb0\x83\xec\x84\x61\xa8\xc0\xfe\x74\xb0\x7a\xb9\x94\x65\xfe\xa6\x88\xb6\xc4\xb6\x4a\x88\xe3\xf1\xe8\x01\xb0\xb4\xf8\x79\x94\x09\xdc\xfb\x3d\x73\xfc\x37\xa9\xf2\x64\x86\x2e\xb2\xf5\x14\x06\x6f\xdf\xbd\xbd\xf4\xe7\x74\xad\x9a\x2a\x66\xe1\xd1\x18\x92\xda\xd6\xc9\x8d\x11\x19\x9a\x28\x4e\x7e\x50\xbf\x62\x46\xd8\x3d\xd3\x1a\x8f\xfa\xc1\x28\x79\x75\x73\xf3\xf6\x15\x8a\x1c\x8d\x7d\x62\xe9\x52\x18\x23\xd1\x44\x26\xf1\x2f\xe2\xf8\x1b\xde\xaf\xa7\xb5\x60\xd0\x4a\x96\x53\x28\x2a\x97\x5c\x93\x71\x14\xd1\x24\xd3\x4d\x99\xab\x67\x0e\x24\x33\xd3\x19\xef\xd2\x53\x86\xe8\xcb\x55\x3c\x61\x5b\xf2\xc2\x07\x3a\x79\x92\x93\x53\xf4\xfd\xc0\xa0\x33\x9b\xd6\x8f\xe9\x41\xa2\x85\xb3\x93\xf7\x87\x9c\x80\x61\xf7\x5c\x60\xfb\x61\x67\x18\x31\xd4\x5b\x5d\xca\x6c\x03\xef\xb6\xbf\xc3\x7e\xbd\x37\x90\x63\x21\x15\x5a\x10\x9e\x32\xd4\xfc\x3a\xf1\x9b\xf5\x01\x07\xa1\x2d\x4d\xe1\x3b\x91\xdd\xea\xa2\x20\xbb\x25\xb9\x7c\xdc\x51\x4d\x35\x27\x67\x56\x39\x38\x59\x91\x36\x74\x11\x08\x0b\xe7\xb0\xaa\x9d\x4d\xc6\xa3\x16\x35\x8a\xe1\xc3\x47\x4a\x4a\xc9\x55\x63\x84\x93\xda\xfb\x05\xef\x0a\x06\x33\x94\x2b\xf4\x74\xfb\x8a\x98\x82\xb0\xb0\xc6\xb2\xa4\x6f\x5a\x34\x68\x9b\xd2\x81\x2e\x18\xbb\x4d\x7c\xc1\xdd\x9f\x59\xf8\xe5\x4a\xff\x02\x15\xba\xa5\xce\x93\xf1\x88\xa9\x47\x83\x08\x30\x85\x47\x02\xc0\x5c\xeb\x32\xe8\x6c\x26\xd5\xa2\xc4\xa7\x34\xe7\x96\xc2\x75\xa7\x27\x5a\x6e\x41\xab\x0c\xbd\x36\xf7\x49\x0c\x62\xfa\x01\x85\x0a\x07\x1b\xdd\x80\x5d\x92\xa9\x75\xdb\x60\x47\xfb\xd4\x62\xa6\x55\x0e\xa2\x70\x94\x7c\x1c\x14\x42\x96\x36\x09\x91\x70\x6f\xbf\x18\x1e\xd7\x7c\x2f\x74\xef\xac\xdc\x9f\xc2\x11\xf0\x9b\x19\xef\xf6\xd0\xb7\x22\x58\xcb\xb2\x0c\x9c\x29\xad\x8e\xdf\xbe\x99\xdd\x4c\xfd\xaf\x6f\x6f\x2e\x5f\x6d\x53\x27\x0b\x73\xf6\xfe\x7d\x32\xee\x22\xdf\x0f\x8e\xac\xd5\x82\xd2\x0e\xb2\xc6\x50\x90\x29\x37\xad\xb5\xa8\x8d\x3f\x84\x56\x1d\x98\xc3\x7c\xf3\xc8\xe1\x3e\x21\xb0\x3f\x6d\x83\xbf\xc1\xce\x89\x1b\xb4\xf5\xa1\x63\xef\x1f\x3d\xe9\x24\xc4\x9f\x10\x0f\xfe\xf9\x4f\x92\x28\xf9\x89\x8d\x09\x2e\x2e\x60\x42\x02\x4f\x0e\xbd\x27\xf1\x69\x81\x23\x88\xad\x29\x22\xba\xc6\x5e\xea\x1c\xe1\x3f\xe0\xec\xe4\xa4\x1f\x5b\x0a\x51\x5a\xec\x07\x09\x67\x1a\x0c\x6a\xbe\xbe\xab\xb5\x42\xe5\xa4\x28\x0f\x5a\x9f\x02\xdc\x42\x0c\x9c\xd8\x5b\xdd\x23\xf8\x4f\x9b\x5e\x21\x57\x54\x2d\x84\xb7\x5c\xed\xf4\x76\x29\x29\x1a\x64\x06\x85\x25\x0f\x5f\x0b\xe9\xd8\x3e\x2c\x57\x26\xe8\xd6\x88\xaa\x3b\xf8\x73\x38\x3d\x39\x99\xc2\x0b\xfa\xf3\x67\xfa\xf3\x17\xfa\x43\x01\xe2\xf4\xe5\xc9\x09\x54\xb2\x2c\xa5\xb7\x62\x0b\xcf\xd3\x63\x68\x6a\xca\x7f\x67\x5f\xc2\xaf\xd2\x39\x34\xed\xd1\x1e\x96\xe2\x33\x0c\x9a\x32\x47\x25\x6e\x31\xda\x59\x9e\xc2\x59\x3c\x1e\x29\xbc\x63\x88\xd3\x93\x93\xd6\xc8\x7f\xda\x72\x34\x1e\x19\x95\x73\xf6\x17\x2a\x4f\x5e\xe3\x3a\x6a\x7f\xcc\xb8\xfc\x8d\x18\xe1\xb5\x5e\x47\x71\xf2\xb3\x92\x77\xaf\x85\xd2\x3e\x35\x72\x71\x70\x92\x9c\x9c\x41\x9a\xb2\x58\x67\x54\x9f\x65\xa8\x5c\x90\x6b\x3c\xa2\x2a\x53\x06\xe2\x0b\x8e\xeb\xad\x45\x7c\x90\x1f\xe1\x02\x98\xb5\xe7\x30\x60\x3a\x8a\x22\xa3\xf2\xe4\xfb\x52\x0b\xf7\xf2\xcf\x51\x7c\xf4\x22\x3e\x3e\x8d\x8f\xf0\xa8\x08\x6f\x08\x89\xf6\xf7\x82\x1d\x5d\xc0\x8b\xbe\x55\x19\x74\xff\x67\x7d\xf7\xb1\x03\xfe\xff\xef\xc0\xaf\xf5\xe1\xac\xe1\x9d\x94\x12\xa4\xa2\x36\xc5\x2b\x8f\x1c\xaa\xcb\x1d\x21\x0b\x0f\x09\x3c\xed\xb8\x14\x0e\xaa\xda\x6d\xc0\x96\x32\xc3\x56\xb9\x03\x0a\xff\x66\x16\x18\x86\x7d\x51\xae\xc5\xa6\x17\x2f\x48\xfe\x47\x76\xfb\x57\x13\x6e\x8f\x07\xaf\xd6\xb6\x17\x62\x05\x85\x7a\x6f\xa8\x86\xbf\x4b\xb7\xec\xeb\xa8\xd3\x06\x28\x5c\x43\xe8\x14\xbd\x19\xeb\x15\x1a\x23\xf3\x50\x57\xf8\xb6\x1c\xf4\x9c\x2a\xb8\x67\xb6\x2b\xc6\xba\x32\x88\x25\xda\x21\x4f\x35\x76\x4b\xb4\xad\x3f\xa7\xf0\x48\xc9\x15\xef\x42\xf6\x7b\xa4\xb0\x42\xf4\x7d\x17\x91\xb9\xbb\xe9\x40\xce\xfb\x87\x01\xe5\xb8\xdf\xe7\x1c\x75\xb5\xe0\x1f\xd1\xb4\xb5\x5b\x4c\x41\xdf\xee\x74\x3c\xa1\xc5\x19\xf2\x15\x27\x51\x5f\x4c\x76\xb4\x2f\xf4\x6d\xeb\x15\x9d\x2e\x2e\x20\x4f\x7a\xcf\xec\x24\x5d\x66\xa1\x7d\xb6\x6b\xc9\xd6\x30\x7d\xe7\x74\xc0\xc7\xfd\x42\xe7\xe7\x63\xae\xf9\x66\x62\x85\x83\xc2\x68\xae\x73\xca\x51\x90\x51\x1f\xbc\x46\x58\x32\x80\xf6\x9b\x25\xf0\xc6\x2d\xd1\xac\xa5\x5f\xe3\x28\xc8\x00\xa2\x34\x28\x72\x32\x1f\x91\x33\x5d\x6e\xa5\x9b\xa2\x40\x03\x5a\x75\xd1\x2d\x1f\x6c\xc5\xe8\x54\x77\x25\x30\x43\x64\x34\x62\xf8\x3c\x4d\xad\x23\x71\x56\x68\x8a\x52\xaf\x79\xcc\xc1\x18\x52\x2b\x9b\xbe\xf8\xea\xe4\xeb\x93\xbf\x7c\xfd\x32\xa5\xbd\xa4\x5a\x1c\x13\xc7\xc7\xba\x38\x26\xdc\xe3\x40\xfb\x98\x12\xaf\x6e\xdc\x71\xa5\x73\x59\x50\x6c\xe8\x56\xac\x13\x2e\xe8\x62\xde\x14\xf0\xe1\xe3\x7c\x43\xcf\xb2\x00\x93\x7c\x47\xc2\xf7\x1a\x98\xa1\xc2\x46\xa3\x79\x53\xf8\x48\x79\x01\x7e\x94\x94\xbc\x43\x91\x7f\x5b\x96\x91\xc7\xa5\xfc\x31\x8c\x9a\x44\x65\xd0\x07\xa1\x21\x42\x0f\x74\x98\x3e\x93\xb5\x75\x2f\xa5\xbd\x6f\x38\xfa\x7d\xd3\xbe\x7b\xfe\x9c\xf1\x0f\xb2\x36\x32\x39\xf7\x76\x81\x8f\xd7\xba\xbe\x2c\xb5\x45\x13\xf1\x70\x8c\x32\xed\x77\xac\xfe\x68\xde\x14\x9c\xd7\x46\x81\xc6\x05\x98\x3c\xb0\xc0\xd1\xb9\x15\x68\xd0\x5d\xf9\x4d\x03\x67\x17\x17\x50\xa2\x8a\x5a\xd3\x8b\x29\xe4\x7f\xd1\x37\xbe\x90\x69\x7c\x66\xf1\x7d\x9b\xe7\x71\x6e\x50\xdc\x86\xbd\xd2\x14\x98\xc3\xb6\xf1\x60\x9b\xf4\xe6\xc6\x86\x41\x06\xb2\x10\x52\xb5\x49\x83\x98\x4d\x18\x83\x6c\x7a\xe4\xcb\xe8\x12\xb1\xee\x18\xf9\x10\x18\xfc\x18\x0f\x53\x75\xe0\x21\x44\xdd\x4c\x9a\xac\x91\xee\x3b\x62\x05\x0d\xf7\x7f\xb2\xaa\x4b\xac\x50\xb9\x10\xca\x3c\x04\xcc\x3d\x08\xd4\xd4\x70\x19\xc5\x39\x7b\x86\x0e\x72\x9c\x37\x3c\x5b\xa0\xc3\xa1\x6f\x5d\xa3\x11\x0e\x07\xc8\x52\x81\x80\x8a\x52\xdc\x7a\x89\x06\xa9\xa5\x60\xfb\xd6\xaa\xdc\x40\xa9\x17\x3d\x56\x80\x4d\xd0\x97\x72\x0c\x43\xa5\xc0\xbc\xd4\xd9\x2d\x17\x00\x5d\xf1\x50\x18\x5d\xc1\x42\xf3\x60\x63\x69\x74\xb3\x58\x86\xb4\x76\x40\xa4\xa7\x5a\x5a\xcf\xbf\xff\x70\x5f\x36\x0a\x04\x78\x16\xe3\x07\x2e\xdd\x0c\x90\x3f\xfe\x77\xf2\x37\x1e\xff\xfd\xc8\x0f\xa4\x4d\x72\x87\x80\x3a\x9b\x5d\xbf\x51\x19\x82\xdd\xa8\x2c\xa1\x5f\xac\xeb\x57\x7e\x04\x3a\x9b\x5d\x5f\xaf\x28\x3b\x48\x0b\x58\x51\xd5\xc6\x65\xcc\x76\x56\x0a\x2b\x29\xc0\xa2\x59\xa1\x39\xb6\x04\xe8\x27\xa3\x09\x17\x47\x68\x33\x23\xe7\xbe\x26\x26\x0d\xb3\xb6\x28\xd9\x8b\x76\xf3\xa0\x86\xdd\xdd\xb6\x3a\xb8\xa1\xe5\x27\x3e\x5e\x66\xf8\xe5\x57\xab\xd5\xf9\x84\x88\x4d\x7e\x19\x8f\x58\x1d\x9f\x8d\xa5\x44\xc5\x58\x21\x49\x5c\xea\x46\xb9\x43\x58\xd2\xbf\x0e\x58\xa6\x07\x4d\xd8\x3c\x12\x79\x14\x77\x17\x1b\x3b\xe8\x0e\xf7\xad\x2f\x8e\xc5\x62\x9f\xf5\x03\xb8\x5b\x68\x22\xf0\x83\xbd\x1c\x58\xd2\x9b\x1a\x55\x9f\x00\xd7\x14\x1d\x01\x79\x00\x9a\x15\xa0\xcb\x52\xaa\x05\xb3\xf5\xbd\x90\x65\x63\xf0\x29\x05\xec\x43\xef\x13\x29\x4b\xf2\xf1\x3e\xb1\xa7\x88\x0c\xa0\x1f\x23\x36\x6b\xb2\x0c\xad\xfd\x4c\x62\x01\x7a\x97\xd8\x6c\xa9\x8d\x0b\x5a\xc0\xfc\x53\xe2\x0d\xa1\xf7\x68\xf5\x18\xfa\xb4\xaa\x1e\x61\xe8\x66\x49\x59\xf0\xad\xd6\xe5\x3b\xa4\x42\x8c\x98\x7a\x9c\xc8\x3e\xf4\x1e\x3d\x59\xa1\x6e\xdc\x67\x32\x15\xa0\x89\xc8\xa5\xef\x64\x2e\xb5\x0a\x3d\xcd\xf5\x1d\x66\x0d\x65\x6c\x6f\xdc\x43\x22\xd9\xd3\xd0\x44\xf0\x47\xe1\x50\x65\x9b\x1b\xed\x44\xf9\x13\x0a\xf5\xb4\x71\x97\x3d\xe8\x7f\x54\x28\xc8\x30\xdb\x7a\xaf\xd4\x0b\x8e\x0f\x51\x79\x28\xae\x4d\x61\x2f\x90\x70\xf2\x2a\x93\x1f\x54\xa1\xaf\x22\x4c\xfc\x78\xb7\x12\xf5\x07\x1f\x00\x3e\x76\xf3\xbc\xfb\x07\xca\x72\x43\x9f\x3e\x3f\xe4\xc5\x98\xf4\xa3\xc4\x94\x90\x7a\xae\x7c\x10\x85\x90\xb6\xc1\x61\x8b\xd2\xf3\xe0\x7d\xbc\x80\xb2\x85\x61\xbc\x83\x8e\x7b\x3e\xc4\x3b\x14\x0a\x18\xf9\x90\xbf\x9e\xef\x0a\xb7\x0f\x73\x00\x77\xe8\xa6\xe7\x07\x71\x07\x30\x8f\xd2\x68\x9d\xe1\x29\x1a\x01\x66\x8f\xc6\x8e\x53\x9e\x1f\x92\x61\x08\xb3\x4f\x62\xb0\xfd\x61\x35\x3c\xb6\xfd\x01\x17\x3c\xdf\xc5\xdd\x87\xd9\x27\x13\x3c\xef\x29\x16\x02\x0c\xe3\x7e\xca\xe1\xce\x01\x93\x4f\xb8\x30\xd3\x29\x77\xbc\x72\xdf\x06\x31\xd9\xf5\xdc\xe9\x78\xf4\x10\x8f\x07\xed\xd7\x7e\x01\x13\x83\x54\xd2\x45\x71\x18\x91\xbf\x45\x23\x75\x2e\x33\x9e\x98\x95\x7a\xe1\x67\xe8\x4a\x94\xc3\x1a\x8a\x8a\x31\x61\xad\xb4\x5c\x7f\x59\x74\x8e\x4b\x99\x5e\xa9\xe5\x96\x06\xed\x52\x97\xb9\xe5\x72\xab\x51\x39\x1a\xeb\x84\xca\x79\x5c\x50\xd7\xa5\xcc\x7c\xfb\x3e\xc7\xa5\x58\x49\x6d\x12\x46\xff\x59\x15\xda\xb8\x46\x09\x87\xe5\x66\xda\xaf\x5c\x72\x8d\x56\x3d\x73\xa1\xed\x81\x85\x41\xe1\x60\x2d\x36\xc4\x0a\xde\xd5\xbe\xc0\x95\x96\xa9\xe4\xc2\x89\x29\x58\x4d\xbd\x92\x41\xab\x8d\xe3\x2a\xb2\x31\x8a\xe7\xfb\x0a\xa4\xb3\x60\x9b\x9a\x2f\xb6\xa9\x17\x98\x1b\x2d\xf2\x4c\xd8\x3d\x31\x2a\xaa\x74\x33\xcb\x75\x13\x4f\xf4\xf7\x8b\x27\x88\x66\xb3\xeb\xd8\xb3\x3f\x43\x3f\xf8\xb7\xe7\x69\xfa\xc4\x8d\xb5\xb4\xb6\x41\x9b\x9e\xbd\x4c\xba\x92\x30\xd4\x75\xd4\x09\xd0\x69\xf9\x03\x19\x05\x9c\x99\x33\x28\xaa\xf6\xba\xe5\xfc\xa2\xd5\x0b\xcf\xf5\xfa\x6b\x5c\xb1\x1f\x42\xf2\xb7\x5b\xbc\x5c\x4a\xeb\x50\x71\x00\xf6\xb7\x54\x0a\x5d\xf2\x23\xbf\x8c\x26\x2e\xab\x27\x53\x98\x9c\xbe\xf8\x3a\x39\x49\x4e\x92\xd3\xf3\x93\xc9\x23\xbd\x55\x2d\x94\xcc\x22\x7f\x55\xc4\x3d\xd5\x68\xe1\xaf\x40\x93\x19\xa9\x28\xda\x6e\x73\x88\x9f\xd8\xc3\xf7\x44\xa5\x3a\xf8\x7b\x8e\xe8\x2a\xdb\x10\x5b\x5f\x9d\x0c\x87\xf8\x0c\x23\xac\xe3\x54\x31\x43\x54\x7e\x4e\xda\x65\x87\x9d\x64\x72\xff\x30\x40\xf8\x51\x2f\xc8\x2f\x77\x70\x98\x3c\xbd\xbf\x67\x09\xb8\x2f\xfc\x07\xb4\x03\xce\xb0\x9a\xdd\x46\x3b\xf7\x09\x31\xdc\x43\x37\x77\x91\x8a\x07\x64\x92\x2c\x96\x68\x8c\x1a\x53\xd2\x36\x93\xd0\x53\x4f\xe0\x39\xb4\xca\x48\xbe\xcd\x73\x13\xc5\xc9\x8c\xb7\xe7\xe3\xa0\xae\xeb\xb7\xee\x2c\x58\x81\xaf\x71\x1d\xd2\x56\x34\xf9\xaf\xeb\x9b\xc9\x14\x1a\x53\x4e\x49\xf5\x1e\xe1\xc0\x69\xb0\xfa\x92\xb7\x46\x2a\x57\x44\x3e\x61\x41\xa6\x95\xc2\xac\xbd\x9f\x6d\x2d\x7a\x36\xbb\xa6\x82\x1a\x45\x75\x0e\x5f\xda\xee\xb6\x8f\x3e\x99\x56\x4e\xaa\x06\xf9\x89\xd5\x37\xf2\x90\x1d\x7b\xbd\x7f\xa4\x48\x66\xcd\xdc\x37\x0c\x7f\x97\x6e\x19\x4d\x26\x53\xf8\x53\x6f\x98\xe3\xa7\x40\xbf\xfd\xaf\x33\x4c\x27\x88\xab\xed\x90\xda\x63\x26\xd7\xde\x55\xc3\xd6\x3c\x5e\xd8\xad\x3e\xfc\xd2\xf6\xf2\x96\x0a\x9c\xe4\x67\x55\x09\x63\x97\xa2\x8c\xfc\xbc\x22\xc2\x55\x72\x25\x9c\x88\xe2\x78\x0a\x7f\xc2\xfd\xab\xd7\x3d\xb6\x02\x5f\x4c\x38\xe1\xfe\xe8\x8b\x0b\x98\x84\xbd\x2f\x75\x55\x09\x95\x4f\x9e\x46\x25\x23\x26\x83\x6f\xe7\x5c\x03\x2f\xf8\xe0\x0b\xa5\x8f\x5b\xd0\xbd\x25\xb8\x00\x1c\xfb\xf5\x34\xe5\xa8\xde\x6f\xa0\x7d\x40\x97\x05\x48\xf7\xcc\x02\x4a\xb7\xa4\xde\x35\x00\x47\xa7\x31\x03\x17\xd2\xd8\x10\xf0\x60\x8d\xcf\x56\x08\x96\x3c\x90\xb4\xdd\xa7\xa5\x7b\x98\x2f\xe2\xe1\x12\xf5\x38\x7e\xaf\xa5\xb0\x90\x2d\xe9\x78\xf2\x01\xc6\x57\x31\x39\x7d\x7b\xb5\xc2\x81\xbe\x16\xd6\x62\x0e\x56\x52\xcf\xbb\x46\x5f\x48\xe6\x60\x75\x85\x6e\x49\x86\xb2\xc3\x41\xa7\xeb\x76\xae\x37\x3a\x10\x04\x7a\x7a\xd9\x5e\x87\xb4\xb0\x6d\xd1\x9a\x27\x65\x5b\xa7\xc6\x9f\x38\xd7\xf6\x7c\x0e\x16\x73\x74\xdc\x87\xcb\xbc\x3f\x9a\xbf\xf0\xcf\x0d\xb2\xe8\x61\x91\x97\x46\x8f\xd1\x8f\xe1\xaf\x30\x88\xba\x7f\x34\x43\x5b\xbf\xa4\x3f\x0f\x84\xf3\x10\x7f\xb2\x20\xf9\x9d\x83\x61\x59\x40\x9e\xf8\xd1\xcb\xfd\x60\xd4\x76\xbe\x37\x6b\x6b\xd3\xe8\x95\x8e\xf2\xa4\x37\x9b\x99\xb6\x89\xc9\xc7\x25\x56\xcb\xa1\x18\x16\x26\x5f\x7e\xb4\xe8\x05\xe5\xf1\xdd\xf0\xea\xe5\xaf\x17\xdd\xdd\xcb\xc8\x5f\xf7\x63\x1e\x26\xbb\x84\x2d\x54\xd8\x86\x07\x5d\x92\x87\x41\x7d\xa7\xe1\x92\x64\xb0\x99\x36\x3c\x67\x8c\x26\x67\xef\xdf\x73\x7a\xf6\x5b\x0f\xb8\x79\xe8\xf2\xc5\xde\x78\x8e\xb3\xf5\x67\xce\xaa\x47\x7e\x46\xf9\x2f\x28\xea\xe9\xd1\xe6\x23\x13\xda\x6e\x38\xfb\x29\xfd\xfd\xdb\xea\x7b\x42\x7b\x0f\xe3\x21\x1f\x5e\x75\x90\x1e\x81\xd2\x50\x84\xb6\x86\x05\xf5\xb7\xb0\x1b\x74\x70\x94\xc6\x07\x07\x9f\xff\x13\x00\x00\xff\xff\x81\x3c\xc4\xf2\x3d\x29\x00\x00")

func _hardcodedDoerGoBytes() ([]byte, error) {
	return bindataRead(
		__hardcodedDoerGo,
		"_hardcoded/doer.go",
	)
}

func _hardcodedDoerGo() (*asset, error) {
	bytes, err := _hardcodedDoerGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "_hardcoded/doer.go", size: 10557, mode: os.FileMode(436), modTime: time.Unix(1500483437, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __hardcodedMiddlewareGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x57\xdd\x6f\xdc\xc6\x11\x7f\x3e\xfe\x15\x53\x16\xb1\x49\x81\xe6\xb9\x05\x9a\x07\x05\x57\x20\x50\xe4\x4a\xa8\x15\x0b\xfa\x68\x1e\x82\xa0\xd8\x23\x87\xe4\xfa\x78\xbb\xec\xee\xf0\x78\x07\x41\xff\x7b\x31\xbb\x4b\x1e\x4f\x92\x01\xbf\x25\x40\x24\x6a\x66\xe7\xfb\x37\x1f\xee\x44\xb1\x11\x35\x82\x45\xb3\x43\x13\x45\x72\xdb\x69\x43\x90\x44\x8b\xb8\xd0\x8a\x70\x4f\x71\xb4\x88\xab\xad\xfb\xa5\x90\x96\x0d\x51\xc7\xdf\xa6\x57\x24\xb7\xb8\x2c\x71\xdd\xd7\x71\x14\x2d\x74\x87\x8a\x8c\x28\xa4\xaa\x21\xae\x25\x35\xfd\x3a\x2f\xf4\x76\x39\xa3\xcf\xbf\x3f\xd4\x3a\x8e\x16\x24\x6a\xfb\x9d\xaf\x97\xc1\x97\x5a\x77\x9b\x3a\x97\x6a\x79\xd1\xe2\x0e\xcd\x72\x23\x0e\x3b\xc4\x0f\xb5\xce\x77\x3f\x2e\x5b\x5d\xd7\x68\xe2\x28\x8d\xa2\xe5\x12\x6e\x85\x92\xc5\x8d\x2c\xcb\x16\x07\x61\x10\x5a\x5d\x5b\x10\xea\x00\x1d\x33\x6c\x0e\x9f\xb4\x01\xa5\x87\x0c\x06\x7c\x6f\x10\x38\x62\xa9\x7a\x04\x6a\x8c\x1e\x38\x10\x6a\xd0\x3f\x86\xbe\x63\x8d\xfc\xb7\x25\x51\x6c\xc0\x6a\xa0\x46\x5a\xd8\x8a\x03\x14\x46\xd8\xc6\xbf\x35\xba\x40\x6b\xf3\xa8\xea\x55\xf1\xd2\x7e\xd2\x00\x67\x2f\xbf\x12\xaa\x6c\xd1\xa4\x27\x7f\xc1\x53\xb4\x30\x48\xbd\x51\x27\xe4\x4f\xbd\x2a\x12\x56\x96\x0c\x9e\x7e\x87\xb6\xd3\xca\xe2\x6f\x46\x12\x9a\x0c\x0c\x9c\x05\xfa\xff\x7a\xb4\x94\xb2\x9e\x45\x89\x15\x1a\x70\x62\x9e\xb0\x70\x41\x5c\x1a\x03\xe7\x2b\x30\x58\xe8\x1d\x9a\x24\x65\x86\xac\x60\xe2\xad\x56\xa0\x64\xeb\x05\x82\x33\xfc\xf9\xcc\x3f\x76\xc2\x00\x1a\xf7\xbf\x36\x11\x53\xec\x20\xa9\x68\x60\xae\x79\xfc\xce\x13\x3a\x74\x18\x4c\x17\xc2\x72\xd2\x8c\x54\xf5\xb9\xd3\xcc\x6a\x56\x50\x6d\x29\xbf\x64\x65\x55\x32\x8a\xa5\xd3\x73\x67\x65\xfe\x7a\x7c\xc2\xa4\x12\x2b\xd1\xb7\xf4\x0d\x65\x71\xaf\x36\x4a\x0f\x2a\xd4\xed\x87\xbf\xee\x40\x57\xc0\xfe\xc0\x0f\x0f\x71\x36\x69\x3a\x7e\xa5\x3e\x48\xfe\xe9\xf1\x93\x7f\x32\x7a\x7b\xe1\xe1\x9f\x98\x7c\xfc\x4a\x53\x6f\xe3\x97\x24\x76\xa2\x71\xe6\x3c\x08\x32\x37\x4f\x31\x1a\x13\x9f\xb3\xef\x19\xc4\x0e\x25\x8c\x5e\x8c\xcf\x43\xf4\x89\xeb\x95\xfc\x9e\x39\x49\x9a\x3e\xa7\x53\x61\x4e\x32\xf0\xec\x0a\xd3\xe4\xf7\xdc\x92\x57\x0f\x0f\xb7\xc9\x90\x01\x73\x9e\xd3\xe8\xd9\xe1\xda\x92\xa0\xde\x9e\x22\x01\x06\x23\x3a\x0b\x02\x4c\x20\xc3\xe0\xe8\x91\x8b\xfc\x4d\x09\x4b\xa6\x2f\x88\x8b\xf4\x06\xb2\xa2\x85\x97\x01\xa9\x88\xcd\x3a\x40\x27\x16\xce\xde\x52\x95\x82\xfb\x7d\x85\xa2\x44\x93\x14\xba\x44\x16\x73\xf5\xb7\x79\xd0\xb3\x02\xa6\x33\xe1\x54\x36\x7f\x29\xea\xa2\x74\x5e\x87\xe6\xff\xd2\xfd\x2a\xb6\x18\xdc\x7d\xf2\x29\xf8\x4d\x52\xf3\x70\xc2\x16\x65\x69\x5d\x0f\xea\x0e\x14\x13\x48\x83\x80\x30\xc4\xa0\xd2\x06\x7a\x8b\xb0\x3e\xb8\x37\xe3\xa0\x6a\xe5\xda\x08\x73\xc8\xe1\x9a\x98\x6d\x59\xb5\x80\x4e\x4b\xc5\x09\x5a\x63\x21\x58\x48\xd2\x7b\x0b\x85\x68\x5b\x2c\x61\x8d\xad\x1e\x40\xaa\xd9\x28\x10\xaa\xf4\x86\x55\x7b\x80\x41\x1c\xd8\x72\x27\xac\xf7\x46\xaa\x4a\x87\xe1\x21\x2d\x73\x1a\xb1\x63\x8d\x20\xc0\x22\x1d\x8d\xe5\x70\xb9\x43\xd6\xaa\xfb\xba\x61\x7e\xa9\xd1\xaa\xf7\x04\x45\x23\x54\x8d\x4e\xd7\x18\xcc\xc0\x96\x65\xdb\x3a\x5d\x7e\x2c\x49\x0b\x61\x7a\x1c\x63\x26\x0d\x5b\x21\x15\x89\xe0\xad\x6c\xdb\xde\x4a\xad\xc2\x74\x7a\x95\xc2\xa4\xa0\xfd\x28\x3c\x82\x3e\x03\x3d\x65\x5f\xaa\x3a\x7d\xc9\x77\x25\x26\x73\x4b\xae\xff\x0b\xda\xe7\xff\x11\x6d\x8f\xc9\x49\xe9\x9e\x9e\xd3\x3c\x39\x0b\x1a\x22\x1e\x39\x41\xe4\x2f\xc7\x81\x73\x16\x48\xab\x60\x30\xe2\xb1\x13\x42\x2a\x68\x1f\x90\x1f\xfc\x85\xc2\xa0\x20\x64\xb8\x2b\x1c\xc0\x76\x42\xb9\x9a\x97\x20\x2a\x2e\x1c\x47\xfb\x78\xf7\x19\x3a\x41\x8d\xeb\xfe\x06\xc1\xf8\x01\x99\xb3\x9a\x6b\x82\xae\x15\x05\x5a\x9f\x39\x27\x1f\x92\x14\x9e\x8d\x71\x66\x73\xe4\x68\x6a\xd0\x40\xe3\x27\xb3\x85\x9d\x14\x30\xdb\x51\xf9\x7d\x27\xd4\x7c\x72\xa4\xce\x54\xc5\x95\x66\x03\xb8\x97\x96\xb8\x9f\x26\x1b\x8d\x03\xbd\xcd\x3c\x96\xf8\x8d\x8f\xab\xf4\x30\xe5\xed\x72\x5c\x5e\x03\x17\x7c\x8d\x5c\xdf\x46\xb6\xa5\x0f\x4b\x90\x93\x0b\x15\x0d\xd9\xf9\x33\x36\xce\x72\x09\x3f\x13\xe1\xb6\x73\xb0\xfb\xaa\xa5\x1a\xc3\x5e\x1f\xa0\x46\x22\xb7\x4d\x79\x1c\xfa\x8e\xa8\x8c\xde\xba\xb0\x43\x0e\x72\xaf\xe3\x41\x73\x4f\x19\x82\x41\x52\xe3\xd2\x3e\x96\x52\x8c\xcd\xed\xd1\x28\x55\x81\xdc\x07\xdc\x01\xdc\x25\xb5\x26\xe2\xf6\xd1\xbe\x88\xba\x67\x18\x1c\xb8\xc1\x54\xe9\x55\xcf\xe8\xbc\x1f\x2c\x88\xb5\xee\x29\x28\xb4\xd1\x62\x11\x54\xf3\x82\xcc\x1f\xef\x3e\xe7\xb7\x82\x9a\xc8\x2f\x3e\xdb\xbd\x2a\x74\xe4\x56\xa7\x2d\x32\xb7\x15\xcf\x57\x27\x0f\xfe\xd5\xea\xb5\x68\xb9\x1c\xbc\x66\x39\xb6\xc5\xe5\x9e\x99\x94\xcc\x9f\xf1\x70\xbf\x0a\x18\x70\xab\xe4\x1b\xcc\x0b\x61\x8c\x44\x93\x98\xdc\x13\xd2\xf4\x27\x67\x75\xd6\x3e\x0b\xdb\xc1\xa9\x0f\xf7\x9c\x47\xf6\x34\xf1\x81\xb9\xd5\x02\xd8\x5a\xfc\x4e\x81\xec\x84\x7b\xc1\xa0\xfb\x52\x25\xb6\x48\x9d\xa6\xe9\xca\xb0\x5d\xfe\x49\x2a\x69\x9b\x24\x8d\x7c\xa6\xa5\xfa\x8a\x85\x07\x26\x5c\xff\xc2\x9b\x40\xfb\xd3\x8b\x27\xb2\x2c\xe7\x1d\xe0\x36\x62\x2d\x55\x1d\x2d\x16\xc4\x59\xdc\x8a\x0d\x26\x5b\xd1\xfd\xee\xa7\xc5\x1f\xd3\xd0\xe0\x6c\x87\x4c\xdb\x2e\x9f\x52\x7b\xed\x6c\x25\xb6\x3b\x6e\xe9\x53\xbf\x1f\x70\x4f\x37\xa2\x73\xf9\x7d\x83\x3e\xa6\x96\xc6\x9c\xce\x6f\x20\x2e\x30\x6f\xe6\x32\x03\xbd\x61\xcb\xf4\x7b\xac\xe9\x83\x83\xb1\xf9\xe0\x59\xf1\x1f\x3f\x31\xf3\x69\x7e\x0a\x7c\xf3\x7c\xf8\xb9\x2c\xc7\xbf\x5e\x2b\xca\x82\xb1\x74\xbc\xb9\xdc\x49\x62\xbb\xfc\xb3\xae\x79\x37\x50\x12\x87\xb4\xfd\xd7\x60\x81\x72\x87\x65\x9c\xbe\x79\xec\xbd\x29\x53\xb9\x22\x05\x19\x7f\x63\x28\x1c\x2e\x68\xff\x12\xbc\xc1\x43\x5e\x0f\x0e\x0d\x66\x9e\x5a\xdb\xa5\xbe\xc8\x8f\x96\x47\x91\x2f\xcf\xb4\x30\xad\x86\x56\x1c\x78\x36\xfa\x35\x59\x08\x05\x5b\x5d\xca\xea\x00\x92\x38\x98\x69\x53\xc4\xf1\xd1\xfe\x6a\x5a\x2a\x6c\xd3\xef\x0f\xcf\xca\xe0\xc5\x1e\xc9\xe0\x9d\xd7\xe1\xb0\x66\xcd\xc0\xba\xde\xbd\x75\x92\xf8\x44\x38\xc6\x39\x8c\xff\xfd\xfd\xe3\x47\x07\x84\xd3\xa7\xe7\x30\x64\x63\xba\xf9\x1f\x24\xae\xf5\x6e\x90\x1a\x5d\xe6\xf7\xc8\xe0\xca\xc0\xe4\x9e\x90\x8e\x6f\x38\x35\xff\x96\xea\xf8\xe2\x84\x7a\x77\x7b\xe1\xce\x37\x73\xa9\xfa\x6d\x3a\xd7\xfb\x68\xda\x99\xd2\x71\xce\xb8\x70\x5e\x17\x72\x92\xba\x77\x81\x5c\xe8\x12\x27\xe1\x5e\x2a\xfa\xdb\x8f\x89\x35\x43\xb8\xb0\xd2\xf1\x9e\x3f\x92\xe0\x9f\x2b\xf8\xc7\xc7\x8f\x01\x9d\x4e\x9b\xbb\x60\x8f\x4e\x9b\x1e\x27\xbc\x71\x59\x7f\xd5\x83\x5f\x2b\x61\xb6\xce\x87\x6e\x8b\x7c\x07\x91\x39\xf0\xe5\xe2\x06\xba\x2b\xea\x62\x1a\x17\xae\x47\x7c\xe5\xbe\xe3\x0c\x70\xbe\xea\x0d\xbc\x7b\x37\x1a\x98\xcf\x33\x06\xf1\x3d\xd2\x97\x0e\x8d\x20\xa9\x95\x3b\x50\xce\x8e\xa3\xcc\x77\x88\x9f\x39\xf3\x5b\xd9\x1a\xbe\x96\x1d\x92\x46\xd8\x7a\x8f\xd2\xf1\x82\xfe\x7f\x00\x00\x00\xff\xff\xa3\xdc\x93\xdc\xf3\x0e\x00\x00")

func _hardcodedMiddlewareGoBytes() ([]byte, error) {
	return bindataRead(
		__hardcodedMiddlewareGo,
		"_hardcoded/middleware.go",
	)
}

func _hardcodedMiddlewareGo() (*asset, error) {
	bytes, err := _hardcodedMiddlewareGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "_hardcoded/middleware.go", size: 3827, mode: os.FileMode(436), modTime: time.Unix(1500483437, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"_hardcoded/doer.go":       _hardcodedDoerGo,
	"_hardcoded/middleware.go": _hardcodedMiddlewareGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"_hardcoded": &bintree{nil, map[string]*bintree{
		"doer.go":       &bintree{_hardcodedDoerGo, map[string]*bintree{}},
		"middleware.go": &bintree{_hardcodedMiddlewareGo, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
