// Code generated by go-bindata. DO NOT EDIT.
// sources:
// ../_hardcoded/doer.go (10.353kB)
// ../_hardcoded/middleware.go (1.683kB)
// ../_hardcoded/tracing.go (6.966kB)

package hardcoded

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __hardcodedDoerGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x3a\x7f\x6f\xdb\x46\xb2\x7f\x4b\x9f\x62\x22\xe0\x2e\x64\x22\x53\x72\xee\xdc\x1e\xd4\xe7\x03\x5a\xc7\x7d\x2d\x90\x26\x41\xe5\xbe\x06\x08\x82\xeb\x8a\x1c\x4a\xdb\x2c\x77\xd5\xdd\xa5\x65\xc1\xe7\xef\xfe\x30\xb3\x4b\x8a\xd4\x0f\x27\x77\x2d\x1e\xde\xf9\x0f\x49\xe4\xce\xcc\xce\xcc\xce\xef\xf5\x5a\xe4\x1f\xc5\x12\x21\x57\x12\xb5\x1f\x0e\x65\xb5\x36\xd6\x43\x32\x1c\x8c\x16\x5b\x8f\x6e\x34\x1c\x8c\x72\xa3\x3d\xde\x79\xfa\x89\x3a\x37\x85\xd4\xcb\xc9\xaf\xce\x68\x7e\x61\xad\xb1\x0c\x25\xcd\x44\x9a\xda\x4b\x45\x0f\xca\x2c\xe9\xab\x12\x7e\x35\xb1\x42\x17\xf4\xa0\xd1\xc7\xaf\xc9\xca\xfb\x35\xfd\x76\x5b\x9d\xd3\xb7\x97\x15\x8e\x86\xc3\xc1\x68\x29\xfd\xaa\x5e\x64\xb9\xa9\x26\x57\x0a\x6f\xd1\x4e\x36\x62\x39\x51\x66\xb9\x44\x3b\xea\xaf\x8b\x12\xef\x26\xab\xad\xf3\x56\xde\x9d\x2d\x4d\xf3\x73\x0f\xaa\x30\xda\xdc\x0a\xbd\x92\x05\x4e\xf0\x16\xb5\x77\xa6\xb6\x39\x8e\x86\xe9\x70\x38\x99\x40\x61\xd0\x82\x74\x20\x34\x48\xed\xd1\x96\x22\x47\x28\x8d\x85\x51\x61\xa4\x5e\x8e\x80\x38\x05\x8b\xbf\xd5\xe8\xbc\x83\xb5\x71\x4e\x2e\xd4\x16\x36\xd2\xaf\x60\x63\xc5\x7a\x2d\xf5\x72\xe8\xb7\x6b\x8c\xa4\x5a\x22\xf7\xc3\xc1\x4b\x93\xe4\xf0\x8c\x28\x64\x57\xac\xde\x31\xd8\xf8\xfc\x63\xa0\x98\x42\xd2\x3c\xbb\xb5\xd1\x0e\xc7\xc0\x0a\x4d\x87\x0f\xc3\x40\xd5\xac\x5f\x8b\x0a\xaf\xfc\x1d\x38\x6f\xeb\xdc\xdf\x3f\x30\xdf\x0b\xe1\x30\xd2\xf8\x4e\xe8\x42\xa1\x85\x35\xda\xd2\xd8\xca\x81\x5f\x21\xaf\xf7\x78\x0f\xd4\xe8\xf5\x4b\xe2\x73\x47\xac\xac\x75\x0e\x49\xd1\x2e\xa5\xf0\x3b\xd8\x26\xa9\x2d\xfa\xda\x6a\xc8\xb3\x97\x26\xb1\xe9\x70\x30\x99\x40\xf3\xca\xdf\x31\x16\x2d\x64\x57\xc1\xa8\x92\x74\x0c\xf9\x18\x82\xc4\x01\xd4\x6e\x1b\x91\xe8\x41\xa2\x83\x8b\xe9\xbb\xfe\x41\x04\x69\x18\xb6\x23\x0e\xed\x5e\xc0\xee\x8f\x4e\x84\xf9\xb1\xdb\xb7\x46\xc9\x7c\x0b\x3f\xee\x7e\xc7\xfd\x3a\x6f\xa0\xc0\x52\x6a\x74\x20\x02\x65\x58\xf3\xeb\x2c\x6c\xd6\x05\xec\x9d\xf2\x64\x02\xdf\x88\xfc\xa3\x29\x4b\x17\x05\x0d\x47\xa0\xeb\x6a\x81\x16\x84\x2e\xc0\xcb\x4a\xea\x25\x98\x32\x12\x16\xde\x63\xb5\xf6\x2e\x1b\x0e\x1a\xd4\x24\x85\xf7\x1f\xc8\x0d\xb2\x97\xb5\x15\x5e\x1a\xcd\x94\x79\x57\xb0\x98\xa3\xbc\xc5\x40\xb7\xab\x88\x31\x08\x07\x1b\x54\x8a\xbe\x69\xd1\xa2\xab\x95\x07\x53\x32\x76\xe3\x6a\xf1\x1c\x9f\x3a\xf8\xe5\xa5\xf9\x05\x2a\xf4\x2b\x53\x64\xc3\x01\x53\x4f\x7a\x47\x3b\x86\x13\x27\xbb\x30\x46\x45\x9d\xcd\xa5\x5e\x2a\x7c\x4c\x73\x7e\x25\x7c\x7b\x7a\xa2\xe1\x16\x8c\xce\x31\x68\xf3\x90\x44\xcf\xbc\x8f\x28\x54\x78\xd8\x9a\x1a\xdc\xca\xd4\xaa\x68\xb7\xc1\x96\xf6\xb9\xc3\xdc\xe8\x02\x44\xe9\xc9\x0f\x3d\x94\x42\x2a\x97\x45\xfb\x3e\xd8\x2f\x85\xd3\x9a\xef\x58\xf1\xde\xca\xfd\x39\x3c\x03\x7e\x33\xe7\xdd\x1e\xba\x56\x04\x1b\xa9\x54\xe4\x4c\x1b\x7d\xf6\xf6\xcd\xfc\x66\x1c\x7e\x7d\x7d\x73\xf5\xdd\x2e\x8a\xb0\x30\x17\xef\xde\x65\x84\x7a\xf3\xe6\xe5\x9b\x19\x7c\xef\xc9\x5a\x1d\x68\xe3\x21\xaf\xad\x45\xed\xd5\xb6\xb1\x16\xbd\x0d\x87\xd0\xa8\x03\x0b\x58\x6c\x4f\x1c\xee\x23\x02\x87\xd3\xb6\xf8\x1b\xec\x9d\xb8\x45\xb7\x3e\x76\xec\xdd\xa3\x27\x9d\xc8\x92\xdf\x3e\xb9\x04\x2d\x15\xfc\xf3\x9f\x24\x51\xf6\x03\x1b\x13\x5c\x5e\xc2\x88\x04\x1e\x1d\x7b\x4f\xe2\xd3\xc2\x70\x30\xa0\xbd\xb2\xb9\x17\xbe\x76\x57\xa6\x40\xf8\x2f\xb8\x98\x4e\x89\x78\xa3\xf1\x52\x28\x87\xc3\xc1\x43\x7b\x04\xde\xd6\x18\xd5\x7c\x7d\xb7\x36\x1a\xb5\x97\x42\x1d\xb5\x3e\x0d\xb8\x83\xe8\x39\x71\xb0\xba\x13\xf8\x8f\x9b\x5e\x29\x6f\x29\x70\xc6\xb7\x1c\xf8\x3b\xbb\x28\x8a\x06\xb9\x45\xe1\xc8\xc3\x37\x42\x7a\xb6\x0f\xc7\x41\x1a\xfd\x06\x51\xb7\x07\x3f\x83\xf3\xe9\x74\x0c\x2f\xe8\xe3\xaf\xf4\xf1\x37\xfa\xa0\x00\x71\xfe\xc5\x74\x0a\x95\x54\x4a\x06\x2b\x76\xf0\x7c\x72\x06\xf5\x1a\xbc\x81\x8b\x3f\xc1\xaf\xd2\x7b\xb4\xcd\xd1\x1e\x97\xe2\x33\x0c\x1a\x66\x97\x50\x89\x8f\x98\xec\x2d\x8f\xe1\x22\x1d\x0e\x34\xde\x31\xc4\xf9\x74\xda\x18\xf9\x0f\x3b\x8e\x86\x03\xab\x0b\x5a\xa6\x6c\x9e\xbd\xc6\x4d\xd2\xfc\x98\x73\x42\x4d\x18\xe1\xb5\xd9\x24\x69\xf6\x93\x96\x77\xaf\x85\x36\x49\x9a\xa6\xc3\x01\x12\xd6\x34\x9b\x5e\xc0\x64\xc2\x62\x5d\x50\xaa\xca\x51\xfb\x28\xd7\x70\x40\x09\x57\x46\xe2\x4b\x8e\xeb\x8d\x45\xbc\x97\x1f\xe0\x12\x98\xb5\xe7\xd0\x63\x3a\x49\x12\xab\x8b\xec\x5b\x65\x84\xff\xe2\xaf\x49\xfa\xec\x45\x7a\x76\x9e\x3e\xc3\x67\x65\x7c\x43\x48\xb4\x7f\x10\xec\xd9\x25\xbc\xe8\x5a\x95\x45\xff\xff\xd6\x77\x4f\x1d\xf0\x7f\xbe\x03\xbf\x36\xc7\xb3\x46\x70\x52\x4a\x90\x9a\x8a\xbe\xa0\x3c\x72\xa8\x36\x77\xc4\x2c\xdc\x27\xf0\xb8\xe3\x52\x38\xa8\xd6\x7e\x0b\x4e\xc9\x1c\x1b\xe5\xf6\x28\xfc\x9b\x59\xa0\x1f\xf6\x85\xda\x88\x6d\x27\x5e\x90\xfc\x27\x76\xfb\x57\x13\x6e\x87\x87\xa0\xd6\xa6\x2c\x64\x05\xc5\x12\xaa\xaf\x86\x9f\xa5\x5f\x75\x75\xd4\x6a\x03\x34\x6e\x20\x96\xf2\xc1\x8c\xcd\x2d\x5a\x2b\x8b\x58\x57\x84\x0e\x00\xcc\xe2\x57\xcc\xfd\x53\xd7\x16\x63\x6d\x19\xc4\x12\xed\x91\x4f\x72\x7f\xd7\x10\x6d\x4a\xba\x31\x9c\x28\xb9\xd2\x7d\xc8\x6e\xb9\x18\x57\x88\xfe\xff\x08\x55\x23\x51\x1e\xf7\xe4\xbc\x7f\xe8\x51\xe6\x8a\xb1\xa9\x5e\x9f\xb5\xb5\xe0\x1f\x51\xbf\x36\x5b\x8c\xc1\x7c\xe4\xb0\xb4\xab\x56\xb3\xc0\x5c\x9f\xaf\x34\x4b\xba\x62\xb2\xa3\x3d\x31\x1f\x1b\xaf\x68\x75\x71\x09\x45\xd6\x79\x66\x27\x69\x33\x0b\xed\xb3\x5b\xcb\x76\x86\x39\x1c\xdc\x0a\x7b\xcc\xc7\xc3\x42\xeb\xe7\x43\xae\xf9\xe6\xe2\x16\x7b\x85\xd1\xc2\x14\x94\xa3\x20\xa7\x96\x60\x83\xb0\x62\x00\x13\x36\xcb\xe0\x8d\x5f\xa1\xdd\xc8\xb0\xc6\x51\x90\x01\x84\xb2\x28\x0a\x32\x1f\x51\x30\x5d\xee\x2a\xea\xb2\x44\x0b\x46\xb7\xd1\xad\xe8\x6d\xc5\xe8\x54\x77\x65\x30\x47\x64\x34\x62\x78\x36\x99\x38\x4f\xe2\xdc\xa2\x2d\x95\xd9\x70\x63\xc6\x18\xd2\x68\x37\x79\xf1\x97\xe9\x97\xd3\xbf\x7d\xf9\xc5\x84\xf6\x92\x7a\x79\x46\x1c\x9f\x99\xf2\x8c\x70\xcf\x22\xed\x33\x4a\xbc\xa6\xf6\x67\x95\x29\x64\x49\xb1\xa1\x5d\x71\x5e\xf8\xa8\x8b\x45\x5d\xc2\xfb\x0f\xd4\xb8\xf2\x19\xd8\xec\x1b\x12\x3e\xc6\x3b\x3a\x8d\xbe\xc2\x06\x83\x45\x5d\x86\x48\x79\x09\xa1\x79\xcd\x7e\x44\x51\x7c\xad\x54\x12\x70\x29\x7f\xf4\xa3\x26\x51\x69\x8c\x56\x4b\xc5\xd8\xc3\x01\x9d\xe4\xc3\x30\x64\xb2\xa6\xee\xa5\xb4\xf7\x15\x47\xbf\xaf\x9a\x77\xcf\x9f\x33\xfe\x51\xd6\x06\xb6\xb0\x84\x13\xf9\x78\x6d\xd6\x57\xca\x38\xb4\x09\xf7\xe1\x94\x69\xbf\x61\xf5\x27\x8b\xba\xe4\xbc\x36\x88\x34\x2e\xc1\x16\x91\x05\x8e\xce\x8d\x40\x45\x56\x50\xab\x15\xba\xab\xb0\x69\xe4\xec\xf2\x12\x14\xea\xa4\x31\xbd\x94\x42\xfe\x93\xae\xf1\xc5\x4c\x13\x32\x0b\xd3\x4b\x03\x8f\x0b\x8b\xe2\x63\xdc\x6b\x32\x01\xe6\xb0\x69\x3c\xd8\x26\xa3\xb9\x95\xbb\x17\x32\x64\x46\x2d\x55\xc3\x84\x5b\xef\x29\xd3\xad\x59\x92\x8c\xc9\x91\xc1\x33\xfd\x50\x67\x2b\xc4\x75\xcb\xe9\xfb\x28\xc1\x87\xb4\x9f\xcb\x23\x93\x31\x2c\xe7\xd2\xe6\xb5\xf4\xdf\x10\xaf\x68\xb9\x41\x94\xd5\x5a\x61\x45\xed\x7f\x88\x75\x01\x02\x16\x01\x04\xd6\xd4\x91\x59\xcd\x49\x7d\x8e\x1e\x0a\x5c\xd4\x4b\x72\x12\x3a\x3d\xfa\x36\x6b\xb4\xc2\x63\x0f\x59\x6a\x10\x50\x51\x0e\xdc\xac\xd0\x22\xf5\x1c\xec\x00\x46\xab\x2d\x28\xb3\xec\xb0\x02\x6c\xa3\xa1\xd6\x63\x18\xd2\xc8\x42\x99\xfc\x23\x57\x08\x6d\x75\x51\x5a\x53\xc1\xd2\x50\xe6\xf3\x2b\x6b\xea\xe5\x2a\xe6\xbd\x23\x22\x3d\xd6\xf3\x06\xfe\xc3\x1f\x37\x6e\x83\x48\xe0\xb5\xa8\x90\x30\xa5\x5e\x0e\x07\x61\xac\x12\xa0\xc2\xef\xec\x67\xb1\x0c\x31\xf3\x15\x3f\x93\x42\xc9\x65\x22\xf6\x7c\x7e\xfd\x46\xe7\x08\x6e\xab\xf3\x8c\x7e\xb1\xba\xbf\x0b\x83\x97\xf9\xfc\xfa\xfa\x96\x32\x88\x74\x80\x15\x55\x76\x5c\xea\xec\x26\x34\x70\x2b\x05\x38\xb4\xb7\x68\xcf\x1c\x01\x86\x79\x4c\xc6\x05\x14\xba\xdc\xca\x45\xa8\x9b\x49\xc9\xac\x30\x2a\x08\x44\xb3\x79\xd4\xc4\xfe\x6e\x3b\x35\xdc\xd0\xf2\x23\x7f\x41\x6c\xf8\xe5\x57\x67\xf4\x6c\x44\xc4\x46\xbf\x0c\x07\xac\x91\xcf\xc6\xd2\xa2\x62\xac\x98\x48\xae\x4c\xad\xfd\x31\x2c\x19\x5e\x47\x2c\xdb\x81\x26\xec\x6b\x8a\x3e\x27\x71\xf7\xb1\xb1\x85\x6e\x71\xdf\x86\x02\x5a\x2c\x0f\x59\x3f\x82\xbb\x83\x26\x02\xdf\xbb\xab\x9e\x31\xbd\x59\xa3\xee\x12\xe0\xba\xa3\x25\x20\x8f\x40\xb3\x02\x8c\x52\x52\x2f\x99\xad\x6f\x85\x54\xb5\xc5\xc7\x14\x70\x08\x7d\x48\x44\x29\x72\xf3\x2e\xb1\xc7\x88\xf4\xa0\x4f\x11\x9b\xd7\x79\x8e\xce\x7d\x26\xb1\x08\xbd\x4f\x6c\xbe\x32\xd6\x47\x2d\x60\xf1\x29\xf1\xfa\xd0\x07\xb4\x3a\x0c\x7d\x5a\x55\x27\x18\xba\x59\x51\xa6\x7c\x6b\x8c\xfa\x11\xa9\x58\x23\xa6\x4e\x13\x39\x84\x3e\xa0\x27\x2b\x34\xb5\xff\x4c\xa6\x22\x34\x11\xb9\x0a\xdd\xce\x95\xd1\xb1\xef\xb9\xbe\xc3\xbc\xa6\xac\x1e\x8c\xbb\x4f\x24\x7f\x1c\x9a\x08\xbe\x12\x1e\x75\xbe\xbd\x31\x5e\xa8\x1f\x50\xe8\xc7\x8d\x5b\x75\xa0\xff\x51\xa1\x20\xc3\x6c\x6a\x42\x65\x96\x1c\x1f\x12\x15\x43\xdb\x18\x0e\x62\x07\xe7\x34\x95\xbd\x32\xcb\x64\x24\x75\x69\x46\x63\xa8\xc4\xfa\x7d\xf0\xf8\x0f\xed\x90\xef\xfe\x81\xd2\x54\xdf\x89\x67\xc7\xdc\x16\xb3\x6e\x58\x18\x13\x52\xc7\x77\x8f\xa2\x10\xd2\x2e\x1a\xec\x50\x3a\x2e\x7b\x88\x17\x51\x76\x30\x8c\x77\xd4\x53\x67\x7d\xbc\x63\xbe\xcf\xc8\xc7\x1c\x74\xb6\x2f\xdc\x21\xcc\x11\xdc\xbe\x5f\xce\x8e\xe2\xf6\x60\x4e\xd2\x68\xac\xff\x31\x1a\x11\xe6\x80\xc6\x9e\x17\xce\x8e\xc9\xd0\x87\x39\x24\xd1\xdb\xfe\xb8\x1a\x4e\x6d\x7f\xc4\xe7\x66\xfb\xb8\x87\x30\x87\x64\xa2\xab\x3d\xc6\x42\x84\x61\xdc\x4f\x79\xd8\x0c\x30\xfb\x84\xcf\x32\x1d\xb5\xe7\x86\x87\x36\x88\xd9\xbe\xab\x8e\x87\x83\x87\x7e\x4b\x76\x58\xb3\xa4\x20\xb5\xf4\x49\x1a\xc7\xe6\x6f\xd1\x4a\x53\xc8\x9c\xa7\x68\xca\x2c\xc3\x5c\x5d\x0b\xd5\x2f\x9b\xa8\xfe\x12\xce\x49\xc7\x25\x97\x43\xef\xb9\x7a\xe9\x54\x57\x7e\x65\xd1\xad\x8c\x2a\x1c\x57\x58\xb5\x2e\xd0\x3a\x2f\x74\xc1\x23\x84\xf5\x5a\xc9\x3c\xb4\xf4\x0b\x5c\x89\x5b\x69\x6c\xc6\xe8\x3f\xe9\xd2\x58\x5f\x6b\xe1\x51\x6d\xc7\xdd\x4a\xa5\x30\xe8\xf4\x53\x1f\x5b\x21\x58\x5a\x14\x1e\x36\x62\x4b\xac\xe0\xdd\x3a\x14\xbd\xd2\x31\x95\x42\x78\x31\x06\x67\xa8\x7f\xb2\xe8\x8c\xf5\x5c\x38\xd6\x56\xf3\xcc\x5f\x83\xf4\x0e\x5c\xbd\xe6\x7b\x35\xea\x0f\x16\xd6\x88\x22\x17\xee\x40\x8c\x8a\x8a\xdb\xdc\x71\x9d\xc4\x53\xfe\xc3\x62\x09\x92\xf9\xfc\x3a\x0d\xec\xcf\x31\x5c\x06\xb8\xd9\x64\xf2\xc8\xbd\x98\x74\xae\x46\x37\xb9\xf8\x22\x6b\xab\xc0\x58\xc7\x51\x77\x40\xa7\x15\x0e\x64\x10\x71\xe6\xde\xa2\xa8\x9a\x2b\x98\xd9\x65\xa3\x17\x9e\xf5\x75\xd7\xb8\x50\x3f\x86\x94\xcd\xbd\xb0\x9e\x97\x95\x74\x1e\x35\x47\x5f\xcb\xc4\x34\xfa\xec\x15\xbf\x4c\x46\x3e\x5f\x8f\xc6\x30\x3a\x7f\xf1\x65\x36\xcd\xa6\xd9\xf9\x6c\x3a\x3a\xd1\x6f\xad\x85\x96\x79\x42\x6d\x08\xf7\x06\xc3\xc1\x60\x69\x58\xf6\x6c\x4e\x2a\x4a\x76\xdb\x1c\xe3\x27\x0d\xf0\x1d\x51\x49\x7d\x3f\x23\xdb\x1c\xde\xa2\xdd\xc2\xf9\x14\x9a\xc9\xeb\x02\x73\x51\xc7\xae\x86\xa8\xa1\x95\x77\xed\xd1\x08\x8b\x74\xa4\x02\xce\xa7\x67\xcd\x60\x94\xa9\x45\xb7\x85\x8d\xd4\x85\xd9\x64\x70\xb3\x92\x0e\x14\xfa\xa7\x0e\x6a\x3a\xfe\x8a\xa7\xb9\xc7\x48\x7a\x03\x4b\xe4\xeb\x0a\xab\xb6\x91\x9a\xc8\xf3\x3a\xf4\x1b\xe4\x5e\xf1\x2a\xc9\x41\xa2\x0d\xf7\x20\xc2\xb3\xf9\x81\x64\x23\x5d\xa3\x2d\x31\xf7\x2d\xe3\xa6\xb6\xf1\xc6\x29\x52\x6b\xac\x39\x02\xaa\x2d\x54\xc2\xe7\xab\x96\x95\xa7\x2e\x76\x26\xd4\xf6\x3b\xc3\x6a\xd9\xac\x50\x1f\x6b\x95\x22\x49\xc7\x03\x40\xc8\x57\x42\x2f\xd1\x71\x37\xaa\xcc\xf2\x5b\xce\x91\x3a\xdf\x86\x39\x72\xff\xae\x84\x61\x84\xf3\x9c\x7a\xe7\x88\x3a\x8c\xa3\xdb\x7c\xbb\x97\x9c\xef\x1f\x7a\x08\xaf\xcc\x92\x22\xdd\x1e\x0e\x93\xa7\xf7\xf7\x6c\x14\xdc\x7e\xff\x03\x9a\x39\x72\x5c\xcd\x3f\x26\x7b\xd7\x36\x29\xdc\x43\x3b\xde\x92\x9a\xe7\x90\x92\x82\x00\xd1\x18\xd4\x56\xd1\x36\xa3\x38\xba\x18\xc1\x73\x68\xec\x2b\xfb\xba\x28\x6c\x92\x66\x73\xde\x9e\x2d\x9c\xfa\xd7\xdf\x5a\xf3\x66\x9b\x7c\x8d\x9b\x58\x08\x24\xa3\xff\xbe\xbe\x19\x8d\xa1\xb6\x6a\x4c\xd6\x1c\x10\x8e\x18\x38\xab\x2f\x7b\x6b\xa5\xf6\x65\x12\x4a\x00\xc8\x8d\xd6\x98\x7b\x6e\x06\x4d\x7b\x0e\xf3\xf9\x35\xf5\x24\x28\xaa\x19\xfc\xc9\x8d\x42\x73\x1e\x48\xe4\x46\x7b\xa9\x6b\xe4\x27\x56\xdf\x20\x40\xb6\xec\x75\x6e\xc0\xb3\x79\xbd\x08\x3d\xd7\xcf\xd2\xaf\x92\xd1\x68\x0c\x7f\xee\xcc\xcc\xc2\xb0\xed\xb7\xff\x73\x86\xe9\x04\xf1\x76\x77\x17\x10\x30\xb3\xeb\x10\xfd\xe2\xd6\x3c\xc5\xd9\xaf\xe6\xc2\x52\x64\x75\x76\x09\x54\x23\x66\x3f\xe9\x4a\x58\xb7\x12\x2a\x09\x63\xa1\x04\x6f\xb3\x97\xc2\x8b\x24\x4d\xc7\xf0\x67\x4c\xbf\x3a\x22\x58\x9f\xad\xc8\x17\x13\xce\xb8\xc5\x7c\x72\x09\xa3\xb8\xf7\x95\xa9\x2a\xa1\x8b\xd1\x49\xd4\xf0\x3d\x99\xc0\x8d\x29\xc4\x96\x3d\xcc\x22\xe4\x94\x4f\xc2\x78\x3b\xc8\x07\x41\x6c\x8a\x44\x71\x0c\x4b\x6e\x88\xde\xb5\xc3\x84\x26\xfe\x13\x60\x48\x3d\x91\x70\xd3\x1d\xc3\xf7\x9a\xff\x8b\xa1\x40\xa1\x60\x63\xac\x62\x7f\x66\x74\xde\x8e\xf2\x98\xe3\x4b\xc1\x66\x4f\x72\xf9\xb5\x70\x0e\x64\xc8\x58\xed\x0c\x38\x6b\x89\xbf\x22\x16\x36\xc6\xda\x2d\x88\x05\xb5\x08\x45\x9c\x4d\x48\x17\x22\xc4\x06\x77\xa3\x15\x26\x46\xcb\xf9\x5e\x8d\xc9\x63\xbe\x96\xa6\x37\x50\x48\x27\x16\x0a\xe3\x98\xa5\x32\x05\x76\x74\xcc\x0d\xf9\x93\x4b\x28\xb2\xee\xcc\xe2\x71\x05\x53\x98\xa0\x90\xd2\x0c\x6c\x7b\x71\xe6\x7d\xa0\xf9\x61\x07\x7a\xb0\x04\x97\x80\xbb\xb3\x22\x75\x77\x43\x5f\xa8\x42\x64\x09\x92\xc2\x39\x4a\xbf\x0a\x71\x90\x81\x93\xf3\x94\x81\x4b\x69\x5d\xcc\xd2\xb0\xc1\xa7\xb7\x08\x8e\x62\x5c\x38\xaf\x1d\x2d\xd3\xc1\x7c\x91\xf6\x97\xa8\x11\x0f\x7b\xad\x44\x13\x5b\x8b\x1e\xc6\x5f\xd2\x6e\xa6\xe2\xea\x84\x94\x8e\x05\x1d\x6d\xce\x23\x5c\xee\x76\x0a\x70\xa6\x42\xbf\xa2\xd3\xd8\xe3\xa0\xd5\x74\x33\xa0\x1e\x1c\x09\xb3\x1d\xbd\xec\xee\xf5\x1a\xd8\xa6\xb3\x2a\xb2\xb6\xb3\x4a\x3f\xe1\x39\xcd\xf9\x1c\x6d\x40\xe8\xb0\x8f\xb7\x26\x7f\x34\x7f\x0f\x80\xca\xf1\x49\x76\x6e\x2b\xe7\xf5\x22\x39\x45\x3f\x85\xbf\x43\x2f\xaf\xfd\xd1\x0c\xed\x22\x1f\x7d\x3c\x10\xce\x67\x54\xd1\xbf\xf3\x86\x43\x96\x50\x64\xc1\xf7\xee\x7b\x33\xe3\xd9\xc1\xd0\xb8\xa9\xfd\x5e\x9a\xa4\xe7\x8f\xe3\xa6\x9a\x0a\x91\x9f\xd5\x72\x2c\x4b\xc4\x09\x6d\x98\x91\x07\x41\xe3\x08\xb8\x7b\x87\xf8\xf7\xcb\xf6\x12\x71\x10\xfe\x6f\x05\x8b\x78\x45\x41\xd8\x42\xc7\x6d\x78\x20\x2b\x79\x68\xd9\x75\x9a\x58\xe9\x74\x36\x33\x96\x07\xe6\xc9\xe8\xe2\xdd\x3b\xae\x29\xc3\xd6\x3d\x6e\x1e\xda\x8c\x7c\x30\x46\xe6\xb8\xf2\x99\x97\x2e\x83\x30\x6c\xff\x17\x14\xf5\xf8\x8c\xfe\xc4\x55\x43\x7b\xcb\xf0\x29\xfd\xfd\xdb\xea\x7b\x44\x7b\x0f\xc3\x3e\x1f\x41\x75\x30\x79\x06\xda\x40\x19\x5b\x71\x16\x34\xfc\x3b\xc1\x16\x3d\x3c\x9b\xa4\x47\x07\xf4\xff\x1b\x00\x00\xff\xff\x58\x71\xa7\x6b\x71\x28\x00\x00")

func _hardcodedDoerGoBytes() ([]byte, error) {
	return bindataRead(
		__hardcodedDoerGo,
		"../_hardcoded/doer.go",
	)
}

func _hardcodedDoerGo() (*asset, error) {
	bytes, err := _hardcodedDoerGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../_hardcoded/doer.go", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x2f, 0x4b, 0x32, 0x76, 0x47, 0x2f, 0x96, 0x54, 0x8c, 0x7b, 0xee, 0x48, 0x6c, 0x9a, 0x4b, 0xdc, 0x46, 0xee, 0x53, 0xa9, 0x94, 0x97, 0xcd, 0x18, 0x56, 0x39, 0x4d, 0xfe, 0x2d, 0x47, 0xed, 0x4}}
	return a, nil
}

var __hardcodedMiddlewareGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x54\xcd\x6e\xe3\x36\x10\x3e\x5b\x4f\x31\x65\x11\x84\x5a\x38\xf2\x1e\x8a\x1e\x02\xf8\x50\xa4\x9b\xe6\xb2\xc0\x62\x13\xb4\x05\x8a\x02\xcb\x50\x23\x89\xb0\x4c\xaa\xc3\x91\x55\x23\xf0\xbb\x17\x43\x49\x4e\x14\xa4\xe9\xa9\x07\xcb\xe4\xcc\x7c\xdf\xfc\xb3\x33\x76\x67\x6a\x84\x88\x74\x40\xca\x32\xb7\xef\x02\x31\xe8\x6c\xa5\xaa\x3d\xab\x6c\xa5\x3c\xf2\xa6\x61\xee\xe4\x4c\xbd\x67\xb7\xc7\x4d\x89\x8f\x7d\xad\xb2\x6c\xa5\xea\xd0\xed\xea\xc2\xf9\xcd\x4d\x8b\x07\xa4\xcd\xce\x1c\x0f\x88\x57\x75\x28\x0e\x3f\x6e\xda\x50\xd7\x48\x2a\xcb\xb3\x6c\xb3\x81\x2f\xc6\x3b\xfb\xd9\x95\x65\x8b\x83\x21\x84\x36\xd4\x11\x8c\x3f\x42\x27\x8a\x58\xc0\x6d\x20\xf0\x61\x58\xc3\x80\x97\x84\x60\x83\x67\xe7\x7b\x04\x6e\x28\x0c\xce\xd7\xc0\x0d\x8e\xc6\xd0\x77\xc2\x28\xf7\xc8\xc6\xee\x20\x06\xe0\xc6\x45\xd8\x9b\x23\x58\x32\xb1\x19\x6d\x29\x58\x8c\xb1\xc8\xaa\xde\xdb\xd7\xfe\x75\x03\x92\x56\x71\x67\x7c\xd9\x22\xe5\x8b\x1b\x3c\x65\x2b\x42\xee\xc9\x2f\xc4\xb7\xbd\xb7\x5a\xc8\xf4\x30\xca\xbf\x62\xec\x82\x8f\xf8\x1b\x39\x46\x5a\x03\xc1\x87\x49\xfe\x57\x8f\x91\x73\xe1\x59\x95\x58\x21\x41\x82\x8d\x82\x55\x4a\xe2\x13\x11\x5c\x6f\x81\xd0\x86\x03\x92\xce\x45\xe1\x2a\x38\xeb\xb6\x5b\xf0\xae\x1d\x01\x53\x30\x72\x3c\xc9\xe7\x60\x08\x90\xd2\x2f\x50\x26\x92\x38\x38\xb6\x0d\xbc\x64\x9e\xcf\x85\xe6\x63\x87\x93\x6b\x6b\xa2\x14\x8d\x9c\xaf\xaf\x13\xb3\xd0\x6c\xa1\xda\x73\xf1\x49\xc8\x2a\x3d\xc3\xf2\xb3\x79\xf2\xf2\xd2\x7a\x36\x11\x51\x89\x95\xe9\x5b\xfe\x17\x32\xd5\xfb\x9d\x0f\x83\x9f\xfa\x76\xf1\xfd\x01\x42\x05\x12\x0f\x5c\x3c\xa8\xf5\x99\xe9\xf9\x94\x8f\x49\xca\x77\x9c\x9f\xe2\x96\xc2\xfe\x26\x78\xc6\xbf\x59\x53\x31\x9f\xf2\x7c\xf4\xf1\xb3\x56\x09\xaa\xd6\x29\x82\x09\xf3\xf9\x49\x21\x91\xba\x96\xd8\xd7\xa0\xd2\x94\x30\x19\x8b\xea\x7a\xca\x5e\xa7\x21\x2e\xee\x45\xa3\xf3\xfc\x94\x9f\x1b\xb3\xa8\xc0\x29\x35\xa6\x29\xee\x65\x41\xee\x1e\x1e\xbe\xe8\x61\x0d\xa2\x39\xe5\xd9\x29\xcd\x75\x64\xc3\x7d\x5c\x4e\x02\x0c\x64\xba\x08\x06\x68\x12\xc3\x90\xe4\x59\xca\xfc\x4d\x44\x64\xea\x2d\x4b\x93\xde\x98\xac\x6c\x35\x62\xc0\x79\x16\xb7\x69\xa0\x75\x84\x0f\x6f\x51\xe5\x90\xfe\xef\xd0\x94\x48\xda\x86\x12\x05\x96\xfa\x1f\x8b\x89\x67\x0b\x22\x17\xc1\x12\x5b\xbc\x86\xce\x59\xfe\x8a\x14\x5d\xf0\x5f\x8d\xaf\x11\x4a\xb4\xae\xc4\x08\x43\x83\xdc\x20\x01\x07\x30\xd6\x62\xc7\x60\xe0\x30\x1a\x16\x63\xaa\x0b\x58\x5a\x81\x49\x3f\x75\x21\x87\xc7\x10\xda\xe4\xe1\xa6\x75\xe8\x79\x02\xdc\x34\x68\x77\x2f\x1e\x0b\x2b\xf7\x98\xb6\xda\x26\xbb\x67\x3f\xa9\x16\xef\x81\x5f\x6d\xfa\x1a\xc8\xd7\x8b\xc0\xfe\xc7\xdd\x9f\xb3\x95\x45\x2f\xc6\xb2\x16\xbf\x20\x6b\xf5\xfb\xd5\x18\xf2\xd5\x14\x88\x92\x31\xfb\xaf\x81\xff\xa9\x2c\xe7\x9b\x1a\xcb\x70\x35\x39\x50\xeb\xb9\x20\xc2\xe3\x2a\xf8\x8e\x7c\x3d\xd7\x7a\x5a\xfd\x61\xd1\xdc\x1f\x3e\x7e\xcc\x5f\x48\xf5\x1f\x7f\x3e\x1e\x19\xb5\xec\xee\x7d\x47\xce\x73\xa5\xbf\x3d\xa9\x3d\xc6\x68\x6a\xd9\x1a\xb5\xac\x3b\x5c\x5e\xc4\x4b\xf0\x81\xa7\xce\x63\xb9\x86\xae\x45\x79\x2e\xfa\xae\x26\x53\xa2\x3a\x7d\x7b\x0e\x2a\x4f\xbe\xce\xaf\xd8\xe9\x9d\x9d\xfa\x27\x00\x00\xff\xff\x64\xba\x96\x25\x93\x06\x00\x00")

func _hardcodedMiddlewareGoBytes() ([]byte, error) {
	return bindataRead(
		__hardcodedMiddlewareGo,
		"../_hardcoded/middleware.go",
	)
}

func _hardcodedMiddlewareGo() (*asset, error) {
	bytes, err := _hardcodedMiddlewareGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../_hardcoded/middleware.go", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x17, 0x73, 0xff, 0x36, 0x5d, 0xfe, 0x40, 0x7c, 0x33, 0x99, 0xc8, 0x19, 0x37, 0x47, 0x59, 0x51, 0x96, 0xb, 0x22, 0x81, 0x1c, 0x7d, 0xe4, 0x3, 0x2f, 0x2d, 0x3c, 0x2d, 0xc5, 0x23, 0x70, 0xb8}}
	return a, nil
}

var __hardcodedTracingGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x59\x6f\x6f\xdb\x38\xf2\x7e\x2d\x7d\x8a\x59\x03\xdd\x4a\x85\x22\x27\xdb\x36\xbf\x45\x16\x79\x91\x26\x69\x6b\x20\xc9\x06\x4d\x7e\xb7\x38\x1c\x0e\x05\x2d\x8d\x25\x22\x12\xa9\x23\x29\xff\xb9\x20\xdf\xfd\x30\x43\x49\xb6\x63\x27\xd7\x5e\x5e\xa8\x16\xff\x0c\x9f\x19\x0e\x9f\x67\xa8\x36\x22\x7b\x10\x05\x82\x33\x22\x93\xaa\x08\x43\x59\x37\xda\x38\x88\xc2\x60\x94\x69\xe5\x70\xe9\x46\x61\x30\x42\x95\xe9\x5c\xaa\x62\x3c\x95\x4a\x98\xd5\x56\x53\x89\x4b\x7a\x9f\xd5\x3c\x52\xa1\x1b\x97\xce\x35\xf4\x5b\x5b\x7a\x5a\x67\x32\xad\xe6\xf4\xd3\xc9\x1a\x47\x61\x18\x8c\x0a\x9d\xea\x06\x95\xc3\x0a\x6b\x74\x66\x95\x4a\x3d\xa6\xe5\x8c\x9c\x8e\xa5\xb2\xce\xb4\x35\x2a\x27\x9c\xd4\x6a\x5c\x48\x57\xb6\xd3\x34\xd3\xf5\xb8\xd0\x46\x56\x95\x18\xd7\xed\x72\xac\x1d\x56\x75\xcb\x4b\xff\x8c\xb5\x1e\x1f\xcf\xef\x81\xee\x33\x40\xfd\xaf\xf5\x8d\x71\x49\x91\x42\x63\xc7\xda\x55\xaf\x9a\x79\x36\x94\x1f\x85\x69\xb2\x57\xe7\x34\x46\x37\xa2\x60\xd0\xa3\x30\xb0\xf9\x03\x6d\x11\xc2\xcb\x13\x6c\xfe\x30\xe6\x31\xaf\x9a\x1d\x46\xf9\xa7\x43\xeb\x5e\x1d\xbf\x61\xb1\x79\x28\x52\xa9\xc6\xe7\x15\xce\xd1\x8c\x1f\xc4\x6a\x8e\x78\x50\xe8\x74\x7e\x3c\xae\x74\x51\xa0\x19\x85\x71\x18\x8e\xc7\xd0\x43\xd7\x06\x9c\x86\xd6\x62\x1a\xce\x85\xd9\x6c\xde\x70\x2e\xbd\xc7\xa5\xbb\x16\xcd\xed\xba\xf7\x74\xbb\x9f\x10\x9c\xfb\x5c\x7c\x7c\x82\xf1\x98\x93\x15\x1b\x61\x50\x39\x28\x51\xe4\x68\x78\xd9\x1c\x67\xa2\xad\xdc\xb9\xae\x2a\xcc\x9c\x36\xb7\x94\xc8\x0b\x61\x21\x2b\x85\x2a\x30\x87\x99\xd1\x35\x7c\xfc\xf8\xfb\xf1\x21\x48\x05\x37\x7a\x8e\xf5\x14\x0d\x08\x95\x83\x2b\x11\xbe\x68\xa8\xe4\xd4\x08\xb3\x22\x6b\xa5\xb0\xea\xad\x83\x29\xa2\x82\xb6\xc9\x85\xc3\x1c\x16\x25\x2a\x90\x0e\xa4\x5d\x37\x21\x64\x42\x91\x93\x40\xdb\x9a\x5e\xec\x01\xc1\xde\xef\x45\xd7\x4a\xe5\x8e\x8e\xe1\x14\x3e\xbc\x3f\xfa\x3f\x76\xe2\x0e\x5d\xdb\x7c\xa9\xf4\x54\x54\xec\xf8\xad\xd1\x73\x99\xa3\x39\x53\xf9\x65\x97\x45\x60\xd1\x11\x00\x10\x0a\xfa\xcc\xa2\x40\xfb\xdf\x09\x59\x11\x16\x16\x58\x55\xf4\x2f\x79\xb6\xb5\xb5\x50\xb0\x75\x1f\x45\x8a\x34\xdb\x87\x19\xed\x16\x37\x15\xa8\xd0\xd0\x46\xd8\x61\xfb\xc6\x63\xb8\x2f\x71\xbd\x1a\x85\x6c\x98\x29\x0c\x82\x41\xd7\x1a\x85\x39\x05\x56\x9b\xc1\x5e\x49\xd1\xa9\x2a\x8f\x2f\xc7\x19\x81\x2f\x5b\x97\xeb\x85\x4a\xc3\x59\xab\xb2\x1f\xf1\x37\xca\xdc\x12\x3a\x32\x4a\xbb\x44\x88\x21\xea\x8f\x44\x7a\xd7\x08\xd5\x8f\x4d\xe0\xdd\xd0\xce\xf6\x4c\x6f\x30\x01\x34\x46\x9b\x18\x1e\xc3\x60\x3c\x86\xa3\x94\xc2\x48\x51\xec\x9d\xe2\xe6\xdf\x86\x66\xb6\x61\x06\x2f\xb9\xf7\x7d\x0a\xc2\x5a\x59\xa8\xad\x18\x6e\x0c\xe2\x51\x93\x19\x2c\xf0\x2d\x05\xa5\x55\x4a\xaa\x02\x2a\x4d\x41\x58\x25\x14\x0f\x05\x14\x28\xd0\xb3\x19\x58\x51\x37\x95\x54\x45\x0a\x7f\xba\x12\xcd\x42\x5a\xf4\x6d\xe8\x11\xbe\x01\x6d\x60\x51\x0a\x47\xe7\x0d\xee\xbf\x9d\x9d\x4f\x6e\xbe\x7c\xbf\x3b\xbb\xbe\xbd\xa2\x1f\xb7\xdf\xfe\xfc\x74\xf6\x69\x72\x35\xb9\xff\x3b\xd8\x06\x33\x39\x93\x68\xd3\x30\xe8\xcd\xde\x1a\x3d\x15\x53\x59\x49\xb7\x82\x93\x53\x38\x4c\x0f\x8f\xc2\x40\xda\x2b\x02\x43\x0d\xda\xa6\x5f\xd0\xa1\x9a\x47\xa3\xef\x93\xbb\xef\x57\x7f\x9e\x9f\x5d\x8d\x62\x38\x3d\x85\x91\x33\x2d\x9d\x79\x39\x83\x7e\xfc\x63\x18\xec\x35\x7c\x0a\x47\xe9\x61\x18\x3c\x01\x56\x16\x41\xce\x60\xfe\xcc\xf4\x6b\xb0\x47\xf1\x1f\x30\x87\x5f\x4e\x61\x34\x7a\x69\x81\xcf\x46\xd7\x97\x6a\xce\x9b\x47\x96\x3b\x31\x49\x6f\x85\xb1\xf8\xb9\xd2\xc2\x45\xf3\x04\x8e\x3f\xc4\x61\x40\x70\x69\xd4\x2f\xa7\xa0\xa4\x47\x1c\xf8\xb4\xa4\xf7\xc4\x3f\x66\xb5\x4b\x2f\x29\x0f\x66\xd1\x28\xd3\x6d\x95\x83\xd2\x0e\x1a\xb2\x06\x6f\xdf\xd8\xb7\x94\xa7\x33\x32\x3b\x4a\x60\x4e\x46\x9f\x5e\x74\xfc\x65\xb4\x61\xf0\x14\x86\x81\xc8\x73\x86\x4c\x4b\xde\x35\x46\x2a\x37\x8b\x46\x6f\xec\xc9\x9b\x7c\x94\xec\xe7\x8a\xaf\xda\xba\x64\x2f\x51\xc4\x3e\xb3\x2e\xe7\x68\x56\x70\xf4\x11\x2c\x66\x5a\xe5\x74\xc8\xdf\x56\x94\x85\x2b\xc2\x9d\x69\xa5\x30\x73\xf4\x73\xfb\xc0\x67\xbd\x29\x10\x8e\xed\xd0\xb9\xec\x96\xe1\xe4\x24\x9e\x05\x3d\xf3\x89\x5a\x6a\xeb\x4e\x98\x8f\x68\xe8\x5f\x94\xb2\x7d\x22\x4b\x45\xa9\x9e\xb7\x19\x4f\x70\xa5\xb4\x44\x85\x02\xac\xcc\x31\x13\x26\x61\x5e\x58\x6c\xcc\x60\x13\x5d\xfa\x6f\x8c\xef\x5b\x7a\xbb\xba\xc1\x01\xed\xc1\x80\x36\x0d\x83\xdc\x48\xca\x7d\x4a\xa9\x4e\x33\xd3\x1b\x5c\x5c\x70\x6b\x14\x06\xc1\xd0\xfa\x97\x74\xe5\x37\xec\x22\x20\xb5\xba\x45\x23\x75\x1e\x1d\x7d\x7c\x47\x35\x47\x7a\xc7\xf1\x8a\x93\xe7\x53\x2e\x55\xde\x68\xa9\x5c\x44\x9b\xb5\xdb\x3d\x51\x16\xb3\xd6\x60\x44\x5d\x71\x18\xe0\xc0\x32\x5d\x3a\xf2\x36\xde\xe0\x62\xa0\xaa\x30\x08\x32\xb7\x24\x43\x1e\xba\x9f\xb7\x9b\x99\xaf\x26\x26\x13\x15\x64\x06\x85\xa3\xe8\xf4\xab\x9e\xc0\x9b\xf9\x88\x97\x8e\x7d\x86\xb9\x86\x30\x28\x5c\x6c\x33\x5d\xb4\x86\xb9\x27\x47\xe3\x30\x20\x61\x4f\xef\xd0\x3d\x9b\xe6\x9a\x38\x0c\xbc\x92\xa7\x94\xc9\x1d\xd5\x12\xfd\xc6\xe9\x44\xcd\xf4\x45\x34\xb2\x4e\x18\x02\x75\xe0\x99\x6f\x94\x40\x37\xe1\x9a\xbc\x1a\x51\x18\xd1\xda\xd1\x09\xf8\x3f\x7a\xa7\x60\x8c\x7a\x20\x07\x46\x38\x1c\x9d\xec\x03\x96\x84\xc1\x53\x1c\xf6\x91\x59\xfb\xe0\x1a\x0e\x51\xf8\xf4\xa3\xfa\xf8\x59\x9b\x7b\xb4\xac\xd2\x35\x0a\xc5\x07\x62\x8a\x24\x64\x2c\x4f\xad\x92\x0e\xa8\xee\x91\xaa\xf0\x62\xa9\x72\xa8\x25\xc5\xdc\xab\xa5\xa5\x25\x40\x4c\xf5\x1c\x59\xc5\x74\xeb\x28\xc1\xe9\x80\x6c\xce\x4d\x61\xe2\x3a\xdd\xb3\x24\xc5\x52\x1d\xd4\x58\x6b\x5f\x3d\x0c\x4a\x49\x06\x70\x29\x6a\xc9\x89\xde\x49\x2b\xe6\x60\x1b\xa1\xec\x8f\x6b\x60\xe7\x53\x14\x43\xf4\x6e\x28\xdc\xd2\x89\xba\xe6\x15\x7f\x4e\xfd\x06\x6c\x27\xa7\xb0\xb6\x75\x83\x8b\xe7\xe6\xa2\xf8\x47\x72\xec\x28\x3d\xfc\x2f\x39\xf5\xda\x96\x72\x00\x5e\x36\x0f\x2f\xa8\xfc\x3e\x4a\x66\xde\x3e\xfe\x10\xbf\x18\x04\x72\xbe\xc3\x32\x8c\xb8\xd9\x59\x3a\x0c\x98\xf7\x38\x61\xb6\x98\x72\x72\xb1\x2e\x8d\x52\x98\x6c\x16\x3a\x3d\x1c\x4a\xb5\x85\x36\x0f\x10\x09\x07\x15\x0a\xeb\x60\x21\x5d\xe9\xa9\xcf\x6b\x3b\x1d\xde\x9e\x83\x37\x2d\x42\xdd\x5a\x37\x24\x48\x57\x8a\x4d\x2e\x2c\xe5\xdc\x4c\x9b\xba\x5a\x81\x70\x60\x84\xca\x75\xed\x2b\x59\xb2\x80\xca\x49\x83\x94\x4d\x99\x4f\x50\xa9\xdc\xf1\x87\xd4\x2f\xf1\xb9\xcb\xbd\xa6\xc2\x64\xcb\x93\xe5\x81\x11\xab\xed\xd5\x73\x8d\x96\xb5\x30\xd7\x8c\x96\x4c\x0c\x41\x22\x2e\xbc\xf3\xe8\xd7\x65\xd7\x2d\x17\xe0\x9f\x84\xc5\x3c\xda\x0e\xf8\xe4\xe2\x1b\x49\x4a\xd7\xb5\x87\x82\x62\xa6\x5a\x5f\x54\x5a\x84\x5a\x2c\x65\xdd\xd6\x96\x2b\x49\xa7\xa1\x68\x85\xc9\x41\x14\x82\x2e\x6f\x60\x75\x8d\xae\xe4\xd3\xa3\xe9\xb9\x30\x5a\x15\x7c\x68\x2d\x2a\xba\x81\x82\x00\xe7\xf5\x2b\x17\x4e\x40\xab\x70\xd9\x60\xe6\x30\xaf\x56\x3b\x4e\x34\x42\x5d\xc9\x5a\x3a\xbb\x5d\x3e\xfa\x36\x2e\x19\xce\x1c\xdd\x1b\x5b\x87\xe7\xba\x55\x8e\x3b\x4e\xe0\xe8\xf0\x90\x10\x07\x97\x73\x54\x6e\xb3\x83\xfe\xfa\xce\x2b\xa9\x1e\x9e\xf7\xf5\x9d\x4f\xec\xf1\x36\x96\x95\xca\x36\x32\xdd\x4b\x8c\x27\xb9\xeb\x76\x79\x87\x66\x8e\xe6\x5a\xe6\x79\x85\x8b\x75\x85\x6d\xa1\x5e\x37\xb9\x52\x38\xb0\x25\x97\x31\x53\x04\xe1\x9c\xc8\x4a\xcc\x29\x84\x02\x36\xee\xca\x60\xd9\x18\x97\xf1\x13\xe7\xb7\xda\x2d\x78\x9f\x55\x61\x4f\x80\x49\xdd\x7a\x4a\xf2\x1a\x2e\xf2\xdc\xbf\xfb\xfb\x1f\x48\x35\xd3\x64\x96\x92\xc8\xe0\xbf\x5a\xb4\xee\xa0\xab\x39\xb3\x5e\x01\xc8\xfa\x37\x59\x94\x0e\x94\x5e\xd0\xbd\x48\xab\x6a\x05\xb6\x6d\xf8\x83\x02\x0d\xa2\xbd\xa2\x8c\x96\x8a\x0d\x51\x56\x0b\xe7\xbd\xb8\x10\x4e\xe4\x9a\xb5\x0e\x33\xd7\x13\xe3\x9e\x38\x44\xe4\x8b\xcc\xf0\x46\xd4\x48\xd5\xa0\x54\x45\x0c\x34\x38\xa2\xcb\x7c\xfa\x55\xa8\x9c\xce\x18\x6c\xbe\xd1\xb9\xd7\xae\xa2\x48\xb0\x66\xf3\x87\x83\x74\xbf\xcd\x64\xe8\xa7\x3d\x5a\x5f\x4a\x6d\xb4\xbe\xbe\xc6\x6b\x4e\xf3\x2b\xc3\xeb\x6b\xf7\x83\x3d\x86\x2d\xa0\x9f\x69\x3e\x1b\x31\x0b\x3f\xef\x1b\xda\x46\x2b\x8b\x7f\x19\xc9\x4c\x67\xe0\x5d\xd7\xce\x61\x8f\x7d\x61\x3b\x1e\xf7\x38\xe9\xa2\x0a\xb8\xa4\x7d\x22\x5d\x61\x01\x6b\x84\x4a\x79\x17\x9a\xd6\xf1\x7d\x55\x75\x7b\x97\xb9\xe5\xf3\x7d\x23\x6b\x76\x90\x02\x3e\x0d\x9b\xe2\x6f\xfa\x1b\x57\x44\x5e\x73\x91\x6d\x33\xae\xc4\x79\xe8\xd0\xf9\x07\xd8\x2c\xfd\x2a\x6c\x47\x00\x51\x87\x33\x20\x2c\x93\x8b\xc4\x5b\x9f\x5c\xf0\xcc\x8c\xa7\xd2\xa0\xf4\x8e\x77\x30\x8a\x13\x6a\x1d\xe6\x0e\xcd\x6c\x82\xae\xf6\x5d\x7a\x50\xed\x8f\x94\xab\x25\x2e\xbb\xdd\xf7\x97\x54\xa6\x3d\x4a\xae\x04\xac\x26\xcf\xc0\x95\x9a\xee\x53\xda\xe7\x57\xa6\x8d\xc1\xca\xd7\x53\x95\x2e\xac\xbf\xf4\xd3\x7a\x96\x09\xdb\xf2\x4a\x72\x06\x15\xaa\xa8\xc3\xca\x77\xa1\xf7\xbf\xc1\xaf\xbf\x72\xab\xf7\x84\x1b\x8f\x8e\xe1\x11\x68\x0b\xb6\xca\x6c\x9f\xcf\x27\xd4\x3b\x5d\x39\x84\xe8\xfd\x6f\x07\x59\x29\x0c\x81\x8d\x13\xf8\xbd\x6b\x3d\x3a\x5e\xb7\x76\x34\xcf\x64\xd6\x50\x0d\x91\x7b\x20\x41\x07\xe1\x93\x4d\xe0\x3b\xc5\xac\xc4\x65\x7a\x81\x99\xce\xb1\x0b\x4d\x8f\xd1\x0f\xdf\x53\xb5\x6d\x6e\x5c\x7a\x96\xe7\xfd\xdb\x88\x67\x7e\x97\xf9\x28\xf1\x73\x83\xed\x0b\x0a\xdd\x4e\xfc\x57\xbe\xf4\x93\x2c\x2e\x55\x2e\x85\x4a\xff\x9f\xe3\x1b\x0d\xa8\xfe\xf1\xfb\xc9\x3f\xe3\xb8\x5b\xdc\x07\xe6\x65\xa8\x5d\xe0\x7e\x1e\x29\x4d\xfc\xdf\x80\xf6\x90\x7a\x8c\x74\x8b\xf3\x8f\x32\x65\x46\xf9\x7a\x7f\x7f\x1b\x99\x45\x02\x2c\xc7\x4f\x31\x57\xd4\x9e\x7c\x7d\x45\xa0\x2c\xd3\x56\xcf\xba\x74\x78\xdc\xd0\xea\x3f\x8b\x10\x8f\x65\x95\x44\xe5\x7a\x4e\xb4\x3d\xc5\x3a\xf1\x80\xcc\x73\x62\x7b\xd6\xc2\x88\x26\x01\x4c\x8b\xd4\x1f\xf6\xee\x06\x38\xac\x97\x0c\x1f\xa3\x3a\x8b\x64\xaf\xfb\xf4\x01\x73\x51\xb5\xac\x8f\x4d\x4b\x97\xbe\xee\xa0\x83\x22\x26\xd4\xad\xe3\xa2\x60\xf7\x53\x8d\xb4\x3c\xbe\xff\xfc\x45\xd3\xba\x8f\x17\x5a\x11\x47\x03\x8a\xac\xec\x97\xe3\xd3\xd3\x7d\x0b\x86\x85\x56\x6f\x19\xc0\x14\x0b\xae\x9b\x9d\xac\xfc\x69\xa2\x7b\x9c\x92\x4e\x8a\x4a\xfe\x1b\x73\x88\x30\x2d\x12\xf2\x56\xaa\x4e\x6a\xbc\xa4\xb4\x4d\xdc\x11\xf9\x66\x4c\xa3\xa9\xb0\xb8\x8e\xb0\x27\x37\xdd\xaa\xfc\xde\xc8\xa6\xe1\xe2\xae\x11\x8a\xb8\xf8\xdc\x2d\xff\xc6\x3e\x4b\xe5\xd0\xcc\x44\x86\x8f\x4f\xf1\xee\x84\x8d\xb2\xce\x6c\x34\x3f\x6e\xad\x73\x02\x5b\xaf\xbb\x8b\x9c\xec\xb4\x70\x42\xb8\x55\x83\x5b\x66\x89\x76\xda\xcc\xd1\xa2\xdb\x8e\x00\xec\x42\x0b\x83\xd7\x7c\x19\xea\xdf\x88\x32\x6d\x63\x5a\x0c\x83\x91\x68\x87\xff\xa3\x77\x5b\x3a\xb1\x59\xd9\x0f\x3a\xe3\x3f\x6d\xa7\x5b\x61\x27\x1d\x72\xe9\x76\x14\xf8\xc2\xdb\x0d\x26\xbd\x7b\x56\x0a\x73\x51\xff\x65\xa7\xa8\x8f\xe3\x9d\x89\x2f\x08\xe5\xce\xb8\xbb\x2e\x1c\x9f\x99\x2b\xe9\x8e\xc1\xe2\x47\x15\x9e\xce\x3b\x46\xdf\xa3\x79\xbe\xc3\x4b\xca\x3c\x01\xfd\x40\x44\xb3\xc1\x1b\x29\xc7\x36\x32\x2e\x7d\x1e\xef\x38\x8d\xba\x2a\xa1\x53\x2f\xfd\xd0\x29\x53\x17\xac\xf9\x40\x0d\x7d\x0e\xa5\xd7\x1e\xcd\x78\x4c\x25\x3b\x82\xb0\x43\x44\xdf\xda\xa1\x86\xee\xcf\x1e\x7f\xe5\xf0\xf5\x5d\x9c\x6e\x6c\x5b\x5f\xcb\x5d\x7a\x69\x26\xc7\xcf\xa8\xcf\xcb\x60\x27\xd8\xbe\xc8\x5a\x8b\x11\x97\x47\x7c\x4e\x85\xe2\x6c\xea\x0f\x66\xf7\x9d\xbb\x3b\x4e\x7b\x6d\xee\xc9\x94\x8e\xaf\x7d\xb2\x4f\x2e\x86\x7a\xe9\x31\xfc\x71\xc9\x27\xc1\xdf\x96\xfa\x5d\x99\xef\x2f\x55\xcf\xc6\xed\xea\x79\xb2\x33\x66\xa7\x12\x20\x22\x0e\x7c\x89\xb1\x86\xd7\x8d\xdf\x44\xb9\xce\xb2\xb4\x0b\xc7\x26\xf0\x64\xeb\xbf\x10\xbe\x72\xf0\xce\x85\x31\x12\x4d\x64\xba\xf7\x78\xa3\x8e\xfb\x99\x9a\xe4\x29\xfc\x4f\x00\x00\x00\xff\xff\xe6\xe6\x42\x5b\x36\x1b\x00\x00")

func _hardcodedTracingGoBytes() ([]byte, error) {
	return bindataRead(
		__hardcodedTracingGo,
		"../_hardcoded/tracing.go",
	)
}

func _hardcodedTracingGo() (*asset, error) {
	bytes, err := _hardcodedTracingGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../_hardcoded/tracing.go", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xf5, 0x4d, 0xd0, 0xa4, 0x31, 0x36, 0xe0, 0xe7, 0xb5, 0xe0, 0x7b, 0xc1, 0xf1, 0x1e, 0xba, 0xad, 0x67, 0x15, 0x12, 0x78, 0x74, 0x25, 0x5d, 0xc4, 0x16, 0x52, 0x52, 0xa1, 0xd, 0x89, 0xba, 0x58}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"../_hardcoded/doer.go":       _hardcodedDoerGo,
	"../_hardcoded/middleware.go": _hardcodedMiddlewareGo,
	"../_hardcoded/tracing.go":    _hardcodedTracingGo,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"..": {nil, map[string]*bintree{
		"_hardcoded": {nil, map[string]*bintree{
			"doer.go":       {_hardcodedDoerGo, map[string]*bintree{}},
			"middleware.go": {_hardcodedMiddlewareGo, map[string]*bintree{}},
			"tracing.go":    {_hardcodedTracingGo, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
