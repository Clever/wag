// Code generated by go-bindata.
// sources:
// _hardcoded/doer.go
// _hardcoded/middleware.go
// DO NOT EDIT!

package hardcoded

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __hardcodedDoerGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x39\x7f\x73\xdb\xb6\x92\x7f\x93\x9f\x62\xa3\x99\xbe\x90\x8e\x42\xda\x79\xcf\xbd\x1b\xe5\xdc\x9b\xd6\x76\x2e\x99\x49\x93\x4c\xe5\x5e\x33\x93\xc9\x34\x10\xb9\xa2\x10\x83\x00\x03\x80\x92\x35\xae\xbf\xfb\xcd\x02\xa0\x44\x4a\xb2\x93\x5e\x3b\x4f\x7f\x48\x14\xb0\xbb\xd8\x5d\xec\x6f\x36\xac\xb8\x66\x15\x42\x21\x38\x4a\x1b\xc7\xbc\x6e\x94\xb6\x90\xc4\xd1\xa8\x50\xd2\xe2\x8d\x1d\xc5\xd1\x08\x65\xa1\x4a\x2e\xab\xfc\xb3\x51\xd2\x2d\x68\xad\xb4\xa1\xa7\x79\xed\x20\x84\xaa\xe8\xa7\x66\x76\x91\x6b\x26\x4b\xfa\x23\xd1\x86\x9f\x7c\x61\x6d\x43\xcf\x66\x2d\x0b\xfa\xb5\xbc\xc6\x51\x1c\x47\xa3\x8a\xdb\x45\x3b\xcb\x0a\x55\xe7\x6c\x8e\x37\xf9\x62\x6d\xac\xe6\x37\x4f\x2b\xd5\x3d\x8e\x86\x50\xa5\x92\x6a\xc9\xe4\x82\x97\x98\xe3\x12\xa5\x35\xaa\xd5\x05\x8e\xe2\x48\x35\x28\xad\x66\x05\x97\x15\xf4\x31\x7a\xeb\xfd\xe7\xa7\x95\x72\xa4\x95\x60\xb2\xca\x94\xae\xf2\x9b\x9c\x58\x0d\x62\xe7\x85\xbd\x09\x5c\x0b\x55\x55\xa8\x61\x54\xa9\xe6\xba\xca\xb8\xcc\xcf\x05\x2e\x51\xe7\xd7\x6c\xbd\x44\x7c\x5a\xa9\x6c\x79\x9a\x7b\xa0\x51\x9c\xc6\x71\x9e\x43\xa9\x50\x03\x37\xc0\x24\x70\x69\x51\xcf\x59\x81\x30\x57\x1a\x46\xa5\xe2\xb2\x1a\x01\x91\x06\x8d\x5f\x5a\x34\xd6\x40\xa3\x8c\xe1\x33\xb1\x86\x15\xb7\x0b\x58\x69\xd6\x34\x5c\x56\xb1\x5d\x37\x18\x48\x6d\x88\xdc\xc6\xd1\x85\x4a\x0a\x38\x22\x0a\xd9\xb9\xbb\xb6\x31\xe8\xf0\xff\x17\x4f\x31\x85\xa4\xfb\x6f\x1a\x25\x0d\x8e\xc1\xdd\x58\x1a\xdf\xc5\x9e\xaa\x6a\xde\xb0\x1a\xcf\xed\x0d\x18\xab\xdb\xc2\xde\xde\x39\xbe\x67\xcc\x60\xa0\xf1\x92\xc9\x52\xa0\x86\x06\xf5\x5c\xe9\xda\x80\x5d\xa0\xdb\x1f\xf0\xee\xa9\xd1\xf2\x05\xf1\xb9\x25\x36\x6f\x65\x01\x49\xb9\xd9\x4a\xe1\x2f\xb0\x4d\x52\x6b\xb4\xad\x96\x10\xae\x25\xbb\x50\x89\xce\xce\xfd\x5d\x25\xe9\x18\x8a\x31\x78\xf1\xf2\x1c\xc2\x0d\x3b\x8e\x58\x59\x9a\x6e\x01\xac\x1a\x2a\xde\x73\xdf\x07\xf7\x02\xd0\x79\xa5\xd3\x7c\xdc\x13\xa5\x07\xf7\x57\xa5\x89\xa3\xc2\xde\xc0\xe4\x0c\x7a\x32\x90\x05\xd3\xa5\xd0\x72\x61\x6f\xb2\xff\x65\xa2\xc5\x64\x73\x51\xb7\x77\x69\x96\x90\x47\xc8\x2a\x8d\xa3\x25\xd3\x60\x1a\xe8\xd9\x73\x36\x6d\x98\x8c\xa3\x3c\x87\xab\xb7\x17\x6f\x27\x24\x38\x58\x56\x19\xd0\x28\x98\x0d\xd2\x73\xd9\xb4\x16\x4a\x66\xd9\x7f\xc7\x11\x9f\x43\xc3\x34\x4a\x4b\x98\x74\xea\x2e\xb5\x17\x5a\xd5\x1d\x7b\x85\xbd\x49\x9f\xf7\xe1\x1f\x9d\x81\xe4\x82\x34\x15\x99\x06\x76\x90\x2d\xd3\x0e\x2a\xb0\x3f\x1e\xec\x9e\x2f\xb8\x28\xdf\xce\x93\x2d\xb1\xad\x12\xd2\x34\x8e\xee\x00\x85\xc1\x6f\xa3\x4c\xe0\x4e\x12\xd4\x9a\x44\x30\x4d\x76\xa5\x59\x81\x3a\x49\xb3\x57\xf2\x33\x16\x36\x31\x4d\xcf\x4e\xe2\xa8\x1f\x27\xb2\x97\x57\x57\xef\x5e\x22\x2b\x51\x9b\x07\xb6\xce\x99\xd6\x1c\x75\xa2\x33\xbf\x90\xa6\xcf\xdd\x79\x3d\x15\x04\xeb\x94\x5c\x8c\x61\x5e\xdb\xec\x92\x6e\x7a\x9e\x8c\x0a\xd5\x8a\x52\x3e\xb6\xc0\x1d\x33\x1b\x4b\x5c\x78\xca\x90\x7c\xb7\x4c\x47\xce\x30\xbc\x24\x81\x4e\x99\x95\x64\xe1\x7d\xa3\xd6\x68\xf5\xba\x73\x4a\xfa\xc3\xd1\xc0\xe9\xf1\xfb\x43\x16\xed\x60\xf7\xec\x79\xfb\x71\x96\x1d\x39\xa8\x77\x4a\xf0\x62\x0d\xbf\x6c\x9f\xc3\x79\xbd\x15\x28\x71\xce\x25\x1a\x60\x9e\x32\x34\x6e\x39\xf3\x87\xf5\x01\x07\x71\x2a\xcf\xe1\x27\x56\x5c\xab\xf9\x9c\x8c\x90\xe4\xf2\x41\x44\xb6\xf5\x8c\x3c\x53\x96\x60\x79\x4d\xda\x50\xf3\x40\x98\x59\x8b\x75\x63\x4d\x16\x47\x1d\x6a\x92\xc2\x87\x8f\x94\x2f\xb2\x8b\x56\x33\xcb\x95\x37\x72\x77\x2a\x68\x2c\x90\x2f\xd1\xd3\xed\x2b\x62\x0c\xcc\xc0\x0a\x85\xa0\x5f\xda\xd4\x68\x5a\x61\x41\xcd\x1d\x76\x97\x93\x82\xef\x3e\x36\xf0\xe9\x42\x7d\x82\x1a\xed\x42\x95\x59\x1c\x39\xea\xc9\xc0\x9d\xc7\x70\x8f\x37\xcf\x94\x12\x41\x67\x17\x38\x67\xad\xb0\x87\x54\x47\x3c\x94\x7e\xfb\x90\x12\x0f\x60\x0e\x02\xf3\x9e\x22\xe7\x7c\x49\x71\x37\xac\xba\xbc\x81\x37\x8d\x92\x28\x2d\x67\x42\xd0\x55\x14\x1a\x99\x21\xf5\xae\x18\xb7\xa4\x6a\x34\x2e\xc6\xa3\x5d\x21\xca\x8d\xc9\x4c\xe0\xe4\xf8\x78\x0c\xcf\xe8\xeb\x5f\xf4\xf5\x9f\xf4\x45\xb7\x73\xf2\xfd\xf1\x31\xd4\x5c\x08\x6e\xb0\x50\xb2\x34\xf0\x24\x7f\x0a\x6d\x43\x91\xe4\xf4\x3b\xf8\xcc\xad\x45\x9d\x85\xf8\xb8\x2f\x41\x0a\xf7\xdf\x61\x88\xe8\xe4\xb2\x35\xbb\xc6\x64\x67\x7b\x0c\xa7\x69\x1c\x49\xbc\x71\x10\x27\xc7\xc7\x70\xe4\x04\xc8\x7e\xde\x72\x13\x47\x5a\x96\x2e\x86\x32\x59\x66\x6f\x70\x95\x74\x0f\x53\x57\x12\x24\x0e\xe1\x8d\x5a\x25\x69\xf6\xab\xe4\x37\x6f\x98\x54\x3e\xc0\xb8\x10\x7b\x9c\x1d\x9f\x42\x9e\x3b\x91\x4e\x29\xcb\x15\x28\x6d\x90\x29\x8e\x28\x57\xf3\x40\xbc\x72\x0e\xd5\xb9\xf9\x07\xfe\x11\xce\xc0\xb1\xf6\x04\x06\x4c\x27\x49\xa2\x65\x99\xbd\x10\x8a\xd9\xef\xff\x95\xa4\x47\xcf\xd2\xa7\x27\xe9\x11\x1e\xcd\xc3\x0a\x21\xd1\xf9\x5e\xb0\xa3\x33\x78\xd6\xf7\x79\x8d\xb6\xef\x7a\xb0\xe2\x42\x04\x53\x91\x4a\x3e\x7d\xf7\x76\x7a\x35\xf6\x4f\x3f\x5e\x9d\xbf\xdc\x16\x0f\x76\xc1\x2c\x9c\xbe\x7f\x9f\xc5\x9b\xd8\xff\xca\x92\x8b\x1b\x90\xca\x42\xd1\x6a\x0a\xb3\x62\xdd\xb9\x98\x5c\x7b\xcb\xed\x6c\x09\x4b\x98\xad\xef\xf1\x88\x87\x2e\xd7\xfb\x88\xc6\x2f\xb0\xe3\x27\x1a\x4d\x73\xc8\x59\xfa\x0e\x43\xda\x0c\x51\x3b\x44\xd1\x3f\xfe\x20\x91\xb2\x9f\x9d\x0b\xc2\xd9\x19\x8c\x48\xe2\xd1\xa1\x75\x92\x9f\x36\xdc\x85\x98\x86\x92\x82\x6d\xcd\xb9\x2a\x11\xfe\x0b\x4e\x8f\x8f\xfb\x11\x79\xce\x84\xc1\xbe\x9a\xad\x6e\x31\xe8\xf9\x8d\x3a\x1c\xe4\xbc\x67\x52\x54\x92\x54\xe8\x79\xc5\x91\x23\xb1\x4e\xeb\xc1\x6b\x87\x04\x1e\x76\x58\x26\x81\x42\xdb\x1a\x8c\xe0\x05\x76\x8a\x1d\x50\xf8\x06\x87\x21\x09\x76\x76\x6e\xef\x06\x66\xc3\xc4\x8a\xad\x7b\x71\x82\xe4\xbf\xe7\xb4\x3f\x1b\xe5\x7a\x3c\x78\xb5\x76\xd5\xa4\x53\x50\x48\xb2\x43\x35\xfc\xc6\xed\xa2\xaf\xa3\x8d\x36\x40\xe2\x0a\x42\xad\xed\x4d\x58\x2d\x51\x6b\x5e\x86\x58\xe9\x1b\x12\x50\x33\x4a\x9b\x8f\xcd\x26\x03\x6e\xc2\xa6\x93\x68\x87\x3c\x55\x29\x1d\xd1\x2e\xe9\x8f\xe1\x9e\x3c\x97\xee\x42\xf6\xab\xcc\xb0\x43\xf4\x7d\x1d\x56\xd8\x9b\xf1\x40\xce\xdb\xbb\x01\xe5\xb4\x5f\x29\x1e\x6d\x12\xf0\xdf\x51\xf6\x76\x47\x8c\x41\x5d\xef\xd4\x8c\xa1\x48\x1c\xf2\x95\x66\x49\x5f\x4c\xe7\x68\x8f\xd4\x75\xe7\x15\x1b\x5d\x9c\x41\x99\xf5\xfe\x3b\x27\xd9\x64\x14\x3a\x67\xbb\x97\x6d\x0d\xd3\xd7\x9e\x07\x7c\xdc\x6f\x6c\xfc\xdc\xc7\xd0\xae\x50\xa1\x80\xfb\xdc\xf9\xde\xf3\x6e\xed\xc9\x93\xc0\x91\x69\x7c\x78\x38\x1b\x96\x3d\x11\xf1\xdd\xe1\x9f\x9d\x81\x40\x99\x74\xec\xa5\x14\x16\x1e\xf5\x19\x0c\xd1\xc8\x47\x1f\x5f\x50\x39\xf2\xd1\x4c\x23\xbb\x8e\x23\x12\x8e\x32\xff\xb9\x50\x06\xbb\x8a\xc0\xf1\x0d\x33\x55\xae\x7d\x35\x42\xee\x53\x31\x2e\xbb\xc0\xf2\x93\x2a\xd7\x99\xc3\x20\xb9\x23\xe7\x76\x53\x81\xd8\x6c\x18\xf9\x10\x18\xfc\x98\x0e\x43\x79\xe0\x21\x78\x66\xc1\x75\xd1\x72\xfb\x13\xb1\x82\xda\x15\x66\xbc\x6e\x04\xd6\xd4\xbf\x7a\x73\xf7\x10\x30\xf3\x20\xd0\x50\x25\xa4\xa5\x8b\xe9\x53\xb4\x50\xe2\xac\x75\x15\x3c\xa9\x90\x7e\x55\x83\x9a\x59\x1c\x20\x73\x09\x0c\x6a\x0a\x83\xab\x05\x6a\x04\x6e\x7d\x12\x51\x52\xac\x41\xa8\xaa\xc7\x0a\x18\xcb\x2c\xfa\x34\xef\x60\x28\x55\xcc\x84\x2a\xae\x5d\x82\xd8\x24\x97\xb9\x56\x35\x54\xca\xb5\x0f\x0b\xad\xda\x6a\x11\x42\xdf\x01\x91\x1e\xaa\x35\x3d\xff\xfe\xe3\x0a\xa6\x28\x10\x70\x1d\x8f\x6f\x6b\x48\x59\x64\x42\x61\x67\x3a\xbd\x7c\x2b\x0b\x04\xb3\x96\x45\x46\x4f\x4e\x95\x2f\xfd\x54\x60\x3a\xbd\xbc\xa4\xee\x9f\x9a\x6c\xac\x29\x69\xbb\x2c\xb6\x1d\x1f\xc0\x92\x33\x30\xa8\x97\xa8\x9f\x1a\x02\xf4\xc3\x82\xcc\xe5\x46\x34\x85\xe6\x33\x5f\x0e\x91\x02\x9d\x32\x28\xde\xb3\xee\xf0\x20\xe5\xee\x69\x5b\x11\xaf\x68\xfb\x81\x8f\x17\x09\x3e\x7d\x36\x4a\x4e\x46\x44\x6c\xf4\x29\x8e\x9c\xb4\xdf\x8c\x25\x59\xed\xb0\x42\x9c\x38\x57\xad\xb4\x87\xb0\xb8\x5f\x0e\x58\xba\x07\x4d\xd8\xae\x15\xb9\x17\x77\x17\x1b\x37\xd0\x1b\xdc\x77\xbe\x36\x62\xd5\x3e\xeb\x07\x70\xb7\xd0\x44\xe0\x95\x39\x1f\x18\xca\xdb\x06\x65\x9f\x80\x4b\x2b\x1b\x02\xfc\x00\xb4\x53\x80\x12\x82\xcb\xca\xb1\xf5\x82\x71\xd1\x6a\x7c\x48\x01\xfb\xd0\xfb\x44\x84\x20\x17\xee\x13\x7b\x88\xc8\x00\xfa\x3e\x62\xd3\xb6\x28\xd0\x98\x6f\x24\x16\xa0\x77\x89\x4d\x17\x4a\xdb\xa0\x05\x2c\xbf\x26\xde\x10\x7a\x8f\x56\x8f\xa1\xaf\xab\xea\x1e\x86\xae\x16\x1a\x59\xf9\x4e\x29\xf1\x0b\x52\x2e\x26\xa6\xee\x27\xb2\x0f\xbd\x47\x8f\xd7\xa8\x5a\xfb\x8d\x4c\x05\x68\x22\x72\xee\x0b\xd9\x73\x25\x43\x49\x7b\x79\x83\x45\x4b\x15\x90\x37\xee\x21\x91\xe2\x61\x68\x22\xf8\x9a\x59\x94\xc5\xfa\x4a\x59\x26\x7e\x46\x26\x1f\x36\x6e\xd1\x83\xfe\xbd\x46\x46\x86\xd9\xa5\x7c\xa1\x2a\x17\x1f\x12\x01\x47\x7e\x10\x98\xbd\x76\x3f\x63\xd8\x8b\x21\x2e\x2d\x89\xec\x95\x9c\xab\x8b\x04\x33\x3f\x1e\xa9\x59\xf3\xc1\xfb\xfe\xc7\x4d\x0b\x7d\x7b\x47\xf9\x6b\xe8\xce\x93\x43\x0e\x8c\x59\x3f\x40\x8c\x09\xa9\xe7\xc5\x07\x51\x08\x69\x1b\x17\xb6\x28\x3d\xe7\xdd\xc7\x0b\x28\x5b\x18\x87\x77\xd0\x67\x27\x43\xbc\x43\x51\xc0\x21\x1f\x72\xd5\xc9\xae\x70\xfb\x30\x07\x70\x87\x1e\x3a\x39\x88\x3b\x80\xb9\x97\x46\xe7\x07\x0f\xd1\x08\x30\x7b\x34\x76\xfc\x71\x72\x48\x86\x21\xcc\x3e\x89\xc1\xf1\x87\xd5\x70\xdf\xf1\x07\xbc\x6f\xb2\x8b\xbb\x0f\xb3\x4f\x26\x38\xdd\x43\x2c\x04\x18\x87\xfb\x35\x5f\x9b\x00\x66\x5f\xf1\x5e\x47\x47\xec\x38\xe4\xbe\x0d\x62\xb6\xeb\xb4\xe3\x38\xba\x4b\xe3\x41\xf1\xbd\x5f\x9a\xa4\xc0\x25\xb7\x49\x1a\xa6\x52\xef\x50\x73\x55\xf2\xc2\xcd\x49\x84\xaa\xfc\xd8\x4a\x32\x31\xac\x8e\xa8\xcc\x62\xc6\x70\xe3\x2a\x2b\x83\xd6\x52\x91\x12\xf5\x8a\x28\xbb\xd0\x68\x16\x4a\x94\xc6\x15\x52\xad\x2c\x51\x1b\xcb\x64\xe9\x9a\xc5\xa6\x11\xbc\xf0\xcd\xdb\x0c\x17\x6c\xc9\x95\xce\x1c\xfa\xaf\x72\xae\xb4\x6d\x25\xb3\x28\xd6\xe3\x7e\xd1\x42\x5d\xbb\x7c\x6c\x61\xc1\x96\x08\x0c\x2a\x8d\xcc\xc2\x8a\xad\x89\x15\xbc\x69\x7c\xe9\xca\x8d\xa3\x52\x32\xcb\xc6\x60\x14\xac\x5c\x2d\xab\xb4\x75\xf5\x61\xab\xa5\x1b\xa9\x49\xe0\xd6\x80\x69\x1b\xf7\x42\x87\x6a\xf1\x99\x56\xac\x2c\x98\xd9\x13\xa3\xa6\x1a\xb6\x30\xae\x64\x72\x43\xb4\xfd\xba\x09\x92\xe9\xf4\x32\xf5\xec\x4f\xd1\xcf\xda\xcc\x24\xcf\x1f\x78\x7f\xc3\x8d\x69\xd1\xe4\xa7\xdf\x67\x9b\x62\x2f\x94\x74\x54\xe3\xd3\x6d\xf9\x0b\x89\x02\xce\xd4\x6a\x64\x75\x37\xe1\x9c\x9c\x75\x7a\x71\x13\x9d\xfe\x9e\xab\xc5\x0f\x21\xf9\xe9\xb0\xdb\x16\xdc\x58\x94\x2e\x00\xfb\xc1\xb0\x44\x9b\xbd\x76\x8b\xc9\xc8\x16\xcd\x68\x0c\xa3\x93\x67\xff\x91\x1d\x67\xc7\xd9\xc9\xe4\x78\x14\xda\x8d\x9d\xa9\x6e\xd4\x30\xc9\x8b\xc4\x4f\x67\x5d\x07\x51\xf9\x37\x08\xd9\x94\x34\x94\x6c\x4f\x39\xc4\x4e\xea\xe1\x7b\x92\x76\xaf\x92\x26\x67\x10\xd2\xc4\x1b\x5c\x25\xa3\x15\xab\x1c\x03\xb4\xfd\xc2\xc5\x7b\x59\xac\x09\xe8\x9f\x9b\xb9\xd7\x34\x8c\xbc\xa2\x48\x30\x63\x5d\x22\x99\x22\x4a\x3f\x3f\xdb\xe4\x8e\x9d\x54\x73\x7b\x37\x40\x78\xad\x2a\xf2\xda\x1d\x1c\x47\x9e\xd6\xa9\x63\x8f\x22\xd7\xb5\xfd\x0e\xdd\xe0\x2b\xec\x16\xd7\xc9\xc9\x90\x95\x14\x6e\x61\xd3\x93\x73\xe9\x86\x27\x9c\xec\x99\x68\x44\xad\x16\x74\xcc\x88\x74\x35\xc9\xf3\x11\x3c\x81\x4e\x57\xd9\x8f\x65\xa9\x93\x34\x9b\xba\xe3\xdd\x65\x51\xb7\xf5\x65\x73\x53\x4e\xbf\x6f\x70\x15\x92\x5a\x32\xfa\x9f\xcb\xab\xd1\x18\x5a\x2d\xc6\x74\x31\x1e\xe1\xc0\x5d\x39\xf5\x65\xef\x34\x97\x76\x9e\xf8\x74\x46\x7d\xbc\xc4\xa2\x7b\xfb\xd1\xd9\xfb\x74\x7a\x49\x95\x36\xb2\x7a\x02\xdf\x99\xcd\xf8\x9d\x3e\xd4\xf8\x73\xd9\xa2\xfb\xe7\xd4\x17\x79\xc8\x0d\x7b\xbd\x97\x8e\xd9\xb4\x9d\xf9\x4e\xe2\x37\x6e\x17\xc9\x68\x34\x86\x7f\xf4\x1a\x7d\x3f\x21\xf8\xf2\x6f\x67\x98\x6e\x10\x97\xdb\xe1\xa5\xc7\xcc\x2e\xbd\x23\x87\xa3\x5d\xaf\xbe\x5b\x9b\xf8\xad\xed\xdb\x14\xaa\x7c\xb2\x5f\x65\xcd\xb4\x59\x30\x91\x7c\xf8\x38\x5b\x5b\x4c\x70\x99\x5d\x30\xcb\x92\x34\x1d\xc3\x3f\x70\xff\x5d\xc8\x1e\x5b\x81\x2f\x47\x38\x73\x8d\xd3\xa3\x33\x18\x85\xb3\xcf\x55\x5d\x33\x59\x8e\x1e\x46\x25\x23\x26\x83\xef\x66\x20\x03\x2f\xf8\xe0\xcb\xa8\x8f\x5b\xd0\xbd\x2d\x38\x03\x8c\xfd\x7e\x9e\xbb\x98\xdf\x6f\x9c\x7d\xb8\xe7\x73\xe0\xf6\xb1\x01\xe4\x76\x41\x3d\x6b\x00\x4e\x4e\x52\x07\x3c\xe7\xda\x84\x70\x08\x2b\x7c\xbc\x44\x30\xe4\x81\xa4\xed\x3e\x2d\xd5\xc3\x7c\x96\x0e\xb7\xa8\xf9\xf1\x67\x2d\x98\x81\x62\x41\xd7\x53\x0e\x30\xfe\x99\x92\xd3\x77\xe3\x76\x97\x06\x1a\x66\x0c\x96\x60\x38\x35\xc3\x2b\xf4\x91\xa3\x04\xa3\x6a\xb4\x0b\x32\x94\x1d\x0e\x36\xba\xee\x66\x3e\xd1\x81\x20\xd0\xd3\xcb\x76\x4c\xde\xc1\x6e\xaa\xd9\xae\x86\x4d\xbf\x72\xab\xdd\xed\x1c\x2c\xf4\xe8\xb2\x0f\x97\x80\x7f\x2f\x77\xe1\xb5\x21\x9f\xf7\x70\xc8\x43\x93\xfb\xa8\xa7\xf0\x03\x0c\x22\xee\xdf\xcb\xce\xd6\x23\xe9\xeb\x8e\x30\xee\xd2\xaf\x16\x2a\x7f\x71\x5c\xc8\xe7\x50\x66\x7e\xd8\x32\x1c\xae\x4d\xf6\xa6\x6b\x5d\x7a\xbd\x50\x49\x99\xf5\xa6\x31\xe3\x2e\x63\xf9\x88\xe4\x94\x72\x28\x7a\x85\x59\x17\x6a\xdd\xc9\xe8\x07\x76\xc3\x81\xfc\x0f\x67\x9b\x89\x7c\xe4\xdf\xbc\x61\x49\xa1\x2d\x60\x33\x19\x8e\x71\xa3\x2d\xee\xb2\x63\xdf\x5d\x5c\xa9\x32\x38\x4c\x69\xe3\xb3\xe6\xe9\xfb\xf7\x3e\x6b\xba\xa3\x07\xdc\xdc\x6d\x32\xc5\xde\x40\x2e\xa2\x2c\xf7\xad\x13\x4c\x3f\x95\xfc\x13\x8a\x7a\x78\x98\xb9\xab\xc2\x21\xcf\xf1\x57\xf5\xf7\xff\x56\xdf\x03\xda\xbb\x8b\x87\x7c\x78\xd5\x41\x7e\x04\x52\xc1\x3c\xb4\x3b\x4e\x50\xff\x5e\x6e\x8d\x16\x8e\xf2\xf4\xe0\xa8\xf3\xff\x02\x00\x00\xff\xff\xa3\x76\x07\xee\x4d\x24\x00\x00")

func _hardcodedDoerGoBytes() ([]byte, error) {
	return bindataRead(
		__hardcodedDoerGo,
		"_hardcoded/doer.go",
	)
}

func _hardcodedDoerGo() (*asset, error) {
	bytes, err := _hardcodedDoerGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "_hardcoded/doer.go", size: 9293, mode: os.FileMode(436), modTime: time.Unix(1478288275, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __hardcodedMiddlewareGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x56\xcd\x6e\xdc\x36\x10\x3e\x4b\x4f\x31\x55\x11\x54\x2c\x64\xee\xa9\x17\x07\x3e\x04\x8e\xdd\x04\x70\xd2\x20\x76\x90\x43\x10\x14\xb4\x34\x92\x98\x95\x48\x95\x1c\xad\x6c\x04\x7e\xf7\x62\x48\x69\x57\x1b\xdb\x6d\x4f\x3d\x78\xcd\xe5\xfc\x7f\x33\xf3\x71\x07\x55\x6e\x55\x83\xe0\xd1\xed\xd0\xa5\xa9\xee\x07\xeb\x08\xf2\x34\xc9\xea\x9e\xb2\x34\xc9\x0c\xd2\xa6\x25\x1a\xf8\xec\x46\x43\xba\xc7\x4d\x85\xb7\x63\x93\xa5\x69\x92\x35\x76\xd8\x36\x52\x9b\xcd\x79\x87\x3b\x74\x9b\xad\xba\xdf\x21\x9e\x34\x56\xee\x7e\xdb\x74\xb6\x69\xd0\x65\x69\xb2\xdd\xbd\xd3\x55\xd5\xe1\xa4\x1c\xc2\x3f\xdb\xf4\x7b\x45\xf6\x6f\x07\x34\xe4\x54\xa9\x4d\x03\x59\xa3\xa9\x1d\x6f\x65\x69\xfb\xcd\xea\x7e\x7d\x3e\x69\x6c\x96\x8a\x34\xad\x47\x53\xc2\xa4\xa9\x3d\x84\xcd\xb9\x42\x5d\xe2\x7b\xd5\x23\x78\x72\xda\x34\x05\x38\x3b\x12\x3a\xe0\xf2\xe4\x1b\x65\xaa\x0e\x9d\x38\xfa\x06\xdf\xd3\xa4\x9d\x8f\xa7\x67\x30\x87\x59\x79\x8d\x1e\xc4\x41\xeb\x0c\x06\x65\x74\xb9\x52\x99\x25\x22\x4d\x36\x1b\xb8\xb2\x4d\xc3\xc5\x1c\xca\x84\xd2\xf6\xe8\xa1\x53\x9e\x0a\xd0\x12\x25\x4c\xba\xeb\xe0\x16\xc1\x8d\x06\x6a\xed\x3c\xc9\x60\x7a\xd3\x6a\x0f\xbd\xda\xa2\x07\x4d\xe0\x2d\x50\xab\x08\x2c\xb5\xe8\xd6\xee\x5a\xe5\x41\x95\x25\x7a\x0f\xc4\x3a\x08\xb1\x0d\xc1\x47\x30\x39\xea\x86\x36\xdf\xb0\x24\x0f\xda\xcc\xda\x0e\xff\x1a\xd1\x13\x94\xd6\x10\xde\x71\xec\x43\x69\x6b\x4b\xf9\x1e\xa7\xa5\xb6\x02\x56\xe8\x8a\x34\x71\x48\xa3\x33\x30\x4b\xd3\x87\x34\xdd\x6c\x7e\xc4\x85\xd3\xf2\xa0\xcc\x7d\x14\x78\x09\x97\xd6\x81\xb1\x53\x01\x13\xfe\x12\x70\x31\xa4\xcd\x88\x40\xad\xb3\x13\x83\xc6\xe9\x05\x65\x18\x87\x34\x54\xc3\xad\x54\xe5\x36\xa2\x11\xe0\xb9\x87\xd2\x29\xdf\x46\x5d\x67\x19\x07\x19\xe7\xe1\x51\x5f\xfe\xa5\xef\x4b\x11\xab\xeb\xcb\xd1\x94\x39\x3b\xcb\xa7\x78\xff\x11\xfd\x60\x8d\xc7\xcf\x4e\x13\xc3\xe0\xe0\xd7\xf9\x3e\x80\x28\xd8\x4f\x52\x61\x8d\x0e\x82\x59\xbc\x48\x42\x2a\x17\x2e\xcc\x94\xc3\xd2\xee\xd0\xe5\x82\x05\xba\x86\xbd\xec\xec\x0c\x8c\xee\xa2\xc1\x9c\x0c\x1f\x1f\xf8\x63\xa7\x1c\xa0\x0b\x7f\xd6\xa5\x7c\xe3\x27\x4d\x65\x0b\x6b\xcf\xcb\x59\xe6\x74\x3f\xe0\x1c\xba\x54\x7e\x99\xff\xd3\xe0\x99\xdd\x9c\x41\xdd\x93\xbc\x60\x67\x75\xbe\x98\x89\xbd\x7a\x88\xb2\xd6\x5e\x54\xf8\xaa\xc2\x5a\x8d\x1d\x3d\xe3\x2c\x1b\xcd\xd6\xd8\xc9\xcc\x7d\x7b\xf1\xf3\x0e\x6c\x0d\x9c\x0f\xbc\xb8\xc9\x8a\xbd\xa7\xc3\x49\xc4\x22\xf9\x33\x0e\xae\xbc\x74\xb6\x3f\x8f\xd3\x98\x3b\xb9\x9c\x84\x88\x31\x5e\xe7\x59\x30\xcd\x8a\x90\xc1\x6c\xf3\xee\x7b\x86\xce\x65\xa7\x9c\x7b\x01\x59\x98\x12\xde\x5e\xcc\x4e\xe7\xea\xf3\x40\x62\xf2\x9a\x25\xb9\x10\x0f\x62\xdf\x98\x23\x04\x1e\x42\x63\x5a\x79\xcd\x04\xf9\xe6\xe6\xe6\x43\x3e\x15\xc0\x92\x07\x31\xcf\xf5\x23\x52\x80\xd2\xa1\x22\xf4\xa0\xc0\xe0\x04\x7e\x50\x06\x8c\xea\xb1\x02\x55\x33\xdd\xf0\x68\x7e\xfa\x78\x05\x83\xa2\x36\xa0\x71\xd8\x3a\xc9\x0e\xdf\x12\x0c\x9d\x2a\xd1\xc7\x99\x0e\xf6\xda\x3c\xb5\x9c\x05\xd4\xd6\xc1\xe8\x11\x6e\xef\x67\x26\x98\x77\xce\xc3\x4e\x2b\x58\x51\xa3\xbc\x1e\x94\x59\x23\x29\x42\xa8\x1a\x54\x0c\x80\x77\xda\x07\x1a\xd8\xc7\x68\x51\x55\xe8\x7c\x11\xd7\x8c\x75\x62\x5d\x15\x07\x8b\xdb\x76\x28\x79\xe1\x2c\x05\x65\xab\xbb\x2a\x96\xa5\x28\xd8\xcd\xfb\xf7\x98\x3c\xff\xb7\x0d\xdc\x6c\xe0\x15\x11\xf6\x03\x31\x27\x7e\xb3\xda\x2c\x65\xdf\xde\x43\x83\x44\x81\x5d\x78\x3c\x40\x9b\xda\x42\xed\x6c\x1f\xca\x9e\x31\x90\x69\x92\xd8\x21\x3c\x1d\xbc\xb1\xf2\xd3\xc7\x2b\xf9\x41\x51\x9b\xc6\x4d\xf4\xc3\x23\xa4\xd3\xb0\xcb\xbe\x2c\xc2\x9a\x9e\x9e\x1d\x29\xfc\xde\xd9\x5b\xd5\xdd\x70\x3c\x97\x0b\x76\x9e\x5c\xdc\xb1\x90\xf2\xb5\x1a\x4f\xdb\x9b\xb9\x09\x61\xb6\x9f\x11\x9e\x2b\xe7\x34\xba\xdc\xc9\x78\x21\xc4\xcb\x10\xf5\xa7\x15\x81\xf8\x01\x8e\x73\xb8\x26\xe5\x88\x33\xcd\x63\x61\x61\xd6\x01\x3b\x8f\xff\xd1\xa0\x38\x92\x9e\x73\xd7\xff\xa8\x73\x5f\x8a\xe0\x69\x4f\x7b\x7e\x90\x97\xda\x68\xdf\xe6\x22\x8d\x9d\x88\x2f\x4e\x84\xff\xed\xeb\xf8\xf0\x84\xb7\x80\x2c\x28\x5d\xad\x47\x30\xac\x28\xbf\x97\x69\x92\x10\xa3\xc8\xcf\x5f\xde\xab\xe1\x4b\xdc\xe1\xaf\xf1\x9f\x88\x68\xcf\x48\xfb\x41\xee\xa1\x7d\x1b\x62\xe5\x7e\x38\xd0\xc6\x71\xde\x37\x78\x47\xef\xd4\x10\xf0\x7d\xe2\x7e\x81\x96\x16\x4c\xd7\xa4\xcc\x0d\x66\xaa\xa8\x0a\xb0\xdb\xf0\xf3\xe0\x4b\x66\xe9\x24\xcc\x91\x3b\x89\xa2\xec\xeb\x4b\x16\x7e\x5f\x73\xd3\xb3\x7c\xf6\xaa\xaa\x96\x6f\x8f\x1d\x15\x73\x30\xb1\x3c\x02\x81\x23\xfd\x20\xaf\x6c\x73\xb1\x43\x43\x79\x36\xc3\xf6\xa7\xc3\x12\xf5\x0e\xab\x4c\x3c\xf9\xfa\x3c\x69\x53\x87\x26\xcd\x36\x91\xf4\x0c\x4e\xe7\x74\xf7\xe3\xf0\xce\x19\x7e\xd6\xd4\x86\x69\x70\x6b\x68\xfd\x10\xba\xfc\x23\x5d\x4a\xd6\x5e\xd4\xa2\x5b\xb1\x50\xe8\xdf\x01\x00\x00\xff\xff\x29\x98\x17\x0d\x82\x0a\x00\x00")

func _hardcodedMiddlewareGoBytes() ([]byte, error) {
	return bindataRead(
		__hardcodedMiddlewareGo,
		"_hardcoded/middleware.go",
	)
}

func _hardcodedMiddlewareGo() (*asset, error) {
	bytes, err := _hardcodedMiddlewareGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "_hardcoded/middleware.go", size: 2690, mode: os.FileMode(436), modTime: time.Unix(1478117034, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"_hardcoded/doer.go":       _hardcodedDoerGo,
	"_hardcoded/middleware.go": _hardcodedMiddlewareGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"_hardcoded": &bintree{nil, map[string]*bintree{
		"doer.go":       &bintree{_hardcodedDoerGo, map[string]*bintree{}},
		"middleware.go": &bintree{_hardcodedMiddlewareGo, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
