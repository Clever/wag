// Code generated by go-bindata.
// sources:
// _hardcoded/doer.go
// _hardcoded/middleware.go
// DO NOT EDIT!

package hardcoded

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __hardcodedDoerGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xa4\x54\x51\x6f\xdb\x36\x10\x7e\x96\x7e\xc5\x55\xc0\x50\x69\xf5\xe4\xbc\xf4\xa5\x5d\xb1\x07\xa7\x5d\xfa\xb0\x65\xe8\x8c\x6d\xaf\xb4\x48\xc9\x6c\x24\x92\x23\xa9\x24\x46\xe0\xff\xbe\x3b\x92\x92\x65\xa7\x28\x06\x24\x08\x60\x91\x77\xfc\xee\xfb\x8e\x1f\xcf\xb0\xe6\x8e\x75\x02\x9a\x5e\x0a\xe5\xf3\x5c\x0e\x46\x5b\x0f\x65\x9e\x15\x8d\x56\x5e\x3c\xfa\x02\x3f\xdb\x21\xfc\x28\xe1\xd7\x7b\xef\x4d\x91\xe7\x99\x36\x98\x6f\x59\x23\x55\x07\x45\x27\xfd\x7e\xdc\xd5\x8d\x1e\xd6\x8b\xfd\xe5\xf7\x4f\x9d\x26\x84\x4e\xf7\x4c\x75\xb5\xb6\xdd\xfa\x71\x4d\x70\xa9\xc8\xba\xf1\x8f\x11\xb9\xca\xf3\xf5\x1a\xb8\x16\x16\xa4\x03\xa6\x40\x62\x82\x6d\x59\x23\xa0\xd5\x16\x0a\xae\x11\xad\x00\x4a\x06\x2b\xfe\x1d\x85\xf3\x0e\x8c\x76\x4e\xee\xfa\x03\x3c\x20\x11\x78\xb0\xcc\x18\xcc\xca\xfd\xc1\x88\x04\x35\x83\x3c\xe5\xd9\xb5\x2e\x1b\xf8\x91\x10\xea\x4d\x90\xbd\x02\x9b\xd6\x5f\x22\x62\x05\xe5\xb4\x76\x46\x2b\x27\x56\x20\xac\xd5\xb6\xca\x8f\x79\x44\xd5\xe6\x77\x36\x88\x8d\x7f\x04\xe7\xed\xd8\xf8\xa7\x63\xe0\xbd\x63\x4e\x24\x8c\x1b\xa6\x78\x8f\xa5\x0d\x16\xd6\x76\x70\xe0\xf7\x22\xc4\xcf\xb8\x47\x34\xda\xbe\x26\x9e\x27\xb0\x76\x54\x0d\x94\x7c\x0e\x55\xf0\x02\xda\xa4\xda\x0a\x3f\x5a\x05\xa9\xd1\x35\xa2\xd9\x7a\x13\xbb\x5f\x56\x2b\x68\x10\x2d\xc8\x43\x15\xe9\xce\x02\x23\xc6\xb9\x9b\x36\xc0\xeb\xf3\xc6\x47\xf6\xcb\xf4\x28\x80\xea\xf1\xd0\xf9\x7c\x21\x65\x91\xf7\x52\x35\x79\x86\x3a\xe0\xdd\x07\x58\x68\x20\x4f\xd2\xa5\xd0\x36\x46\xeb\xbf\x58\x3f\x8a\x72\xbe\xa8\xa7\x63\x55\x97\x48\x0f\x19\x60\xea\x3d\x43\xae\x06\x16\x0e\xad\xff\x34\x4c\xe5\x19\xca\xdf\xde\x5e\xdf\xbe\x23\xe1\xe0\x59\xe7\x50\x6c\xcf\x7c\x52\x2f\x95\x19\x3d\x70\xe6\xd9\x2f\x79\x26\x5b\x30\xcc\x22\x00\x9d\xa4\xaa\x97\x68\x9f\xac\x1e\x26\x7a\xc8\xa8\x7a\xbf\xcc\x7f\xf5\x01\x94\xec\xa9\x53\x19\x12\xb9\x38\xec\x99\x0d\x59\x89\xfe\xea\x2c\xba\xd9\xcb\x9e\xdf\xb6\xe5\x09\xec\xd4\x84\x0a\xb5\x1d\x41\xf4\x4e\xfc\x3f\x64\x4a\x0f\x4a\xb0\xb5\x24\xc1\x99\x7a\x8b\xa9\xc2\x96\x55\xfd\x59\x7d\x15\x8d\x2f\x71\xeb\xe4\x13\xc4\x5c\xc2\xdd\x6c\xb7\x7f\xdc\x08\xc6\x85\x75\xdf\x09\x6d\x98\xb5\x12\x21\x6d\x1d\x37\x2a\xec\x04\xd5\x5b\xb4\x20\xb9\x13\x97\x2b\xc0\x69\x53\x7f\xa4\x9b\x6e\x4b\x1c\x42\x63\xcf\xd5\x6b\x8f\x9d\x27\x32\xb3\x13\xf7\x11\x19\xca\x1f\xee\xab\x22\x18\x23\x2a\x49\x38\xbc\xe6\xe4\xf0\xa5\xa9\x31\x62\x0f\xd3\xa3\xa4\x85\x14\x0e\xde\x5e\xfd\xf3\x2d\x47\x87\xdc\x67\x7e\x3e\xfb\x0b\xe6\xce\xb8\x68\xd9\xd8\xfb\x2f\x09\x0e\xc7\x4c\xaa\xf6\x37\x0e\xa2\x69\x37\x72\xc2\x61\x06\x4a\x3c\x40\x9a\x78\x38\x0e\x98\x07\x7d\x8f\xcc\x25\x17\x71\x3a\xa8\x71\xd8\x61\x4d\xdd\xce\xfc\xd0\x72\x5c\x87\xc1\xc7\xc8\x3b\x5e\x36\x63\xcf\x6c\x94\x13\x08\xd7\xf1\x75\x2d\xca\x91\xd3\xa6\x22\xd3\xc5\xad\x66\x40\x64\x58\x5d\x46\x97\xd3\x21\x45\x08\x2f\xbe\x1f\x44\x8b\xa7\x0f\x29\xfb\xe9\x38\xa3\x9d\xb5\x76\x02\x93\x51\xcb\x9d\x38\x84\xdf\x10\x23\xdc\x56\x76\xa3\xc5\x87\xa4\x55\x0d\x9f\x50\x10\x17\x03\x3e\x6a\x1f\xb7\xc0\x8c\x16\x87\x38\x11\xf4\xaf\x1d\x7c\x1d\x9d\x47\xc5\x78\xf9\xd8\x50\x2c\x80\x1d\xf9\x76\x7f\xac\xec\xf6\x1e\x94\x7e\xa8\x17\x17\x37\x31\x79\x3e\x4c\xe7\x7b\x7d\xf9\xfc\xb1\xb8\xb9\x9a\x5e\xcd\x99\xdd\xa6\xd7\xf4\xdc\xdd\xf3\x19\xb2\x6a\x18\x35\x9f\xdb\xd4\xa4\x50\x11\x1a\x46\x56\xdf\x89\xa4\x8f\x53\x50\xc5\x6e\x24\x08\x39\x0c\x82\x4b\xe6\x45\x7f\x88\x6d\xf4\x7b\x6c\xb8\xb1\x1a\x9b\x82\xff\xd8\xe7\x46\x18\xf4\x95\xea\x0f\xa1\xc0\xaf\x1f\xb7\x8e\x60\x17\xa0\x81\xa0\xad\x7f\x13\x7e\xaf\x39\xb1\x2c\x30\xa9\xf8\x0e\x4f\x9a\x95\x0b\xff\x04\xb3\xd0\x02\xa7\xd2\xdd\xc5\x0c\x4e\x43\xf7\xdc\x2f\x38\x77\xc9\x76\xa1\xee\x2b\x3c\x92\x2a\x05\xbc\xd0\xbb\xb3\x47\x14\x6b\x92\xe5\x25\x81\x5f\xbd\xc7\xdf\x9f\xa7\xfa\xb8\x78\xf3\x26\x00\x90\x06\xa4\x49\x03\xcd\x8f\x6e\xa3\xb9\xc0\xac\xb7\x57\x57\x21\x98\xed\xac\x60\x77\xf8\x71\x0c\xa5\xa6\x9b\xba\xbc\xa8\xd3\xbc\x38\x29\xc6\xe2\xff\x05\x00\x00\xff\xff\xbe\xf4\x27\xca\x14\x09\x00\x00")

func _hardcodedDoerGoBytes() ([]byte, error) {
	return bindataRead(
		__hardcodedDoerGo,
		"_hardcoded/doer.go",
	)
}

func _hardcodedDoerGo() (*asset, error) {
	bytes, err := _hardcodedDoerGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "_hardcoded/doer.go", size: 2324, mode: os.FileMode(436), modTime: time.Unix(1475096337, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __hardcodedMiddlewareGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x56\x5f\x6f\xdb\x36\x10\x7f\x8e\x3e\xc5\x4d\x43\x31\x69\x50\xe8\xa7\xbd\xa4\xc8\x43\x91\x26\x4b\x80\xa6\x2b\x1a\x17\x7d\x28\x8a\x81\x91\x4e\x16\x6b\x99\xd4\x48\xda\x4e\x10\xe4\xbb\xef\x8e\xa4\x6c\x39\x7f\xb6\x3d\xed\x21\x31\x7d\xbc\xfb\xdd\xdd\xef\xfe\xd0\x83\xac\x97\x72\x81\xe0\xd0\x6e\xd0\x66\x99\x5a\x0d\xc6\x7a\x28\xb2\xa3\xbc\x5d\xf9\x9c\x3e\x34\xfa\x59\xe7\xfd\xc0\x67\xbb\xd6\x5e\xad\x70\xd6\xe0\xed\x7a\x91\x67\x24\x59\x98\x61\xb9\x10\x4a\xcf\xce\x7a\x24\x80\xd9\x52\xde\x6f\x10\x8f\x17\x46\x6c\x7e\x9b\xf5\x66\xb1\x40\x4b\x86\xcb\xcd\xb5\x6a\x9a\x1e\xb7\xd2\x22\xfc\xb3\xcd\x6a\xa7\xc8\xf8\x66\x40\xed\xad\xac\x95\x5e\x90\x9d\xf2\xdd\xfa\x56\xd4\x66\x35\x9b\xc8\xa7\x67\xc2\xc8\xb3\x32\xcb\xda\xb5\xae\x61\x4b\xea\x7b\xb7\x05\x67\xa8\x6a\xfc\x28\x57\x94\xad\xb7\xa4\x5d\x81\x35\x6b\x8f\x16\x38\x3d\x71\x29\x35\xa9\xda\xf2\xe0\x1b\x3c\x64\x47\x5d\x3a\x9e\x9c\x42\x72\x33\x41\x8d\x08\xe5\x5e\xeb\x14\x06\xa9\x55\x3d\x51\x49\x37\xa4\x33\x9b\xc1\x07\xa2\x84\x93\xd9\xa7\x09\x94\x0f\x3a\xe8\xa5\xf3\x15\x28\x81\x82\x02\xef\x7b\xb8\x45\x20\xb6\xa1\x55\xd6\x79\x11\x4c\xe7\x9d\x72\xb0\x92\x4b\x52\x56\x1e\x9c\x01\xdf\x49\x0f\xc6\x77\xe4\x75\x02\xd7\x49\x07\xb2\xae\xd1\x39\xf0\xac\x83\x10\xcb\x10\x30\x82\xc9\x41\x35\x94\xfe\x81\xb5\x27\x48\x9d\xb4\x2d\xfe\xb5\x46\xe7\x29\x2c\xed\xf1\x8e\x7d\xef\x53\x9b\x5a\x8a\x8f\xb8\x1d\x73\xab\x60\xc2\x2e\x25\x6a\xd1\xaf\xad\x86\x74\x9b\x3d\x66\x19\xf9\x7e\xc2\x0b\x87\x45\x91\xea\xfb\x78\xe1\x04\x5c\x18\x0b\xda\x6c\x2b\xd8\xe2\x2f\x81\x17\x6a\x36\xbd\x46\x8a\xca\x9a\x2d\x93\xc6\xe1\x05\x65\x58\x0f\x59\xc8\x86\x4b\x49\x1d\x1c\xd9\x08\xf4\xdc\x43\x6d\xa5\xeb\xa2\xae\x35\xcc\x83\x88\xfd\xf0\xac\x2e\xff\x52\xf7\x31\x89\x89\xf8\x82\x70\x0a\x06\x2b\xb6\x51\xfe\x19\xdd\x60\xb4\xc3\xaf\x56\x79\xa6\xc1\xc2\xaf\x49\x1e\x48\x2c\x19\xe7\xa8\xc1\x96\x10\x83\x59\x14\x1c\x85\x50\xce\x6d\xe8\x29\x8b\xb5\xa1\x29\x28\x4a\xbe\x50\x2d\xec\xee\x4e\x4f\x41\xab\x3e\x1a\xa4\x60\xf8\xf8\xc8\xff\x36\xd2\x02\xda\xf0\x67\x68\x6a\x49\xe2\xa8\xdd\xeb\x0e\xa6\xc8\xe3\x59\x14\xfe\x7e\xc0\xe4\xba\x96\x6e\xec\xff\x93\x80\xcc\x30\xa7\x40\xc3\x2e\xce\x19\xac\x2d\x46\xb3\x72\xa7\x1e\xbc\x4c\xb5\x47\x15\x16\x51\x76\x72\xdd\xfb\x57\xc0\xf2\x2f\x7a\x49\x35\xd5\xa9\x6e\x6f\x7e\xde\x80\x69\x81\xe3\x81\x37\xf3\xbc\xda\x21\xed\x4f\x65\x4c\x92\xff\xc7\xc6\x15\x17\xd6\xac\xce\x62\x37\x16\x56\x8c\xa7\xb2\x8c\x3e\xde\x17\x79\x30\xcd\xab\x10\x41\xb2\xb9\x7e\xc8\x29\x96\xfc\x84\x63\xaf\x20\x0f\x5d\x72\xcc\xe3\x8b\x24\x8b\xe9\x17\x61\x8b\x89\x1b\xbe\x22\xb4\xc7\x72\x57\x99\x03\x0a\x1e\x43\x65\x3a\x71\xc3\x1b\xf2\x72\x3e\xff\x54\x50\x87\xf2\x0d\x19\xc4\xc6\x7e\xb6\x15\xa8\x05\x51\x7a\x9a\x53\x09\x1a\xb7\xe0\x08\x0e\x34\x4d\x46\x03\xb2\xe5\x7d\xc3\xbd\xf9\xe5\xf3\x07\x4a\xd9\x77\x81\x8e\xfd\xd8\x09\x06\xbc\xf2\x30\xf4\x14\xaa\x8b\x4d\x1d\xec\x95\x7e\x69\x3a\x2b\x68\x69\x68\xd6\x54\xa3\xdb\xfb\xb4\x0a\xd2\xd0\x39\xd8\x28\x09\x93\xdd\x28\x6e\x08\x66\x4a\x65\x19\x5c\xb5\x14\x64\x70\x80\x77\xca\x85\x3d\xb0\xf3\xd1\xa1\x6c\x08\xa8\x8a\x73\xc6\x3a\x31\xaf\x86\x9d\xc5\x71\xdb\xa7\x3c\x2e\x2d\x09\x75\xa7\xfa\x26\xa6\x45\xcb\x86\xed\xd2\x00\x3e\xdf\x9e\xff\xdb\x08\x52\xa6\xef\xbc\xc7\xd5\xe0\x79\x29\xfe\x30\x94\x65\x4a\x9b\x52\x59\xa0\xf7\x61\xbd\x70\x7b\x10\x01\xad\x81\x96\x78\x0a\x69\x27\x0e\x68\x0b\xd2\x5b\x14\xde\x0e\x1e\x59\x41\xd5\x13\x9f\xa8\x7a\x59\x1c\x45\x37\x3c\x63\x3a\x0b\xc3\xec\xea\x2a\xcc\x29\x19\x4d\x15\x7e\xef\xcd\xad\xec\xe7\xec\x8f\x06\x9f\xc1\x8f\xce\xef\xf8\xd2\x17\x53\x35\xee\xb6\xcb\x54\x84\xd0\xdc\xaf\x5c\x9e\x49\x6b\x15\x21\x59\x11\x05\x65\xf9\x36\x78\xfd\x69\xb2\x41\x28\xc4\xc3\x18\xa8\xef\xad\xe7\x48\x8b\x98\x58\xe8\x75\xc0\x9e\x7a\xe9\xbf\x19\x54\x07\xb7\x67\x5c\xf5\x3f\xda\xc2\xd5\x65\x40\xda\xed\x3d\x37\x88\x0b\xa5\x95\xeb\xa8\xe1\x62\x25\xe2\x93\x13\xe9\xbf\x7a\x1f\x5f\x9e\xf0\x18\xd0\xa7\x54\xcd\xb4\x05\xc3\x88\xf2\x83\x49\x96\x9e\x59\xe4\xf7\xaf\x58\xc9\xe1\x5b\x9c\xe1\xef\xf1\xa3\x8c\x6c\x27\xa6\xc9\xe3\x8e\xda\xab\xe0\xab\x20\xd1\xae\xed\x0f\xe3\x9e\x93\xec\x5a\x0e\x81\xdf\x17\xe4\x23\xb5\x7e\xe4\x74\xba\x95\xb9\xc0\xbc\x2a\x1a\x82\x5c\x86\xdf\x07\xdf\x72\xe3\xe3\x9a\xb1\xc7\xf1\x2a\xff\xfe\x96\x2f\x1f\xa6\xcb\xe9\xd5\x85\xf6\xae\x69\xc6\x6f\xcf\x81\xaa\xe4\xac\x1c\x5f\x81\xb0\x24\x29\x33\xfa\x4d\x71\xbe\xa1\xc8\x8b\x3c\xd1\xf6\x27\xbd\x29\xa8\x36\xd8\xe4\xe5\x8b\xcf\xcf\x8b\x36\x6d\x28\x52\xb2\x89\x4b\x8f\x96\xd7\x99\xbf\x7b\xda\xbc\x29\xc2\xaf\xf4\xf3\x2a\x74\x83\x9d\x52\xeb\x86\x50\xe5\xa7\xeb\x52\xb0\xf6\xa8\x16\x61\xcb\x71\x85\xfe\x1d\x00\x00\xff\xff\x1f\x6b\xf2\xf3\x83\x0a\x00\x00")

func _hardcodedMiddlewareGoBytes() ([]byte, error) {
	return bindataRead(
		__hardcodedMiddlewareGo,
		"_hardcoded/middleware.go",
	)
}

func _hardcodedMiddlewareGo() (*asset, error) {
	bytes, err := _hardcodedMiddlewareGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "_hardcoded/middleware.go", size: 2691, mode: os.FileMode(436), modTime: time.Unix(1475097820, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"_hardcoded/doer.go":       _hardcodedDoerGo,
	"_hardcoded/middleware.go": _hardcodedMiddlewareGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"_hardcoded": &bintree{nil, map[string]*bintree{
		"doer.go":       &bintree{_hardcodedDoerGo, map[string]*bintree{}},
		"middleware.go": &bintree{_hardcodedMiddlewareGo, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
