// Code generated by go-bindata.
// sources:
// _hardcoded/doer.go
// _hardcoded/middleware.go
// DO NOT EDIT!

package hardcoded

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __hardcodedDoerGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x59\x6f\x8f\xdb\x36\xd2\x7f\x2d\x7d\x8a\xa9\x80\xb6\x52\xea\x48\x9b\x16\x79\x1e\xc0\xe9\xf6\xd0\x3a\x9b\x4b\x80\x34\x09\xea\xed\xb5\x40\x51\xb4\xb4\x34\x96\xd8\x95\x48\x95\xa4\xec\x35\xb6\xfb\xdd\x0f\x43\x52\xb6\x64\x6b\x9d\xdc\xa5\xb8\x7d\x11\xdb\xe4\xcc\x8f\xf3\x9f\xc3\x49\xcb\xf2\x1b\x56\x22\xe4\x35\x47\x61\xc2\x90\x37\xad\x54\x06\xe2\x30\x88\x72\x29\x0c\xde\x9a\x28\x0c\x22\x14\xb9\x2c\xb8\x28\xb3\x3f\xb4\x14\x76\x41\x29\xa9\x34\x7d\x5b\x37\x96\xa2\x96\x25\x7d\x08\x34\xfe\x23\xab\x8c\x69\xe9\xbb\xde\x89\x9c\x3e\x0d\x6f\x30\x0a\xc3\x20\x2a\xb9\xa9\xba\x55\x9a\xcb\x26\x63\x6b\xbc\xcd\xaa\x9d\x36\x8a\xdf\x3e\x2e\x65\xff\x35\x1a\x53\x15\x52\xc8\x0d\x13\x15\x2f\x30\xc3\x0d\x0a\xa3\x65\xa7\x72\x8c\xc2\x40\xb6\x28\x8c\x62\x39\x17\x25\x0c\x39\x06\xeb\xc3\xef\x8f\x4b\x69\xa1\x65\xcd\x44\x99\x4a\x55\x66\xb7\x19\x89\xea\x35\xcd\x72\x73\xeb\xa5\xae\x65\x59\xa2\x82\xa8\x94\xed\x4d\x99\x72\x91\x2d\x6a\xdc\xa0\xca\x6e\xd8\x6e\x83\xf8\xb8\x94\xe9\xe6\x69\xe6\x88\xa2\x30\x09\xc3\x2c\x83\x42\xa2\x02\xae\x81\x09\xe0\xc2\xa0\x5a\xb3\x1c\x61\x2d\x15\x44\x85\xe4\xa2\x8c\x80\xa0\x41\xe1\x9f\x1d\x6a\xa3\xa1\x95\x5a\xf3\x55\xbd\x83\x2d\x37\x15\x6c\x15\x6b\x5b\x2e\xca\xd0\xec\x5a\xf4\x50\x7b\x90\xbb\x30\x78\x2e\xe3\x1c\x1e\x11\x42\xba\xb0\x9e\x9a\x81\xf2\xbf\x7f\x70\x88\x09\xc4\xfd\x6f\xdd\x4a\xa1\x71\x06\xd6\x49\x49\x78\x1f\x3a\x54\xd9\xbe\x61\x0d\x2e\xcc\x2d\x68\xa3\xba\xdc\xdc\xdd\x5b\xb9\x57\x4c\xa3\xc7\x78\xc9\x44\x51\xa3\x82\x16\xd5\x5a\xaa\x46\x83\xa9\xd0\xee\x8f\x64\x77\x68\xb4\xfc\x9c\xe4\x3c\x80\xad\x3b\x91\x43\x5c\xec\xb7\x12\xf8\x08\xb1\x49\x6b\x85\xa6\x53\x02\xbc\x5b\xd2\xe7\x32\x56\xe9\xc2\xf9\x2a\x4e\x66\x90\xcf\xc0\xa9\x97\x65\xe0\x3d\x6c\x25\x62\x45\xa1\xfb\x05\x30\x72\x6c\x78\x27\xfd\x90\xdc\x29\x40\xe7\x15\xd6\xf2\xe1\x40\x95\x01\xdd\xc7\x6a\x13\x06\xb9\xb9\x85\xf9\x25\x0c\x74\xa0\x08\x26\xa7\xd0\x72\x6e\x6e\xd3\x7f\xb1\xba\xc3\x78\xef\xa8\xbb\xfb\x24\x8d\x29\x23\x44\x99\x84\xc1\x86\x29\xd0\x2d\x0c\xe2\x39\x5d\xb6\x4c\x84\x41\x96\xc1\xf5\xdb\xe7\x6f\xe7\xa4\x38\x18\x56\x6a\x50\x58\x33\xe3\xb5\xe7\xa2\xed\x0c\x14\xcc\xb0\x7f\x84\x01\x5f\x43\xcb\x14\x0a\x43\x9c\x74\xea\x31\xda\x0b\x25\x9b\x5e\xbc\xdc\xdc\x26\xcf\x86\xf4\x9f\x5c\x82\xe0\x35\x59\x2a\xd0\x2d\x1c\x31\x1b\xa6\x2c\x95\x17\x7f\x36\xda\x5d\x54\xbc\x2e\xde\xae\xe3\x03\xd8\xc1\x08\x49\x12\x06\xf7\x80\xb5\xc6\x0f\x43\x26\x72\xab\x09\x2a\x45\x2a\xe8\x36\xbd\x56\x2c\x47\x15\x27\xe9\x2b\xf1\x07\xe6\x26\xd6\xed\x20\x4e\xc2\x60\x58\x27\xd2\x97\xd7\xd7\xef\x5e\x22\x2b\x50\xe9\x33\x5b\x0b\xa6\x14\x47\x15\xab\xd4\x2d\x24\xc9\x33\x7b\xde\xc0\x04\x3e\x3a\x05\xaf\x67\xb0\x6e\x4c\x7a\x45\x9e\x5e\xc7\x51\x2e\xbb\xba\x10\x9f\x1b\xe0\x56\x98\x7d\x24\x56\x0e\x19\xe2\x4f\x37\x49\x64\x03\xc3\x69\xe2\x71\x8a\xb4\xa0\x08\x1f\x06\xb5\x42\xa3\x76\x7d\x52\xd2\x0f\x8e\x1a\x9e\x5e\xfc\x3c\x15\xd1\x96\xf6\x24\x9e\x47\x7f\x36\xb8\x83\x02\xd7\xac\xab\xcd\x0f\x1e\x8e\x0b\xe3\x4f\xfb\x89\x9b\xaa\x5f\x75\x32\x69\x60\x20\x70\x0b\xbe\x3e\x82\xa9\x98\x01\xb9\x41\xa5\x78\x81\xae\x3a\x88\xae\x59\xa1\x02\xb9\xde\xcb\x67\x24\x14\xd2\x16\x3e\x46\xb1\x63\x78\xde\xd5\x4c\x39\x75\xac\xc0\xa9\xcb\xae\xc1\x71\x14\x69\xfd\x21\xbd\xe3\x66\x7b\x40\x2e\x4c\x72\xbc\x3b\xac\x0e\x7e\x87\xf0\x5c\xfe\xe4\xe6\xd6\x71\xef\x3c\xf5\xdd\xfd\x1e\x6d\x64\xda\x1e\x8c\x3b\x5d\x6e\x70\x67\x3f\xed\x1e\xe1\xae\x79\xd9\x29\x66\xb8\x14\x29\xbc\x90\x0a\x0a\x6c\xa4\xd0\xc6\x2d\x41\xdb\xa9\x56\x6a\x12\xd0\x7c\xae\xe1\x8f\x4e\x1b\x60\x90\xcb\x4e\x18\x3a\x40\xae\x1f\xb0\x8f\xe2\x65\x65\x40\xc8\x6d\x3a\x70\x5c\x2f\xc9\x69\x31\x7d\xb4\x77\xec\xc7\x17\x20\x85\xba\x9d\xf5\x69\x33\x8a\xb7\x3e\x9d\x4e\xc3\x7b\xcf\x43\xb1\x6a\x6b\xcd\xab\xb5\xb7\x92\x3d\x11\x72\x46\xb1\xbe\x42\xaf\x60\x41\x9b\xc2\x99\xc3\x43\xf0\xa6\xc1\x82\x33\x83\xf5\x2e\x85\x9f\x7a\xfb\xb2\xba\x06\x5e\x60\xd3\x4a\x43\x9d\x07\x21\x8f\xc2\x3a\x85\xeb\x0a\x41\x8a\x7a\x07\x66\x2b\x5d\xec\x9d\x9c\xc5\x14\xd2\x4d\x6a\x80\x89\x02\x5a\x66\xf2\xca\xaa\xa2\xd2\xef\xd1\x54\xb2\x80\xcb\x4b\x88\xde\xbd\x5d\x5e\x47\xf0\xd7\x5f\x47\xab\xdf\x5e\x2f\x5e\x46\x67\x34\xa5\x72\x3b\x08\x41\x1b\x6f\xf4\x63\x06\xf2\xe6\xa8\x8c\xfb\xba\x3d\x0e\xb9\x24\x8d\x29\x72\xad\x3c\x9f\xc8\x9b\xfe\x24\x8b\x67\xad\x3f\xca\x43\x77\x26\x65\x0d\x27\xf0\x8b\x67\xc0\xe1\xeb\xfe\xfc\x67\xc0\xbf\xf8\xc2\x02\x90\x6e\xa8\x5b\xaa\x89\xa6\xd3\x0b\x59\x20\x7c\x0d\x4f\x2f\x2e\xec\x66\xb0\x52\xc8\x6e\xc2\x80\x8a\x8a\xf5\x75\xfa\x9d\x2c\x76\xe9\xa2\x96\x1a\xe9\xae\x19\xf8\xff\xd8\xfd\x87\x32\x74\xb0\x82\x4b\x94\x9c\xab\xbc\xe3\xe6\x3b\x82\x46\x65\x0b\x0c\x6f\xda\x1a\x1b\xea\xc3\x6c\x20\x78\x0a\x58\x39\x12\x72\x83\x41\x25\x52\xe2\x5e\xa2\x81\x02\x57\x9d\xbd\x89\x8c\xea\x90\x3e\x65\x8b\x8a\x19\x1c\x31\x73\x01\x0c\x1a\xd2\x67\x5b\xa1\x42\xe0\x06\xb6\xbc\xae\x9d\xff\x6b\x59\x0e\x44\x01\x6d\x98\xc1\x99\x75\xb9\xa5\x11\xd2\xc0\xaa\x96\xf9\x0d\x30\xb1\x3b\x74\x58\x6b\x25\x1b\x28\xa5\xbd\x06\x2b\x25\xbb\xb2\xf2\x19\x37\xa1\xd2\x74\xcd\xec\x0b\x26\xc9\xef\xfe\x56\x52\xd6\x61\xe0\x01\xec\xcd\xed\xae\x67\x32\x16\x05\x8c\xdf\x59\x2e\xaf\xde\x8a\x1c\x81\x7a\xdf\x94\xbe\x59\x53\xbe\x74\xdd\xed\x72\x79\x75\x45\x5d\x2c\x95\x1d\x6c\xb8\x31\x58\xc0\x6a\x07\x87\x36\x18\x36\x9c\x81\x46\xb5\x41\xf5\x58\x13\xa1\x6b\x7a\x53\x78\x45\xc6\xd4\xb9\xe2\x2b\xd4\xb6\xe9\xa9\xd0\x19\x83\xea\x0b\xeb\x0f\xf7\x5a\x1e\x9f\x76\x50\xf1\x9a\xb6\xcf\xfc\x39\x95\xe0\x77\x6a\xf6\xe7\x11\x81\x45\xbf\x87\x81\xd5\xf6\x83\xb9\x04\x6b\x2c\x97\xaf\x4b\x0b\x2a\x8b\x53\x5c\xdc\x2d\x7b\x2e\x35\xa0\x26\x6e\x7b\xa5\x3e\xc8\x7b\xcc\x8d\x7b\xea\x3d\xef\x3b\x54\x39\x0a\x43\x2f\x9c\x0f\xe0\x3d\x50\x13\xc0\x2b\xbd\x18\x05\xca\xdb\x16\xc5\x10\x80\x62\xe1\x00\xc0\x27\xa8\xad\x01\x64\x5d\x73\x51\x5a\xb1\x5e\x30\x5e\x77\x0a\xcf\x19\xe0\x94\xfa\x14\xa4\xae\x57\x2c\xbf\x19\x82\x9d\x03\x19\x51\x3f\x04\xb6\xec\xf2\x1c\xb5\xfe\x40\x30\x4f\x7d\x0c\xb6\xac\xa4\x32\xde\x0a\x58\xbc\x4f\xbd\x31\xf5\x09\xd6\x40\xa0\xf7\x9b\xea\x01\x81\xae\x2b\x85\xac\x78\x27\x65\xfd\x03\x52\x2b\x46\x42\x3d\x0c\x72\x4a\x7d\x82\xc7\x1b\x94\x9d\xf9\x40\xa1\x3c\x35\x81\x2c\x3a\x45\x7d\xef\x42\x8a\xdc\x7d\xbb\xba\xc5\xbc\xa3\x2e\xc2\x05\xf7\x18\x24\x3f\x4f\x4d\x80\xaf\x99\x41\x91\xef\xae\xa5\x61\xf5\xf7\xc8\xc4\xf9\xe0\xae\x07\xd4\xbf\x35\xc8\x28\x30\xfb\x16\xa3\x96\xa5\xad\x0f\x71\x0d\x8f\xdc\x83\x36\x7d\x6d\x3f\x66\x70\x52\x43\xec\xa3\xac\x4e\x5f\x89\xb5\x7c\x1e\x63\xea\xda\xfc\x86\xb5\xbf\xb8\xdc\xff\x75\xff\x64\xbd\xbb\xa7\xfb\x68\x9c\xce\xf3\xa9\x04\xc6\x74\x58\x20\xa8\x1f\x1f\x66\xf1\x24\x0b\x31\x1d\xea\xc2\x81\x65\x90\xbc\xa7\x7c\x9e\xe5\x40\x63\xf9\x26\x73\x76\x3e\xe6\x9b\xaa\x02\x96\x79\x2a\x55\xe7\xc7\xca\x9d\xd2\x4c\xf0\x8e\x33\x74\x3e\xc9\x3b\xa2\x79\x10\xa3\xcf\x83\x73\x18\x9e\xe6\x04\xe3\x28\x1f\xe7\x53\x3a\x8c\x69\x4e\x21\x46\xc7\x4f\x9b\xe1\xa1\xe3\x27\xb2\x6f\x7e\xcc\x7b\x4a\x73\x0a\xe3\x93\xee\x9c\x08\x9e\xc6\xf2\xbe\x2f\xd7\xe6\x80\xe9\x7b\xb2\xd7\xe2\xd4\x47\x09\x79\x1a\x83\x98\x1e\x27\xed\x2c\x0c\xee\x93\x70\x38\x6e\x78\x74\xda\x9a\x24\xc0\x05\x37\xb1\x4d\xbd\x2c\x83\x77\xa8\xb8\x2c\x78\xce\x6a\xd7\x17\xb9\x31\x91\x60\xf5\xb8\x3b\xa2\x36\x8b\x69\xcd\xb5\xed\xac\x34\x1a\x43\x4d\x4a\x30\x68\xa2\x4c\xa5\x50\x57\xb2\x2e\xb4\x6d\xa4\x3a\x41\x6f\x53\xc3\x44\x41\x97\x38\x6b\xdb\x9a\xe7\xee\x99\xb3\xc2\x8a\x6d\xb8\x54\xa9\x65\xff\x51\xac\xa5\x32\x9d\xb0\xdd\xfc\x6c\xd8\xb4\x14\x12\x35\x75\xe7\x15\xdb\x20\x30\x28\x15\x32\x03\x5b\xb6\x23\x51\xf0\x96\x5e\x4a\x60\x2a\xae\x2d\x4a\xc1\x0c\x9b\x81\x96\xb0\xa5\x56\x5e\x4b\x65\x6c\x7f\xd8\x29\x41\xa7\x4b\x01\xdc\x68\xd0\x5d\x6b\x67\x91\xd4\x14\xaf\x94\x64\x45\xce\xf4\x89\x1a\x0d\x75\xc8\xb9\xb6\x2d\x93\x7d\x3e\x9c\xf6\x4d\x10\x2f\x97\x57\x89\x13\x7f\x89\x6e\x96\xa5\xe7\x59\x76\x66\x0e\xc9\xb5\xee\x50\x67\x4f\xff\x2f\xdd\x37\x7b\xbe\xa5\xa3\x9e\x99\xbc\xe5\x1c\x12\x78\x9e\xa5\x51\xc8\x9a\xfe\xa5\x3e\xbf\xec\xed\x92\xbe\xc1\xed\x68\xcf\xb6\xe1\x53\x4c\x6e\xca\x61\xb7\x6b\xae\x0d\x0a\x5b\x80\xdd\x4b\x4d\xa0\x49\x5f\xdb\xc5\x38\x32\x79\x1b\xcd\x20\x7a\xf2\xe5\xff\xa7\x17\xe9\x45\xfa\x64\x7e\x11\x25\xee\x5d\x70\xf4\x7c\x0b\x5a\x26\x78\x1e\xbb\x29\x83\x7d\x11\x94\x6e\x12\x96\x2e\xc9\x42\xf1\xe1\x94\x29\x71\x12\x47\x3f\xd0\xb4\x1f\x89\xce\x2f\xc1\x5f\x13\x6f\x70\x1b\x47\x5b\x56\x5a\x01\x68\xfb\x85\xad\xf7\x22\xdf\x11\xd1\x57\x17\xf0\x08\x0c\x6f\x30\x5d\x62\x2e\x45\x61\x69\x98\x36\xf6\x22\x59\x22\xda\xe9\xd3\xe0\xee\x38\xba\x6a\xee\xee\x47\x0c\xaf\x65\x49\x59\x7b\xc4\x63\xe1\x69\x9d\x1e\xcc\x41\x60\x9f\x4f\xbf\xc1\x25\x28\x26\x4a\x04\xbf\x9b\xdf\xc4\x4f\xc6\xa2\x24\x70\x07\xfd\x08\x00\xb8\x28\x70\x4d\x29\x86\xf5\x8e\x30\x82\x4e\xd5\x74\x4c\x44\xb6\x9a\x67\x59\x04\x5f\x40\x6f\xab\xf4\xdb\xa2\x50\x71\x92\x2e\xed\xf1\xd6\x59\xf4\xa8\xfa\x73\xef\x29\x6b\xdf\x37\xb8\xf5\x97\x5a\x1c\xfd\xf3\xea\x3a\x9a\x41\xa7\xea\x19\x39\xc6\x31\x4c\xf8\xca\x9a\x2f\x7d\xa7\xb8\x30\xeb\xd8\x5d\x67\x90\x4b\x21\x30\xef\xa7\x78\x7d\xbc\x2f\x97\x57\xd4\x69\x23\x6b\xe6\xf0\xa9\xde\x8f\x91\xe8\x2f\x97\xc2\x70\xd1\xa1\xfd\x65\xcd\x17\x38\xca\xbd\x78\x83\xe1\x79\xba\xec\x56\xee\x25\xf1\x13\x37\x55\x1c\x45\x33\xf8\x6c\x30\x58\x70\x13\x93\x3f\xff\xe7\x02\x93\x07\x71\x63\x9f\xd7\xd6\x87\x8e\x33\xbd\x72\x89\xec\x8f\xa6\x87\xd6\x49\x6f\xe2\xb6\x0e\x53\x41\xea\x7c\xd2\x1f\x45\xc3\x94\xae\x58\x1d\xff\xf2\xeb\x6a\x67\x30\xc6\x4d\xfa\x9c\x19\x16\x27\xc9\x0c\x3e\xc3\xd3\x99\xde\x89\x58\x5e\x2e\x0b\x9c\xda\x87\xd3\x27\x97\x10\xf9\xb3\x17\xb2\x69\x98\x28\xa2\xf3\xac\x14\xc4\x14\xf0\xfd\xe0\x60\x94\x05\xbf\xb8\x36\xea\xd7\x03\xe9\xc9\x16\x5c\x02\x86\x6e\x3f\xcb\x6c\xcd\x1f\x3e\x9c\x5d\xb9\xe7\x6b\x37\x85\x42\x6e\x2a\x7a\xb3\x7a\xe2\xf8\x49\x62\x89\xd7\x5c\x69\x5f\x0e\x61\x8b\x9f\x6f\x10\x34\x65\x20\x59\x7b\x88\x25\x07\x9c\x5f\x26\xe3\x2d\x7a\xfc\xb8\xb3\x2a\xa6\x21\xaf\xc8\x3d\xc5\x88\xe3\xab\x84\x92\x5e\xdb\x14\xd3\xee\x1a\x68\x99\xd6\x58\x80\xe6\xf4\x18\xde\xa2\xab\x1c\x05\x68\xd9\xa0\xa9\x28\x50\x8e\x24\xd8\xdb\xba\x1f\x98\x04\x13\x45\x60\x60\x17\x9b\xd4\x6f\xe4\xd6\xa7\xa2\x8d\x4a\xdf\xcd\xf6\x3d\x6c\xf2\x1e\xaf\xf6\xde\x99\x6c\xf4\xc8\xd9\xd3\x2d\xe0\xdf\x2b\x9d\x1f\x7f\xf3\xf5\x80\x87\x32\x34\x7e\x08\x3d\x81\x6f\x60\x54\x71\xff\x5e\x71\x0e\x19\x49\xff\xdc\x13\xc7\x7d\xf2\xde\x46\xe5\x23\xff\xb7\x87\xaf\xed\x54\x6c\xd5\x95\x7e\x56\xf6\xe0\xb0\xb2\xbf\x41\x69\xa9\x48\x07\xd3\x98\x59\x7f\x63\xb9\x8a\x64\x8d\x32\x55\xbd\xfc\xac\xcb\xce\xfa\xbc\xa2\x13\x93\xb5\x6f\x2e\x0f\xa3\x35\x8a\x70\x81\x58\x50\x69\xf3\xdc\x4c\xf8\x63\xec\x68\x8b\xdb\xdb\x71\x98\x2e\xb6\x55\x19\x1d\x26\x95\x76\xb7\xe6\xd3\x9f\x7f\x76\xb7\xa6\x3d\x7a\x24\xcd\xfd\xfe\xa6\x38\x37\x96\xd4\x2d\x8c\x0d\xe9\x36\x48\x51\x7b\x4e\x18\xb8\x29\xdf\x7f\x60\xa8\x87\x87\x83\x53\x26\x1c\xcb\x3c\x3d\x99\x1c\xda\xef\xbf\x36\xdf\x19\xeb\xdd\x87\x63\x39\x9c\xe9\x20\x7b\x04\x42\xc2\xda\x3f\x77\xac\xa2\xd4\xc8\xce\x60\x87\x06\x1e\x65\xc9\xe4\xa8\xf3\xdf\x01\x00\x00\xff\xff\x61\x28\x93\x4a\x08\x1f\x00\x00")

func _hardcodedDoerGoBytes() ([]byte, error) {
	return bindataRead(
		__hardcodedDoerGo,
		"_hardcoded/doer.go",
	)
}

func _hardcodedDoerGo() (*asset, error) {
	bytes, err := _hardcodedDoerGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "_hardcoded/doer.go", size: 7944, mode: os.FileMode(436), modTime: time.Unix(1478283607, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __hardcodedMiddlewareGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x56\xcd\x6e\xdc\x36\x10\x3e\x4b\x4f\x31\x55\x11\x54\x2c\x64\xee\xa9\x17\x07\x3e\x04\x8e\xdd\x04\x70\xd2\x20\x76\x90\x43\x10\x14\xb4\x34\x92\x98\x95\x48\x95\x1c\xad\x6c\x04\x7e\xf7\x62\x48\x69\x57\x1b\xdb\x6d\x4f\x3d\x78\xcd\xe5\xfc\x7f\x33\xf3\x71\x07\x55\x6e\x55\x83\xe0\xd1\xed\xd0\xa5\xa9\xee\x07\xeb\x08\xf2\x34\xc9\xea\x9e\xb2\x34\xc9\x0c\xd2\xa6\x25\x1a\xf8\xec\x46\x43\xba\xc7\x4d\x85\xb7\x63\x93\xa5\x69\x92\x35\x76\xd8\x36\x52\x9b\xcd\x79\x87\x3b\x74\x9b\xad\xba\xdf\x21\x9e\x34\x56\xee\x7e\xdb\x74\xb6\x69\xd0\x65\x69\xb2\xdd\xbd\xd3\x55\xd5\xe1\xa4\x1c\xc2\x3f\xdb\xf4\x7b\x45\xf6\x6f\x07\x34\xe4\x54\xa9\x4d\x03\x59\xa3\xa9\x1d\x6f\x65\x69\xfb\xcd\xea\x7e\x7d\x3e\x69\x6c\x96\x8a\x34\xad\x47\x53\xc2\xa4\xa9\x3d\x84\xcd\xb9\x42\x5d\xe2\x7b\xd5\x23\x78\x72\xda\x34\x05\x38\x3b\x12\x3a\xe0\xf2\xe4\x1b\x65\xaa\x0e\x9d\x38\xfa\x06\xdf\xd3\xa4\x9d\x8f\xa7\x67\x30\x87\x59\x79\x8d\x1e\xc4\x41\xeb\x0c\x06\x65\x74\xb9\x52\x99\x25\x22\x4d\x36\x1b\xb8\xb2\x4d\xc3\xc5\x1c\xca\x84\xd2\xf6\xe8\xa1\x53\x9e\x0a\xd0\x12\x25\x4c\xba\xeb\xe0\x16\xc1\x8d\x06\x6a\xed\x3c\xc9\x60\x7a\xd3\x6a\x0f\xbd\xda\xa2\x07\x4d\xe0\x2d\x50\xab\x08\x2c\xb5\xe8\xd6\xee\x5a\xe5\x41\x95\x25\x7a\x0f\xc4\x3a\x08\xb1\x0d\xc1\x47\x30\x39\xea\x86\x36\xdf\xb0\x24\x0f\xda\xcc\xda\x0e\xff\x1a\xd1\x13\x94\xd6\x10\xde\x71\xec\x43\x69\x6b\x4b\xf9\x1e\xa7\xa5\xb6\x02\x56\xe8\x8a\x34\x71\x48\xa3\x33\x30\x4b\xd3\x87\x34\xdd\x6c\x7e\xc4\x85\xd3\xf2\xa0\xcc\x7d\x14\x78\x09\x97\xd6\x81\xb1\x53\x01\x13\xfe\x12\x70\x31\xa4\xcd\x88\x40\xad\xb3\x13\x83\xc6\xe9\x05\x65\x18\x87\x34\x54\xc3\xad\x54\xe5\x36\xa2\x11\xe0\xb9\x87\xd2\x29\xdf\x46\x5d\x67\x19\x07\x19\xe7\xe1\x51\x5f\xfe\xa5\xef\x4b\x11\xab\xeb\xcb\xd1\x94\x39\x3b\xcb\xa7\x78\xff\x11\xfd\x60\x8d\xc7\xcf\x4e\x13\xc3\xe0\xe0\xd7\xf9\x3e\x80\x28\xd8\x4f\x52\x61\x8d\x0e\x82\x59\xbc\x48\x42\x2a\x17\x2e\xcc\x94\xc3\xd2\xee\xd0\xe5\x82\x05\xba\x86\xbd\xec\xec\x0c\x8c\xee\xa2\xc1\x9c\x0c\x1f\x1f\xf8\x63\xa7\x1c\xa0\x0b\x7f\xd6\xa5\x7c\xe3\x27\x4d\x65\x0b\x6b\xcf\xcb\x59\xe6\x74\x3f\xe0\x1c\xba\x54\x7e\x99\xff\xd3\xe0\x99\xdd\x9c\x41\xdd\x93\xbc\x60\x67\x75\xbe\x98\x89\xbd\x7a\x88\xb2\xd6\x5e\x54\xf8\xaa\xc2\x5a\x8d\x1d\x3d\xe3\x2c\x1b\xcd\xd6\xd8\xc9\xcc\x7d\x7b\xf1\xf3\x0e\x6c\x0d\x9c\x0f\xbc\xb8\xc9\x8a\xbd\xa7\xc3\x49\xc4\x22\xf9\x33\x0e\xae\xbc\x74\xb6\x3f\x8f\xd3\x98\x3b\xb9\x9c\x84\x88\x31\x5e\xe7\x59\x30\xcd\x8a\x90\xc1\x6c\xf3\xee\x7b\x86\xce\x65\xa7\x9c\x7b\x01\x59\x98\x12\xde\x5e\xcc\x4e\xe7\xea\xf3\x40\x62\xf2\x9a\x25\xb9\x10\x0f\x62\xdf\x98\x23\x04\x1e\x42\x63\x5a\x79\xcd\x04\xf9\xe6\xe6\xe6\x43\x3e\x15\xc0\x92\x07\x31\xcf\xf5\x23\x52\x80\xd2\xa1\x22\xf4\xa0\xc0\xe0\x04\x7e\x50\x06\x8c\xea\xb1\x02\x55\x33\xdd\xf0\x68\x7e\xfa\x78\x05\x83\xa2\x36\xa0\x71\xd8\x3a\xc9\x0e\xdf\x12\x0c\x9d\x2a\xd1\xc7\x99\x0e\xf6\xda\x3c\xb5\x9c\x05\xd4\xd6\xc1\xe8\x11\x6e\xef\x67\x26\x98\x77\xce\xc3\x4e\x2b\x58\x51\xa3\xbc\x1e\x94\x59\x23\x29\x42\xa8\x1a\x54\x0c\x80\x77\xda\x07\x1a\xd8\xc7\x68\x51\x55\xe8\x7c\x11\xd7\x8c\x75\x62\x5d\x15\x07\x8b\xdb\x76\x28\x79\xe1\x2c\x05\x65\xab\xbb\x2a\x96\xa5\x28\xd8\xcd\xfb\xf7\x98\x3c\xff\xb7\x0d\xdc\x6c\xe0\x15\x11\xf6\x03\x31\x27\x7e\xb3\xda\x2c\x65\xdf\xde\x43\x83\x44\x81\x5d\x78\x3c\x40\x9b\xda\x42\xed\x6c\x1f\xca\x9e\x31\x90\x69\x92\xd8\x21\x3c\x1d\xbc\xb1\xf2\xd3\xc7\x2b\xf9\x41\x51\x9b\xc6\x4d\xf4\xc3\x23\xa4\xd3\xb0\xcb\xbe\x2c\xc2\x9a\x9e\x9e\x1d\x29\xfc\xde\xd9\x5b\xd5\xdd\x70\x3c\x97\x0b\x76\x9e\x5c\xdc\xb1\x90\xf2\xb5\x1a\x4f\xdb\x9b\xb9\x09\x61\xb6\x9f\x11\x9e\x2b\xe7\x34\xba\xdc\xc9\x78\x21\xc4\xcb\x10\xf5\xa7\x15\x81\xf8\x01\x8e\x73\xb8\x26\xe5\x88\x33\xcd\x63\x61\x61\xd6\x01\x3b\x8f\xff\xd1\xa0\x38\x92\x9e\x73\xd7\xff\xa8\x73\x5f\x8a\xe0\x69\x4f\x7b\x7e\x90\x97\xda\x68\xdf\xe6\x22\x8d\x9d\x88\x2f\x4e\x84\xff\xed\xeb\xf8\xf0\x84\xb7\x80\x2c\x28\x5d\xad\x47\x30\xac\x28\xbf\x97\x69\x92\x10\xa3\xc8\xcf\x5f\xde\xab\xe1\x4b\xdc\xe1\xaf\xf1\x9f\x88\x68\xcf\x48\xfb\x41\xee\xa1\x7d\x1b\x62\xe5\x7e\x38\xd0\xc6\x71\xde\x37\x78\x47\xef\xd4\x10\xf0\x7d\xe2\x7e\x81\x96\x16\x4c\xd7\xa4\xcc\x0d\x66\xaa\xa8\x0a\xb0\xdb\xf0\xf3\xe0\x4b\x66\xe9\x24\xcc\x91\x3b\x89\xa2\xec\xeb\x4b\x16\x7e\x5f\x73\xd3\xb3\x7c\xf6\xaa\xaa\x96\x6f\x8f\x1d\x15\x73\x30\xb1\x3c\x02\x81\x23\xfd\x20\xaf\x6c\x73\xb1\x43\x43\x79\x36\xc3\xf6\xa7\xc3\x12\xf5\x0e\xab\x4c\x3c\xf9\xfa\x3c\x69\x53\x87\x26\xcd\x36\x91\xf4\x0c\x4e\xe7\x74\xf7\xe3\xf0\xce\x19\x7e\xd6\xd4\x86\x69\x70\x6b\x68\xfd\x10\xba\xfc\x23\x5d\x4a\xd6\x5e\xd4\xa2\x5b\xb1\x50\xe8\xdf\x01\x00\x00\xff\xff\x29\x98\x17\x0d\x82\x0a\x00\x00")

func _hardcodedMiddlewareGoBytes() ([]byte, error) {
	return bindataRead(
		__hardcodedMiddlewareGo,
		"_hardcoded/middleware.go",
	)
}

func _hardcodedMiddlewareGo() (*asset, error) {
	bytes, err := _hardcodedMiddlewareGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "_hardcoded/middleware.go", size: 2690, mode: os.FileMode(436), modTime: time.Unix(1478117034, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"_hardcoded/doer.go":       _hardcodedDoerGo,
	"_hardcoded/middleware.go": _hardcodedMiddlewareGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"_hardcoded": &bintree{nil, map[string]*bintree{
		"doer.go":       &bintree{_hardcodedDoerGo, map[string]*bintree{}},
		"middleware.go": &bintree{_hardcodedMiddlewareGo, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
