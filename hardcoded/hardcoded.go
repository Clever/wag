// Code generated by go-bindata.
// sources:
// _hardcoded/doer.go
// _hardcoded/middleware.go
// DO NOT EDIT!

package hardcoded

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __hardcodedDoerGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x59\x6f\x8f\xdb\x36\xd2\x7f\x2d\x7d\x8a\xa9\x80\xb6\xd2\xd6\xa1\x37\x2d\x82\x07\x70\xba\x7d\xd0\x3a\x9b\x4b\x80\x34\x09\xea\xbd\x6b\x81\xa2\x68\x69\x69\x2c\xb3\x2b\x91\x0a\x49\xd9\x6b\x6c\xf7\xbb\x1f\x86\xa4\x6c\xc9\xd6\xee\xe6\x2e\xc5\xed\x8b\xd8\x26\x67\x7e\x9c\xff\x9c\x61\x1a\x9e\x5f\xf3\x12\x21\xaf\x04\x4a\x1b\xc7\xa2\x6e\x94\xb6\x90\xc6\x51\x92\x2b\x69\xf1\xc6\x26\x71\x94\xa0\xcc\x55\x21\x64\x39\xfd\xd3\x28\xe9\x16\xb4\x56\xda\xd0\xb7\x55\xed\x28\x2a\x55\xd2\x87\x44\x1b\x3e\xa6\x6b\x6b\x1b\xfa\x6e\x76\x32\xa7\x4f\x2b\x6a\x4c\xe2\x38\x4a\x4a\x61\xd7\xed\x92\xe5\xaa\x9e\xf2\x15\xde\x4c\xd7\x3b\x63\xb5\xb8\x79\x52\xaa\xee\x6b\x32\xa4\x2a\x94\x54\x1b\x2e\xd7\xa2\xc0\x29\x6e\x50\x5a\xa3\x5a\x9d\x63\x12\x47\xaa\x41\x69\x35\xcf\x85\x2c\xa1\xcf\xd1\x5b\xef\x7f\x7f\x52\x2a\x07\xad\x2a\x2e\x4b\xa6\x74\x39\xbd\x99\x92\xa8\x41\xd3\x69\x6e\x6f\x82\xd4\x95\x2a\x4b\xd4\x90\x94\xaa\xb9\x2e\x99\x90\xd3\x79\x85\x1b\xd4\xd3\x6b\xbe\xdb\x20\x3e\x29\x15\xdb\x3c\x9b\x7a\xa2\x24\xce\xe2\x78\x3a\x85\x42\xa1\x06\x61\x80\x4b\x10\xd2\xa2\x5e\xf1\x1c\x61\xa5\x34\x24\x85\x12\xb2\x4c\x80\xa0\x41\xe3\x87\x16\x8d\x35\xd0\x28\x63\xc4\xb2\xda\xc1\x56\xd8\x35\x6c\x35\x6f\x1a\x21\xcb\xd8\xee\x1a\x0c\x50\x7b\x90\xdb\x38\x7a\xa1\xd2\x1c\xce\x08\x81\xcd\x9d\xa7\x26\xa0\xc3\xef\x9f\x3c\x62\x06\x69\xf7\xdb\x34\x4a\x1a\x9c\x80\x73\x52\x16\xdf\xc5\x1e\x55\x35\x6f\x79\x8d\x73\x7b\x03\xc6\xea\x36\xb7\xb7\x77\x4e\xee\x25\x37\x18\x30\x5e\x71\x59\x54\xa8\xa1\x41\xbd\x52\xba\x36\x60\xd7\xe8\xf6\x07\xb2\x7b\x34\x5a\x7e\x41\x72\x1e\xc0\x56\xad\xcc\x21\x2d\xf6\x5b\x19\x7c\x82\xd8\xa4\xb5\x46\xdb\x6a\x09\xc1\x2d\xec\x85\x4a\x35\x9b\x7b\x5f\xa5\xd9\x04\xf2\x09\x78\xf5\xa6\x53\x08\x1e\x76\x12\xf1\xa2\x30\xdd\x02\x58\x35\x34\xbc\x97\xbe\x4f\xee\x15\xa0\xf3\x0a\x67\xf9\xb8\xa7\x4a\x8f\xee\x53\xb5\x89\xa3\xdc\xde\xc0\xec\x02\x7a\x3a\x50\x04\x93\x53\x68\x39\xb7\x37\xec\x5f\xbc\x6a\x31\xdd\x3b\xea\xf6\x2e\x63\x29\x65\x84\x2c\xb3\x38\xda\x70\x0d\xa6\x81\x5e\x3c\xb3\x45\xc3\x65\x1c\x4d\xa7\x70\xf5\xee\xc5\xbb\x19\x29\x0e\x96\x97\x06\x34\x56\xdc\x06\xed\x85\x6c\x5a\x0b\x05\xb7\xfc\xff\xe3\x48\xac\xa0\xe1\x1a\xa5\x25\x4e\x3a\xf5\x18\xed\xa5\x56\x75\x27\x5e\x6e\x6f\xb2\xe7\x7d\xfa\xcf\x2e\x40\x8a\x8a\x2c\x15\x99\x06\x8e\x98\x2d\xd7\x8e\x2a\x88\x3f\x19\xec\xce\xd7\xa2\x2a\xde\xad\xd2\x03\xd8\xc1\x08\x59\x16\x47\x77\x80\x95\xc1\x8f\x43\x26\x72\xa7\x09\x6a\x4d\x2a\x98\x86\x5d\x69\x9e\xa3\x4e\x33\xf6\x5a\xfe\x89\xb9\x4d\x4d\xd3\x8b\x93\x38\xea\xd7\x09\xf6\xea\xea\xea\xfd\x2b\xe4\x05\x6a\xf3\xc0\xd6\x9c\x6b\x2d\x50\xa7\x9a\xf9\x85\x2c\x7b\xee\xce\xeb\x99\x20\x44\xa7\x14\xd5\x04\x56\xb5\x65\x97\xe4\xe9\x55\x9a\xe4\xaa\xad\x0a\xf9\xa5\x05\xe1\x84\xd9\x47\xe2\xda\x23\x43\xfa\xf9\x26\x4b\x5c\x60\x78\x4d\x02\x4e\xc1\x0a\x8a\xf0\x7e\x50\x6b\xb4\x7a\xd7\x25\x25\xfd\x10\x68\xe0\xd9\xf9\x2f\x63\x11\xed\x68\x4f\xe2\x79\xf0\xe7\x82\x3b\x2a\x70\xc5\xdb\xca\xfe\x14\xe0\x84\xb4\xe1\xb4\x9f\x85\x5d\x77\xab\x5e\x26\x03\x1c\x24\x6e\x21\xd4\x47\xb0\x6b\x6e\x41\x6d\x50\x6b\x51\xa0\xaf\x0e\xb2\xad\x97\xa8\x41\xad\xf6\xf2\x59\x05\x85\x72\x85\x8f\x53\xec\x58\x91\xb7\x15\xd7\x5e\x1d\x27\x30\xf3\xd9\xd5\x3b\x8e\x22\xad\x3b\xa4\x73\xdc\x64\x0f\x28\xa4\xcd\x8e\x77\xfb\xd5\x21\xec\x10\x9e\xcf\x9f\xdc\xde\x78\xee\x5d\xa0\xbe\xbd\xdb\xa3\x0d\x4c\xdb\x81\x09\xaf\xcb\x35\xee\xdc\xa7\xdb\x23\xdc\x95\x28\x5b\xcd\xad\x50\x92\xc1\x4b\xa5\xa1\xc0\x5a\x49\x63\xfd\x12\x34\xad\x6e\x94\x21\x01\xed\x97\x06\xfe\x6c\x8d\x05\x0e\xb9\x6a\xa5\xa5\x03\xd4\xea\x1e\xfb\x68\x51\xae\x2d\x48\xb5\x65\x3d\xc7\x75\x92\x9c\x16\xd3\xb3\xbd\x63\x3f\xbd\x00\x69\x34\xcd\xa4\x4b\x9b\x41\xbc\x75\xe9\x74\x1a\xde\x7b\x1e\x8a\x55\x57\x6b\x5e\xaf\x82\x95\xdc\x89\x90\x73\x8a\xf5\x25\x06\x05\x0b\xda\x94\xde\x1c\x01\x42\xd4\x35\x16\x82\x5b\xac\x76\x0c\x7e\xee\xec\xcb\xab\x0a\x44\x81\x75\xa3\x2c\x75\x1e\x84\x3c\x08\x6b\x06\x57\x6b\x04\x25\xab\x1d\xd8\xad\xf2\xb1\x77\x72\x16\xd7\x48\x37\xa9\x05\x2e\x0b\x68\xb8\xcd\xd7\x4e\x15\xcd\x7e\x44\xbb\x56\x05\x5c\x5c\x40\xf2\xfe\xdd\xe2\x2a\x81\xbf\xfe\x3a\x5a\xfd\xfe\x6a\xfe\x2a\x79\x40\x53\x2a\xb7\xbd\x10\x74\xf1\x46\x3f\x26\xa0\xae\x8f\xca\x78\xa8\xdb\xc3\x90\xcb\x58\x4a\x91\xeb\xe4\xf9\x4c\x5d\x77\x27\x39\x3c\x67\xfd\x41\x1e\xfa\x33\x29\x6b\x04\x81\x9f\x3f\x07\x01\xdf\x76\xe7\x3f\x07\xf1\xd5\x57\x0e\x80\x74\x43\xd3\x50\x4d\xb4\xad\x99\xab\x02\xe1\x5b\x78\x76\x7e\xee\x36\xa3\xa5\x46\x7e\x1d\x47\x54\x54\x9c\xaf\xd9\x0f\xaa\xd8\xb1\x79\xa5\x0c\xd2\x5d\xd3\xf3\xff\xb1\xfb\x0f\x65\xe8\x60\x05\x9f\x28\xb9\xd0\x79\x2b\xec\x0f\x04\x8d\xda\x15\x18\x51\x37\x15\xd6\xd4\x87\xb9\x40\x08\x14\xb0\xf4\x24\xe4\x06\x8b\x5a\x32\xe2\x5e\xa0\x85\x02\x97\xad\xbb\x89\xac\x6e\x91\x3e\x55\x83\x9a\x5b\x1c\x30\x0b\x09\x1c\x6a\xd2\x67\xbb\x46\x8d\x20\x2c\x6c\x45\x55\x79\xff\x57\xaa\xec\x89\x02\xc6\x72\x8b\x13\xe7\x72\x47\x23\x95\x85\x65\xa5\xf2\x6b\xe0\x72\x77\xe8\xb0\x56\x5a\xd5\x50\x2a\x77\x0d\xae\xb5\x6a\xcb\x75\xc8\xb8\x11\x95\xc6\x6b\x66\x57\x30\x49\x7e\xff\xb7\x54\xaa\x8a\xa3\x00\xe0\x6e\x6e\x7f\x3d\x93\xb1\x28\x60\xc2\xce\x62\x71\xf9\x4e\xe6\x08\xd4\xfb\x32\xfa\xe6\x4c\xf9\xca\x77\xb7\x8b\xc5\xe5\x25\x75\xb1\x54\x76\xb0\x16\xd6\x62\x01\xcb\x1d\x1c\xda\x60\xd8\x08\x0e\x06\xf5\x06\xf5\x13\x43\x84\xbe\xe9\x65\xf0\x9a\x8c\x69\x72\x2d\x96\x68\x5c\xd3\xb3\x46\x6f\x0c\xaa\x2f\xbc\x3b\x3c\x68\x79\x7c\xda\x41\xc5\x2b\xda\x7e\xe0\xcf\xab\x04\x7f\x50\xb3\x3f\x4b\x08\x2c\xf9\x23\x8e\x9c\xb6\x1f\xcd\x25\x79\xed\xb8\x42\x5d\x9a\x53\x59\x1c\xe3\x12\x7e\x39\x70\xe9\x1e\x35\x71\xbb\x2b\xf5\x5e\xde\x63\x6e\xdc\x53\xef\x79\xdf\xa3\xce\x51\x5a\x9a\x70\x3e\x82\xf7\x40\x4d\x00\xaf\xcd\x7c\x10\x28\xef\x1a\x94\x7d\x00\x8a\x85\x03\x80\x18\xa1\x76\x06\x50\x55\x25\x64\xe9\xc4\x7a\xc9\x45\xd5\x6a\x7c\xc8\x00\xa7\xd4\xa7\x20\x55\xb5\xe4\xf9\x75\x1f\xec\x21\x90\x01\xf5\x7d\x60\x8b\x36\xcf\xd1\x98\x8f\x04\x0b\xd4\xc7\x60\x8b\xb5\xd2\x36\x58\x01\x8b\xc7\xd4\x1b\x52\x9f\x60\xf5\x04\x7a\xdc\x54\xf7\x08\x74\xb5\xd6\xc8\x8b\xf7\x4a\x55\x3f\x21\xb5\x62\x24\xd4\xfd\x20\xa7\xd4\x27\x78\xa2\x46\xd5\xda\x8f\x14\x2a\x50\x13\xc8\xbc\xd5\xd4\xf7\xce\x95\xcc\xfd\xb7\xcb\x1b\xcc\x5b\xea\x22\x7c\x70\x0f\x41\xf2\x87\xa9\x09\xf0\x0d\xb7\x28\xf3\xdd\x95\xb2\xbc\xfa\x11\xb9\x7c\x38\xb8\xab\x1e\xf5\xef\x35\x72\x0a\xcc\xae\xc5\xa8\x54\xe9\xea\x43\x5a\xc1\x99\x1f\x68\xd9\x1b\xf7\x31\x81\x93\x1a\xe2\x86\xb2\x8a\xbd\x96\x2b\xf5\x22\x45\xe6\xdb\xfc\x9a\x37\xbf\xfa\xdc\xff\x6d\x3f\xb2\xde\xde\xd1\x7d\x34\x4c\xe7\xd9\x58\x02\x23\xeb\x17\x08\xea\xc7\xfb\x59\x3c\xca\x42\x4c\x87\xba\x70\x60\xe9\x25\xef\x29\x5f\x60\x39\xd0\x38\xbe\xd1\x9c\x9d\x0d\xf9\xc6\xaa\x80\x63\x1e\x4b\xd5\xd9\xb1\x72\xa7\x34\x23\xbc\xc3\x0c\x9d\x8d\xf2\x0e\x68\xee\xc5\xe8\xf2\xe0\x21\x8c\x40\x73\x82\x71\x94\x8f\xb3\x31\x1d\x86\x34\xa7\x10\x83\xe3\xc7\xcd\x70\xdf\xf1\x23\xd9\x37\x3b\xe6\x3d\xa5\x39\x85\x09\x49\xf7\x90\x08\x81\xc6\xf1\x3e\x96\x6b\x33\x40\xf6\x48\xf6\x3a\x9c\xea\x28\x21\x4f\x63\x10\xd9\x71\xd2\x4e\xe2\xe8\x2e\x8b\xfb\xcf\x0d\x67\xa7\xad\x49\x06\x42\x0a\x9b\xba\xd4\xa3\x41\x9f\x7a\x34\x25\xdd\xd5\xbf\x58\x5c\x82\x7b\xad\xfb\x0a\x2a\x61\x2c\x4a\x1a\x34\xa8\xd9\x88\x86\x6d\x08\xf5\x79\x74\x82\x07\x89\x42\xa3\xb1\xb0\x1a\x79\xdd\x4d\x97\xb3\x8b\xae\x01\x61\x6f\x71\x3b\xd8\x73\xad\xe3\x18\x93\x9f\xcc\xdd\x76\x77\xfe\x7e\xba\x90\x68\xd9\x1b\xb7\x98\x26\x36\x6f\x92\x09\x24\x4f\xbf\xfe\x3f\x76\xce\xce\xd9\xd3\xd9\x79\x92\xf9\x5e\xf6\x68\xe4\x88\x1a\x2e\x45\x9e\xfa\xc9\xd8\x75\xb1\xa5\x7f\xbd\x61\x0b\xea\x86\xd2\xc3\x29\x63\xe2\x64\x9e\xbe\xa7\x69\xf7\x8c\x37\xbb\x80\x50\xda\xde\xe2\x36\x4d\xb6\xbc\x74\x02\xd0\xf6\x4b\x57\xa3\x64\xbe\x23\xa2\x6f\xce\xe1\x0c\xac\xa8\x91\x2d\x30\x57\xb2\x70\x34\xdc\x58\x57\xfc\x16\x88\xee\xc5\xa4\x57\xef\x8e\xca\xe3\xed\xdd\x80\xe1\x8d\x2a\x29\xd2\x8e\x78\x1c\x3c\xad\xd3\x90\x17\x45\xae\xe5\xff\x1d\x2e\x40\x73\x59\x22\x84\xdd\xfc\x3a\x7d\x3a\x14\x25\x83\x5b\xe8\xc6\x56\x10\xb2\xc0\x15\x85\x05\x56\x3b\xc2\x88\x5a\x5d\xd1\x31\x09\xd9\x6a\x36\x9d\x26\xbd\x88\x60\xdf\x17\x85\x4e\x33\xb6\x70\xc7\x3b\x67\xd1\x20\xf0\x61\xef\x29\x67\xdf\xb7\xb8\x0d\x85\x38\x4d\xfe\x71\x79\x95\x4c\xa0\xd5\xd5\x84\x1c\xe3\x19\x46\x7c\xe5\xcc\xc7\xde\x6b\x21\xed\x2a\xf5\x25\x98\x66\x66\x89\x79\xf7\xf2\xd4\xf5\xeb\x14\xa7\xc6\x79\x6a\x06\x9f\x9b\xfd\xd3\x07\xfd\xd1\xf0\x2e\x64\x8b\xee\x97\x33\x5f\xe4\x29\xf7\xe2\xf5\x1e\x7c\xd9\xa2\x5d\xfa\xee\x97\x66\xfd\x34\x49\x26\xf0\x45\x6f\x18\xf6\x53\xfe\x87\xff\xb9\xc0\xe4\x41\xdc\xb8\x91\xd0\xf9\xd0\x73\x32\x17\x03\xa6\x3b\x9a\x86\x83\x93\xfb\xd4\x6f\x1d\x5e\xb2\xe8\xb6\x66\xff\x94\x35\xd7\x66\xcd\xab\xf4\xd7\xdf\x96\x3b\x8b\x29\x6e\xd8\x0b\x6e\x79\x9a\x65\x13\xf8\x02\x4f\xdf\xa1\x4e\xc4\x0a\x72\x39\x60\xe6\x9a\xfd\xcf\x2e\x20\x09\x67\xcf\x55\x5d\x73\x59\x24\x0f\xb3\x52\x10\x53\xc0\x77\xc3\xee\x20\x0b\x7e\xf5\x57\xff\x6f\x07\xd2\x93\x2d\xb8\x00\x8c\xfd\xfe\x74\x4a\xc9\x37\x18\xf6\xfc\xcc\x22\x56\xfe\xe5\x04\x85\x5d\xd3\x9c\x15\x88\xd3\xa7\x99\x23\x5e\x09\x6d\xc2\xe8\x03\x5b\xfc\x72\x83\x60\x28\x03\xc9\xda\x7d\x2c\xd5\xe3\xfc\x3a\x1b\x6e\x51\xc3\xee\xcf\x5a\x73\x03\xf9\x9a\xdc\x53\x0c\x38\xbe\xc9\x28\xe9\x8d\x4b\x31\x03\x6b\xbe\x41\x68\xb8\x31\x58\x80\x11\x34\xc0\x6d\xd1\x57\x8e\x02\x8c\xaa\xd1\xae\x29\x50\x8e\x24\xd8\xdb\xba\x1b\xf2\xa3\x91\x22\xd0\xb3\x8b\x4b\xea\xb7\x6a\x1b\x52\xd1\x45\x65\xe8\xc0\xba\xbe\x2b\x7b\xc4\xab\x9d\x77\x46\x9b\x13\x72\xf6\x78\xdb\xf2\xf7\x4a\x17\x9e\x6c\xc5\xaa\xc7\x43\x19\x9a\xde\x87\x9e\xc1\x77\x30\xa8\xb8\x7f\xaf\x38\x87\x8c\xa4\x7f\xee\x88\xe3\x2e\x7b\xf4\x72\xfd\xc4\xff\xa1\x10\x2b\xf7\x92\xb3\x6c\xcb\xf0\xbe\x73\xef\x03\x5b\x77\x83\xd2\x52\xc1\x7a\x2f\x08\x93\xee\xc6\xf2\x15\xc9\x19\x65\xac\x7a\x85\xf7\x19\xf7\x3e\x15\x14\x1d\x79\x0d\xfa\xee\xe2\xf0\x1c\x44\x11\x2e\x11\x0b\x2a\x6d\x81\x9b\xcb\x70\x8c\x7b\x8e\x11\xee\x76\xec\xa7\x8b\x90\xe5\xd1\x61\x4a\x1b\x7f\x6b\x3e\xfb\xe5\x17\x7f\x6b\xba\xa3\x07\xd2\xdc\xed\x6f\x8a\x87\x9e\xd2\x4c\x03\x43\x43\xfa\x0d\x52\xd4\x9d\x13\x47\xfe\x65\xea\x3f\x30\xd4\xfd\x0f\x5a\x63\x26\x1c\xca\x3c\xfe\x9a\xd6\xb7\xdf\x7f\x6d\xbe\x07\xac\x77\x17\x0f\xe5\xf0\xa6\x83\xe9\x19\x48\x05\xab\xd0\xa2\x3b\x45\xa9\xbf\x9c\xc0\x0e\x2d\x9c\x4d\xb3\xd1\xe7\xb9\x7f\x07\x00\x00\xff\xff\x9d\x9e\x2e\xc7\xbc\x1d\x00\x00")

func _hardcodedDoerGoBytes() ([]byte, error) {
	return bindataRead(
		__hardcodedDoerGo,
		"_hardcoded/doer.go",
	)
}

func _hardcodedDoerGo() (*asset, error) {
	bytes, err := _hardcodedDoerGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "_hardcoded/doer.go", size: 7612, mode: os.FileMode(436), modTime: time.Unix(1478114535, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __hardcodedMiddlewareGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x56\xcd\x6e\xdc\x36\x10\x3e\x4b\x4f\x31\x55\x11\x54\x2c\x64\xee\xa9\x17\x07\x3e\x04\x8e\xdd\x04\x70\xd2\x20\x76\x90\x43\x10\x14\xb4\x34\x92\x98\x95\x48\x95\x1c\xad\x6c\x04\x7e\xf7\x62\x48\x69\x57\x1b\xdb\x6d\x4f\x3d\x78\xcd\xe5\xfc\x7f\x33\xf3\x71\x07\x55\x6e\x55\x83\xe0\xd1\xed\xd0\xa5\xa9\xee\x07\xeb\x08\xf2\x34\xc9\xea\x9e\xb2\x34\xc9\x0c\xd2\xa6\x25\x1a\xf8\xec\x46\x43\xba\xc7\x4d\x85\xb7\x63\x93\xa5\x69\x92\x35\x76\xd8\x36\x52\x9b\xcd\x79\x87\x3b\x74\x9b\xad\xba\xdf\x21\x9e\x34\x56\xee\x7e\xdb\x74\xb6\x69\xd0\x65\x69\xb2\xdd\xbd\xd3\x55\xd5\xe1\xa4\x1c\xc2\x3f\xdb\xf4\x7b\x45\xf6\x6f\x07\x34\xe4\x54\xa9\x4d\x03\x59\xa3\xa9\x1d\x6f\x65\x69\xfb\xcd\xea\x7e\x7d\x3e\x69\x6c\x96\x8a\x34\xad\x47\x53\xc2\xa4\xa9\x3d\x84\xcd\xb9\x42\x5d\xe2\x7b\xd5\x23\x78\x72\xda\x34\x05\x38\x3b\x12\x3a\xe0\xf2\xe4\x1b\x65\xaa\x0e\x9d\x38\xfa\x06\xdf\xd3\xa4\x9d\x8f\xa7\x67\x30\x87\x59\x79\x8d\x1e\xc4\x41\xeb\x0c\x06\x65\x74\xb9\x52\x99\x25\x22\x4d\x36\x1b\xb8\xb2\x4d\xc3\xc5\x1c\xca\x84\xd2\xf6\xe8\xa1\x53\x9e\x0a\xd0\x12\x25\x4c\xba\xeb\xe0\x16\xc1\x8d\x06\x6a\xed\x3c\xc9\x60\x7a\xd3\x6a\x0f\xbd\xda\xa2\x07\x4d\xe0\x2d\x50\xab\x08\x2c\xb5\xe8\xd6\xee\x5a\xe5\x41\x95\x25\x7a\x0f\xc4\x3a\x08\xb1\x0d\xc1\x47\x30\x39\xea\x86\x36\xdf\xb0\x24\x0f\xda\xcc\xda\x0e\xff\x1a\xd1\x13\x94\xd6\x10\xde\x71\xec\x43\x69\x6b\x4b\xf9\x1e\xa7\xa5\xb6\x02\x56\xe8\x8a\x34\x71\x48\xa3\x33\x30\x4b\xd3\x87\x34\xdd\x6c\x7e\xc4\x85\xd3\xf2\xa0\xcc\x7d\x14\x78\x09\x97\xd6\x81\xb1\x53\x01\x13\xfe\x12\x70\x31\xa4\xcd\x88\x40\xad\xb3\x13\x83\xc6\xe9\x05\x65\x18\x87\x34\x54\xc3\xad\x54\xe5\x36\xa2\x11\xe0\xb9\x87\xd2\x29\xdf\x46\x5d\x67\x19\x07\x19\xe7\xe1\x51\x5f\xfe\xa5\xef\x4b\x11\xab\xeb\xcb\xd1\x94\x39\x3b\xcb\xa7\x78\xff\x11\xfd\x60\x8d\xc7\xcf\x4e\x13\xc3\xe0\xe0\xd7\xf9\x3e\x80\x28\xd8\x4f\x52\x61\x8d\x0e\x82\x59\xbc\x48\x42\x2a\x17\x2e\xcc\x94\xc3\xd2\xee\xd0\xe5\x82\x05\xba\x86\xbd\xec\xec\x0c\x8c\xee\xa2\xc1\x9c\x0c\x1f\x1f\xf8\x63\xa7\x1c\xa0\x0b\x7f\xd6\xa5\x7c\xe3\x27\x4d\x65\x0b\x6b\xcf\xcb\x59\xe6\x74\x3f\xe0\x1c\xba\x54\x7e\x99\xff\xd3\xe0\x99\xdd\x9c\x41\xdd\x93\xbc\x60\x67\x75\xbe\x98\x89\xbd\x7a\x88\xb2\xd6\x5e\x54\xf8\xaa\xc2\x5a\x8d\x1d\x3d\xe3\x2c\x1b\xcd\xd6\xd8\xc9\xcc\x7d\x7b\xf1\xf3\x0e\x6c\x0d\x9c\x0f\xbc\xb8\xc9\x8a\xbd\xa7\xc3\x49\xc4\x22\xf9\x33\x0e\xae\xbc\x74\xb6\x3f\x8f\xd3\x98\x3b\xb9\x9c\x84\x88\x31\x5e\xe7\x59\x30\xcd\x8a\x90\xc1\x6c\xf3\xee\x7b\x86\xce\x65\xa7\x9c\x7b\x01\x59\x98\x12\xde\x5e\xcc\x4e\xe7\xea\xf3\x40\x62\xf2\x9a\x25\xb9\x10\x0f\x62\xdf\x98\x23\x04\x1e\x42\x63\x5a\x79\xcd\x04\xf9\xe6\xe6\xe6\x43\x3e\x15\xc0\x92\x07\x31\xcf\xf5\x23\x52\x80\xd2\xa1\x22\xf4\xa0\xc0\xe0\x04\x7e\x50\x06\x8c\xea\xb1\x02\x55\x33\xdd\xf0\x68\x7e\xfa\x78\x05\x83\xa2\x36\xa0\x71\xd8\x3a\xc9\x0e\xdf\x12\x0c\x9d\x2a\xd1\xc7\x99\x0e\xf6\xda\x3c\xb5\x9c\x05\xd4\xd6\xc1\xe8\x11\x6e\xef\x67\x26\x98\x77\xce\xc3\x4e\x2b\x58\x51\xa3\xbc\x1e\x94\x59\x23\x29\x42\xa8\x1a\x54\x0c\x80\x77\xda\x07\x1a\xd8\xc7\x68\x51\x55\xe8\x7c\x11\xd7\x8c\x75\x62\x5d\x15\x07\x8b\xdb\x76\x28\x79\xe1\x2c\x05\x65\xab\xbb\x2a\x96\xa5\x28\xd8\xcd\xfb\xf7\x98\x3c\xff\xb7\x0d\xdc\x6c\xe0\x15\x11\xf6\x03\x31\x27\x7e\xb3\xda\x2c\x65\xdf\xde\x43\x83\x44\x81\x5d\x78\x3c\x40\x9b\xda\x42\xed\x6c\x1f\xca\x9e\x31\x90\x69\x92\xd8\x21\x3c\x1d\xbc\xb1\xf2\xd3\xc7\x2b\xf9\x41\x51\x9b\xc6\x4d\xf4\xc3\x23\xa4\xd3\xb0\xcb\xbe\x2c\xc2\x9a\x9e\x9e\x1d\x29\xfc\xde\xd9\x5b\xd5\xdd\x70\x3c\x97\x0b\x76\x9e\x5c\xdc\xb1\x90\xf2\xb5\x1a\x4f\xdb\x9b\xb9\x09\x61\xb6\x9f\x11\x9e\x2b\xe7\x34\xba\xdc\xc9\x78\x21\xc4\xcb\x10\xf5\xa7\x15\x81\xf8\x01\x8e\x73\xb8\x26\xe5\x88\x33\xcd\x63\x61\x61\xd6\x01\x3b\x8f\xff\xd1\xa0\x38\x92\x9e\x73\xd7\xff\xa8\x73\x5f\x8a\xe0\x69\x4f\x7b\x7e\x90\x97\xda\x68\xdf\xe6\x22\x8d\x9d\x88\x2f\x4e\x84\xff\xed\xeb\xf8\xf0\x84\xb7\x80\x2c\x28\x5d\xad\x47\x30\xac\x28\xbf\x97\x69\x92\x10\xa3\xc8\xcf\x5f\xde\xab\xe1\x4b\xdc\xe1\xaf\xf1\x9f\x88\x68\xcf\x48\xfb\x41\xee\xa1\x7d\x1b\x62\xe5\x7e\x38\xd0\xc6\x71\xde\x37\x78\x47\xef\xd4\x10\xf0\x7d\xe2\x7e\x81\x96\x16\x4c\xd7\xa4\xcc\x0d\x66\xaa\xa8\x0a\xb0\xdb\xf0\xf3\xe0\x4b\x66\xe9\x24\xcc\x91\x3b\x89\xa2\xec\xeb\x4b\x16\x7e\x5f\x73\xd3\xb3\x7c\xf6\xaa\xaa\x96\x6f\x8f\x1d\x15\x73\x30\xb1\x3c\x02\x81\x23\xfd\x20\xaf\x6c\x73\xb1\x43\x43\x79\x36\xc3\xf6\xa7\xc3\x12\xf5\x0e\xab\x4c\x3c\xf9\xfa\x3c\x69\x53\x87\x26\xcd\x36\x91\xf4\x0c\x4e\xe7\x74\xf7\xe3\xf0\xce\x19\x7e\xd6\xd4\x86\x69\x70\x6b\x68\xfd\x10\xba\xfc\x23\x5d\x4a\xd6\x5e\xd4\xa2\x5b\xb1\x50\xe8\xdf\x01\x00\x00\xff\xff\x29\x98\x17\x0d\x82\x0a\x00\x00")

func _hardcodedMiddlewareGoBytes() ([]byte, error) {
	return bindataRead(
		__hardcodedMiddlewareGo,
		"_hardcoded/middleware.go",
	)
}

func _hardcodedMiddlewareGo() (*asset, error) {
	bytes, err := _hardcodedMiddlewareGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "_hardcoded/middleware.go", size: 2690, mode: os.FileMode(436), modTime: time.Unix(1478043039, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"_hardcoded/doer.go":       _hardcodedDoerGo,
	"_hardcoded/middleware.go": _hardcodedMiddlewareGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"_hardcoded": &bintree{nil, map[string]*bintree{
		"doer.go":       &bintree{_hardcodedDoerGo, map[string]*bintree{}},
		"middleware.go": &bintree{_hardcodedMiddlewareGo, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
