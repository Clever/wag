// Code generated by go-bindata. DO NOT EDIT.
// sources:
// ../_hardcoded/doer.go (11.269kB)
// ../_hardcoded/middleware.go (4.586kB)

package hardcoded

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __hardcodedDoerGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x3a\x7f\x6f\xdb\x46\xb2\x7f\x4b\x9f\x62\x22\xa0\x17\x32\x91\x49\x3b\x77\x49\x0f\xee\xf3\x3d\xb4\xb6\xf3\x12\x5c\x9a\x04\x91\xfb\x1a\x20\x08\xae\x2b\x72\x28\x6d\x4d\xee\xb2\xbb\x4b\xc9\x82\xcf\xdf\xfd\x61\x66\x97\x14\x29\xc9\x4e\xee\x5a\x3c\xbc\xe7\x3f\x2c\x91\x3b\x33\x3b\x33\x3b\xbf\x57\xb5\xc8\xae\xc5\x02\x21\x2b\x25\x2a\x37\x1e\xcb\xaa\xd6\xc6\x41\x34\x1e\x4d\xe6\x1b\x87\x76\x32\x1e\x4d\x32\xad\x1c\xde\x38\xfa\x8a\x2a\xd3\xb9\x54\x8b\xf4\x57\xab\x15\xbf\x30\x46\x1b\x86\x2a\x2a\x86\x90\x3a\x95\xba\x71\xb2\xa4\x87\x52\x2f\xe8\xa3\x12\x6e\x99\x1a\xa1\x72\x7a\x50\xe8\xc2\x47\xba\x74\xae\xa6\xef\x76\xa3\x32\xfa\x74\xb2\xc2\xc9\x78\x3c\x9a\x2c\xa4\x5b\x36\xf3\x24\xd3\x55\x2a\x0a\xbc\x49\x97\x1b\xeb\x8c\xbc\x39\x5a\xe8\xf6\xeb\x64\x08\x95\x6b\xa5\x57\x42\x2d\x65\x8e\x29\xae\x50\x39\xab\x1b\x93\xe1\x64\x3c\xd2\x35\x2a\x67\x44\x26\xd5\x02\xfa\x18\xbd\xf7\xfd\xef\x47\x0b\x3d\x19\x8f\x9c\x58\xd8\xaf\x84\x4e\x83\x66\x16\xba\x14\x6a\x91\x68\xb3\x48\x6f\x52\x12\x2e\x68\x2d\xcd\xdc\x4d\x90\xb3\xd4\x8b\x05\x1a\x98\x2c\x74\x7d\xbd\x48\xa4\x4a\xcf\x4b\x5c\xa1\x49\xaf\xc5\x66\x85\x78\xb4\xd0\xc9\xea\x45\xea\x81\x26\xe3\x78\x3c\x4e\x53\xc8\x35\x1a\x90\x16\x84\x02\xa9\x1c\x9a\x42\x64\x08\x85\x36\x30\xc9\xb5\x54\x8b\x09\x10\x69\x30\xf8\x5b\x83\xd6\x59\xa8\xb5\xb5\x72\x5e\x6e\x60\x2d\xdd\x12\xd6\x46\xd4\xb5\x54\x8b\xb1\xdb\xd4\x18\x48\x75\x44\x6e\xc7\xa3\x0b\x1d\x65\xf0\x84\x28\x24\xe7\x7c\xfc\x53\x30\xe1\xf9\x83\xa7\x18\x43\xd4\x3e\xdb\x5a\x2b\x8b\x53\xe0\x03\x8f\xc7\x77\x63\x4f\x55\xd7\x6f\x45\x85\xe7\xee\x06\xac\x33\x4d\xe6\x6e\xef\x98\xef\xb9\xb0\x18\x68\xbc\x12\x2a\x2f\xd1\x40\x8d\xa6\xd0\xa6\xb2\xe0\x96\xc8\xeb\x03\xde\x3d\x35\x7a\x7d\x41\x7c\x6e\x89\x15\x8d\xca\x20\xca\xbb\xa5\x18\x7e\x07\xdb\x24\xb5\x41\xd7\x18\x05\xe1\x58\x92\x0b\x1d\x99\xe4\xdc\x9f\x55\x14\x4f\x21\x9b\x82\x17\x2f\x4d\x21\x9c\x32\x73\x24\xf2\xdc\xb6\x2f\xc0\xe9\xa1\xe2\x3d\xf7\x7d\x70\x2f\x00\xed\x97\xb3\xe6\xc7\x3d\x51\x7a\x70\xbf\x57\x9a\xf1\x28\x73\x37\x70\x7a\x06\x3d\x19\xc8\xe6\xe9\x50\xe8\x75\xe6\x6e\x92\xff\x16\x65\x83\x51\x77\x50\xb7\x77\x71\x12\x91\x0f\xa9\x45\x3c\x1e\xad\x84\x01\x5b\x43\xcf\xa6\x93\x59\x2d\xd4\x78\x94\xa6\x70\xf5\xee\xe2\xdd\x29\x09\x0e\xec\x0f\x06\x4b\xe1\x82\xf4\x52\xd5\x8d\x83\x5c\x38\xf1\x9f\xe3\x91\x2c\xa0\x16\x06\x95\x23\x4c\xda\x75\x97\xda\x4b\xa3\xab\x96\xbd\xcc\xdd\xc4\xdf\xf5\xe1\x1f\x9d\x81\x92\x25\x69\x6a\x64\x6b\xd8\x41\x76\xc2\x30\x54\x60\x7f\x3a\x58\x3d\x5f\xca\x32\x7f\x57\x44\x5b\x62\x5b\x25\xc4\xf1\x78\x74\x07\x58\x5a\xfc\x3a\xca\x04\xee\xfd\x9e\x39\xfe\xbb\x54\x79\x32\x43\x17\xd9\x7a\x0a\x83\xb7\x1f\xde\x9f\xfb\x73\xba\x54\x4d\x15\xb3\xf0\x68\x0c\x49\x6d\xeb\xe4\xca\x88\x0c\x4d\x14\x27\xaf\xd5\xaf\x98\x11\x76\xcf\xb4\xc6\xa3\x7e\x30\x4a\x5e\x5d\x5d\xbd\x7f\x85\x22\x47\x63\x1f\x58\x3a\x17\xc6\x48\x34\x91\x49\xfc\x8b\x38\xfe\x8e\xf7\xeb\x69\x2d\x18\xb4\x92\xe5\x14\x8a\xca\x25\x97\x64\x1c\x45\x34\xc9\x74\x53\xe6\xea\xb1\x03\xc9\xcc\x74\xc6\xbb\xf4\x94\x21\xfa\x66\x15\x4f\xd8\x96\xbc\xf0\x39\x16\x64\xb8\x75\xf2\x52\x2a\x69\x97\x64\x48\x81\x74\x9e\xe4\xe4\x27\x7d\xd7\x30\xe8\xcc\xa6\x75\x6d\x7a\x90\x68\xe1\xf9\xf1\xc7\x43\x7e\xc1\xb0\x7b\x5e\xb1\xfd\x63\xff\x18\x31\xd4\x7b\x5d\xca\x6c\x03\x1f\xb6\xdf\xc3\x7e\xbd\x37\x90\x63\x21\x15\x5a\x10\x9e\x32\xd4\xfc\x3a\xf1\x9b\xf5\x01\x07\xd1\x2e\x4d\xe1\x07\x91\x5d\xeb\xa2\x20\x53\x26\xb9\x7c\x28\x52\x4d\x35\x27\xff\x56\x39\x38\x59\x91\x82\x74\x11\x08\x0b\xe7\xb0\xaa\x9d\x4d\xc6\xa3\x16\x35\x8a\xe1\xd3\x67\xca\x53\xc9\x45\x63\x84\x93\xda\xbb\x0a\xef\x0a\x06\x33\x94\x2b\xf4\x74\xfb\x8a\x98\x82\xb0\xb0\xc6\xb2\xa4\x4f\x5a\x34\x68\x9b\xd2\x81\x2e\x18\xbb\xcd\x85\x21\x02\x3c\xb6\xf0\xcb\x85\xfe\x05\x2a\x74\x4b\x9d\x27\xe3\x11\x53\x8f\x06\x41\x61\x0a\xf7\xc4\x84\xb9\xd6\x65\xd0\xd9\x4c\xaa\x45\x89\x0f\x69\xce\x2d\x85\xeb\x4e\x4f\xb4\xdc\x82\x56\x19\x7a\x6d\xee\x93\x18\x84\xf9\x03\x0a\x15\x0e\x36\xba\x01\xbb\x24\xeb\xeb\xb6\xc1\x8e\xf6\x89\xc5\x4c\xab\x1c\x44\xe1\x28\x1f\x39\x28\x84\x2c\x6d\x12\x82\xe3\xde\x7e\x31\xdc\xaf\xf9\x5e\x34\xdf\x59\xb9\x3d\x81\x27\xc0\x6f\x66\xbc\xdb\x5d\xdf\x8a\x60\x2d\xcb\x32\x70\xa6\xb4\x3a\x7a\xff\x6e\x76\x35\xf5\xdf\xbe\xbf\x3a\x7f\xb5\xcd\xa6\x2c\xcc\xf3\x8f\x1f\x93\x71\x17\x0c\x5f\x3b\xb2\x56\x0b\x4a\x3b\xc8\x1a\x43\x71\xa7\xdc\xb4\xd6\xa2\x36\xfe\x10\x5a\x75\x60\x0e\xf3\xcd\x3d\x87\xfb\x80\xc0\xfe\xb4\x0d\xfe\x06\x3b\x27\x6e\xd0\xd6\x87\x8e\xbd\x7f\xf4\xa4\x93\x10\x92\x42\x88\xf8\xe7\x3f\x49\xa2\xe4\x47\x36\x26\x38\x3b\x83\x09\x09\x3c\x39\xf4\x9e\xc4\xa7\x05\x0e\x2a\xb6\xa6\x20\xe9\x1a\x7b\xae\x73\x84\xff\x80\xe7\xc7\xc7\xfd\x70\x53\x88\xd2\x22\xc7\x8d\xf0\xc2\x99\x06\x83\x9a\x2f\x6f\x6a\xad\x50\x39\x29\xca\x83\xd6\xa7\x00\xb7\x10\x03\x27\xf6\x56\x77\x0f\xfe\xc3\xa6\x57\xc8\x15\x15\x10\xe1\x2d\x17\x40\xbd\x5d\x4a\x8a\x06\x99\x41\x61\xc9\xc3\xd7\x42\x3a\xb6\x0f\xcb\xc5\x0a\xba\x35\xa2\xea\x0e\xfe\x14\x4e\x8e\x8f\xa7\xf0\x8c\xfe\xfd\x85\xfe\xfd\x95\xfe\x51\x80\x38\x79\x71\x7c\x0c\x95\x2c\x4b\xe9\xad\xd8\xc2\xd3\xf4\x08\x9a\x9a\x52\xe2\xf3\x6f\xe0\x57\xe9\x1c\x9a\xf6\x68\x0f\x4b\xf1\x15\x06\x4d\xc9\xa4\x12\xd7\x18\xed\x2c\x4f\xe1\x79\x3c\x1e\x29\xbc\x61\x88\x93\xe3\xe3\xd6\xc8\x7f\xdc\x72\x34\x1e\x19\x95\x73\x41\x20\x54\x9e\xbc\xc5\x75\xd4\x7e\x99\x71\x45\x1c\x31\xc2\x5b\xbd\x8e\xe2\xe4\x27\x25\x6f\xde\x0a\xa5\x7d\xb6\xe4\x7a\xe1\x38\x39\x7e\x0e\x69\xca\x62\x3d\xa7\x92\x2d\x43\xe5\x82\x5c\xe3\x11\x15\x9e\x32\x10\x5f\x70\x5c\x6f\x2d\xe2\x93\xfc\x0c\x67\xc0\xac\x3d\x85\x01\xd3\x51\x14\x19\x95\x27\x2f\x4b\x2d\xdc\x8b\xbf\x44\xf1\x93\x67\xf1\xd1\x49\xfc\x04\x9f\x14\xe1\x0d\x21\xd1\xfe\x5e\xb0\x27\x67\xf0\xac\x6f\x55\x06\xdd\xff\x59\xdf\xbd\xef\x80\xff\xff\x3b\xf0\x5b\x7d\x38\x6b\x78\x27\xa5\x04\xa9\xa8\x73\xf1\xca\x23\x87\xea\x72\x47\xc8\xc2\x43\x02\x0f\x3b\x2e\x85\x83\xaa\x76\x1b\xb0\xa5\xcc\xb0\x55\xee\x80\xc2\xbf\x99\x05\x86\x61\x5f\x94\x6b\xb1\xe9\xc5\x0b\x92\xff\x9e\xdd\xfe\xd5\x84\xdb\xe3\xc1\xab\xb5\x6d\x8f\x58\x41\xa1\x04\x1c\xaa\xe1\x67\xe9\x96\x7d\x1d\x75\xda\x00\x85\x6b\x08\xcd\xa3\x37\x63\xbd\x42\x63\x64\x1e\xea\x0a\xdf\xa9\x83\x9e\x53\x51\xf7\xd8\x76\xc5\x58\x57\x06\xb1\x44\x3b\xe4\xa9\xec\x6e\x89\xb6\x25\xe9\x14\xee\x29\xb9\xe2\x5d\xc8\x7e\xdb\x14\x56\x88\xbe\x6f\x2c\x32\x77\x33\x1d\xc8\x79\x7b\x37\xa0\x1c\xf7\x5b\x9f\x27\x5d\x2d\xf8\x47\xf4\x71\xed\x16\x53\xd0\xd7\x3b\x4d\x50\xe8\x7a\x86\x7c\xc5\x49\xd4\x17\x93\x1d\xed\x91\xbe\x6e\xbd\xa2\xd3\xc5\x19\xe4\x49\xef\x99\x9d\xa4\xcb\x2c\xb4\xcf\x76\x2d\xd9\x1a\xa6\x6f\xa6\x0e\xf8\xb8\x5f\xe8\xfc\x7c\xcc\x35\xdf\x4c\xac\x70\x50\x18\xcd\x75\x4e\x39\x0a\x32\x6a\x8d\xd7\x08\x4b\x06\xd0\x7e\xb3\x04\xde\xb9\x25\x9a\xb5\xf4\x6b\x1c\x05\x19\x40\x94\x06\x45\x4e\xe6\x23\x72\xa6\xcb\xdd\x75\x53\x50\x29\xaf\x55\x17\xdd\xf2\xc1\x56\x8c\x4e\x75\x57\x02\x33\x44\x46\x23\x86\x4f\xd3\xd4\x3a\x12\x67\x85\xa6\x28\xf5\x9a\x27\x1f\x8c\x21\xb5\xb2\xe9\xb3\x3f\x1f\x7f\x7b\xfc\xd7\x6f\x5f\xa4\xb4\x97\x54\x8b\x23\xe2\xf8\x48\x17\x47\x84\x7b\x14\x68\x1f\x51\xe2\xd5\x8d\x3b\xaa\x74\x2e\x0b\x8a\x0d\xdd\x8a\x75\xc2\x05\x5d\xcc\x9b\x02\x3e\x7d\x9e\x6f\xe8\x59\x16\x60\x92\x1f\x48\xf8\x5e\x4f\x33\x54\xd8\x68\x34\x6f\x0a\x1f\x29\xcf\xc0\x4f\x97\x92\x0f\x28\xf2\xef\xcb\x32\xf2\xb8\x94\x3f\x86\x51\x93\xa8\x0c\x5a\x23\x34\x44\xe8\x8e\x0e\xd3\x67\xb2\xb6\xee\xa5\xb4\xf7\x1d\x47\xbf\xef\xda\x77\x4f\x9f\x32\xfe\x41\xd6\x46\x26\xe7\x76\x2f\xf0\xf1\x56\xd7\xe7\xa5\xb6\x68\x22\x9e\x97\x51\xa6\xfd\x81\xd5\x1f\xcd\x9b\x82\xf3\xda\x28\xd0\x38\x03\x93\x07\x16\x38\x3a\xb7\x02\x0d\xba\x2b\xbf\x69\xe0\xec\xec\x0c\x4a\x54\x51\x6b\x7a\x31\x85\xfc\x47\x7d\xe3\x0b\x99\xc6\x67\x16\xdf\xca\x79\x1e\xe7\x06\xc5\x75\xd8\x2b\x4d\x81\x39\x6c\x1b\x0f\xb6\x49\x6f\x6e\x6c\x18\x64\x20\x0b\x21\x55\x9b\x34\x88\xd9\x84\x31\xc8\xa6\x47\xbe\x8c\x2e\x11\xeb\x8e\x91\x4f\x81\xc1\xcf\xf1\x30\x55\x07\x1e\x42\xd4\xcd\xa4\xc9\x1a\xe9\x7e\x20\x56\xd0\x70\xff\x27\xab\xba\xc4\x0a\x95\x0b\xa1\xcc\x43\xc0\xdc\x83\x40\x4d\x0d\x97\x51\x9c\xb3\x67\xe8\x20\xc7\x79\xc3\xe3\x06\x3a\x1c\xfa\xd4\x35\x1a\xe1\x70\x80\x2c\x15\x08\xa8\x28\xc5\xad\x97\x68\x90\x5a\x0a\xb6\x6f\xad\xca\x0d\x94\x7a\xd1\x63\x05\xd8\x04\x7d\x29\xc7\x30\x54\x0a\xcc\x4b\x9d\x5d\x73\x01\xd0\x15\x0f\x85\xd1\x15\x2c\x34\xcf\x3a\x96\x46\x37\x8b\x65\x48\x6b\x07\x44\x7a\xa8\xa5\xf5\xfc\xfb\x3f\xee\xcb\x46\x81\x00\x8f\x67\xfc\x0c\xa6\x1b\x0b\xf2\x9f\xff\x9e\xfc\x9d\x27\x82\x6f\xf8\x81\xb4\x49\xee\x10\x50\x67\xb3\xcb\x77\x2a\x43\xb0\x1b\x95\x25\xf4\x8d\x75\xfd\xca\x4f\x45\x67\xb3\xcb\xcb\x15\x65\x07\x69\x01\x2b\xaa\xda\xb8\x8c\xd9\x8e\x4f\x61\x25\x05\x58\x34\x2b\x34\x47\x96\x00\xfd\xb0\x34\xe1\xe2\x08\x6d\x66\xe4\xdc\xd7\xc4\xa4\x61\xd6\x16\x25\x7b\xd1\x6e\x1e\xd4\xb0\xbb\xdb\x56\x07\x57\xb4\xfc\xc0\x9f\x97\x19\x7e\xf9\xd5\x6a\x75\x3a\x21\x62\x93\x5f\xc6\x23\x56\xc7\x57\x63\x29\x51\x31\x56\x48\x12\xe7\xba\x51\xee\x10\x96\xf4\xaf\x03\x96\xe9\x41\x13\x36\x4f\x49\xee\xc5\xdd\xc5\xc6\x0e\xba\xc3\x7d\xef\x8b\x63\xb1\xd8\x67\xfd\x00\xee\x16\x9a\x08\xbc\xb6\xe7\x03\x4b\x7a\x57\xa3\xea\x13\xe0\x9a\xa2\x23\x20\x0f\x40\xb3\x02\x74\x59\x4a\xb5\x60\xb6\x5e\x0a\x59\x36\x06\x1f\x52\xc0\x3e\xf4\x3e\x91\xb2\x24\x1f\xef\x13\x7b\x88\xc8\x00\xfa\x3e\x62\xb3\x26\xcb\xd0\xda\xaf\x24\x16\xa0\x77\x89\xcd\x96\xda\xb8\xa0\x05\xcc\xbf\x24\xde\x10\x7a\x8f\x56\x8f\xa1\x2f\xab\xea\x1e\x86\xae\x96\x94\x05\xdf\x6b\x5d\x7e\x40\x2a\xc4\x88\xa9\xfb\x89\xec\x43\xef\xd1\x93\x15\xea\xc6\x7d\x25\x53\x01\x9a\x88\x9c\xfb\x4e\xe6\x5c\xab\xd0\xd3\x5c\xde\x60\xd6\x50\xc6\xf6\xc6\x3d\x24\x92\x3d\x0c\x4d\x04\xdf\x08\x87\x2a\xdb\x5c\x69\x27\xca\x1f\x51\xa8\x87\x8d\xbb\xec\x41\xff\xa3\x42\x41\x86\xd9\xd6\x7b\xa5\x5e\x70\x7c\x88\xca\x43\x71\x6d\x0a\x7b\x81\x84\x93\x57\x99\xbc\x56\x85\xbe\x88\x30\xf1\x13\xdf\x4a\xd4\x9f\x7c\x00\xf8\xdc\xcd\xf3\x6e\xef\x28\xcb\x0d\x7d\xfa\xf4\x90\x17\x63\xd2\x8f\x12\x53\x42\xea\xb9\xf2\x41\x14\x42\xda\x06\x87\x2d\x4a\xcf\x83\xf7\xf1\x02\xca\x16\x86\xf1\x0e\x3a\xee\xe9\x10\xef\x50\x28\x60\xe4\x43\xfe\x7a\xba\x2b\xdc\x3e\xcc\x01\xdc\xa1\x9b\x9e\x1e\xc4\x1d\xc0\xdc\x4b\xa3\x75\x86\x87\x68\x04\x98\x3d\x1a\x3b\x4e\x79\x7a\x48\x86\x21\xcc\x3e\x89\xc1\xf6\x87\xd5\x70\xdf\xf6\x07\x5c\xf0\x74\x17\x77\x1f\x66\x9f\x4c\xf0\xbc\x87\x58\x08\x30\x8c\xfb\x25\x87\x3b\x05\x4c\xbe\xe0\xc2\x4c\xa7\xdc\xf1\xca\x7d\x1b\xc4\x64\xd7\x73\xa7\xe3\xd1\x5d\x3c\x1e\xb4\x5f\xfb\x05\x4c\x0c\x52\x49\x17\xc5\x61\x44\xfe\x1e\x8d\xd4\xb9\xcc\x78\x62\x56\xea\x85\x9f\xa1\x2b\x51\x0e\x6b\x28\x2a\xc6\x84\xb5\xd2\x72\xfd\x65\xd1\x39\x2e\x65\x7a\xa5\x96\x5b\x1a\xb4\x4b\x5d\xe6\x96\xcb\xad\x46\xe5\x68\xac\x13\x2a\xe7\x71\x41\x5d\x97\x32\xf3\xed\xfb\x1c\x97\x62\x25\xb5\x49\x18\xfd\x27\x55\x68\xe3\x1a\x25\x1c\x96\x9b\x69\xbf\x72\xc9\x35\x5a\xf5\xd8\x85\xb6\x07\x16\x06\x85\x83\xb5\xd8\x10\x2b\x78\x53\xfb\x02\x57\x5a\xa6\x92\x0b\x27\xa6\x60\x35\xf5\x4a\x06\xad\x36\x8e\xab\xc8\xc6\x28\x9e\xef\x2b\x90\xce\x82\x6d\x6a\xbe\xeb\xa6\x5e\x60\x6e\xb4\xc8\x33\x61\xf7\xc4\xa8\xa8\xd2\xcd\x2c\xd7\x4d\x3c\xd1\xdf\x2f\x9e\x20\x9a\xcd\x2e\x63\xcf\xfe\x0c\xfd\xe0\xdf\x9e\xa6\xe9\x03\x97\xd8\xd2\xda\x06\x6d\xfa\xfc\x45\xd2\x95\x84\xa1\xae\xa3\x4e\x80\x4e\xcb\x1f\xc8\x28\xe0\xcc\x9c\x41\x51\xb5\xd7\x2d\xa7\x67\xad\x5e\x78\xae\xd7\x5f\xe3\x8a\xfd\x10\x92\xbf\xf0\xe2\xe5\x52\x5a\x87\x8a\x03\xb0\xbf\xb8\x52\xe8\x92\x37\xfc\x32\x9a\xb8\xac\x9e\x4c\x61\x72\xf2\xec\xdb\xe4\x38\x39\x4e\x4e\x4e\x8f\x27\xf7\xf4\x56\xb5\x50\x32\x8b\xfc\xed\x11\xf7\x54\xa3\x85\xbf\x15\x4d\x66\xa4\xa2\x68\xbb\xcd\x21\x7e\x62\x0f\xdf\x13\x95\xd4\xf7\x33\xb2\xcd\xe1\x0a\xcd\x06\x4e\x8e\xa1\x9d\xb2\xce\x31\x13\x4d\xe8\x60\x88\x1a\x1a\x79\xd3\x1d\x8d\x30\x48\x47\x2a\xe0\xe4\xf8\xa8\x1d\x82\x32\xb5\xe0\xb7\xb0\x96\x2a\xd7\xeb\x04\xae\x96\xd2\x42\x89\xee\xb1\x85\x86\x8e\xbf\xe2\xc9\xed\x21\x92\x4e\xc3\x02\xf9\x6a\xc2\x94\x9b\x40\x4d\x64\x59\xe3\x9b\x0f\xf2\xaf\x70\x6d\x64\x21\x52\x9a\x1b\x12\xe1\xd8\xfc\x40\xb2\x91\xd6\x68\x0a\xcc\x5c\xc7\xb8\x6e\x4c\xb8\x5d\x0a\xd4\x5a\x6b\x0e\x80\xe5\x06\x2a\xe1\xb2\x65\xc7\xca\x63\x1b\xda\x14\x6a\xf1\xad\x66\xb5\xac\x97\xa8\x0e\xf5\x4d\x81\xa4\xe5\x61\x1f\x64\x4b\xa1\x16\x68\xb9\xf3\x2c\xf5\xe2\x25\x27\x49\x95\x6d\xfc\xcc\x78\x78\x2f\xc2\x30\xc2\x3a\xce\xbe\x33\x44\xe5\x47\xcf\x5d\xc2\xdd\xc9\xcf\xb7\x77\x03\x84\x37\x7a\x41\xa1\x6e\x07\x87\xc9\xd3\xfb\x5b\x36\x0a\x6e\xb5\xff\x01\xed\xcc\x38\xac\x66\xd7\xd1\xce\x15\x4d\x0c\xb7\xd0\x8d\xb2\xa4\xe2\x99\xa3\xa4\x20\x40\x34\x46\x8d\x29\x69\x9b\x49\x18\x53\x4c\xe0\x29\xb4\xf6\x95\x7c\x9f\xe7\x26\x8a\x93\x19\x6f\xcf\x16\x4e\x8d\xec\x6f\x9d\x79\xb3\x4d\xbe\xc5\x75\xa8\x04\xa2\xc9\x7f\x5d\x5e\x4d\xa6\xd0\x98\x72\x4a\xd6\xec\x11\x0e\x18\x38\xab\x2f\x79\x6f\xa4\x72\x45\xe4\x6b\x00\xc8\xb4\x52\x98\xb5\xb7\xe0\xed\x39\xcc\x66\x97\xd4\xa3\xa0\xa8\x4e\xe1\x1b\xdb\xdd\xa9\xd2\x5f\xa6\x95\x93\xaa\x41\x7e\x62\xf5\x8d\x3c\x64\xc7\x5e\xef\xe7\x2a\xc9\xac\x99\xfb\x1e\xec\x67\xe9\x96\xd1\x64\x32\x85\x3f\xf5\xe6\x63\x7e\xb0\xf6\xdb\xff\x3a\xc3\x74\x82\xb8\xda\xce\xfd\x3d\x66\x72\xe9\xa3\x5f\xd8\x9a\x27\x36\xbb\x05\x9d\x5f\xda\x5e\x91\x53\xcd\x98\xfc\xa4\x2a\x61\xec\x52\x94\x91\x1f\x01\x45\xb8\x4a\x2e\x84\x13\x51\x1c\x4f\xe1\x4f\xb8\x7f\xc1\xbd\xc7\x56\xe0\x8b\x09\x27\xdc\x72\x3e\x3a\x83\x49\xd8\xfb\x5c\x57\x95\x50\xf9\xe4\x5e\x54\xff\x99\xa6\x70\xa5\x73\xb1\x61\x0f\x33\x08\x19\xe5\x13\x3f\xca\xf6\xf2\x81\x17\x9b\x22\x51\x18\xb9\x92\x1b\xa2\xb3\xdd\x64\xa1\x8d\xff\x04\xe8\x53\x4f\x20\xdc\x76\xcb\xf0\x5a\xf1\x2f\x77\x72\x14\x25\xac\xb5\x29\xd9\x9f\x19\x9d\xb7\xa3\x3c\x66\xf9\x02\xb0\xdd\x93\x5c\xbe\x16\xd6\x82\xf4\x19\xab\x9b\xf7\x26\x1d\xf1\x37\xc4\xc2\x5a\x1b\xb3\x01\x31\xa7\x96\x21\x0f\x83\x0a\x69\x7d\x84\x58\xe3\x76\xce\xc2\xc4\x68\x39\xdb\x29\x32\x79\xa4\xd7\xd1\x74\x1a\x72\x69\xc5\xbc\xc4\x30\x73\xa9\x74\x8e\x3d\x1d\x73\x83\xfe\xe8\x0c\xf2\xa4\x3f\xc0\x78\x58\xc1\x14\x26\x28\xa4\xb4\xc3\xd9\x41\x9c\xf9\xe4\x69\x7e\xde\x82\xee\x2d\xc1\x19\xe0\xf6\xac\x48\xdd\xfd\xd0\xe7\xab\x10\x59\x80\xa4\x70\x8e\xd2\x2d\x7d\x1c\x64\xe0\xe8\x24\x66\xe0\x42\x1a\x1b\xb2\x34\xac\xf1\xf1\x0a\xc1\x52\x8c\xf3\xe7\xb5\xa5\xa5\x7b\x98\xcf\xe2\xe1\x12\x35\xe6\x7e\xaf\xa5\x68\x63\x6b\x3e\xc0\xf8\x73\xdc\xcf\x54\x5c\x9d\x90\xd2\x31\xa7\xa3\xcd\x78\x5c\xcb\xdd\x4f\x0e\x56\x57\xe8\x96\x74\x1a\x3b\x1c\x74\x9a\x6e\x87\xd1\xa3\x03\x61\xb6\xa7\x97\xed\x1d\x5e\x0b\xdb\x76\x5a\x79\x52\xb6\xcd\x55\xfc\x05\xcf\x69\xcf\xe7\x60\x07\x42\x87\x7d\xb8\x37\xf9\xa3\xf9\x0b\x3f\xd2\x91\x45\x0f\x8b\xe2\x60\x74\x1f\xfd\x18\xfe\x06\x83\xbc\xf6\x47\x33\xb4\x8d\x7c\xf4\xef\x8e\x70\xee\xe2\x2f\x56\xd1\xbf\xf3\x36\x43\x16\x90\x27\xde\xf7\x6e\x07\xf3\xe1\xd3\xbd\x01\x71\x5b\xfb\x5d\xe8\x68\xe0\x8f\xd3\xb6\x9a\xf2\x91\x9f\xd5\x72\x28\x4b\x84\x71\xad\x9f\x87\x7b\x41\x79\xe6\x3c\xbc\x2f\xfc\xdb\x59\x77\x61\x38\xf2\xbf\x51\xc1\x3c\x5c\x47\x10\xb6\x50\x61\x1b\x9e\xce\x4a\x9e\x60\xf6\x9d\x26\x54\x3a\xbd\xcd\xb4\xe1\xe1\x78\x34\x79\xfe\xf1\x23\xd7\x94\x7e\xeb\x01\x37\x77\x5d\x46\xde\x9b\x29\x73\x5c\xf9\xca\x0b\x96\x91\x1f\xac\xff\x0b\x8a\x7a\x78\x1e\x7f\xcf\xb5\x42\x77\xa3\xf0\x25\xfd\xfd\xdb\xea\x7b\x40\x7b\x77\xe3\x21\x1f\x5e\x75\x90\x3e\x01\xa5\xa1\x08\xbd\x38\x0b\xea\x7f\x3a\xb0\x41\x07\x4f\xd2\xf8\xe0\xb4\xfe\x7f\x02\x00\x00\xff\xff\xdc\xa0\x6a\x4e\x05\x2c\x00\x00")

func _hardcodedDoerGoBytes() ([]byte, error) {
	return bindataRead(
		__hardcodedDoerGo,
		"../_hardcoded/doer.go",
	)
}

func _hardcodedDoerGo() (*asset, error) {
	bytes, err := _hardcodedDoerGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../_hardcoded/doer.go", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe1, 0x63, 0xed, 0x28, 0xd3, 0xa4, 0x47, 0x37, 0xa6, 0xd5, 0xb, 0xea, 0x84, 0xea, 0x15, 0xc, 0x97, 0xb3, 0xc1, 0x85, 0xba, 0x26, 0x81, 0x13, 0x23, 0xa1, 0xea, 0xfa, 0x78, 0xff, 0x11, 0xb4}}
	return a, nil
}

var __hardcodedMiddlewareGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x57\x5f\x6f\xdc\xc6\x11\x7f\x3e\x7e\x8a\x09\x0b\x5b\xa4\x40\xf1\xd4\xa2\xcd\x83\x02\x15\x08\x14\x29\x36\x6a\xc7\xaa\x24\x27\x05\x0c\xa3\xd9\x23\xe7\xc8\xcd\xf1\x76\x99\xdd\xe1\x51\x07\x41\xdf\xbd\x98\xdd\x25\x8f\x94\xe4\xc0\x7d\x68\x0d\x58\x47\xce\xee\xfc\xfb\xcd\x5f\xb6\xa2\xd8\x88\x0a\xc1\xa2\xd9\xa1\x89\x22\xb9\x6d\xb5\x21\x48\xa2\x45\x5c\x68\x45\x78\x4f\x71\xb4\x88\xd7\x5b\xf7\xa3\x90\x96\x35\x51\xcb\xcf\xa6\x53\x24\xb7\xb8\x2c\x71\xd5\x55\x71\x14\x2d\x74\x8b\x8a\x8c\x28\xa4\xaa\x20\xae\x24\xd5\xdd\x2a\x2f\xf4\x76\x39\xa1\x4f\x9f\x4f\x2a\x1d\x47\x0b\x12\x95\xfd\xca\xdb\x4b\x6f\xcb\x84\xd8\xe8\xaf\xd5\xb4\x6c\x74\xc5\x46\x57\xba\xdd\x54\xb9\x54\xcb\x8b\x06\x77\x68\x96\x1b\xb1\xdf\x21\x9e\x54\x3a\xdf\x7d\xcb\x77\x2a\x34\x71\x94\x46\xd1\x72\x09\xd7\x42\xc9\xe2\xbd\x2c\xcb\x06\x7b\x61\x10\x1a\x5d\x59\x10\x6a\x0f\x2d\x1f\xd8\x1c\xae\xb4\x01\xa5\xfb\x0c\x7a\x3c\x32\x08\x8c\x96\x54\x1d\x02\xd5\x46\xf7\x0c\x02\xd5\xe8\x2f\x43\xd7\xb2\x44\x7e\xb7\x24\x8a\x0d\x58\x0d\x54\x4b\x0b\x5b\xb1\x87\xc2\x08\x5b\xfb\xbb\x46\x17\x68\x6d\x1e\xad\x3b\x55\x3c\xd5\x9f\xd4\xc0\xc8\xe7\x6f\x84\x2a\x1b\x34\xe9\xec\x0d\x1e\xa2\x85\x41\xea\x8c\x9a\x91\xaf\x3a\x55\x24\x2c\x2c\xe9\x3d\xfd\x06\x6d\xab\x95\xc5\x5f\x8c\x24\x34\x19\x18\x38\x0e\xf4\xdf\x3b\xb4\x94\xb2\x9c\x45\x89\x6b\x34\xe0\xd8\x3c\x61\xe1\x9c\xb8\x34\x06\xce\xce\xc1\x60\xa1\x77\x68\x92\x94\x0f\xe4\x1a\xc6\xb3\xf3\x73\x50\xb2\xf1\x0c\xc1\x18\x7e\x7c\xe4\x3f\x3b\x61\x00\x8d\xfb\xaf\x4d\xc4\x14\xdb\x4b\x2a\x6a\x98\x4a\x1e\x9e\xf3\x84\xf6\x2d\x06\xd5\x85\xb0\x0c\x9a\x91\xaa\x3a\x73\x92\x59\xcc\x39\xac\xb7\x94\x5f\xb2\xb0\x75\x32\xb0\xa5\xe3\x75\xa7\x65\x7a\x7b\xb8\xc2\xa4\x12\xd7\xa2\x6b\xe8\x0b\xc2\xe2\x4e\x6d\x94\xee\x55\x88\xdb\xab\x3f\xed\x40\xaf\x81\xed\x81\x57\x77\x71\x36\x4a\x3a\x3c\xa5\xde\x49\xfe\xeb\xf3\x27\xbf\x32\x7a\x7b\xe1\x4b\x27\x31\xf9\xf0\x94\xa6\x5e\xc7\x0f\x49\xec\x58\xe3\xcc\x59\x10\x78\xde\x3f\xc4\x68\x4c\x7c\xc6\xb6\x67\x10\xbb\x2c\xe1\xec\xc5\xf8\x2c\x78\x9f\xb8\x3a\xcb\x6f\xf9\x24\x49\xd3\xc7\x74\x0c\xcc\x0c\x81\x47\x17\x98\x3a\xbf\xe5\x72\x7e\x73\x77\x77\x9d\xf4\x19\xf0\xc9\x63\x1a\x3d\xba\xbc\xb6\x24\xa8\xb3\xf3\x4c\x80\xde\x88\xd6\x82\x00\x13\xc8\xd0\x3b\x7a\xe4\x3c\x7f\x91\xc3\x92\xe9\x0a\xe2\x20\xbd\x90\x59\xd1\xc2\xf3\x80\x54\xc4\x6a\x5d\x42\x27\x16\x8e\x5f\x12\x95\x82\xfb\x7d\x83\xa2\x44\x93\x14\xba\x44\x66\x73\xf1\xb7\x79\x90\x73\x0e\x4c\x67\xc2\x9c\x37\x7f\xca\xea\xbc\x74\x56\x87\xe2\xff\xd0\xfe\x24\xb6\x18\xcc\x7d\xf0\x10\xfc\x22\xa9\xbe\x9b\x1d\x8b\xb2\xb4\xae\x06\x75\x0b\x8a\x09\xa4\x41\x40\x68\x80\xb0\xd6\x06\x3a\x8b\xb0\xda\xbb\x3b\x43\x93\x6b\xe4\xca\x08\xb3\xcf\xe1\x2d\xf1\xb1\x65\xd1\x02\x5a\x2d\x15\x03\xb4\xc2\x42\x30\x93\xa4\x23\x0b\x85\x68\x1a\x2c\x61\x85\x8d\xee\x41\xaa\x49\x2b\x10\xaa\xf4\x8a\x55\xb3\x87\x5e\xec\x59\x73\x2b\xac\xb7\x46\xaa\xb5\x0e\xcd\x43\x5a\x3e\xa9\xc5\x8e\x25\x82\x00\x8b\x74\x50\x96\xc3\xe5\x0e\x59\xaa\xee\xaa\x9a\xcf\x4b\x8d\x56\x1d\x11\x14\xb5\x50\x15\x3a\x59\x83\x33\x3d\x6b\x96\x4d\xe3\x64\xf9\xb6\x24\x2d\x84\xee\x71\xf0\x99\x34\x6c\x85\x54\x24\x82\xb5\xb2\x69\x3a\x2b\xb5\x0a\xdd\xe9\x19\x84\x49\x41\xf7\x03\xf3\x90\xf4\x19\xe8\x11\x7d\xa9\xaa\xf4\xe9\xb9\x0b\x31\x99\x6b\x72\xf5\x5f\xd0\x7d\xfe\xb3\x68\x3a\x4c\x66\xa1\x7b\x78\x4c\xf3\xe4\x38\x48\x88\xb8\xe5\x04\x96\x6f\x0e\x0d\xe7\x38\x90\xce\x83\xc2\x88\xdb\x4e\x70\xa9\xa0\xfb\x90\xf9\xc1\xde\x49\x4f\x2f\x0c\x0a\x42\x4e\x7c\x85\x3d\xd8\x56\x28\x17\xfd\x12\xc4\x9a\x43\xc8\x7e\x7f\xbc\x79\x07\xad\xa0\xda\xf5\x81\x1a\xc1\xf8\x56\x99\xb3\xc0\xb7\x04\x6d\x23\x0a\xb4\x1e\x43\xc7\x1f\xe0\x0a\xd7\x06\x8f\xb3\x69\x0e\x69\xaa\xd1\x40\xed\x7b\xb4\x85\x9d\x14\x30\x99\x56\xf9\x6d\x2b\xd4\xb4\x87\xa4\x4e\xd5\x9a\x63\xce\x0a\xf0\x5e\x5a\xe2\xca\x1a\x75\xd4\x2e\xfd\x6d\xe6\xb3\x8a\xef\x78\xbf\x4a\x9f\xb0\x3c\x67\x0e\x2e\xf7\x1c\xfa\x15\x72\xa4\x6b\xd9\x94\xde\x2d\x41\x8e\x2f\xc4\xf6\x19\x4e\xff\xbf\xd9\xb3\x5c\xc2\xf7\x44\xb8\x6d\x5d\x02\xfe\xa6\xa5\x1a\xdc\x5e\xed\xa1\x42\x22\x37\x57\xb9\x31\xfa\xda\x58\x1b\xbd\x75\x6e\x07\x0c\x72\x2f\xe3\x4e\x73\x75\x19\x82\x5e\x52\xed\x60\x1f\x42\x29\x86\x32\xf7\x79\x29\x55\x81\x5c\x11\x5c\x0b\x5c\x2f\x95\x26\xe2\x42\xd2\x3e\x88\xba\xe3\x34\xd8\x73\xa9\xa9\xd2\x8b\x9e\xd0\x79\x52\x58\x10\x2b\xdd\x51\x10\x68\xa3\xc5\x22\x88\xe6\x51\x99\x7f\xbc\x79\x97\x5f\x0b\xaa\x23\x3f\x02\x6d\xfb\x2c\xd0\x91\x1b\xa2\xb6\xc8\xdc\x7c\x3c\x3b\x9f\x5d\xf8\xb1\xd1\x2b\xd1\x70\x38\x78\xe0\xb2\x6f\x8b\xcb\x7b\x3e\xa4\x64\x7a\x8d\xdb\xfc\x9b\x90\x03\x6e\xa8\x7c\xe1\xf0\x42\x18\x23\xd1\x24\x26\xf7\x84\x34\xfd\xce\x69\x9d\x14\xd2\xc2\xb6\x30\xb7\xe1\x96\x71\x64\x4b\x13\xef\x98\x1b\x32\x80\x8d\xc5\xaf\x64\xc8\x66\xa7\x17\x9c\x74\x1f\xd6\x89\x2d\x52\x27\x69\xdc\x37\x6c\x9b\x5f\x49\x25\x6d\x9d\xa4\x91\x47\x5a\xaa\xdf\xb0\xf0\x89\x09\x6f\x7f\xe0\x99\xa0\xfd\x12\xc6\xbd\x59\x96\xd3\x0a\x70\xb3\xb1\x92\xaa\x8a\x16\x0b\x62\x14\xb7\x62\x83\xc9\x56\xb4\x9f\x7c\xdf\xf8\x3c\xb6\x0f\x46\x3b\x20\x6d\xdb\x7c\x84\xf6\xad\xd3\x95\xd8\xf6\x30\xaf\xe7\x76\xdf\xe1\x3d\xbd\x17\xad\xc3\xf7\x05\xfa\x00\x2d\x0d\x98\x4e\xb7\x21\x0e\x30\xcf\xe8\x32\x03\xbd\x61\xcd\xf4\x29\xd6\x74\xe2\xd2\xd8\x9c\xf8\xa3\xf8\xf3\x77\x7c\xf8\x30\x5d\x0a\xbe\xb8\x48\x7c\x5f\x96\xc3\xdb\x73\x41\x59\x50\x96\x0e\xdb\x97\x5b\x4e\x6c\x9b\xbf\xd3\x15\x4f\x09\x4a\xe2\x00\xdb\xbf\x0d\x16\x28\x77\x58\xc6\xe9\x8b\x6b\xdf\x8b\x3c\x6b\x17\xa4\xc0\xe3\xb7\x0d\x85\xfd\x05\xdd\x3f\x4d\xde\x60\x21\x0f\x0a\x97\x0d\x66\x0a\xad\x6d\x53\x1f\xe4\x8f\x96\x5b\x91\x0f\xcf\x38\x3a\xad\x86\x46\xec\xb9\x37\xfa\x81\x59\x08\x05\x5b\x5d\xca\xf5\x1e\x24\xb1\x33\xe3\xcc\x88\xe3\x83\xfe\xf3\x71\xbc\xb0\x4e\x3f\x49\xfc\x51\x06\x4f\x26\x4a\x06\xaf\xbd\x0c\x97\x6b\xd6\xf4\x2c\xeb\xf5\x4b\xcb\x89\x07\xc2\x1d\x9c\xc1\xf0\xef\x2f\xa7\xa7\x2e\x11\xe6\x57\xcf\xa0\xcf\x06\xb8\xf9\xb3\xc6\x95\xde\x7b\xa4\x5a\x97\xf9\x2d\x72\x72\x65\x60\x72\x4f\x48\x87\x3b\x0c\xcd\x3f\xa4\x3a\xdc\x98\x51\x6f\xae\x2f\xdc\x22\x67\x2e\x55\xb7\x4d\xa7\x72\x3f\x9a\x66\x22\x74\xe8\x33\xe9\x18\xe9\x2b\x89\x4d\x69\x93\xf9\xc7\x52\x7e\xeb\x57\xc9\xb8\x33\xcd\xc9\xef\x1d\x9a\x7d\x3c\x70\xdf\x88\xfe\x9f\x4c\x48\x1d\x22\xcf\x73\x61\x54\x7c\xeb\xb0\xb8\xd0\x25\x8e\xfa\x3b\xa9\xe8\xcf\xdf\x26\xd6\xf4\x61\x5d\x4b\x87\x8f\x83\x03\x09\xfe\x7e\x0e\x7f\x3b\x3d\x0d\x09\xee\xa4\xb9\x75\xf8\xe0\xb7\xe9\x70\x4c\x59\xce\x8c\x9f\x74\xef\x27\x53\x68\xcf\xd3\xbe\xdd\x20\x2f\x55\x64\xf6\xbc\x06\xb9\x99\xe0\xf2\x62\x31\x76\x1c\x57\x66\x3e\xf8\x5f\xb1\x53\x38\x5b\xf5\x06\x5e\xbf\x1e\x14\x4c\x5b\x22\x23\x7a\x8b\xf4\xa1\x45\x23\x48\x6a\xe5\xb6\x9d\xe3\x43\x37\xf4\x45\xe6\xdb\xd6\x74\xf1\xb6\x86\x57\x6f\x97\x8c\x43\xe6\x7b\x8b\xd2\xe9\x3a\xfe\x33\x1a\x5e\xab\x6e\xdc\x9e\x56\x62\x21\x4b\xb4\xd0\xd7\xe8\x76\x04\xee\x74\x45\x81\x2d\xaf\x7a\x3b\x7f\x31\xf7\xdb\xed\x8c\xcd\x05\x2a\x9c\x8f\xbb\xd6\x4a\xeb\xc6\x69\xb8\x68\x24\x2a\x0a\x0c\x17\x35\x16\x9b\xe9\x06\xc4\xef\x7e\x26\x16\xee\xde\x41\x8f\xdb\x05\xfe\x88\xf9\xc9\x5a\x90\x81\x51\xd5\xcc\xb0\xff\xe1\xa2\x30\x78\xeb\xc6\xac\x1f\x67\xf9\x8f\x48\x49\xfc\xaf\x13\x6f\xf2\x49\x30\xc4\xf5\xa9\xff\xa6\xa1\x7a\x18\x4e\x82\x82\x38\x1b\x00\x09\xc3\xe3\x1b\xa3\xaa\x01\xeb\x50\x1b\xfd\xec\x2b\xe4\xaf\xa7\xa7\xe9\x84\x9a\x7c\xfa\xbc\xda\x13\x26\xfc\x91\x79\xdb\x1a\xa9\x68\x9d\xfc\xfa\x10\x6f\xd1\x5a\x51\xf1\xe7\x5d\x3c\xc7\x1d\x8e\x5e\xd9\x23\x50\x9a\x42\xe4\xb1\xcc\xa0\x6d\x90\xbf\x6b\xbb\xb6\x32\xa2\xc4\xf8\xf1\xd7\x83\x51\xbe\xd4\xc6\xcf\xed\xc7\x3f\xf8\xf8\xfb\x4f\x00\x00\x00\xff\xff\x93\x7d\xa7\xbe\xea\x11\x00\x00")

func _hardcodedMiddlewareGoBytes() ([]byte, error) {
	return bindataRead(
		__hardcodedMiddlewareGo,
		"../_hardcoded/middleware.go",
	)
}

func _hardcodedMiddlewareGo() (*asset, error) {
	bytes, err := _hardcodedMiddlewareGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../_hardcoded/middleware.go", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x75, 0x4a, 0xcc, 0x73, 0x2e, 0x1e, 0x15, 0x65, 0x27, 0x38, 0x91, 0xa8, 0x5c, 0x11, 0x0, 0xb7, 0x9e, 0x46, 0xa0, 0x24, 0xe, 0xb8, 0x31, 0x4f, 0x74, 0xd4, 0xad, 0x58, 0xde, 0x97, 0x3d, 0x83}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"../_hardcoded/doer.go":       _hardcodedDoerGo,
	"../_hardcoded/middleware.go": _hardcodedMiddlewareGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"..": &bintree{nil, map[string]*bintree{
		"_hardcoded": &bintree{nil, map[string]*bintree{
			"doer.go":       &bintree{_hardcodedDoerGo, map[string]*bintree{}},
			"middleware.go": &bintree{_hardcodedMiddlewareGo, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
