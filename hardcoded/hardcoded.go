// Code generated by go-bindata.
// sources:
// _hardcoded/doer.go
// _hardcoded/middleware.go
// DO NOT EDIT!

package hardcoded

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __hardcodedDoerGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd4\x1a\x7f\x6f\xdb\x36\xf6\x6f\xfb\x53\x70\x06\x76\x95\x52\x57\x4e\xba\x65\x77\xf0\x2e\x3b\x6c\x49\x7a\x2d\xb0\xb5\xc5\x9c\xdd\x15\x28\x8a\x95\x96\x68\x9b\x8b\x4c\x6a\x22\x95\xc4\xc8\xfc\xdd\xef\xbd\x47\x4a\xa6\x6c\xd9\xc9\xb6\xe2\x70\xe7\x02\xb1\x2c\xbe\xf7\xf8\xde\xe3\xfb\xcd\x16\x3c\xbd\xe6\x73\xc1\xd2\x5c\x0a\x65\xfb\x7d\xb9\x2c\x74\x69\x59\xd4\xef\x0d\x52\xad\xac\xb8\xb3\x03\x78\x14\x2a\xd5\x99\x54\xf3\xd1\x2f\x46\x2b\x7a\x51\x96\xba\x34\xf8\x34\x5b\x12\x44\xae\xe7\xf8\xb5\xe4\x76\x31\x2a\xb9\xca\xf0\x87\x12\xd6\x7f\x8d\x16\xd6\x16\xf8\x6c\x56\x2a\xc5\x6f\x2b\x97\x62\xd0\x87\x87\xb9\xb4\x8b\x6a\x9a\xa4\x7a\x39\xe2\x33\x71\x37\x5a\xac\x8c\x2d\xe5\xdd\xb3\xb9\xae\x1f\x07\x6d\xa8\x4c\x2b\x7d\xc3\xd5\x42\x66\x62\x24\x6e\x80\x67\xa3\xab\x32\x05\x62\x3d\x5d\xc0\xaf\x92\xa7\xc0\x27\x0b\x31\x82\xf7\xe1\x33\x6c\x41\xa4\x75\xce\xd5\x3c\xd1\xe5\x7c\x74\x37\x42\x56\xbd\xd8\xa3\xd4\xde\x79\xae\x41\xb6\xb9\x28\x81\xa6\x2e\xae\xe7\x89\x54\xa3\xf3\x1c\x76\x2e\x47\xd7\x7c\x75\x23\x04\xd0\x49\x6e\x4e\x47\x0e\x68\xd0\x8f\xfb\xfd\xd1\x88\x65\x1a\x10\xa4\x61\x5c\x31\x09\xe4\xca\x19\x4f\x05\x9b\x69\x20\x92\x69\xd8\x7b\xc0\x90\x34\x2b\xc5\xaf\x95\x30\xd6\xb0\x42\x1b\x23\xa7\xf9\x8a\xdd\x02\xdb\xec\xb6\xe4\x45\x01\x50\x7d\xbb\x2a\x84\x27\xd5\x10\xb9\xef\xf7\x2e\x74\x94\xb2\x23\xa4\x90\x9c\xd3\xb1\x0d\x59\xe9\x7f\xff\xe8\x28\xc6\x2c\xaa\x7f\x9b\x42\x2b\x23\x86\x8c\x4e\x2c\xee\xaf\xfb\x8e\xaa\x2e\x5e\xf3\xa5\x38\xb7\x77\x0c\x94\x5c\xa5\xf6\x7e\x4d\x7c\x4f\xb9\x11\x9e\xc6\x4b\x38\xc5\x1c\xb6\x2e\x60\x63\x5d\x2e\x0d\xb3\x0b\x41\xeb\x2d\xde\x1d\x35\x7c\x7d\x81\x7c\x6e\x88\xcd\x2a\x95\xb2\x28\x6b\x96\x62\xf6\x27\xd8\x46\xa9\x4b\x61\xab\x52\x31\x7f\x2c\x09\x50\x2b\x93\x73\x77\x56\x51\x3c\x64\x29\x50\x23\xf1\x40\x0a\x7f\xc2\xc4\x11\xcf\x32\x53\xbf\x60\x56\xb7\x15\xef\xb8\x0f\xc1\x9d\x00\xb8\x5f\x46\x9a\xef\x07\xa2\x04\x70\x7f\x56\x9a\x7e\x0f\xe4\x60\xe3\x33\x16\xc8\x80\x16\x8c\x87\x82\xaf\x61\x35\xf9\x17\xcf\x2b\x11\x35\x07\x75\xbf\x8e\x93\x08\x3d\x42\xcd\x01\xf4\x86\x03\xaf\x05\x0b\xec\x39\x99\x14\x5c\xf5\x7b\x20\xfe\xd5\x9b\x8b\x37\x63\x14\x9c\x59\x3e\x37\x20\x6c\xce\xad\x97\x5e\xaa\xa2\xb2\x2c\xe3\x96\xff\xa3\xdf\x93\x33\x56\xf0\x12\x08\x20\x26\xee\xba\x4d\xed\x45\xa9\x97\x35\x7b\xc0\x51\xfc\x75\x08\xff\xd9\x19\x53\x32\x47\x4d\xf5\x80\x91\x2d\x64\xcb\x4b\x82\xf2\xec\x0f\x5b\xab\xe7\x0b\x99\x67\x6f\x66\xd1\x86\xd8\x46\x09\x31\xc8\xb6\x66\x22\x37\xe2\x71\x94\x11\x9c\x24\x01\xd5\xa2\x08\xa6\x48\xae\x00\x54\x94\x51\x9c\xbc\x52\xbf\x88\xd4\x46\xf0\x6a\x63\x27\x40\x33\x24\xf7\xf2\xea\xea\xed\x4b\xc1\x33\x51\x9a\x03\x4b\xe7\xbc\x2c\x25\x90\x2c\x13\xf7\x22\x06\x4d\xe0\x7e\x81\x0a\xbc\x75\xc2\xcf\x21\x83\x90\x98\x5c\xe2\x49\xcf\x22\x08\xa2\x55\x9e\xa9\x27\x16\x34\x8f\xcc\x34\x96\xb8\x70\x94\x59\xf4\xf9\x4d\x3c\x20\xc3\x70\x92\x78\x3a\x59\x92\xa1\x85\x87\x46\x0d\x2b\xe5\xaa\x76\x4a\xfc\x21\x85\x61\xa7\xc7\xef\xba\x2c\x9a\x60\x77\xec\x79\xf3\x21\xcb\xee\x11\xd4\x5b\x9d\xcb\x74\xc5\x7e\xdc\x3c\xfb\xfd\x82\x37\x2c\x13\x33\xa9\x60\x3b\xee\x28\x43\xbc\xc2\xd7\x89\xdb\x2c\x04\x6c\xc5\x29\x20\xf2\x1d\xa4\x17\x3d\x9b\xa1\x11\xa2\x5c\x2e\x88\xa8\x6a\x39\x45\xcf\x54\x60\xa0\x72\x89\xda\xd0\x33\x4f\x98\x5b\x2b\x96\x85\x35\x49\xbf\x57\xa3\x46\x31\x7b\xff\x01\xf3\x45\x72\x51\x95\x60\xc8\xda\x19\x39\xed\x0a\x58\xa9\x90\x37\xc2\xd1\x0d\x15\x31\x64\xdc\xb0\x5b\x91\xe7\xf8\x8d\x8b\xa5\x30\x55\x6e\x61\x27\xc2\xae\x73\x92\xf7\xdd\x27\x86\x7d\xbc\xd0\x1f\xd9\x52\xd8\x85\xce\x60\x73\xa2\x1e\xb5\xdc\x79\xc8\xf6\x78\xf3\x54\xeb\xdc\xeb\x6c\x02\xc2\xe4\xe2\x90\xe6\xec\x82\xdb\xe6\xf4\x78\xcd\x2d\xd3\x2a\x15\x4e\x9b\xbb\x24\x5a\x01\xba\x43\xa1\x40\x70\xa5\x2b\x66\x16\x68\x6a\xcd\x36\xa2\xa1\x7d\x62\x04\xe4\xb4\x8c\xf1\x99\xc5\x4c\x62\xd9\x8c\xcb\x1c\x34\xec\xc2\xda\xce\x7e\x31\xdb\xaf\xf9\x20\x0e\x6f\xad\xdc\x9f\xb0\x23\x46\x6f\x26\xb4\xdb\x3a\xb4\x22\x48\x6b\x70\x10\x8e\x33\xa5\xd5\xb3\xb7\x6f\x26\x57\x43\xf7\xf4\xed\xd5\xf9\xcb\x4d\x1e\x24\x61\x4e\xdf\xbd\x4b\xfa\x4d\x18\x7b\x65\xd1\x5a\x0d\x40\x5b\x96\x56\x25\x46\x8c\x7c\x55\x5b\x8b\x5a\xb9\x43\xa8\xd5\x21\x20\xdf\xac\xf6\x1c\xee\x01\x81\xdd\x69\x03\x17\x6c\xeb\xc4\xc1\x68\x8a\xae\x63\x0f\x8f\x1e\x75\xe2\xe3\x8f\x8f\x07\xbf\xfd\x86\x12\x25\x3f\x90\x31\xb1\xb3\x33\x36\x40\x81\x07\x5d\xef\x51\x7c\x5c\xa0\x08\x02\x81\x0a\xc2\x9b\xad\xcc\xb9\xce\x04\xfb\x3b\x38\xf7\x71\x18\x5b\x66\x1c\xa2\x62\x18\x24\xc0\x2e\x84\x57\xf3\xe5\x1d\x30\x07\xb2\x4a\x9e\x77\x5a\x9f\x62\x62\x03\xd1\x72\x62\x67\x75\x7b\xf0\x0f\x9b\xde\x0c\x3c\x0f\xf2\xbb\x7f\x4b\xa5\x4b\xb0\x4b\x8e\xd1\x20\x2d\x05\x37\xe8\xe1\xb7\x1c\x0c\x0f\xed\xc3\x50\x99\x21\xec\xad\x10\xaa\x39\xf8\x31\x3b\x39\x3e\x1e\xb2\xe7\xf8\xe7\x4b\xfc\xf3\x37\xfc\x83\x01\xe2\xe4\x2b\x50\xc2\x12\xcc\x47\x3a\x2b\x36\xec\xe9\xe8\x19\xab\x0a\x4c\x66\xa7\x9f\xb3\x5f\x24\x04\x8c\xb2\x3e\xda\x6e\x29\x1e\x61\xd0\x98\x39\x96\xfc\x5a\x44\x5b\xcb\x43\x76\x0a\x61\x59\x41\xea\x40\x08\xe0\xb1\x36\xf2\x1f\x36\x1c\x01\x01\xe0\x13\x53\x39\xf0\x9b\xbc\x16\xb7\x51\xfd\x30\xa1\xca\x34\x22\x84\xd7\xfa\x16\x32\xd2\x4f\x4a\xde\xbd\xe6\x4a\xbb\x3c\x47\x99\xfe\x38\x39\x3e\x65\xa0\x12\x14\xeb\x14\x8b\xad\x14\x04\xf0\x72\xf5\x7b\x58\x32\x4a\x4f\x7c\x4e\x71\xbd\xb6\x88\xf7\xf2\x03\xa4\x46\x62\xed\x29\x6b\x31\x1d\x45\x11\x70\x94\xbc\xc8\x35\xb7\x5f\x7d\x19\xc5\x47\xcf\xe3\x67\x27\xf1\x91\x38\x9a\xf9\x37\x88\x84\xfb\x3b\xc1\x8e\xce\xd8\xf3\xd0\xaa\xe0\xeb\x7f\xd6\x77\xf7\x1d\xf0\xff\xbf\x03\xbf\xd6\xdd\x59\xc3\x39\x29\x26\x48\x85\x3d\x87\x53\x1e\x3a\x54\x93\x3b\x7c\x16\x6e\x13\x38\xec\xb8\x18\x0e\x20\xcb\x02\x18\x00\x8b\x5a\xb9\x2d\x0a\x7f\x30\x0b\xb4\xc3\x3e\xcf\x6f\xf9\x2a\x88\x17\x28\xff\x9e\xdd\x7e\x6f\xc2\x0d\x78\x70\x6a\xad\x1b\x1b\x52\x90\xaf\xf7\xda\x6a\xf8\x37\x04\xa8\x50\x47\x8d\x36\x40\xb5\xb7\xcc\xb7\x7d\xce\x8c\x35\xa8\xba\x84\x0e\xd3\x95\x0e\xae\x37\x66\x7a\x8a\x15\xdc\x13\xd3\x14\x63\x4d\x19\x44\x12\x6d\x91\xc7\x82\xb9\x26\x5a\xd7\x9f\x43\xb6\xa7\xe4\x8a\xb7\x21\xc3\x86\xc7\xaf\x20\x7d\xd7\x12\x00\xe5\x61\x4b\xce\xfb\x75\x8b\x72\x1c\x36\x2d\x47\x4d\x2d\xf8\x29\x3a\xb0\x7a\x0b\x28\xe8\xaf\xb7\xda\x17\xdf\xaf\xb4\xf9\x82\x96\x25\x14\x93\x1c\xed\x33\x40\xf5\x5e\xd1\xe8\xe2\x0c\x2a\xde\xe0\x37\x39\x49\x93\x59\x70\x9f\xcd\x5a\xb2\x31\x4c\xd7\x06\x75\xf8\xb8\x5b\x68\xfc\xdc\xc5\xd1\xba\xea\xc2\xa0\xfb\x35\xf9\xde\xd7\xf5\xbb\xa7\x4f\x3d\x47\xa6\x70\xe1\xe1\xac\x5d\x81\xf7\x90\xef\x1a\x1f\xfc\x3e\x17\x2a\xaa\xd9\x8b\x31\x2c\x7c\x16\x32\xe8\xa3\x91\x8b\x3e\xae\xb6\x27\xf2\xbd\x29\x64\xc3\x6b\x78\x00\xe1\xb0\x08\x3d\xcf\x35\xb4\x39\xbe\x38\x25\xbe\xc1\xb4\xb3\x95\x2b\x8c\xd1\x7d\xe6\x5c\xaa\x3a\xb0\x7c\x07\x2b\x09\x61\xa0\xdc\x3d\x57\x6a\xe5\x42\x14\x0d\x23\xef\x3d\x83\x1f\xe2\x76\x38\xf7\x3c\x78\xcf\x4c\x65\x99\x56\xd2\x7e\x87\xac\x88\x92\x7a\x04\xb9\x2c\x72\xb1\xc4\x51\x8a\x33\x77\x07\xc1\xa6\x0e\x04\x7a\x3e\xcc\x45\x8a\xe2\xfa\x04\x12\x50\x26\xa6\x15\x35\x93\xa8\x42\xfc\x86\xae\x09\xdc\x5f\xb4\x90\xa5\x02\xbf\x5a\x62\x18\xbc\x5d\x88\x52\x60\xd9\x49\x89\x44\x2b\xc8\x00\xb9\x9e\x07\xac\x80\x97\x02\xb6\x4b\xf7\x04\x83\xe9\x62\x9a\xeb\xf4\x9a\x92\x44\x93\x60\x66\xd0\x8d\xb2\xb9\xa6\x4e\x76\x51\xea\x6a\xbe\xf0\xa1\xaf\x43\xa4\x43\x6d\x8f\xe3\xdf\x7d\xa8\x76\xef\x79\x02\xd4\x7c\xbb\x0e\x1b\x95\x85\x26\xe4\x57\x26\x93\xcb\x37\x50\xa1\x33\x1c\x5f\x25\xf8\x44\xaa\x7c\xe9\x06\x54\xb0\x78\x89\x83\x28\x9c\xf7\x88\x25\x26\x6e\xca\x64\x9b\x49\x16\xbb\x91\x9c\x19\x51\x42\x50\x79\x66\x10\xd0\xcd\xad\x12\xca\x8f\xc2\xa4\xa5\x9c\xba\xb2\x08\x15\x48\xca\xc0\x78\xcf\xeb\xcd\xbd\x94\xdb\xbb\x6d\x44\xbc\xc2\xe5\x03\x1f\x27\x12\xfb\x88\xc3\xbb\xf1\x00\x89\x0d\x3e\xf6\x7b\x24\xed\xa3\xb1\x14\x40\x23\x96\x8f\x13\xe7\xba\x02\x16\x3a\x3e\xd2\xbd\xf6\x58\x65\x00\x8d\xd8\xd4\x15\xef\xc5\xdd\xc6\x16\x0d\x74\x83\xfb\xd6\xd5\x47\x38\xb1\x7c\x04\xee\x06\x1a\x09\xbc\x32\xe7\x2d\x43\x79\x03\xcd\x7e\x48\x80\xd2\x4a\x43\x40\x76\x40\x93\x02\x34\x54\x7e\x6a\x4e\x6c\xbd\x80\x46\xaa\x2a\xc5\x21\x05\xec\x42\xef\x12\xc9\x73\x74\xe1\x90\xd8\x21\x22\x2d\xe8\x7d\xc4\x26\x55\x9a\x0a\x63\x1e\x49\xcc\x43\x6f\x13\x9b\x2c\x74\x69\xbd\x16\x44\xf6\x90\x78\x6d\xe8\x1d\x5a\x01\x43\x0f\xab\x6a\x0f\x43\x57\x0b\x38\x8b\xec\x2d\x9c\xd3\x8f\x02\x73\x31\x32\xb5\x9f\xc8\x2e\xf4\x0e\x3d\x08\xa2\xba\xb2\x8f\x64\xca\x43\x23\x91\x73\x57\xcc\x42\x9a\xf3\x65\xed\xe5\x9d\x48\x2b\xac\x80\x9c\x71\xb7\x89\xa4\x87\xa1\x91\xe0\xf7\xe0\xf4\x2a\x5d\x5d\x69\xcb\xf3\x1f\x04\x57\x87\x8d\x3b\x0f\xa0\x7f\x5e\x02\x38\x90\xa8\x53\x3e\xc4\x56\x8a\x0f\x51\xce\x8e\xdc\x4c\x3a\xf9\x9e\xbe\x20\x09\x6c\xc7\x10\x4a\x4b\x79\xf2\x4a\xcd\xf4\x45\x04\x3d\x0a\x4d\xea\x96\xbc\x78\xef\x7c\xff\x43\x33\xcd\xb9\x5f\x63\xfe\x6a\xbb\xf3\xb8\xcb\x81\x45\x12\x06\x08\x1c\xa9\x85\x5e\xdc\x89\x82\x48\x9b\xb8\xb0\x41\x09\x9c\x77\x17\xcf\xa3\x6c\x60\x08\xaf\xd3\x67\xc7\x6d\xbc\xae\x28\x40\xc8\x5d\xae\x3a\xde\x16\x6e\x17\xa6\x03\xb7\xed\xa1\xe3\x4e\xdc\x16\xcc\x5e\x1a\xb5\x1f\x1c\xa2\xe1\x61\x76\x68\x6c\xf9\xe3\xb8\x4b\x86\x36\xcc\x2e\x89\xd6\xf6\xdd\x6a\xd8\xb7\x7d\x87\xf7\x8d\xb7\x71\x77\x61\x76\xc9\x78\xa7\x3b\xc4\x82\x87\x21\xdc\x87\x7c\x6d\x0c\xb8\x0f\x78\x2f\xd1\xc9\xb7\x1c\x72\xd7\x06\x45\xb2\xed\xb4\x80\xb8\x8e\xfb\xad\xe2\x7b\xb7\x34\x89\xc1\x97\x25\x94\xcb\x7e\x40\x0a\x16\x2c\x75\x26\x53\x9a\x97\x80\xbf\xba\x09\xaa\xe2\x79\xbb\x3a\xc2\x32\x8b\x1b\x23\x0d\x55\x56\x46\x58\x1c\xe8\x13\x81\x1a\x0c\x4a\x22\x61\x16\x3a\xcf\x0c\x15\x52\x95\xc2\xf1\xb2\x85\x47\x6a\x16\x8b\x02\x2a\x53\xd7\xbc\x4d\xc5\x82\xdf\x48\x5d\x26\x84\xfe\x13\xf8\x7e\x69\x2b\x05\x7b\xe4\x50\xd5\x07\x45\x0b\x76\xee\x38\xb8\x06\x68\x01\xc5\xc8\x1c\x44\x80\x1a\x8e\xaf\x90\x15\x1c\xf3\x50\xe9\x2a\x0d\x51\xc1\x0b\x85\x21\x33\x9a\xdd\x52\x2d\x8b\x37\x88\x58\x1f\x42\xfd\x49\xd3\x5d\x05\xe5\x9f\x61\xa6\x2a\xe8\x6e\x11\x6b\xf1\x69\xa9\x79\x96\x72\xb3\x23\xc6\x12\x6b\xd8\xd4\x50\xc9\x44\xf3\xdc\xdd\xba\x89\x45\x10\xbf\x62\xc7\xfe\x44\xb8\xb1\xaf\x19\x8f\x46\x07\xae\x12\xa5\x31\x10\x94\x46\xa7\x5f\x25\x4d\xb1\xe7\x4b\x3a\xac\xf1\xf1\xb4\xdc\x81\xf4\x3c\xce\xc4\x82\xb4\xcb\x7a\xd8\x0e\x0d\x83\x7f\x4f\x53\x9d\x70\x8d\x6a\xf1\x2e\x24\x77\x51\x41\xcb\x39\x9c\x9a\x50\x14\x80\xdd\x1d\x85\x12\x36\xf9\x9e\x5e\x46\x03\x9b\x16\x83\x21\x1b\x9c\x3c\xff\x6b\x72\x0c\xff\x4e\xc6\xc7\x03\xdf\x6e\x6c\x5d\x30\xf4\x0a\xae\x64\x1a\xb9\x8b\x02\xea\x20\xe6\xee\x32\x2b\x99\xa0\x86\xa2\xcd\x2e\x5d\xec\xc4\x0e\x3e\x90\xb4\xbe\xd5\x04\x7e\x7c\x9a\xc0\xd1\xd5\xe0\x96\xcf\x89\x01\x5c\x7e\x41\xf1\x1e\x2c\x1c\x81\xbe\x38\x6e\x0f\x78\x09\x06\x0e\x90\x12\xc9\x04\x87\x79\x34\x43\x6b\x72\xc7\x56\xaa\xb9\x5f\xb7\x10\x20\x25\xa1\xd7\x6e\xe1\x10\x79\x7c\x8f\x1d\x3b\x80\xa3\xa5\xfc\xcc\xea\xe1\x97\x5f\x4d\xaf\xa3\xad\x59\x33\x08\xc4\x9a\x9e\x5c\x2a\x1a\x9e\x48\xb4\x67\xa4\xd1\xab\xca\x1c\xb7\x19\xa0\xae\xc0\x4a\x06\xec\x29\xab\x75\x95\x7c\x9b\x65\x78\x51\x34\xa1\xed\xe9\xb0\xb0\xdb\xfa\xb5\x39\x29\xd2\x2f\xe8\xc5\x27\xb5\x68\xf0\xcf\xcb\x2b\x38\x2e\x20\x39\xc4\x83\x71\x08\x1d\x67\x45\xea\x4b\xde\x02\x55\x3b\x8b\x5c\x3a\xc3\x3e\x5e\x41\x8c\xf3\x17\x71\xb5\xbd\x83\x7e\xb0\xd2\x86\x93\x1a\xb3\xcf\x4d\x73\x13\x84\x1f\x6c\xfc\xa5\xaa\x04\xfd\x22\xf5\xf5\x1c\x64\xc3\x5e\x70\xff\x9d\x4c\xaa\xa9\xeb\x24\x70\x4e\x10\x0d\x80\xd2\x5f\x82\x46\xdf\x4d\x08\x7e\xfd\xaf\x33\x8c\x27\x28\x6e\x36\x03\x4c\x87\x99\x5c\x3a\x47\xf6\x5b\x53\xaf\xbe\x5d\x9b\xb8\xa5\xcd\xc5\x1e\x56\x3e\xc9\x4f\x6a\xc9\x4b\xb3\xe0\x79\xf4\xfe\xc3\x74\x65\x45\x24\x6e\x92\x0b\x88\x3d\x51\x1c\x83\xbc\x62\xf7\x5a\x6e\x87\x2d\xcf\x17\x11\x4e\xa8\x71\x02\xe8\x81\xdf\xfb\x5c\x2f\x97\xf8\x7f\x17\x0e\xa3\xa2\x11\xa3\xc1\xd7\x33\x90\x96\x17\xbc\x77\x65\xd4\x87\x0d\xe8\xce\x12\x18\xb4\xe8\xbb\x75\xb0\x5a\x8c\xf9\x61\xe3\xec\xc2\x3d\xb0\x27\x71\xf8\x29\xe0\x30\xb1\x67\xf5\xc0\xd1\x49\x4c\xc0\x33\x09\xb1\xdd\x1d\x3f\x84\xdc\x27\x10\xa0\x0d\x7a\x20\x6a\x3b\xa4\xa5\x03\xcc\xe7\x71\x7b\x09\x9b\x1f\xb7\xd7\x82\x1b\x96\x2e\xf0\x78\xb2\x16\xc6\x17\x31\x3a\x7d\x3d\x76\xa7\x34\x50\x40\x0e\x02\x28\x23\xb1\x19\x86\x58\x4f\x91\x03\x7e\x6b\xbc\x38\x43\x43\xd9\xe2\xa0\xd1\x75\x3d\xf3\xe9\x75\x04\x81\x40\x2f\x9b\x51\x79\x0d\xdb\x54\xb3\x75\x0d\x1b\x3f\x70\xaa\xf5\xe9\x74\x16\x7a\x78\xd8\xdd\x25\xe0\xa7\xe5\xce\xdf\x60\x03\x3b\xc1\xf0\x1f\x3c\x34\xda\x47\x3d\x66\xdf\xb0\x56\xc4\xfd\xb4\xec\x6c\x3c\x12\xff\xac\x11\x63\x1d\x3f\x58\xa8\xfc\xc9\x71\x21\x48\x9f\x25\x6e\xd8\xd2\x1e\xae\x8d\x77\xa6\x6b\x75\x7a\x85\x57\x59\x12\x4c\x63\x86\x75\xc6\x72\x11\x89\x94\xd2\x15\xbd\xfc\xac\x0b\xa7\x5c\xb5\xa0\x34\xb0\x6b\x0f\xe4\xbf\x39\x6b\x26\xf2\x3d\x77\x09\x0c\xb6\x0b\xa1\xcd\x63\x73\xe5\xb7\xa1\xd1\x96\xa4\xec\x18\xba\x0b\x95\x2a\xad\xcd\x74\x69\x5c\xd6\x3c\x7d\xf7\xce\x65\x4d\xda\xba\xc5\xcd\xba\xc9\x14\x3b\x03\xb9\x1e\x66\xb9\xc7\x4e\x30\xdd\x54\xf2\x77\x28\xea\xf0\x30\x73\x5b\x85\x6d\x9e\xfb\x0f\xea\xef\x0f\xab\xef\x80\xf6\xd6\xfd\x36\x1f\x4e\x75\x6c\x74\xc4\x94\xc6\x29\x3f\xb5\x3b\x24\xa8\xbb\x9b\x5b\x09\xcb\x8e\x46\x71\xe7\xa8\xf3\x3f\x01\x00\x00\xff\xff\xa8\x58\xf2\xc5\xd8\x26\x00\x00")

func _hardcodedDoerGoBytes() ([]byte, error) {
	return bindataRead(
		__hardcodedDoerGo,
		"_hardcoded/doer.go",
	)
}

func _hardcodedDoerGo() (*asset, error) {
	bytes, err := _hardcodedDoerGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "_hardcoded/doer.go", size: 9944, mode: os.FileMode(420), modTime: time.Unix(1478805180, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __hardcodedMiddlewareGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x56\xcd\x6e\xdc\x36\x10\x3e\x5b\x4f\x31\x55\x11\x54\x2a\x64\xee\xa9\x17\x07\x3e\x04\x8e\x5d\x1b\x88\xd3\x20\xde\x22\x87\x20\x28\x68\x69\xb4\x62\x56\x22\x55\x92\xda\xb5\x61\xf8\xdd\x3b\x43\x4a\xbb\x5a\xff\xb4\x3d\xe5\x60\x2f\x77\x38\xf3\xcd\xcc\x37\x3f\xdc\x5e\x96\x6b\xb9\x42\x70\x68\x37\x68\x93\x44\x75\xbd\xb1\x1e\xb2\xe4\x28\xad\x3b\x9f\xd2\x87\x46\xbf\x68\xbc\xef\xf9\x6c\x07\xed\x55\x87\x8b\x0a\x6f\x87\x55\x9a\x90\x64\x65\xfa\xf5\x4a\x28\xbd\x38\x6b\x91\x00\x16\x6b\x79\xbf\x41\x3c\x5e\x19\xb1\xf9\x6d\xd1\x9a\xd5\x0a\x2d\x19\xae\x37\xd7\xaa\xaa\x5a\xdc\x4a\x8b\xf0\xef\x36\xdd\x4e\x91\xf1\x4d\x8f\xda\x5b\x59\x2a\xbd\x22\x3b\xe5\x9b\xe1\x56\x94\xa6\x5b\xcc\xe4\xf3\x33\x61\xa4\x49\x9e\x24\xf5\xa0\x4b\xd8\x92\xfa\xde\x6d\xc6\x19\xaa\x12\x3f\xca\x8e\xb2\xf5\x96\xb4\x0b\xb0\x66\xf0\x68\x81\xd3\x13\x97\x52\x93\xaa\xcd\x0f\xbe\xc1\x43\x72\xd4\x8c\xc7\x93\x53\x18\xdd\xcc\x50\x23\x42\xbe\xd7\x3a\x85\x5e\x6a\x55\xce\x54\xc6\x1b\xd2\x59\x2c\xe0\x03\x51\xc2\xc9\xec\xd3\x04\xca\x07\x1d\xb4\xd2\xf9\x02\x94\x40\x41\x81\xb7\x2d\xdc\x22\x10\xdb\x50\x2b\xeb\xbc\x08\xa6\xcb\x46\x39\xe8\xe4\x9a\x94\x95\x07\x67\xc0\x37\xd2\x83\xf1\x0d\x79\x9d\xc1\x35\xd2\x81\x2c\x4b\x74\x0e\x3c\xeb\x20\xc4\x32\x04\x8c\x60\x72\x50\x0d\xa5\xbf\x63\xe9\x09\x52\x8f\xda\x16\xff\x1e\xd0\x79\x0a\x4b\x7b\xbc\x63\xdf\xfb\xd4\xe6\x96\xe2\x23\x6e\xa7\xdc\x0a\x98\xb1\x4b\x89\x5a\xf4\x83\xd5\x30\xde\x26\x8f\x49\x42\xbe\x9f\xf0\xc2\x61\x51\xa4\xfa\x3e\x5e\x38\x01\x17\xc6\x82\x36\xdb\x02\xb6\xf8\x4b\xe0\x85\x9a\x4d\x0f\x48\x51\x59\xb3\x65\xd2\x38\xbc\xa0\x0c\x43\x9f\x84\x6c\xb8\x94\xd4\xc1\x91\x8d\x40\xcf\x3d\x94\x56\xba\x26\xea\x5a\xc3\x3c\x88\xd8\x0f\xcf\xea\xf2\x1f\x75\x9f\x92\x98\x89\x2f\x08\x27\x63\xb0\x6c\x1b\xe5\x9f\xd1\xf5\x46\x3b\xfc\x62\x95\x67\x1a\x2c\xfc\x3a\xca\x03\x89\x39\xe3\x1c\x55\x58\x13\x62\x30\x8b\x82\xa3\x10\xca\xb9\x0d\x3d\x65\xb1\x34\x34\x05\x59\xce\x17\xaa\x86\xdd\xdd\xe9\x29\x68\xd5\x46\x83\x31\x18\x3e\x3e\xf2\xbf\x8d\xb4\x80\x36\xfc\x19\x9a\x5a\x92\x38\x6a\xf7\xb2\x81\x39\xf2\x74\x16\x99\xbf\xef\x71\x74\x5d\x4a\x37\xf5\xff\x49\x40\x66\x98\x53\xa0\x61\x17\xe7\x0c\x56\x67\x93\x59\xbe\x53\x0f\x5e\xe6\xda\x93\x0a\x8b\x28\x3b\x39\xb4\xfe\x15\xb0\x74\xd0\x6b\xaa\xa9\x1e\xeb\xf6\xe6\xe7\x0d\x98\x1a\x38\x1e\x78\xb3\x4c\x8b\x1d\xd2\xfe\x94\xc7\x24\xf9\x7f\x6c\x5c\x71\x61\x4d\x77\x16\xbb\x31\xb3\x62\x3a\xe5\x79\xf4\xf1\x3e\x4b\x83\x69\x5a\x84\x08\x46\x9b\xeb\x87\x94\x62\x49\x4f\x38\xf6\x02\xd2\xd0\x25\x3c\xbd\x48\xa2\x98\x7d\x16\x96\x98\xb8\xe1\x1b\x02\x7b\xcc\x77\x85\x39\x60\xe0\x31\x14\xa6\x11\x37\xbc\x20\x2f\x97\xcb\x4f\x19\x35\x28\xdf\x90\x41\xec\xeb\x67\x4b\x81\x3a\x10\xa5\xa7\x31\x95\xa0\x71\x0b\x8e\xe0\x40\xd3\x60\x54\x20\x6b\x5e\x37\xdc\x9a\x7f\x7e\xfe\x40\x19\xfb\x26\xb0\xb1\x9f\x3a\xc1\x80\x57\x1e\xfa\x96\x42\x75\xb1\xa7\x83\xbd\xd2\x2f\x0d\x67\x01\x35\xcd\xcc\x40\x25\xba\xbd\x1f\x37\xc1\x38\x73\x0e\x36\x4a\xc2\x6c\x35\x8a\x1b\x82\x99\x33\x99\x07\x57\x35\x05\x19\x1c\xe0\x9d\x72\x61\x0d\xec\x7c\x34\x28\x2b\x02\x2a\xe2\x98\xb1\x4e\xcc\xab\x62\x67\x71\xda\xf6\x29\x4f\x3b\x4b\x42\xd9\xa8\xb6\x8a\x69\xd1\xae\x61\xbb\x71\xfe\x9e\x2f\xcf\x1f\x36\x81\x94\xe9\x3b\xef\xb1\xeb\x3d\xef\xc4\xef\x86\xb2\x1c\xd3\xa6\x54\x56\xe8\x7d\xd8\x2e\xdc\x1e\x44\x40\x6d\xa0\x26\x9e\x42\xda\x23\x07\xb4\x04\xe9\x29\x0a\x4f\x07\x4f\xac\xa0\xea\x89\x4f\x54\xbd\x24\x4e\xa2\xeb\x9f\x31\x9d\x84\x59\x76\x65\x11\xc6\x94\x8c\xe6\x0a\xbf\xb7\xe6\x56\xb6\x4b\xf6\x47\x73\xcf\xe0\x47\xe7\x77\x7c\xe9\xb3\xb9\x1a\x77\xdb\xe5\x58\x84\xd0\xdb\xaf\x5c\x9e\x49\x6b\x15\x21\x59\x11\x05\x79\xfe\x36\x78\xfd\x69\xb6\x40\x28\xc4\xc3\x18\xa8\xef\xad\xe7\x48\xb3\x98\x58\xe8\x75\xc0\x96\x7a\xe9\xff\x19\x14\x07\xb7\x67\x5c\xf5\x3f\xea\xcc\x95\x79\x40\xda\xad\x3d\xd7\x8b\x0b\xa5\x95\x6b\xa8\xe1\x62\x25\xe2\x8b\x13\xe9\xbf\x7a\x1f\x1f\x9e\xf0\x16\xd0\xa7\x54\xd5\xbc\x05\xc3\x88\xf2\x7b\x49\x96\x9e\x59\xe4\xe7\x2f\xeb\x64\xff\x35\xce\xf0\xb7\xf8\x91\x47\xb6\x47\xa6\xc9\xe3\x8e\xda\xab\xe0\x2b\x23\xd1\xae\xed\x0f\xe3\x5e\x92\xec\x5a\xf6\x81\xdf\x17\xe4\x13\xb5\x7e\xe2\x74\xbe\x94\xb9\xc0\xbc\x2a\x2a\x82\x5c\x87\x9f\x07\x5f\x53\xe3\x8f\x43\x1f\xd9\xe3\x78\x95\x7e\x7b\xcb\x97\x0f\xf3\xdd\xf4\xea\x3e\x7b\x57\x55\xd3\xb7\xe7\x40\xc5\xe8\x2c\x9f\x1e\x81\xb0\x23\x29\x33\xfa\x49\x71\xbe\xa1\xc8\xb3\x74\xa4\xed\x2f\x7a\x52\x50\x6d\xb0\x4a\xf3\x17\x5f\x9f\x17\x6d\xea\x50\xa4\xd1\x26\x2e\x3d\x5a\x5e\x67\xfe\xee\x69\xf3\x8e\x11\x7e\xa1\x5f\x57\xa1\x1b\xec\x9c\x5a\xd7\x87\x2a\x3f\x5d\x97\x82\xb5\x27\xb5\x08\x9b\x4f\x2b\xf4\x9f\x00\x00\x00\xff\xff\x29\x98\x17\x0d\x82\x0a\x00\x00")

func _hardcodedMiddlewareGoBytes() ([]byte, error) {
	return bindataRead(
		__hardcodedMiddlewareGo,
		"_hardcoded/middleware.go",
	)
}

func _hardcodedMiddlewareGo() (*asset, error) {
	bytes, err := _hardcodedMiddlewareGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "_hardcoded/middleware.go", size: 2690, mode: os.FileMode(420), modTime: time.Unix(1478197516, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"_hardcoded/doer.go":       _hardcodedDoerGo,
	"_hardcoded/middleware.go": _hardcodedMiddlewareGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"_hardcoded": &bintree{nil, map[string]*bintree{
		"doer.go":       &bintree{_hardcodedDoerGo, map[string]*bintree{}},
		"middleware.go": &bintree{_hardcodedMiddlewareGo, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
