// Code generated by go-bindata. DO NOT EDIT.
// sources:
// ../_hardcoded/doer.go (4.105kB)
// ../_hardcoded/middleware.go (1.685kB)
// ../_hardcoded/tracing.go (6.855kB)

package hardcoded

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __hardcodedDoerGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x57\x4d\x6f\xdb\x38\x13\x3e\x4b\xbf\x62\x6a\xe0\x45\xa5\xc4\x96\x9c\xbc\x4d\x5b\xa4\xeb\x43\x9b\xec\xa2\x7b\x68\x52\x34\xdd\xdd\x02\x41\x80\xd2\xd2\x28\x66\x43\x93\x2a\x49\xc5\x31\xd2\xfc\xf7\xc5\x90\x94\x2c\xa5\x4e\xb0\x5f\x87\xdd\x1c\x1c\x89\xe4\x3c\xf3\xcc\x07\x67\x46\x35\x2b\xae\xd8\x25\x42\x21\x38\x4a\x1b\xc7\x7c\x59\x2b\x6d\x21\x89\xa3\xd1\x7c\x6d\xd1\x8c\xe2\x68\x54\x28\x69\xf1\xc6\xd2\x23\x57\x39\x57\x8d\xe5\x82\x5e\x96\xcc\x2e\x72\xcd\x64\x49\x2f\x12\x6d\xbe\xb0\xb6\xa6\x67\xcb\x97\x38\x8a\xd3\x38\xce\x73\x28\x15\x6a\xe0\x06\x98\x04\x2e\x2d\xea\x8a\x15\x08\x95\xd2\x30\x2a\x15\x97\x97\x23\x20\x21\xd0\xf8\xb5\x41\x63\x0d\xd4\xca\x18\x3e\x17\x6b\x58\x71\xbb\x80\x95\x66\x75\xcd\xe5\x65\x6c\xd7\x35\x06\xa8\x0e\xe4\x36\x8e\x8e\x55\x52\xc0\x0e\x21\x64\x47\xce\x80\x31\xe8\xf0\xfe\xc1\x23\xa6\x90\xb4\xef\xa6\x56\xd2\xe0\x18\x50\x6b\xa5\xd3\xf8\x2e\xf6\xa8\xaa\x3e\x61\x4b\x3c\xb2\x37\x60\xac\x6e\x0a\x7b\x7b\xe7\x78\xcf\x99\xc1\x80\xf1\x96\xc9\x52\xa0\x86\x1a\x75\xa5\xf4\xd2\x80\x5d\xa0\xdb\x1f\x70\xf7\x68\xb4\x7c\x4c\x3c\x37\x60\x55\x23\x0b\x48\xca\x6e\x2b\x85\xbf\x41\x9b\xac\xd6\x68\x1b\x2d\xa1\xc8\x8e\x55\xe2\x0d\xc9\x73\xd0\x68\xf5\xba\x65\x4a\x2f\x1c\x0d\x1c\x4c\x3f\x0d\xfd\xeb\x49\xba\xb3\x3d\x96\x04\x5a\xc2\xe6\x8f\x1c\xed\xd4\xe8\xf5\x7b\x25\x78\xb1\x86\x0f\x9b\xe7\xa0\xaf\xb7\x02\x25\x56\x5c\xa2\x01\xe6\x91\xa1\x76\xcb\x99\x57\xd6\x3f\x38\x08\x5e\x9e\xc3\x1b\x56\x5c\xa9\xaa\x32\xe0\x4d\xf2\x9e\x95\xcd\x72\x8e\x1a\x98\x2c\xc1\xf2\x25\x97\x97\xa0\xaa\x00\xcc\xac\xc5\x65\x6d\x4d\x16\x47\xad\x68\x92\xc2\xf9\x05\x25\x5c\x76\xdc\x68\x66\xb9\x92\x0e\xd9\x69\x05\x8d\x05\xf2\x6b\xf4\xb8\x7d\x47\x8c\x81\x19\x58\xa1\x10\xf4\x9f\x36\x35\x9a\x46\x58\x50\x95\x93\x6e\x93\x39\x84\xe7\xa9\x81\xcf\xc7\xea\x33\x2c\xd1\x2e\x54\x99\xc5\x91\x43\x4f\x06\x11\x1b\xc3\x03\x01\x9b\x2b\x25\x82\xcf\xce\xb8\xbc\x14\xf8\x98\xe7\xec\x82\xd9\x2e\x7a\xac\x65\x0b\x4a\x16\xe8\xbd\xf9\x3d\xc4\x20\x6b\xb7\x38\x94\x59\x58\xab\x06\xcc\x42\x35\xa2\xec\xd4\x60\x87\xbd\x67\xb0\x50\xb2\x04\x56\x59\xba\x5e\x16\x2a\xc6\x85\xc9\x42\xda\x7e\xa7\x2f\x85\x87\x3d\xdf\x4b\xce\x7b\x3b\xb7\x7b\xb0\x03\x6e\xe5\xcc\x69\xbb\xeb\x67\x11\xac\xb8\x10\x81\x99\x54\x72\xf2\xfe\xf4\xec\xe3\xd8\x3f\xbd\xfe\x78\xf4\x76\x53\x1c\x9c\x31\x07\x9f\x3e\x65\x24\xfa\xf1\xf4\xf8\xf4\x10\x7e\xb6\x94\xad\x06\xa4\xb2\x50\x34\x5a\xa3\xb4\x62\xdd\x66\x8b\x5c\xfb\x20\xb4\xee\xc0\x12\xe6\xeb\x07\x82\xfb\x88\xc1\x3e\xda\x1a\xbf\xc2\xbd\x88\x6b\x34\xf5\xb6\xb0\xf7\x43\x4f\x3e\xe1\x95\x5b\x7d\x32\x03\xc9\x05\x7c\xfb\x46\x16\x65\xef\x5c\x32\xc1\x6c\x06\x23\x32\x78\xb4\x6d\x9d\xcc\xa7\x8d\x38\x8a\x48\x57\x76\x66\x99\x6d\xcc\x91\x2a\x11\x7e\x80\x83\xe9\x94\xc0\x5b\x8f\x57\x4c\x18\x8c\xa3\xbb\x2e\x04\x56\x37\x18\xdc\xfc\xe3\x4d\xad\x24\x4a\xcb\x99\xd8\x9a\x7d\x12\x70\x73\x62\x70\x89\x7d\xd6\x3d\x20\xff\x78\xea\x55\xfc\x9a\xea\x61\x58\x75\xf5\xbc\xa7\x45\x50\x35\x28\x34\x32\x43\x37\x7c\xc5\xb8\x75\xf9\x61\x5c\xed\x45\xbb\x42\x94\x5d\xe0\x0f\x61\x6f\x3a\x1d\xc3\x3e\xfd\x3c\xa3\x9f\x97\xf4\x43\x05\x62\xef\xf9\x74\x0a\x4b\x2e\x04\xf7\x59\x6c\x60\x37\x9f\x40\x53\x83\x55\x70\xf0\x3f\xf8\xc2\xad\x45\xdd\x86\x76\xbb\x15\x7f\x20\xa1\xe1\x70\x06\x4b\x76\x85\xc9\xbd\xed\x31\x1c\xa4\x71\x24\xf1\xc6\x9d\xd8\x9b\x4e\xdb\x24\x7f\xb7\x61\x14\x47\x5a\x96\xb4\x4d\x8d\x32\x3b\xc1\x55\xd2\x3e\x9c\xa9\x46\x17\x98\x38\x81\x13\xb5\x4a\xd2\xec\x17\xc9\x6f\x4e\x98\x54\x49\x9a\xa6\x71\x84\x24\x35\xcd\xa6\x07\x90\xe7\xce\xac\x03\xea\x40\x05\x4a\x1b\xec\x8a\x23\xea\xa3\x3c\x80\x5f\xba\xba\xde\x66\xc4\x39\xbf\x80\x19\x38\x6a\xbb\x30\x20\x9d\x24\x89\x96\x65\xf6\x93\x50\xcc\x3e\x7f\x96\xa4\x3b\xfb\xe9\x64\x2f\xdd\xc1\x9d\x2a\xac\x90\x10\xe9\xf7\x86\xed\xcc\x60\xbf\x9f\x55\x1a\xed\xbf\xf6\xee\x3e\x14\xe0\xff\xfe\x05\x3e\x51\xdb\xbb\x86\xbf\xa4\xd4\x20\x25\x5e\x87\xc6\xbf\xa6\x0b\xd5\xf5\x8e\xd0\x85\x87\x00\x8f\x5f\x5c\x2a\x07\xcb\xda\xae\xc1\x08\x5e\x60\xeb\xdc\x01\xc2\x5f\xec\x02\xc3\xb2\xcf\xc4\x8a\xad\x7b\xf5\x82\xec\x7f\x40\xdb\x9f\x6d\xb8\x3d\x0e\xde\xad\xed\xb4\xe7\x1c\x74\xe4\x07\xda\xa1\x1b\x7e\xe3\x76\xd1\xf7\x51\xe7\x0d\x90\xb8\x82\x30\x03\xfb\x34\x56\xd7\xa8\x35\x2f\xc3\x5c\xe1\x47\x67\x50\xf3\x2f\x58\xd8\xa7\xa6\x1b\xc6\xba\x31\xc8\x59\x74\x0f\x3e\x29\xec\x4d\x0b\x9a\x05\x3e\x63\x78\x60\xe4\x4a\xef\x9f\xec\x4f\x81\x61\x87\xf0\x7f\x65\xa2\x41\x42\x1e\x0f\xec\xbc\xbd\x1b\x20\xbb\x89\xb1\x1d\x4a\x77\xba\x59\xf0\x9f\x18\x4b\x5b\x15\x63\x50\x57\xae\x2c\xb5\x84\x93\x34\xf3\xe4\x86\xbc\xd2\x2c\xe9\x9b\xe9\x2e\xda\x13\x75\xd5\xde\x8a\xce\x17\x33\x28\xb3\xde\xbb\xbb\x24\x5d\x67\x21\x3d\x9b\xbd\x6c\x93\x98\x71\x74\xcd\xf4\xb6\x3b\xee\x37\xba\x7b\x1e\xbb\x99\xef\x8c\x5d\xe3\x60\x30\x9a\xab\x92\x7a\x14\x14\x34\xe9\xaf\x10\x16\xee\x80\xf2\xca\x32\x38\xb5\x0b\xd4\x2b\xee\xf7\x5c\x15\x74\x07\x98\xd0\xc8\x4a\x4a\x1f\x56\x3a\x5c\xf7\xb1\xd0\x54\x15\x6a\x50\xb2\xab\x6e\xe5\x40\x95\x13\xa7\xb9\x2b\x83\x33\x44\x27\x46\x84\x0f\xf3\xdc\x58\x32\xe7\x1a\x75\x25\xd4\x2a\x2b\xd4\x32\x77\x12\x5c\x49\x93\xef\xff\x7f\xfa\x62\xfa\xf2\xc5\xf3\x9c\x74\x71\x79\x39\x21\xc6\x13\x55\x4d\x48\x76\x12\xb0\x27\xd4\x78\x55\x63\x27\x4b\x55\xf2\x8a\x6a\x43\xb7\x63\x2c\xb3\xc1\x17\xf3\xa6\x82\xf3\x0b\xfa\xe2\x73\x31\xd0\xd9\x1b\x32\x3e\xd4\x3b\x8a\xc6\xd0\x61\x51\x34\x6f\x2a\x5f\x29\x67\xe0\x3f\x08\xb3\x0f\xc8\xca\xd7\x42\x24\x5e\x96\xfa\xc7\xb0\x6a\x12\x4a\x9b\xb4\x92\x0b\x27\x1d\x47\x14\xc9\xbb\xd8\x77\xb2\x76\xee\xa5\xb6\xf7\xca\x55\xbf\x57\xed\xda\xee\xae\x93\xdf\x4a\x2d\xd2\xa5\x26\x99\xc0\xe3\x44\xd5\x47\x42\x19\xd4\x89\xfb\x80\xa5\x4e\xfb\xc6\xb9\x3f\x99\x37\x95\xeb\x6b\x51\xc0\x98\x81\x2e\x03\x05\x57\x9d\x5b\x83\xca\xac\xa4\x4f\xab\x62\x0c\x3a\x98\xd1\x32\x9b\xcd\x40\xa0\x4c\xda\xd4\x4b\xa9\xe4\x3f\xe9\x27\x5f\xe8\x34\xbe\xb3\x38\xbc\xd4\x73\x9c\x6b\x64\x57\x41\x57\x9e\x83\x63\xd8\x7e\x78\xb8\x9c\x0c\xe9\x56\x6d\x16\xb8\xef\x8c\x92\x8b\x96\x84\xa9\xef\x39\xd3\xd4\xce\x92\xcc\xc1\x51\xc2\x3b\x7c\x3f\x67\x0b\xc4\xba\x63\x7a\x1e\x2c\xb8\x48\x87\xbd\x3c\x90\x8c\xef\xe2\xdf\x03\x00\x00\xff\xff\xb2\x68\x07\x88\x09\x10\x00\x00")

func _hardcodedDoerGoBytes() ([]byte, error) {
	return bindataRead(
		__hardcodedDoerGo,
		"../_hardcoded/doer.go",
	)
}

func _hardcodedDoerGo() (*asset, error) {
	bytes, err := _hardcodedDoerGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../_hardcoded/doer.go", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xf, 0xf6, 0xfb, 0x53, 0x95, 0x50, 0x6c, 0x8f, 0x54, 0xa2, 0x25, 0xc8, 0x20, 0x72, 0x72, 0x60, 0x47, 0x1f, 0x36, 0x2d, 0x2c, 0xa5, 0xa8, 0x41, 0xc5, 0x4f, 0x13, 0x72, 0x55, 0x59, 0x7f, 0x33}}
	return a, nil
}

var __hardcodedMiddlewareGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x54\x5f\x6b\xe3\x46\x10\x7f\xb6\x3e\xc5\x74\x4b\xc8\xea\x70\xe4\x7b\x28\x14\x02\x7e\x28\xe9\xa5\x79\x39\x38\x2e\xa1\x2d\x94\xc2\x6d\x56\x23\x69\xb1\xbc\xab\xce\x8e\xac\x9a\xe0\xef\x5e\x66\x25\x39\x51\x48\xd3\xa7\x3e\x58\xde\x9d\x99\xdf\x6f\xfe\x6f\x67\xec\xce\xd4\x08\x11\xe9\x80\x94\x65\x6e\xdf\x05\x62\xd0\xd9\x4a\x55\x7b\x56\xd9\x4a\x79\xe4\x4d\xc3\xdc\xc9\x99\x7a\xcf\x6e\x8f\x9b\x12\x1f\xfb\x5a\x65\xd9\x4a\xd5\x8e\x9b\xfe\xb1\xb0\x61\xbf\xb9\x69\xf1\x80\xb4\xd9\x99\xe3\x01\xf1\xaa\x0e\x9b\xc3\x8f\x9b\x36\xd4\x35\x92\xca\xf2\x2c\xdb\x6c\xe0\x8b\xf1\xce\x7e\x76\x65\xd9\xe2\x60\x08\xa1\x0d\x75\x04\xe3\x8f\xd0\x89\x22\x16\x70\x1b\x08\x7c\x18\xd6\x30\xe0\x25\x21\xd8\xe0\xd9\xf9\x1e\x81\x1b\x0a\x83\xf3\x35\x70\x83\xa3\x31\xf4\x9d\x30\xca\x3d\xb2\xb1\x3b\x88\x01\xb8\x71\x11\xf6\xe6\x08\x96\x4c\x6c\x46\x5b\x0a\x16\x63\x2c\xb2\xaa\xf7\xf6\xb5\x7f\xdd\x80\x24\x56\xdc\x19\x5f\xb6\x48\xf9\xe2\x06\x4f\xd9\x8a\x90\x7b\xf2\x0b\xf1\x6d\xef\xad\x16\x32\x3d\x8c\xf2\xaf\x18\xbb\xe0\x23\xfe\x46\x8e\x91\xd6\x40\xf0\x61\x92\xff\xd5\x63\xe4\x5c\x78\x56\x25\x56\x48\x90\x60\xa3\x60\x95\x92\xf8\x44\x04\xd7\x5b\x20\xb4\xe1\x80\xa4\x73\x51\xb8\x0a\xce\xba\xed\x16\xbc\x6b\x47\xc0\x14\x8c\x1c\x4f\xf2\x39\x18\x02\xa4\xf4\x0b\x94\x89\x24\x0e\x8e\x6d\x03\x2f\x99\xe7\x73\xa1\xf9\xd8\xe1\xe4\xda\x9a\x28\x45\x23\xe7\xeb\xeb\xc4\x2c\x34\x5b\xa8\xf6\x5c\x7c\x12\xb2\x4a\xcf\xb0\xfc\x6c\x9e\xbc\xbc\xb4\x9e\x4d\x44\x54\x62\x65\xfa\x96\xff\x85\x4c\xf5\x7e\xe7\xc3\xe0\xa7\xbe\x5d\x7c\x7f\x80\x50\x81\xc4\x03\x17\x0f\x6a\x7d\x66\x7a\x3e\xe5\x63\x92\xf2\x1d\xe7\xa7\xb8\xa5\xb0\xbf\x09\x9e\xf1\x6f\xd6\x54\xcc\xa7\x3c\x1f\x7d\xfc\xac\x55\x82\xaa\x75\x8a\x60\xc2\x7c\x7e\x52\x48\xa4\xae\x25\xf6\x35\xa8\x34\x25\x4c\xc6\xa2\xba\x9e\xb2\xd7\x69\x8c\x8b\x7b\xd1\xe8\x3c\x3f\xe5\xe7\xc6\x2c\x2a\x70\x4a\x8d\x69\x8a\x7b\x59\x91\xbb\x87\x87\x2f\x7a\x58\x83\x68\x4e\x79\x76\x4a\x73\x1d\xd9\x70\x1f\x97\x93\x00\x03\x99\x2e\x82\x01\x9a\xc4\x30\x24\x79\x96\x32\x7f\x13\x11\x99\x7a\xcb\xd2\xa4\x37\x26\x2b\x5b\x8d\x18\x70\x9e\xc5\x6d\x1a\x68\x1d\xe1\xc3\x5b\x54\x39\xa4\xff\x3b\x34\x25\x92\xb6\xa1\x44\x81\xa5\xfe\xc7\x62\xe2\xd9\x82\xc8\x45\xb0\xc4\x16\xaf\xa1\x73\x96\xbf\x22\x45\x17\xfc\x57\xe3\x6b\x84\x12\xad\x2b\x31\xc2\xd0\x20\x37\x48\xc0\x01\x8c\xb5\xd8\x31\x18\x38\x8c\x86\xc5\x98\xea\x02\x96\x56\x60\xd2\x4f\x5d\xc8\xe1\x31\x84\x36\x79\xb8\x69\x1d\x7a\x9e\x00\x37\x0d\xda\xdd\x8b\xc7\xc2\xca\x3d\xa6\xad\xb6\xc9\xee\xd9\x4f\xaa\xc5\x7b\xe0\x57\x9b\xbe\x06\xf2\xf5\x22\xb0\xff\x71\xf7\xe7\x6c\x65\xd1\x8b\xb1\xac\xc5\x2f\xc8\x5a\xfd\x7e\x35\x86\x7c\x35\x05\xa2\x64\xcc\xfe\x6b\xe0\x7f\x2a\xcb\xf9\xa6\xc6\x32\x5c\x4d\x0e\xd4\x7a\x2e\x88\xf0\xb8\x0a\xbe\x23\x5f\xcf\xb5\x9e\x56\x7f\x58\x34\xf7\x87\x8f\x1f\xf3\x17\x52\xfd\xc7\x9f\x8f\x47\x46\x2d\xbb\x7b\xdf\x91\xf3\x5c\xe9\x6f\x4f\x6a\x8f\x31\x9a\x5a\xb6\x46\x2d\xeb\x0e\x97\x17\xf1\x12\x7c\xe0\xa9\xf3\x58\xae\xa1\x6b\x51\x9e\x8b\xbe\xab\xc9\x94\xa8\x4e\xdf\x9e\x83\xca\x93\xaf\xf3\x2b\x76\x7a\x67\xa7\xfe\x09\x00\x00\xff\xff\xa1\x73\xce\xd9\x95\x06\x00\x00")

func _hardcodedMiddlewareGoBytes() ([]byte, error) {
	return bindataRead(
		__hardcodedMiddlewareGo,
		"../_hardcoded/middleware.go",
	)
}

func _hardcodedMiddlewareGo() (*asset, error) {
	bytes, err := _hardcodedMiddlewareGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../_hardcoded/middleware.go", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xcb, 0x1, 0xb6, 0x9d, 0x16, 0xe7, 0x46, 0xa2, 0x49, 0x7d, 0xf6, 0xc, 0x20, 0x3a, 0xd4, 0x73, 0x64, 0xea, 0xcc, 0xe3, 0x1f, 0x62, 0xec, 0xc7, 0x5b, 0x68, 0x93, 0x2d, 0xaf, 0x96, 0x19, 0x61}}
	return a, nil
}

var __hardcodedTracingGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x58\xdd\x6f\xe3\x36\x12\x7f\x96\xfe\x8a\x39\x01\xed\x49\x0b\x45\x4a\xfa\xb1\x2d\x52\xe4\x21\x5f\xbb\x6b\x34\x49\x83\x24\x7b\xc5\xe1\x70\x08\x68\x69\x2c\x13\x2b\x91\x2a\x49\xd9\x31\x16\xf9\xdf\x0f\x43\x52\xb2\x9c\xd8\xbe\x74\xf7\x21\x2b\x93\xc3\xe1\x7c\xcf\x6f\xd8\xb2\xe2\x0b\xab\x10\x34\xaa\x05\x2a\xa3\x58\xc1\x45\x15\x86\xbc\x69\xa5\x32\x10\x87\x41\x54\x48\x61\xf0\xc9\x44\x61\x10\xa1\x28\x64\xc9\x45\x95\x4f\xb9\x60\x6a\xb5\xb1\x34\xc7\x27\xfa\x3d\x6b\x2c\xa5\x40\x93\xcf\x8d\x69\xe9\x5b\x6a\xfa\xab\x8d\x2a\xa4\x58\xd0\xa7\xe1\x0d\x46\x61\x18\x44\x15\x37\xf3\x6e\x9a\x15\xb2\xc9\x2b\x29\xab\x1a\xf3\xae\xe3\xe5\xcb\xad\xf3\x1a\x17\xa8\xf2\x2f\x6c\xb5\x40\x3c\xa8\x64\xbe\xf8\x25\xaf\x65\x55\xa1\x72\x94\x32\x93\x2d\x0a\x83\x35\x36\x68\xd4\x2a\xe3\x32\x27\x99\x15\x9f\xe6\x5c\x68\xa3\xba\x06\x85\x61\x86\x4b\x91\x6f\x5c\xa8\x78\x5d\xb3\xbc\xe9\x9e\x72\x69\xb0\x6e\x3a\x2b\xff\x36\x6e\xb4\xbd\x6f\x2f\x9f\xb2\xaa\x62\x15\xee\xa5\xc1\x27\xb2\x28\x2a\x9d\x4b\x53\xb7\xf6\x0f\x59\xfb\xdb\x0e\xad\xbf\x2a\xd5\x16\x7b\x59\xb4\x4a\xb6\xac\xb2\xea\xef\xa5\xd3\xe5\x97\x5c\xa1\x96\x9d\xb2\x32\xe9\xf2\x8b\xe5\x0f\xfb\x4f\xfc\x7f\x15\x06\x2a\xf7\xd7\xa0\xa6\x00\xd1\xd8\x50\x34\xec\xe3\xee\x28\xf2\xc5\x51\x76\x74\x98\x1d\xee\xbd\xc3\x4b\x91\x84\xe1\x82\x29\x28\x71\xc6\xba\xda\x9c\xcb\xba\xc6\xc2\x48\xf5\x49\x6a\x03\xda\x28\x2e\x2a\x38\x81\xa8\x96\x05\xab\xe7\x92\xc4\xd8\x46\x7d\x4b\x71\xdf\x71\x61\x8e\xde\xc3\x09\xfc\xf4\xe3\xd1\x2f\x61\x98\xe7\x70\x8f\xa6\x6b\x3f\xd6\x72\xca\xea\x07\xba\xed\x56\xc9\x05\x2f\x51\x9d\x8a\xf2\xd2\x3b\x09\x34\x1a\x0d\x5d\x0b\x66\x8e\x50\x59\x52\x70\x36\x6c\x3d\x31\x30\x51\x42\xef\xd3\x2c\x9c\x75\xa2\x78\x0b\xe3\xb8\x30\x4f\xe0\xd3\x30\x3b\x77\xff\x27\x10\xf7\x2e\xca\xee\x5b\x26\x7a\xda\x14\xde\x0d\xeb\x96\x9f\xea\x19\xa6\x80\x4a\x49\x95\xc0\xd7\x30\x0c\xf2\x1c\x2e\x17\xa8\x56\x70\xf4\x33\x68\x2c\xa4\x28\x35\x2c\xf1\x9f\x35\x49\xbc\x02\x23\xe9\x3a\x81\x85\xa1\xcf\x0d\x9b\x43\xd1\x1b\x0a\x98\xb1\x7c\x48\x5b\x6f\x44\x20\xdb\x52\xa4\x81\x9c\xc1\x60\xe7\x63\x6b\x44\x22\xfd\x73\x8e\x02\x54\x27\x04\xb9\x82\x0b\xb2\x4b\xd9\x15\xf6\x80\x99\x73\x0d\x5c\x03\x03\xcd\x4b\x2c\x98\x4a\xad\xb1\x96\xa3\x13\x96\x85\xe5\x5a\xaf\x46\xf4\xfd\x4a\xcf\x57\xb6\x38\x48\x7b\x30\x48\x9b\x85\x01\x79\x5b\x8f\x4c\x05\x5b\x0d\x18\x06\xac\x2c\x15\x1c\x9f\xc0\xac\x31\xd9\x7d\xab\xb8\x30\xb3\x38\xfa\x4e\x1f\x7f\x57\x46\xe9\xd6\xe0\x7a\xbd\x4a\x41\x94\x84\x01\x2a\xcb\xc8\xda\x3d\x16\xbc\x4e\xc2\x80\xcf\x20\x96\x3a\xfb\x88\x06\xc5\x22\x8e\x1e\x1f\xee\x4e\xcf\x27\x37\x1f\x1f\x2f\x6f\x4e\xcf\xae\x2e\x2f\xa2\x24\x81\x93\x13\x88\x8c\xea\x30\xb2\x9e\x0a\x28\xd5\xcf\x6b\x8e\xc2\x10\xaf\x8d\xc4\xcf\x6e\x70\xe9\xb6\xe2\x30\x70\x94\xeb\xbd\x3f\xb9\x99\xdf\xa1\xf7\x23\x97\xe2\x16\x15\x97\x65\x7c\xf4\xf3\x3b\xaa\xbf\xd9\xbd\xf5\x7a\x92\x6e\x3f\x78\x29\xca\x56\x72\x61\x62\x32\xc6\x2e\xa2\x89\xd0\x58\x74\x0a\x63\x4b\x90\x84\x41\xa0\x37\x22\x91\xd4\x1f\x49\x4c\xd2\x52\x28\xa7\xb0\x56\x89\x0e\xf1\x99\xa5\xfc\xc7\x09\x08\x5e\xc3\x57\xba\x4b\xa1\xe9\x94\xa0\xdf\xa9\xfb\x43\xbe\xb8\x24\x33\xce\xe2\xc8\x9a\x13\x0a\x85\xcc\x90\xbf\xfb\x7c\x3a\x86\xef\x16\x91\xbd\x94\x98\x3e\x87\xc1\x33\x60\xad\xd1\x32\xdc\x70\xfb\x09\x0c\x95\x88\x44\xba\x91\xb2\x1d\x32\x2d\x09\x83\xe7\x30\x0c\x4c\x4b\xb6\x16\xb8\xdc\x4c\xa1\x78\x53\x3f\x81\xcb\x3b\x5f\x31\xe3\x24\x09\x03\xaa\x45\xd9\x3d\x9a\x17\x87\x4c\x9b\x84\x61\xe0\x3a\x56\xf6\x41\xc9\xc6\xa7\x30\xd9\x22\xc9\x26\x62\x26\x2f\xe2\x48\x1b\xa6\x48\x9d\x03\x2b\x9b\x8a\x52\xf0\x07\xae\x49\xfe\x88\xdc\x80\x5a\x47\xc7\x40\x5f\x69\x18\x3c\x27\x61\x6f\xa5\x4d\xa1\x4c\x6b\x4d\x16\x3e\x87\xae\xbe\xbc\x56\x02\xf7\xc6\x7f\x0a\x7d\x17\x80\x77\xfd\x57\xd6\xab\x99\xec\xac\x2e\x64\x66\xcd\x9a\xb6\xe6\xa2\xba\x55\x72\xca\xa6\xbc\xe6\x66\x45\x66\x3c\xcc\x0e\x7f\x0e\x03\xae\xaf\x28\x51\x6d\x0c\x8f\xe2\x7f\x72\xff\x78\xf5\xc7\xf9\xe9\x55\x34\x8a\x7b\x9b\x25\x3d\xbd\x75\xdf\x16\xc6\x27\x70\x94\x1d\x0e\x4e\xe6\x33\x58\xbc\x60\xdd\x67\xd6\xfd\xe9\xf5\xed\x15\x7d\xdc\xde\xfd\x71\x76\x7a\x36\xb9\x9a\x3c\xfc\x3b\x4a\x7e\x83\x05\x45\x5c\x14\xed\xba\x80\x1c\x75\x29\x16\x2e\x8a\x8f\x4f\xc0\xe3\x97\xec\x96\x29\x8d\x1f\x6a\xc9\x4c\xbc\x48\xe1\xfd\x4f\x3b\x22\x78\x37\x47\x92\xdc\x05\xe8\x0e\xbd\x76\x1f\x1d\x07\xe7\xe0\x87\x9b\x57\x0e\x0e\x03\x5b\x6c\x11\x3a\x8d\x1b\xe5\x79\x72\x01\x15\x0a\x54\x8c\x0a\x22\x4c\x04\x48\x45\xae\x9b\x49\x35\x5c\x4a\x05\x7f\x29\xd5\x17\x88\x99\x81\x1a\x99\x36\xb0\xe4\x66\xee\xea\xad\x25\x42\x9b\x5f\xbe\xf0\x8f\x39\x42\xd3\x69\xd3\xff\x44\xdf\xfa\x26\x17\x1a\x3a\xc1\x67\x52\x35\xf5\x0a\x98\x01\xc5\x44\x29\x1b\x98\x29\xd9\x58\x0e\x28\x0c\x57\x48\x41\x5c\x20\xb5\x0d\x6a\xbd\xef\x7f\xca\xdc\x15\x1f\xa4\x02\x7c\xb2\xb7\xa6\x1b\x9a\x3c\x1d\x28\xb6\xda\xbc\xbd\x94\xa8\x41\x48\x03\xa5\xb4\xd2\x7a\x16\x83\x9d\xa8\x62\xdd\x3b\x05\xe2\xcd\x20\x9e\x5c\xdc\x51\xd7\x3a\x63\x1a\xcb\x38\xb1\xc5\x6c\xff\xa9\x5b\xa6\x50\x18\x47\xbf\x87\xd5\x16\x47\x26\x8e\x7d\x9e\xc3\xc3\x1c\x35\x42\xc3\x9e\x78\xd3\x35\x1a\x98\x42\x32\x7d\xd5\x31\x55\x02\xab\x18\x21\x57\xd0\xb2\x41\x33\x27\xaf\x54\x92\xfe\x2e\x95\x14\x95\xed\x8b\x1a\x05\xa1\x6e\x60\x60\x5c\xb7\x2d\x99\x61\xd0\x09\x7c\x6a\xb1\x30\x58\xd6\xab\x57\x4a\xb4\x4c\x5c\xf1\x86\x1b\xbd\x09\x1c\xdc\x9a\x8d\xd9\x53\x43\xa0\xb9\x33\x78\x2e\x3b\x61\xec\xc6\x31\x1c\x1d\x1e\xda\xf2\x7f\xb9\x40\x61\xc6\x1b\xf4\xaf\xdf\xbc\xe2\xe2\xcb\xcb\xbd\x7e\xf3\x39\x49\xc3\x97\xc2\x9c\x31\x53\xcc\x47\xa5\xe8\xb5\xcd\x87\xc2\xda\xd7\x20\x22\xd9\x5f\x63\xd7\x7b\xf8\x64\xae\x59\x7b\xeb\x91\xaf\x54\xf1\x08\x04\xdb\x9e\x29\x9b\x56\x6a\x6e\x70\x3f\xa5\xbd\xc3\x17\xeb\xaf\xcf\x29\x8c\xf7\xce\x1c\xe4\xff\xfa\x9c\x50\x71\xf7\x95\xd8\xb4\x54\x76\xdf\x86\x16\x3f\x48\xf5\x80\xda\x10\x86\x69\x90\x09\x8b\xb4\xa6\x36\x65\x4b\x82\x46\x9d\xe0\x06\xa8\x45\x71\x51\xa5\xc4\x92\xbc\xde\x70\x6a\x7d\xda\x66\x82\xa6\x2b\x80\x4d\xe5\x02\x6d\x02\xcb\xce\x10\x72\xb2\x29\x34\x3a\x9b\xc1\xc4\x80\x13\x4f\x03\x13\xc0\xc5\x41\x83\x8d\x54\x2b\xe2\x39\x74\x82\x99\xcf\x33\x6e\x11\x54\x9f\xc2\xa5\x6d\x2d\xfa\xed\x40\xd5\xeb\x14\x27\x10\xbf\x5b\xf7\xd8\x89\xb8\xb6\x37\xfe\x2d\x88\x1a\x0c\xb2\x1d\xbf\xe8\xd7\x2f\xd9\x51\xcf\xde\xd5\xaf\xf1\x5b\x7a\x75\xef\x4d\xdc\xd6\x53\xf3\x1c\xae\xbb\xa7\x7b\x3b\x2d\x5f\xf3\xb2\xac\x71\x49\xa9\xdb\x5b\xb8\x59\x2f\x99\x39\x33\xa0\xe7\xb2\xab\x4b\x72\x2c\x33\x86\x15\x73\x2c\xc9\xcf\x0c\x46\xd3\xa7\x1f\xbd\x33\x62\x3d\x31\xae\x8c\x99\xa5\xad\x61\xa2\xd2\xc7\x60\x91\x81\x76\xae\x70\xa0\x98\x95\xa5\xfb\xed\x06\x1f\xe0\x62\x26\x89\x2d\x85\x85\xc2\xbf\x3a\xd4\xe6\x40\xb7\x58\xf0\x19\x2f\x7a\x18\x41\xdc\xef\x78\x35\x37\x20\xe4\x12\x96\x08\x52\xd4\x2b\xd0\x5d\x6b\xe7\x7c\x22\x22\xcf\x53\xb5\xe6\xc2\x32\xa2\x8a\xcd\x8c\xd3\xe2\x82\x19\x56\x4a\x0b\xb5\xb0\x30\x7d\x40\x6c\xb1\x43\x4c\xba\xf0\x02\x6f\x58\x83\x7e\xe4\x4a\x80\x88\xe3\xb9\x31\x6d\xf6\x89\x89\x92\xfa\x07\x8c\x7f\x91\xb3\xa5\xa1\xf9\xdb\xe1\x5b\x3b\x8a\x67\xdb\x79\xa6\xc3\x3e\xd5\x88\x75\xda\xea\xd8\xfa\xf3\xe3\xb6\xdc\x4f\xc8\xdd\x79\x6e\x21\xe4\x2d\xa1\xf9\x5a\xc4\xd1\x69\x69\xcb\xe7\xda\xfc\x23\xcf\x45\xeb\x10\x70\xa2\xc3\x7e\xe1\x7b\x62\xa7\xc4\x86\xa6\x1f\xe8\xbc\x65\xa2\x96\xee\xdc\x1d\xea\x56\x0a\x8d\x7f\x2a\xee\xc0\x16\xbc\xf3\xeb\xd6\x6f\x89\x43\x0f\x7c\x06\xaa\x5f\xfa\x7c\x37\xb1\xd0\x28\x7f\x9c\x23\xab\xcd\xdc\x21\x96\x20\x98\x67\xd6\xfa\x9f\x1e\x1e\x6e\x63\xb5\x4c\xc1\xb6\xe5\x5e\x18\xfa\x24\x84\x11\xd0\xe8\x78\x7c\x02\xaa\x9f\x1b\x63\x2a\x57\x41\xa0\x87\xb4\xb2\x4d\xe0\x25\x2a\x25\x92\x29\xab\x2c\x95\x7f\xdc\x78\x85\x5c\x43\x2f\x28\xd1\x65\xd7\xd8\x4c\x51\xc5\x51\x61\xdf\x6a\x0e\xfa\x28\xe4\x65\x94\x64\xf7\x36\x0e\x62\x07\xf0\x4e\x22\xf8\x0a\x79\x4e\x80\xed\x15\x2d\xd5\x42\x6a\xe0\x1a\x8d\x57\xe5\x2f\x5e\x0e\x00\xac\x97\xe3\x06\x97\xbb\x6f\x4b\xa1\xeb\x78\x69\x27\x8d\xf5\xc5\xce\x30\x5b\x40\x5a\xb0\x13\x95\xdb\x59\xe3\xe2\xd5\xac\xe1\x65\x80\xc6\x0a\x30\x06\xe9\x8e\x32\x3a\xa6\x3b\xdc\xe9\x38\x79\x76\x17\x8f\xe6\x10\x6f\xd6\x7e\x34\xb2\xa6\xbb\x47\xe3\xf5\xb1\xfa\xba\x33\xdb\xa5\x7d\xa3\xb8\x1a\xcd\xb7\x4b\x6b\x21\x66\x1f\x3d\xee\x3b\xcf\xe1\xb4\x2c\x6d\x55\xe8\x59\xfa\x6a\xe3\x18\x12\x0d\x75\x90\xc7\x94\xf6\x6d\xb8\x31\x51\xe1\x38\x32\x74\xec\x23\x7b\xa7\x0a\xa7\x65\xd9\xff\x9e\xb2\x2a\xfb\x1d\x57\x71\x62\xf9\x65\xff\x62\x75\x87\xde\x8b\x1b\x02\xbd\x10\xc6\xbf\x90\xf4\x51\xbf\x8e\x18\xcf\xd7\x01\x0f\xbb\xe4\xc6\x50\x92\x2f\xe9\x19\x5e\x8a\x42\x96\x0e\x2e\xbb\xe7\x2a\x2a\xb0\xc0\xcb\xa1\x20\x5e\x5c\xf8\x9a\xe8\xe3\x5e\x17\x16\x86\xdb\xfc\x19\x92\xeb\x37\xd0\x45\xf6\x89\x69\x0f\x06\x63\xf7\xda\xe2\x6e\xb8\x92\x15\x85\xbd\x03\xd1\x65\x1f\x93\x2f\x18\x64\x13\xed\xe0\x66\x39\x58\xec\x2d\x26\x8b\x3c\xd7\x28\xf5\x33\xd4\xb6\xd0\xfb\x9b\x7c\x66\xac\xd6\x03\x23\xa7\x05\xd9\x64\x72\x91\x3a\x0b\x4d\x2e\xac\x01\x0a\xab\x00\xe9\x3a\x24\x5c\x4a\xab\x83\x09\x86\xe5\xde\x10\xa5\x6f\x27\x34\x4f\x21\xf5\xb6\x39\x3e\xf9\x6e\xa1\xc9\x99\x6e\x04\xa0\x66\x94\x82\x96\x14\x64\x60\xe6\x52\x23\xfd\xb0\xfd\xa8\x90\x4a\x61\xed\x52\xb2\x96\x95\xb6\x5d\xd1\xca\xa4\xed\xf0\xa2\x7b\xe3\xd6\x28\x62\x2f\xab\x2d\x3f\x3f\xfe\x00\xdf\x7f\x6f\x57\x9d\x26\x76\xf1\xe8\xbd\x2b\x49\x9b\xef\x5c\xce\xd7\xc7\xb4\x3b\x5d\x19\x84\xf8\xc7\x1f\x0e\x8a\x39\x53\x24\x6c\x92\xc2\xaf\x7e\xf5\xe8\xfd\x7a\xd5\x8f\x3c\x16\x9f\xfb\xe0\x71\x66\x0b\xbc\x0c\x67\x3a\x85\x47\x32\xda\x1c\x9f\xb2\x0b\xa4\x80\xf3\xb6\xe9\x85\x7c\xbb\xa3\xca\x32\xb3\x87\x1e\xa9\xea\xf9\xf2\xb0\xf9\x62\x45\x4e\x74\x0f\xf5\xd9\x19\xaf\x2e\x45\xc9\x99\xc8\x3e\x5b\xdb\xc6\x83\x40\xff\xf9\xf5\xf8\xbf\x89\xaf\x90\xde\xbd\xbb\xa5\xf4\x46\xfb\x5b\x42\xd2\x99\x6f\x93\xb1\x97\xa6\x17\x6f\x54\x91\xa8\x78\x2a\x8b\x01\x5e\x76\xad\xad\x5d\x91\x40\x7a\xf0\xec\xe1\xdb\x08\x09\xae\x81\xf1\xfa\xd1\xa3\x44\x5d\x28\x3e\xb5\xa3\x30\xcd\xbc\xac\x6d\x6b\xee\x5e\x35\x2d\x88\xfa\x4c\x00\x7d\x36\xaa\xb2\x5d\xeb\xfc\xae\x86\x67\xde\xe1\xe1\x65\x8d\x38\xb7\xbc\xa5\x50\x56\x2e\x98\xa2\x0b\x46\x70\xc9\xbe\x7d\x8c\x1f\x48\x4e\x6f\x6f\x1f\x6f\x4e\xaf\x2f\xa3\x64\xf4\x5e\xd1\x9f\x39\xd9\x41\x3a\x7e\x17\x19\x51\xbc\x9d\xd7\x06\xab\x30\x50\x3e\x22\x06\x25\xae\x51\x55\x18\x5b\xec\xe3\x57\x2e\xdc\x64\xee\xde\x02\x87\xd5\x1b\x5c\x92\x97\x86\xc9\x52\xdb\x87\x4a\xff\xb6\x9f\xdd\x17\x73\x6c\xd8\xe7\xbb\xab\x74\x63\x75\x8d\xf7\x7e\xc7\x55\x5f\x3d\xbc\x98\xee\xa9\xd1\xcd\x82\x1e\x77\xa9\xf0\x39\xfc\x5f\x00\x00\x00\xff\xff\x06\xb9\x8e\xbf\xc7\x1a\x00\x00")

func _hardcodedTracingGoBytes() ([]byte, error) {
	return bindataRead(
		__hardcodedTracingGo,
		"../_hardcoded/tracing.go",
	)
}

func _hardcodedTracingGo() (*asset, error) {
	bytes, err := _hardcodedTracingGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../_hardcoded/tracing.go", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x84, 0xe2, 0xb0, 0x9f, 0x2e, 0x93, 0xd7, 0xed, 0x9a, 0x48, 0x80, 0xf9, 0xae, 0x9, 0x3f, 0x5d, 0xdc, 0x51, 0x3d, 0x78, 0xdb, 0x34, 0x45, 0x65, 0xac, 0x28, 0x3e, 0xcd, 0xf9, 0x60, 0xc8, 0xc}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"../_hardcoded/doer.go":       _hardcodedDoerGo,
	"../_hardcoded/middleware.go": _hardcodedMiddlewareGo,
	"../_hardcoded/tracing.go":    _hardcodedTracingGo,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//
//	data/
//	  foo.txt
//	  img/
//	    a.png
//	    b.png
//
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"..": {nil, map[string]*bintree{
		"_hardcoded": {nil, map[string]*bintree{
			"doer.go":       {_hardcodedDoerGo, map[string]*bintree{}},
			"middleware.go": {_hardcodedMiddlewareGo, map[string]*bintree{}},
			"tracing.go":    {_hardcodedTracingGo, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = os.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
