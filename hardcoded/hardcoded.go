// Code generated by go-bindata. DO NOT EDIT.
// sources:
// ../_hardcoded/doer.go (10.334kB)
// ../_hardcoded/middleware.go (1.685kB)
// ../_hardcoded/tracing.go (1.824kB)

package hardcoded

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __hardcodedDoerGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x5a\xff\x6f\xdb\x46\xb2\xff\x59\xfa\x2b\x26\x02\xee\x42\x26\x32\x25\xe7\xce\xed\x41\x7d\x3e\xa0\x75\xdc\xd7\x02\x69\x12\x54\xee\x6b\x80\x20\xb8\xae\xc8\xa1\xb4\xcd\x72\x57\xdd\x5d\x5a\x16\x7c\xfe\xdf\x1f\x66\x76\x49\x91\xfa\xe2\xe4\xae\xc5\xc3\xbb\x00\xb1\x25\x72\xe6\xb3\xb3\xb3\xf3\x7d\xbd\x16\xf9\x47\xb1\x44\xc8\x95\x44\xed\x87\x43\x59\xad\x8d\xf5\x90\x0c\x07\xa3\xc5\xd6\xa3\x1b\x0d\x07\xa3\xdc\x68\x8f\x77\x9e\x3e\xa2\xce\x4d\x21\xf5\x72\xf2\xab\x33\x9a\x1f\x58\x6b\x2c\x53\x49\x33\x91\xa6\xf6\x52\xd1\x17\x65\x96\xf4\xab\x12\x7e\x35\xb1\x42\x17\xf4\x45\xa3\x8f\xbf\x26\x2b\xef\xd7\xf4\xd9\x6d\x75\x4e\xbf\xbd\xac\x70\x34\x1c\x0e\x36\xb9\x82\xd1\x52\xfa\x55\xbd\xc8\x72\x53\x4d\xae\x14\xde\xa2\x9d\x6c\xc4\x92\xfe\x07\x19\x95\x59\x2e\xd1\x12\x75\x97\x52\x94\x78\x37\x59\x6d\x9d\xb7\xf2\xee\x6c\x69\x9a\x8f\xa3\x3e\x55\x61\xb4\xb9\x15\x7a\x25\x0b\x9c\xe0\x2d\x6a\xef\x4c\x6d\x73\x1c\x0d\xd3\xe1\x70\x32\x81\xc2\xa0\x05\xe9\x40\x68\x90\xda\xa3\x2d\x45\x8e\x50\x1a\x0b\xa3\xc2\x48\xbd\x1c\x01\xc9\x0d\x16\x7f\xab\xd1\x79\x07\x6b\xe3\x9c\x5c\xa8\x2d\x6c\xa4\x5f\xc1\xc6\x8a\xf5\x5a\xea\xe5\xd0\x6f\xd7\x18\xa1\x5a\x90\xfb\xe1\xe0\xa5\x49\x72\x78\x46\x08\xd9\x15\x6f\x64\x0c\x36\x7e\xff\x31\x20\xa6\x90\x34\xdf\xdd\xda\x68\x87\x63\x60\xf5\xa6\xc3\x87\x61\x40\x35\xeb\xd7\xa2\xc2\x2b\x7f\x07\xce\xdb\x3a\xf7\xf7\x0f\x2c\xf7\x42\x38\x8c\x18\xdf\x09\x5d\x28\xb4\xb0\x46\x5b\x1a\x5b\x39\xf0\x2b\xe4\xf7\x3d\xd9\x03\x1a\x3d\x7e\x49\x72\xee\xc0\xca\x5a\xe7\x90\x14\xed\xab\x14\x7e\x87\xd8\xb4\x6b\x8b\xbe\xb6\x1a\xf2\xec\xa5\x49\xc2\x46\x26\x13\xb0\xe8\xed\xb6\x91\x94\xbe\x48\x74\x70\x31\x7d\xd7\xd7\x6f\x10\x92\x69\x3b\x52\x12\x68\x01\xbb\x7f\xa4\x68\x5e\xc6\x6e\xdf\x1a\x25\xf3\x2d\xfc\xb8\xfb\x1c\xd7\xeb\x3c\x81\x02\x4b\xa9\xd1\x81\x08\xc8\xb0\xe6\xc7\x59\x58\xac\x4b\xd8\x3b\xbc\xc9\x04\xbe\x11\xf9\x47\x53\x96\x0e\xc2\x96\x82\x66\x75\x5d\x2d\xd0\x82\xd0\x05\x78\x59\x49\xbd\x04\x53\x46\x60\xe1\x3d\x56\x6b\xef\xb2\xe1\xa0\x61\x4d\x52\x78\xff\x81\x6c\x3d\x7b\x59\x5b\xe1\xa5\xd1\x8c\xcc\xab\x82\xc5\x1c\xe5\x2d\x06\xdc\xae\x22\xc6\x20\x1c\x6c\x50\x29\xfa\x4d\x2f\x2d\xba\x5a\x79\x30\x25\x73\x37\xfe\x14\x8f\xe7\xa9\x83\x5f\x5e\x9a\x5f\xa0\x42\xbf\x32\x45\x36\x1c\x30\x7a\xd2\x3b\xb1\x31\x9c\x38\xb0\x85\x31\x2a\xea\x6c\x2e\xf5\x52\xe1\x63\x9a\xf3\x2b\xe1\xdb\xd3\x13\x8d\xb4\x60\x74\x8e\x41\x9b\x87\x10\x3d\xab\x3d\xa2\x50\xe1\x61\x6b\x6a\x70\x2b\x53\xab\xa2\x5d\x06\x5b\xec\x73\x87\xb9\xd1\x05\x88\xd2\x93\x7b\x79\x28\x85\x54\x2e\x8b\x66\x7b\xb0\x5e\x0a\xa7\x35\xdf\x31\xce\xbd\x37\xf7\xe7\xf0\x0c\xf8\xc9\x9c\x57\x7b\xe8\x5a\x11\x6c\xa4\x52\x51\x32\x6d\xf4\xd9\xdb\x37\xf3\x9b\x71\xf8\xf4\xf5\xcd\xd5\x77\xbb\xe0\xc0\x9b\xb9\x78\xf7\x2e\x23\xd6\x9b\x37\x2f\xdf\xcc\xe0\x7b\x4f\xd6\xea\x40\x1b\x0f\x79\x6d\x2d\x05\xb3\x6d\x63\x2d\x7a\x1b\x0e\xa1\x51\x07\x16\xb0\xd8\x9e\x38\xdc\x47\x36\x1c\x4e\xdb\xe2\x6f\xb0\x77\xe2\x16\xdd\xfa\xd8\xb1\x77\x8f\x9e\x74\x22\x4b\x7e\xfa\xe4\x12\xb4\x54\xf0\xcf\x7f\xd2\x8e\xb2\x1f\xd8\x98\xe0\xf2\x12\x46\xb4\xe1\xd1\xb1\xe7\xb4\x7d\x7a\x31\x1c\x0c\x68\xad\x6c\xee\x85\xaf\xdd\x95\x29\x10\xfe\x0b\x2e\xa6\x53\x02\x6f\x34\x5e\x0a\xe5\x70\x38\x78\x68\x8f\xc0\xdb\x1a\xa3\x9a\xaf\xef\xd6\x46\xa3\xf6\x52\xa8\xa3\xd6\xa7\x01\x77\x14\x3d\x27\x0e\x56\x77\x82\xff\x71\xd3\x2b\xe5\x2d\xc5\xc3\xf8\x94\xe3\x79\x67\x15\x45\xd1\x20\xb7\x28\x1c\x79\xf8\x46\x48\xcf\xf6\xe1\x38\xf6\xa2\xdf\x20\xea\xf6\xe0\x67\x70\x3e\x9d\x8e\xe1\x05\xfd\xf8\x2b\xfd\xf8\x1b\xfd\xa0\x00\x71\xfe\xc5\x74\x0a\x95\x54\x4a\x06\x2b\x76\xf0\x7c\x72\x06\xf5\x1a\xbc\x81\x8b\x3f\xc1\xaf\xd2\x7b\xb4\xcd\xd1\x1e\xdf\xc5\x67\x18\x34\xcc\x2e\xa1\x12\x1f\x31\xd9\x7b\x3d\x86\x8b\x74\x38\xd0\x78\xc7\x14\xe7\xd3\x69\x63\xe4\x3f\xec\x24\x1a\x0e\xac\x2e\xe8\x35\xa5\xec\xec\x35\x6e\x92\xe6\xc3\x9c\xf3\x64\xc2\x0c\xaf\xcd\x26\x49\xb3\x9f\xb4\xbc\x7b\x2d\xb4\x49\xd2\x34\x1d\x0e\x90\xb8\xa6\xd9\xf4\x02\x26\x13\xde\xd6\x05\x65\xa0\x1c\xb5\x8f\xfb\x1a\x0e\x28\x8f\xca\x08\xbe\xe4\xb8\xde\x58\xc4\x7b\xf9\x01\x2e\x81\x45\x7b\x0e\x3d\xa1\x93\x24\xb1\xba\xc8\xbe\x55\x46\xf8\x2f\xfe\x9a\xa4\xcf\x5e\xa4\x67\xe7\xe9\x33\x7c\x56\xc6\x27\xc4\x44\xeb\x87\x8d\x3d\xbb\x84\x17\x5d\xab\xb2\xe8\xff\xdf\xfa\xee\xa9\x03\xfe\xcf\x77\xe0\xd7\xe6\x78\xd6\x08\x4e\x4a\x09\x52\x53\x55\x17\x94\x47\x0e\xd5\xe6\x8e\x98\x85\xfb\x00\x8f\x3b\x2e\x85\x83\x6a\xed\xb7\xe0\x94\xcc\xb1\x51\x6e\x0f\xe1\xdf\xcc\x02\xfd\xb0\x2f\xd4\x46\x6c\x3b\xf1\x82\xf6\x7f\x62\xb5\x7f\x35\xe1\x76\x64\x08\x6a\x6d\xaa\x3d\x56\xd0\x55\x28\xbe\xfb\x6a\xf8\x59\xfa\x55\x57\x47\xad\x36\x40\xe3\x06\x62\xbd\x1e\xcc\xd8\xdc\xa2\xb5\xb2\x88\x75\x45\x28\xa1\xc1\x2c\x7e\xc5\xdc\x3f\x75\x6d\x31\xd6\x96\x41\xbc\xa3\x3d\xf8\x24\xf7\x77\x0d\x68\x16\xe5\x19\xc3\x89\x92\x2b\xdd\xa7\xec\x56\x81\xf1\x0d\xe1\xff\x8f\x50\x35\x12\xf2\xb8\xb7\xcf\xfb\x87\x1e\x32\x57\x8c\x4d\x51\xfa\xac\xad\x05\xff\x88\xb2\xb4\x59\x62\x0c\xe6\x23\x87\xa5\x46\xe0\x24\xcd\x82\x70\x7d\xb9\xd2\x2c\xe9\x6e\x93\x1d\xed\x89\xf9\xd8\x78\x45\xab\x8b\x4b\x28\xb2\xce\x77\x76\x92\x36\xb3\xd0\x3a\xbb\x77\xd9\xce\x30\x87\x83\x5b\x61\x8f\xf9\x78\x78\xd1\xfa\xf9\x90\x6b\xbe\xb9\xb8\xc5\x5e\x61\xb4\x30\x05\xe5\x28\xc8\xa9\xd2\xdf\x20\xac\x98\xc0\x84\xc5\x32\x78\xe3\x57\x68\x37\x32\xbc\xe3\x28\xc8\x04\x42\x59\x14\x05\x99\x8f\x28\x18\x97\x9b\x85\xba\x2c\xd1\x82\xd1\x6d\x74\x2b\x7a\x4b\x31\x3b\xd5\x5d\x19\xcc\x11\x99\x8d\x04\x9e\x4d\x26\xce\xd3\x76\x6e\xd1\x96\xca\x6c\xb8\xdf\x62\x0e\x69\xb4\x9b\xbc\xf8\xcb\xf4\xcb\xe9\xdf\xbe\xfc\x62\x42\x6b\x49\xbd\x3c\x23\x89\xcf\x4c\x79\x46\xbc\x67\x11\xfb\x8c\x12\xaf\xa9\xfd\x59\x65\x0a\x59\x52\x6c\x68\xdf\x38\x2f\x7c\xd4\xc5\xa2\x2e\xe1\xfd\x07\xea\x4e\xf9\x0c\x6c\xf6\x0d\x6d\x3e\xc6\x3b\x3a\x8d\xbe\xc2\x06\x83\x45\x5d\x86\x48\x79\x09\xa1\x43\xcd\x7e\x44\x51\x7c\xad\x54\x12\x78\x29\x7f\xf4\xa3\x26\xa1\x34\x46\xab\xa5\x62\xee\xe1\x80\x4e\xf2\x61\x18\x32\x59\x53\xf7\x52\xda\xfb\x8a\xa3\xdf\x57\xcd\xb3\xe7\xcf\x99\xff\xa8\x68\x03\x5b\x58\xe2\x89\x72\xbc\x36\xeb\x2b\x65\x1c\xda\x84\x9b\x6d\xca\xb4\xdf\xb0\xfa\x93\x45\x5d\x72\x5e\x1b\x44\x8c\x4b\xb0\x45\x14\x81\xa3\x73\xb3\xa1\x22\x2b\xa8\xb5\xca\xc7\x60\xe3\x36\x1a\xc9\x2e\x2f\x41\xa1\x4e\x1a\xd3\x4b\x29\xe4\x3f\xe9\x1a\x5f\xcc\x34\x21\xb3\x30\x5e\x1a\x64\x5c\x58\x14\x1f\xe3\x5a\x93\x09\xb0\x84\x4d\xe3\xc1\x36\x19\xcd\xad\xdc\x3d\x90\x21\x33\x6a\xa9\x1a\x21\xdc\x7a\x4f\x99\x6e\xcd\x3b\xc9\x18\x8e\x0c\x9e\xf1\x43\x9d\xad\x10\xd7\xad\xa4\xef\xe3\x0e\x3e\xa4\xfd\x5c\x1e\x85\x8c\x61\x39\x97\x36\xaf\xa5\xff\x86\x64\x45\xcb\x0d\xa2\xac\xd6\x0a\x2b\xea\xea\x43\xac\x0b\x14\xb0\x08\x24\xb0\xa6\x8e\xcc\x6a\x4e\xea\x73\xf4\x50\xe0\xa2\x5e\x92\x93\xd0\xe9\xd1\x6f\xb3\x46\x2b\x3c\xf6\x98\xa5\x06\x01\x15\xe5\xc0\xcd\x0a\x2d\x52\xcf\xc1\x0e\x60\xb4\xda\x82\x32\xcb\x8e\x28\xc0\x36\x1a\x6a\x3d\xa6\x21\x8d\x2c\x94\xc9\x3f\x72\x85\xd0\x56\x17\xa5\x35\x15\x2c\x0d\x65\x3e\xbf\xb2\xa6\x5e\xae\x62\xde\x3b\xb2\xa5\xc7\x7a\xde\x20\x7f\xf8\xc7\x8d\xdb\x20\x02\xbc\x16\x15\x12\xa7\xd4\xcb\xe1\x20\x8c\x4b\x02\xd5\xcf\x62\x19\x82\xe5\x2b\x7e\x48\x9a\x24\x5f\x89\x6c\xf3\xf9\xf5\x1b\x9d\x23\xb8\xad\xce\x33\xfa\xc4\x7a\xfe\x2e\x0c\x52\xe6\xf3\xeb\xeb\x5b\x4a\x1d\xd2\x01\x56\x54\xd2\x71\x8d\xb3\x9b\xb8\xc0\xad\x14\xe0\xd0\xde\xa2\x3d\x73\x44\x18\xe6\x2b\x19\x57\x4e\xe8\x72\x2b\x17\xa1\x60\x26\xed\xb2\xa6\xa8\x12\x10\xcd\xe2\x51\x05\xfb\xab\xed\xf6\x7f\x43\xaf\x1f\xf9\x17\xf6\x0b\xbf\xfc\xea\x8c\x9e\x8d\x08\x6c\xf4\xcb\x70\xc0\xaa\xf8\x6c\x2e\x2d\x2a\xe6\x8a\x19\xe4\xca\xd4\xda\x1f\xe3\x92\xe1\x71\xe4\xb2\x1d\x6a\xe2\xbe\xa6\xb0\x73\x92\x77\x9f\x1b\x5b\xea\x96\xf7\x6d\xa8\x9c\xc5\xf2\x50\xf4\x23\xbc\x3b\x6a\x02\xf8\xde\x5d\xf5\xac\xe8\xcd\x1a\x75\x17\x80\x0b\x8e\x16\x40\x1e\xa1\x66\x05\x18\xa5\xa4\x5e\xb2\x58\xdf\x0a\xa9\x6a\x8b\x8f\x29\xe0\x90\xfa\x10\x44\x29\xf2\xef\x2e\xd8\x63\x20\x3d\xea\x53\x60\xf3\x3a\xcf\xd1\xb9\xcf\x04\x8b\xd4\xfb\x60\xf3\x95\xb1\x3e\x6a\x01\x8b\x4f\x6d\xaf\x4f\x7d\x80\xd5\x11\xe8\xd3\xaa\x3a\x21\xd0\xcd\x8a\x52\xe4\x5b\x63\xd4\x8f\x48\x55\x1a\x09\x75\x1a\xe4\x90\xfa\x00\x4f\x56\x68\x6a\xff\x99\x42\x45\x6a\x02\xb9\x0a\x6d\xce\x95\xd1\xb1\xe1\xb9\xbe\xc3\xbc\xa6\x74\x1e\x8c\xbb\x0f\x92\x3f\x4e\x4d\x80\xaf\x84\x47\x9d\x6f\x6f\x8c\x17\xea\x07\x14\xfa\x71\xe3\x56\x1d\xea\x7f\x54\x28\xc8\x30\x9b\x62\x50\x99\x25\xc7\x87\x44\xed\xc7\xb4\x31\x1c\x04\x11\xce\x6a\x2a\x7b\x65\x96\xc9\x26\x57\xd9\xf7\xba\x34\x63\x18\x8d\xc6\x50\x89\xf5\xfb\x10\x00\x3e\xb4\xc3\xbe\xfb\x07\x4a\x57\x7d\x9f\x9e\x1d\xf3\x62\xcc\xba\x51\x62\x4c\x4c\x1d\x57\x3e\xca\x42\x4c\xbb\xe0\xb0\x63\xe9\x78\xf0\x21\x5f\x64\xd9\xd1\x30\xdf\x51\xc7\x9d\xf5\xf9\x8e\x85\x02\x66\x3e\xe6\xaf\xb3\xfd\xcd\x1d\xd2\x1c\xe1\xed\xbb\xe9\xec\x28\x6f\x8f\xe6\x24\x46\xe3\x0c\x8f\x61\x44\x9a\x03\x8c\x3d\xa7\x9c\x1d\xdb\x43\x9f\xe6\x10\xa2\xb7\xfc\x71\x35\x9c\x5a\xfe\x88\x0b\xce\xf6\x79\x0f\x69\x0e\x61\xa2\xe7\x3d\x26\x42\xa4\x61\xde\x4f\x39\xdc\x0c\x30\xfb\x84\x0b\x33\x8e\xda\xf3\xca\x43\x1b\xc4\x6c\xdf\x73\xc7\xc3\xc1\x43\xbf\x35\x3b\xac\x5d\x52\x90\x5a\xfa\x24\x8d\xe3\xf3\xb7\x68\xa5\x29\x64\xce\xd3\x34\x65\x96\x61\xbe\xae\x85\xea\x97\x4f\x54\x87\x09\xe7\xa4\xe3\xd2\xcb\xa1\xf7\x5c\xc5\x74\xaa\x2c\xbf\xb2\xe8\x56\x46\x15\x8e\x2b\xad\x5a\x17\x68\x9d\x17\xba\xe0\x51\xc2\x7a\xad\x64\x1e\x5a\xfb\x05\xae\xc4\xad\x34\x36\x63\xf6\x9f\x74\x69\xac\xaf\xb5\xf0\xa8\xb6\xe3\x6e\xe1\x52\x18\x74\xfa\xa9\x8f\x2d\x11\x2c\x2d\x0a\x0f\x1b\xb1\x25\x51\xf0\x6e\x1d\x8a\x5f\xe9\x18\xa5\x10\x5e\x8c\xc1\x19\xea\xa3\x2c\x3a\x63\x3d\x17\x90\xb5\xd5\x3c\xfb\xd7\x20\xbd\x03\x57\xaf\xf9\x12\x8d\xfa\x84\x85\x35\xa2\xc8\x85\x3b\xd8\x46\x45\x45\x6e\xee\xb8\x6c\xe2\x69\xff\x61\xed\x04\xc9\x7c\x7e\x9d\x06\xf1\xe7\x18\x2e\x05\xdc\x6c\x32\x79\xe4\xda\x4b\x3a\x57\xa3\x9b\x5c\x7c\x91\xb5\xd5\x60\x2c\xeb\xa8\x4b\xa0\xd3\x0a\x07\x32\x88\x3c\x73\x6f\x51\x54\xcd\x55\xcc\xec\xb2\xd1\x0b\xcf\xfc\xba\xef\xb8\x60\x3f\xc6\x94\xcd\xbd\xb0\x9e\x5f\x2b\xe9\x3c\x6a\x8e\xc1\x96\xc1\x34\xfa\xec\x15\x3f\x4c\x46\x3e\x5f\x8f\xc6\x30\x3a\x7f\xf1\x65\x36\xcd\xa6\xd9\xf9\x6c\x3a\x3a\xd1\x77\xad\x85\x96\x79\x42\xed\x08\xf7\x08\xc3\xc1\x60\x69\x78\xef\xd9\x9c\x54\x94\xec\x96\x39\x26\x4f\x1a\xe8\x3b\x5b\x25\xf5\xfd\x8c\x6c\x73\x78\x8b\x76\x0b\xe7\x53\x68\x26\xb0\x0b\xcc\x45\x1d\xbb\x1b\x42\x43\x2b\xef\xda\xa3\x11\x16\xe9\x48\x05\x9c\x4f\xcf\x9a\x01\x29\xa3\x45\xb7\x85\x8d\xd4\x85\xd9\x64\x70\xb3\x92\x0e\x14\xfa\xa7\x0e\x6a\x3a\xfe\x8a\xa7\xba\xc7\x20\xbd\x81\x25\xf2\xb5\x85\x55\xdb\x88\x26\xf2\xbc\x0e\x7d\x07\xb9\x57\xbc\x52\x72\x90\x68\xc3\xbd\x88\xf0\x6c\x7e\x20\xd9\x48\xd7\x68\x4b\xcc\x7d\x2b\xb8\xa9\x6d\xbc\x79\x8a\x68\x8d\x35\x47\x42\xb5\x85\x4a\xf8\x7c\xd5\x8a\xf2\xd4\xc5\x0e\x85\xda\x7f\x67\x58\x2d\x9b\x15\xea\x63\x2d\x53\x84\x74\x3c\x08\x84\x7c\x25\xf4\x12\x1d\x77\xa5\xca\x2c\xbf\xe5\x1c\xa9\xf3\x6d\x98\x27\xf7\xef\x4c\x98\x46\x38\xcf\x09\x78\x8e\xa8\xc3\x58\xba\xcd\xb7\x7b\x29\xfa\xfe\xa1\xc7\xf0\xca\x2c\x29\xd2\xed\xf1\x30\x3c\x3d\xbf\x67\xa3\xe0\x36\xfc\x1f\xd0\xcc\x93\xe3\xdb\xfc\x63\xb2\x77\x7d\x93\xc2\x3d\xb4\x63\x2e\xa9\x79\x1e\x29\x29\x08\x10\xc6\xa0\xb6\x8a\x96\x19\xc5\x11\xc6\x08\x9e\x43\x63\x5f\xd9\xd7\x45\x61\x93\x34\x9b\xf3\xf2\x6c\xe1\xd4\xc7\xfe\xd6\x9a\x37\xdb\xe4\x6b\xdc\xc4\x42\x20\x19\xfd\xf7\xf5\xcd\x68\x0c\xb5\x55\x63\xb2\xe6\xc0\x70\xc4\xc0\x59\x7d\xd9\x5b\x2b\xb5\x2f\x93\x50\x02\x40\x6e\xb4\xc6\xdc\x73\x53\x68\xda\x73\x98\xcf\xaf\xa9\x45\x41\x51\xcd\xe0\x4f\x6e\x14\x9a\xf4\x00\x91\x1b\xed\xa5\xae\x91\xbf\xb1\xfa\x06\x81\xb2\x15\xaf\x73\xc1\x9d\xcd\xeb\x45\x68\xc1\x7e\x96\x7e\x95\x50\xf1\xf3\xe7\xce\xec\x2c\x0c\xdd\x7e\xfb\x3f\x17\x98\x4e\x10\x6f\x77\x77\x02\x81\x33\xbb\x0e\xd1\x2f\x2e\xcd\xd3\x9c\xfd\x9a\x2e\xbc\x8a\xa2\xce\x2e\x81\x4a\xc6\xec\x27\x5d\x09\xeb\x56\x42\x25\x61\x3c\x94\xe0\x6d\xf6\x52\x78\x91\xa4\xe9\x18\xfe\x8c\xe9\x57\x47\x36\xd6\x17\x2b\xca\xc5\xc0\x19\x77\x9c\x4f\x2e\x61\x14\xd7\xbe\x32\x55\x25\x74\x31\x3a\xc9\x1a\x7e\x4f\x26\x70\x63\x0a\xb1\x65\x0f\xb3\x08\x39\xe5\x93\x30\xe6\x0e\xfb\x83\xb0\x6d\x8a\x44\x71\x1c\x4b\x6e\x88\xde\xb5\x43\x85\x26\xfe\x13\x61\x48\x3d\x11\xb8\x69\x96\xe1\x7b\xcd\x7f\xa4\x50\xa0\x50\xb0\x31\x56\xb1\x3f\x33\x3b\x2f\x47\x79\xcc\xf1\xe5\x60\xb3\x26\xb9\xfc\x5a\x38\x07\x32\x64\xac\x76\x16\x9c\xb5\xe0\xaf\x48\x84\x8d\xb1\x76\x0b\x62\x41\x1d\x43\x11\x67\x14\xd2\x85\x08\xb1\xc1\xdd\x88\x85\xc1\xe8\x75\xbe\x57\x63\xf2\xb8\xaf\xc5\xf4\x06\x0a\xe9\xc4\x42\x61\x1c\xb7\x54\xa6\xc0\x8e\x8e\xb9\x3f\x7f\x72\x09\x45\xd6\x9d\x5d\x3c\xae\x60\x0a\x13\x14\x52\x9a\xc1\x6d\x2f\xce\xbc\x0f\x98\x1f\x76\xa4\x07\xaf\xe0\x12\x70\x77\x56\xa4\xee\x6e\xe8\x0b\x55\x88\x2c\x41\x52\x38\x47\xe9\x57\x21\x0e\x32\x71\x72\x9e\x32\x71\x29\xad\x8b\x59\x1a\x36\xf8\xf4\x16\xc1\x51\x8c\x0b\xe7\xb5\xc3\x32\x1d\xce\x17\x69\xff\x15\xf5\xe5\x61\xad\x95\x68\x62\x6b\xd1\xe3\xf8\x4b\xda\xcd\x54\x5c\x9d\x90\xd2\xb1\xa0\xa3\xcd\x79\x94\xcb\xc3\x9d\x02\x9c\xa9\xd0\xaf\xe8\x34\xf6\x24\x68\x35\xdd\x0c\xaa\x07\x47\xc2\x6c\x47\x2f\xbb\xfb\xbd\x86\xb6\x69\xb4\x8a\x4c\x35\xfd\x55\xfa\x09\xcf\x69\xce\xe7\x68\x03\x42\x87\x7d\xbc\x35\xf9\xa3\xe5\x7b\x00\x54\x8e\x4f\xb2\x73\x6b\x39\xaf\x17\xc9\x29\xfc\x14\xfe\x0e\xbd\xbc\xf6\x47\x0b\xb4\x8b\x7c\xf4\xe3\x81\x78\x3e\xa3\x8a\xfe\x9d\x37\x1d\xb2\x84\x22\x0b\xbe\x77\xdf\x9b\x1d\xcf\x0e\x86\xc7\x4d\xed\xf7\xd2\x24\x3d\x7f\x1c\x37\xd5\x54\x88\xfc\xac\x96\x63\x59\x22\x4e\x6a\xc3\xac\x3c\x6c\x34\x8e\x82\xbb\x77\x89\x7f\xbf\x6c\x2f\x13\x07\xe1\xef\x57\xb0\x88\x57\x15\xc4\x2d\x74\x5c\x86\x07\xb3\x92\x87\x97\x5d\xa7\x89\x95\x4e\x67\x31\x63\x79\x70\x9e\x8c\x2e\xde\xbd\xe3\x9a\x32\x2c\xdd\x93\xe6\xa1\xcd\xc8\x07\xe3\x64\x8e\x2b\x9f\x79\xf9\x32\x08\x43\xf7\x7f\x41\x51\x8f\xcf\xea\x4f\x5c\x39\xb4\xb7\x0d\x9f\xd2\xdf\xbf\xad\xbe\x47\xb4\xf7\x30\xec\xcb\x11\x54\x07\x93\x67\xa0\x0d\x94\xb1\x15\xe7\x8d\x86\x3f\x2b\xd8\xa2\x87\x67\x93\xf4\xe8\xa0\xfe\x7f\x03\x00\x00\xff\xff\xe9\x6d\xd6\xa0\x5e\x28\x00\x00")

func _hardcodedDoerGoBytes() ([]byte, error) {
	return bindataRead(
		__hardcodedDoerGo,
		"../_hardcoded/doer.go",
	)
}

func _hardcodedDoerGo() (*asset, error) {
	bytes, err := _hardcodedDoerGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../_hardcoded/doer.go", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x32, 0x4f, 0xdd, 0x7c, 0x1, 0xbe, 0xcd, 0x36, 0xa9, 0x5b, 0x84, 0x6c, 0x22, 0xf5, 0x53, 0x82, 0xa4, 0x8b, 0x1f, 0x11, 0xbb, 0x12, 0x8e, 0xbf, 0x86, 0x2c, 0xcf, 0xe1, 0x15, 0x2e, 0x65, 0x19}}
	return a, nil
}

var __hardcodedMiddlewareGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x54\x5f\x6b\xe3\x46\x10\x7f\xb6\x3e\xc5\x74\x4b\xc8\xea\x70\xe4\x7b\x28\x14\x02\x7e\x28\xe9\xa5\x79\x39\x38\x2e\xa1\x2d\x94\xc2\x6d\x56\x23\x69\xb1\xbc\xab\xce\x8e\xac\x9a\xe0\xef\x5e\x66\x25\x39\x51\x48\xd3\xa7\x3e\x58\xde\x9d\x99\xdf\x6f\xfe\x6f\x67\xec\xce\xd4\x08\x11\xe9\x80\x94\x65\x6e\xdf\x05\x62\xd0\xd9\x4a\x55\x7b\x56\xd9\x4a\x79\xe4\x4d\xc3\xdc\xc9\x99\x7a\xcf\x6e\x8f\x9b\x12\x1f\xfb\x5a\x65\xd9\x4a\xd5\x8e\x9b\xfe\xb1\xb0\x61\xbf\xb9\x69\xf1\x80\xb4\xd9\x99\xe3\x01\xf1\xaa\x0e\x9b\xc3\x8f\x9b\x36\xd4\x35\x92\xca\xf2\x2c\xdb\x6c\xe0\x8b\xf1\xce\x7e\x76\x65\xd9\xe2\x60\x08\xa1\x0d\x75\x04\xe3\x8f\xd0\x89\x22\x16\x70\x1b\x08\x7c\x18\xd6\x30\xe0\x25\x21\xd8\xe0\xd9\xf9\x1e\x81\x1b\x0a\x83\xf3\x35\x70\x83\xa3\x31\xf4\x9d\x30\xca\x3d\xb2\xb1\x3b\x88\x01\xb8\x71\x11\xf6\xe6\x08\x96\x4c\x6c\x46\x5b\x0a\x16\x63\x2c\xb2\xaa\xf7\xf6\xb5\x7f\xdd\x80\x24\x56\xdc\x19\x5f\xb6\x48\xf9\xe2\x06\x4f\xd9\x8a\x90\x7b\xf2\x0b\xf1\x6d\xef\xad\x16\x32\x3d\x8c\xf2\xaf\x18\xbb\xe0\x23\xfe\x46\x8e\x91\xd6\x40\xf0\x61\x92\xff\xd5\x63\xe4\x5c\x78\x56\x25\x56\x48\x90\x60\xa3\x60\x95\x92\xf8\x44\x04\xd7\x5b\x20\xb4\xe1\x80\xa4\x73\x51\xb8\x0a\xce\xba\xed\x16\xbc\x6b\x47\xc0\x14\x8c\x1c\x4f\xf2\x39\x18\x02\xa4\xf4\x0b\x94\x89\x24\x0e\x8e\x6d\x03\x2f\x99\xe7\x73\xa1\xf9\xd8\xe1\xe4\xda\x9a\x28\x45\x23\xe7\xeb\xeb\xc4\x2c\x34\x5b\xa8\xf6\x5c\x7c\x12\xb2\x4a\xcf\xb0\xfc\x6c\x9e\xbc\xbc\xb4\x9e\x4d\x44\x54\x62\x65\xfa\x96\xff\x85\x4c\xf5\x7e\xe7\xc3\xe0\xa7\xbe\x5d\x7c\x7f\x80\x50\x81\xc4\x03\x17\x0f\x6a\x7d\x66\x7a\x3e\xe5\x63\x92\xf2\x1d\xe7\xa7\xb8\xa5\xb0\xbf\x09\x9e\xf1\x6f\xd6\x54\xcc\xa7\x3c\x1f\x7d\xfc\xac\x55\x82\xaa\x75\x8a\x60\xc2\x7c\x7e\x52\x48\xa4\xae\x25\xf6\x35\xa8\x34\x25\x4c\xc6\xa2\xba\x9e\xb2\xd7\x69\x8c\x8b\x7b\xd1\xe8\x3c\x3f\xe5\xe7\xc6\x2c\x2a\x70\x4a\x8d\x69\x8a\x7b\x59\x91\xbb\x87\x87\x2f\x7a\x58\x83\x68\x4e\x79\x76\x4a\x73\x1d\xd9\x70\x1f\x97\x93\x00\x03\x99\x2e\x82\x01\x9a\xc4\x30\x24\x79\x96\x32\x7f\x13\x11\x99\x7a\xcb\xd2\xa4\x37\x26\x2b\x5b\x8d\x18\x70\x9e\xc5\x6d\x1a\x68\x1d\xe1\xc3\x5b\x54\x39\xa4\xff\x3b\x34\x25\x92\xb6\xa1\x44\x81\xa5\xfe\xc7\x62\xe2\xd9\x82\xc8\x45\xb0\xc4\x16\xaf\xa1\x73\x96\xbf\x22\x45\x17\xfc\x57\xe3\x6b\x84\x12\xad\x2b\x31\xc2\xd0\x20\x37\x48\xc0\x01\x8c\xb5\xd8\x31\x18\x38\x8c\x86\xc5\x98\xea\x02\x96\x56\x60\xd2\x4f\x5d\xc8\xe1\x31\x84\x36\x79\xb8\x69\x1d\x7a\x9e\x00\x37\x0d\xda\xdd\x8b\xc7\xc2\xca\x3d\xa6\xad\xb6\xc9\xee\xd9\x4f\xaa\xc5\x7b\xe0\x57\x9b\xbe\x06\xf2\xf5\x22\xb0\xff\x71\xf7\xe7\x6c\x65\xd1\x8b\xb1\xac\xc5\x2f\xc8\x5a\xfd\x7e\x35\x86\x7c\x35\x05\xa2\x64\xcc\xfe\x6b\xe0\x7f\x2a\xcb\xf9\xa6\xc6\x32\x5c\x4d\x0e\xd4\x7a\x2e\x88\xf0\xb8\x0a\xbe\x23\x5f\xcf\xb5\x9e\x56\x7f\x58\x34\xf7\x87\x8f\x1f\xf3\x17\x52\xfd\xc7\x9f\x8f\x47\x46\x2d\xbb\x7b\xdf\x91\xf3\x5c\xe9\x6f\x4f\x6a\x8f\x31\x9a\x5a\xb6\x46\x2d\xeb\x0e\x97\x17\xf1\x12\x7c\xe0\xa9\xf3\x58\xae\xa1\x6b\x51\x9e\x8b\xbe\xab\xc9\x94\xa8\x4e\xdf\x9e\x83\xca\x93\xaf\xf3\x2b\x76\x7a\x67\xa7\xfe\x09\x00\x00\xff\xff\xa1\x73\xce\xd9\x95\x06\x00\x00")

func _hardcodedMiddlewareGoBytes() ([]byte, error) {
	return bindataRead(
		__hardcodedMiddlewareGo,
		"../_hardcoded/middleware.go",
	)
}

func _hardcodedMiddlewareGo() (*asset, error) {
	bytes, err := _hardcodedMiddlewareGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../_hardcoded/middleware.go", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xcb, 0x1, 0xb6, 0x9d, 0x16, 0xe7, 0x46, 0xa2, 0x49, 0x7d, 0xf6, 0xc, 0x20, 0x3a, 0xd4, 0x73, 0x64, 0xea, 0xcc, 0xe3, 0x1f, 0x62, 0xec, 0xc7, 0x5b, 0x68, 0x93, 0x2d, 0xaf, 0x96, 0x19, 0x61}}
	return a, nil
}

var __hardcodedTracingGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x54\xdf\x6f\xdb\x36\x10\x7e\xb6\xfe\x8a\x83\x81\x15\xd2\xa0\x90\x68\x3b\x64\x45\x86\x3c\xac\xf5\x8a\xf8\x21\x43\xd0\x64\xe8\xc3\x30\x14\x34\x79\x96\x88\x48\xa4\x46\x9e\x6c\x19\x81\xff\xf7\xe1\x28\xf9\x47\x86\x26\xc0\xf6\x62\x8b\xc7\xbb\xef\x3e\xde\xf7\x91\x9d\xd2\x8f\xaa\x42\x88\x18\x36\x18\x28\x28\x6d\x5d\x95\x65\xb6\xed\x7c\x20\xc8\xb3\xd9\x1c\x9d\xf6\xc6\xba\x4a\xae\xac\x53\x61\x37\x3f\x0f\xd5\x38\xf0\x7a\xdd\x12\xff\x39\x24\x59\x13\x75\xf3\x2c\x9b\xcd\x2b\x4b\x75\xbf\x12\xda\xb7\xf2\x53\x83\x1b\x0c\xf2\x51\xed\x36\x88\x17\x95\x97\x9b\x9f\x65\xe3\xab\x0a\x03\x57\x55\x5e\xf8\x0e\x1d\x61\x83\x2d\x52\xd8\x09\xeb\xa5\xf6\x8e\x82\x5d\x49\xeb\x22\x85\xbe\x45\x47\x8a\xac\x77\xf2\x0c\xb4\xf2\xc1\x36\x8d\x92\x6d\x3f\x48\x4f\xd8\xb4\xfd\xf0\x12\x1a\x6f\xcb\x2e\xf8\x4e\x55\x09\xe6\xd5\x3c\x1e\x01\xce\xb3\x22\xcb\xa4\x84\x43\x91\x0f\x40\x1e\xfa\x88\x22\xdb\xa8\x70\x1e\x3e\x83\x15\x0f\x38\xd0\xad\xea\xee\x4e\xbb\xd7\xcf\xf7\x19\xfa\x93\x77\x84\x03\x3d\xed\x41\x4a\x48\xcd\x3a\x15\xd0\x11\xd4\xa8\x0c\x86\xd4\xf6\xb6\x1f\xee\x93\x1e\xb7\xd6\x98\x06\xb7\x2a\x20\x04\xa4\x3e\xb8\x08\xed\x29\x44\xb5\x22\x88\xb5\xef\x1b\x03\x2b\x04\x45\xa4\x74\x8d\x86\xa9\x2a\x38\x9b\xcf\x24\xae\x60\xe8\x25\x81\xf1\x18\x81\xb6\x1e\xa8\xb6\xae\x8a\x57\x10\x49\x05\x8a\x10\x3b\xe5\x62\x09\xca\x19\x50\xc6\x8c\xeb\x71\x1c\x60\xdd\xda\x33\x2c\xd5\x4c\xe4\xef\x1e\x23\x5d\xc4\x0e\xb5\x5d\x5b\x0d\xa3\x94\x09\xfd\x8b\xad\x6a\x02\xe7\xb7\xb0\x45\xf0\xae\xd9\x41\xec\xbb\xe4\x24\x4e\xb2\xae\x82\xe5\x22\x82\x75\x09\x68\xed\x43\xab\x68\x3c\xc5\x42\x91\x32\xbe\x02\x1c\x3a\xd4\x14\x45\xb6\xee\x9d\xfe\xde\x1c\x72\x3e\x8b\xd5\xf8\xbb\x6a\x11\x22\x05\xeb\xaa\x02\x38\x39\x67\xe7\x89\x1b\xe5\x4c\x83\xa1\x80\xf3\x15\x3c\x65\x33\x4f\xec\x10\xb8\xba\x86\xc9\x2c\xe2\xfb\x98\xe5\x71\xff\xab\xa5\xfa\x24\x65\xcc\x4f\xa2\x17\x45\x36\x1b\xe5\x98\x3a\xc3\xeb\xbd\x0f\xc9\x23\x87\x67\x44\x3f\x73\x7d\x02\x09\xdb\xb1\xee\x0b\xc6\xce\xbb\x88\x5f\x83\x25\x0c\x25\x04\xf8\x71\x8a\xa7\xb1\x17\x09\x70\x26\xe5\x81\x27\xd4\x2a\x02\x0e\xac\x13\xb1\xf6\x35\x26\xe1\x44\x52\xa1\xeb\x09\x2c\x81\x75\x93\x76\x9a\x86\x7f\xeb\xc6\x68\x91\xe7\x92\x94\x16\xf7\x9d\x72\x9f\x83\x6f\x27\x9b\xe6\x41\x1c\xbe\xf8\xd4\xb3\xd9\xba\x25\x71\x17\xac\xa3\xc6\xe5\x31\x45\xec\x1a\xa2\x66\x80\x98\x8a\x8f\xe9\xbf\x40\xd4\xe2\x46\xc5\xe4\xfa\xe5\x22\x9f\x98\xcf\x98\xdd\x72\x51\x8e\xfd\x96\x8b\x54\xa9\x53\x29\x27\x89\xfb\xa4\x69\x5e\x94\x1c\x3d\xd6\x1e\xc3\x09\x42\x4a\x30\x93\x61\xb4\x77\xfc\x6e\x45\xa8\x71\x98\xfc\x10\xd3\x5d\xb5\x8e\x2e\x7f\x62\xbb\x95\x10\x3d\x9f\x15\xa8\xf6\x11\x79\x91\x1c\xa7\x7d\x08\xd8\x28\x62\x53\x36\xbe\x8a\xc9\xf7\x89\x53\x84\xad\x0f\x8f\x31\x75\xb2\x6b\x68\xd0\xe5\x13\xd7\x02\xae\xaf\xe1\xfd\x3b\x78\xf3\x26\x45\xc7\x93\xa4\xe0\xdb\x4b\x78\xe2\x0b\xfd\xec\x4d\x99\x1c\x7e\xc5\xbb\xab\x1d\x21\xe4\xef\xdf\x5d\xe8\x5a\x05\x26\x5b\x94\xf0\x61\x8a\xbe\xbd\x3c\x45\x47\x0a\x89\x0c\xc3\x83\x35\x23\x91\xd9\x44\xe1\x63\x2c\xe1\x1b\xcf\xac\xc6\x41\x2c\x50\x7b\x83\xd3\x68\x0e\x1c\xc7\xf4\xe9\x52\xbe\x24\xa5\xf8\xd5\x98\xc3\x6a\x9e\x2a\xbf\x59\x33\x2f\xc7\xda\x24\xf2\x7d\xc7\x2a\xaf\xf3\xf9\x0f\x66\x5e\xc2\xf8\xf6\x8b\x8f\xb6\xfa\xcd\x19\xab\x9c\xf8\x23\xcd\x37\x3f\xb2\xfa\xf3\xc3\xd5\x5f\x45\x31\x35\x1f\x07\xf3\x32\xd5\x69\x70\xff\x9d\x29\x17\xfe\x3f\xa2\x07\x4a\x07\x8e\xfb\xec\xf0\x53\x8b\xf4\xc6\xdc\x3c\x3c\xdc\xe5\x61\x5b\x42\xe0\x84\x3d\xa7\xed\xb3\x7d\xf6\x4f\x00\x00\x00\xff\xff\x17\x0a\x14\xd8\x20\x07\x00\x00")

func _hardcodedTracingGoBytes() ([]byte, error) {
	return bindataRead(
		__hardcodedTracingGo,
		"../_hardcoded/tracing.go",
	)
}

func _hardcodedTracingGo() (*asset, error) {
	bytes, err := _hardcodedTracingGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../_hardcoded/tracing.go", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x4f, 0xa8, 0xd2, 0xb5, 0x8e, 0x1b, 0x3e, 0x4a, 0x4c, 0xb1, 0x93, 0x2a, 0x36, 0x47, 0x9c, 0x64, 0xef, 0xfa, 0xca, 0x3f, 0x4, 0xc7, 0xa5, 0xb0, 0x7e, 0x87, 0x2d, 0x5b, 0x28, 0x38, 0xa4, 0x60}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"../_hardcoded/doer.go":       _hardcodedDoerGo,
	"../_hardcoded/middleware.go": _hardcodedMiddlewareGo,
	"../_hardcoded/tracing.go":    _hardcodedTracingGo,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"..": {nil, map[string]*bintree{
		"_hardcoded": {nil, map[string]*bintree{
			"doer.go":       {_hardcodedDoerGo, map[string]*bintree{}},
			"middleware.go": {_hardcodedMiddlewareGo, map[string]*bintree{}},
			"tracing.go":    {_hardcodedTracingGo, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
