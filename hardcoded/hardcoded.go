// Code generated by go-bindata. DO NOT EDIT.
// sources:
// ../_hardcoded/doer.go (10.915kB)
// ../_hardcoded/middleware.go (4.586kB)

package hardcoded

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __hardcodedDoerGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x3a\x7f\x6f\xdb\x46\xb2\x7f\x4b\x9f\x62\x2a\xa0\x17\x32\x95\x49\x39\x77\x49\x0f\xee\xf3\x3d\xb4\xb6\xf3\x52\x5c\x9b\x04\x91\xfb\x1a\x20\x08\xae\x2b\x72\x28\x6d\x4d\xee\xb2\xbb\x4b\xc9\x82\xcf\xdf\xfd\x61\x66\x97\x14\x29\xc9\x4e\xee\x5a\x3c\xbc\xa7\x3f\x2c\x91\x3b\x33\x3b\x33\x3b\xbf\xd7\xb5\xc8\x6e\xc4\x12\x21\x2b\x25\x2a\x37\x1e\xcb\xaa\xd6\xc6\x41\x34\x1e\x4d\x16\x5b\x87\x76\x32\x1e\x4d\x32\xad\x1c\xde\x3a\xfa\x89\x2a\xd3\xb9\x54\xcb\xf4\x57\xab\x15\xbf\x30\x46\x1b\x86\x2a\x2a\x86\x90\x3a\x95\xba\x71\xb2\xa4\x87\x52\x2f\xe9\xab\x12\x6e\x95\x1a\xa1\x72\x7a\x50\xe8\xc2\x57\xba\x72\xae\xa6\xdf\x76\xab\x32\xfa\x76\xb2\xc2\xc9\x78\x3c\x9a\x2c\xa5\x5b\x35\x8b\x24\xd3\x55\x2a\x0a\xbc\x4d\x57\x5b\xeb\x8c\xbc\x3d\x59\xea\xf6\xe7\x64\x08\x95\x6b\xa5\xd7\x42\xad\x64\x8e\x29\xae\x51\x39\xab\x1b\x93\xe1\x64\x3c\xd2\x35\x2a\x67\x44\x26\xd5\x12\xfa\x18\xbd\xf7\xfd\xdf\x27\x4b\x3d\x19\x8f\x9c\x58\xda\xcf\x84\x4e\x83\x66\x96\xba\x14\x6a\x99\x68\xb3\x4c\x6f\x53\x12\x2e\x68\x2d\xcd\xdc\x6d\x90\xb3\xd4\xcb\x25\x1a\x98\x2c\x75\x7d\xb3\x4c\xa4\x4a\x2f\x4a\x5c\xa3\x49\x6f\xc4\x76\x8d\x78\xb2\xd4\xc9\xfa\x45\xea\x81\x26\xe3\x78\x3c\x4e\x53\xc8\x35\x1a\x90\x16\x84\x02\xa9\x1c\x9a\x42\x64\x08\x85\x36\x30\xc9\xb5\x54\xcb\x09\x10\x69\x30\xf8\x5b\x83\xd6\x59\xa8\xb5\xb5\x72\x51\x6e\x61\x23\xdd\x0a\x36\x46\xd4\xb5\x54\xcb\xb1\xdb\xd6\x18\x48\x75\x44\xee\xc6\xa3\x4b\x1d\x65\xf0\x94\x28\x24\x17\x7c\xfc\x53\x30\xe1\xf9\x9d\xa7\x18\x43\xd4\x3e\xdb\x5a\x2b\x8b\x53\xe0\x03\x8f\xc7\xf7\x63\x4f\x55\xd7\xaf\x45\x85\x17\xee\x16\xac\x33\x4d\xe6\xee\xee\x99\xef\x85\xb0\x18\x68\xbc\x12\x2a\x2f\xd1\x40\x8d\xa6\xd0\xa6\xb2\xe0\x56\xc8\xeb\x03\xde\x3d\x35\x7a\x7d\x49\x7c\xee\x88\x15\x8d\xca\x20\xca\xbb\xa5\x18\x7e\x07\xdb\x24\xb5\x41\xd7\x18\x05\xe1\x58\x92\x4b\x1d\x99\xe4\xc2\x9f\x55\x14\x4f\x21\x9b\x82\x17\x2f\x4d\x21\x9c\x32\x73\x24\xf2\xdc\xb6\x2f\xc0\xe9\xa1\xe2\x3d\xf7\x7d\x70\x2f\x00\xed\x97\xb3\xe6\xc7\x3d\x51\x7a\x70\xbf\x57\x9a\xf1\x28\x73\xb7\x70\x76\x0e\x3d\x19\xc8\xe6\xe9\x50\xe8\x75\xe6\x6e\x93\xff\x16\x65\x83\x51\x77\x50\x77\xf7\x71\x12\x91\x0f\xa9\x65\x3c\x1e\xad\x85\x01\x5b\x43\xcf\xa6\x93\x79\x2d\xd4\x78\x94\xa6\x70\xfd\xe6\xf2\xcd\x19\x09\x0e\xec\x0f\x06\x4b\xe1\x82\xf4\x52\xd5\x8d\x83\x5c\x38\xf1\x9f\xe3\x91\x2c\xa0\x16\x06\x95\x23\x4c\xda\x75\x9f\xda\x4b\xa3\xab\x96\xbd\xcc\xdd\xc6\xdf\xf4\xe1\xbf\x38\x07\x25\x4b\xd2\xd4\xc8\xd6\xb0\x87\xec\x84\x61\xa8\xc0\xfe\x74\xb0\x7a\xb1\x92\x65\xfe\xa6\x88\x76\xc4\x76\x4a\x88\xe3\xf1\xe8\x1e\xb0\xb4\xf8\x79\x94\x09\xdc\xfb\x3d\x73\xfc\x77\xa9\xf2\x64\x8e\x2e\xb2\xf5\x14\x06\x6f\xdf\xbd\xbd\xf0\xe7\x74\xa5\x9a\x2a\x66\xe1\xd1\x18\x92\xda\xd6\xc9\xb5\x11\x19\x9a\x28\x4e\xbe\x57\xbf\x62\x46\xd8\x3d\xd3\x1a\x8f\xfa\xc1\x28\x79\x75\x7d\xfd\xf6\x15\x8a\x1c\x8d\x7d\x64\xe9\x42\x18\x23\xd1\x44\x26\xf1\x2f\xe2\xf8\x1b\xde\xaf\xa7\xb5\x60\xd0\x4a\x96\x53\x28\x2a\x97\x5c\x91\x71\x14\xd1\x24\xd3\x4d\x99\xab\x27\x0e\x24\x33\xd3\x19\xef\xca\x53\x86\xe8\xcb\x75\x3c\x61\x5b\xf2\xc2\xe7\x58\x90\xe1\xd6\xc9\x4b\xa9\xa4\x5d\x91\x21\x05\xd2\x79\x92\x93\x9f\xf4\x5d\xc3\xa0\x33\xdb\xd6\xb5\xe9\x41\xa2\x85\xe7\xb3\xf7\xc7\xfc\x82\x61\x0f\xbc\x62\xf7\x61\xff\x18\x31\xd4\x5b\x5d\xca\x6c\x0b\xef\x76\xbf\xc3\x7e\xbd\x37\x90\x63\x21\x15\x5a\x10\x9e\x32\xd4\xfc\x3a\xf1\x9b\xf5\x01\x07\xd1\x2e\x4d\xe1\x3b\x91\xdd\xe8\xa2\x20\x53\x26\xb9\x7c\x28\x52\x4d\xb5\x20\xff\x56\x39\x38\x59\x91\x82\x74\x11\x08\x0b\xe7\xb0\xaa\x9d\x4d\xc6\xa3\x16\x35\x8a\xe1\xc3\x47\xca\x53\xc9\x65\x63\x84\x93\xda\xbb\x0a\xef\x0a\x06\x33\x94\x6b\xf4\x74\xfb\x8a\x98\x82\xb0\xb0\xc1\xb2\xa4\x6f\x5a\x34\x68\x9b\xd2\x81\x2e\x18\xbb\xcd\x85\x21\x02\x3c\xb1\xf0\xcb\xa5\xfe\x05\x2a\x74\x2b\x9d\x27\xe3\x11\x53\x8f\x06\x41\x61\x0a\x0f\xc4\x84\x85\xd6\x65\xd0\xd9\x5c\xaa\x65\x89\x8f\x69\xce\xad\x84\xeb\x4e\x4f\xb4\xdc\x82\x56\x19\x7a\x6d\x1e\x92\x18\x84\xf9\x23\x0a\x15\x0e\xb6\xba\x01\xbb\x22\xeb\xeb\xb6\xc1\x8e\xf6\xa9\xc5\x4c\xab\x1c\x44\xe1\x28\x1f\x39\x28\x84\x2c\x6d\x12\x82\xe3\xc1\x7e\x31\x3c\xac\xf9\x5e\x34\xdf\x5b\xb9\x3b\x85\xa7\xc0\x6f\xe6\xbc\xdb\x7d\xdf\x8a\x60\x23\xcb\x32\x70\xa6\xb4\x3a\x79\xfb\x66\x7e\x3d\xf5\xbf\xbe\xbd\xbe\x78\xb5\xcb\xa6\x2c\xcc\xf3\xf7\xef\x93\x71\x17\x0c\xbf\x77\x64\xad\x16\x94\x76\x90\x35\x86\xe2\x4e\xb9\x6d\xad\x45\x6d\xfd\x21\xb4\xea\xc0\x1c\x16\xdb\x07\x0e\xf7\x11\x81\xfd\x69\x1b\xfc\x0d\xf6\x4e\xdc\xa0\xad\x8f\x1d\x7b\xff\xe8\x49\x27\x21\x24\x85\x10\xf1\xcf\x7f\x92\x44\xc9\x8f\x6c\x4c\x70\x7e\x0e\x13\x12\x78\x72\xec\x3d\x89\x4f\x0b\x1c\x54\x6c\x4d\x41\xd2\x35\xf6\x42\xe7\x08\xff\x01\xcf\x67\xb3\x7e\xb8\x29\x44\x69\x91\xe3\x46\x78\xe1\x4c\x83\x41\xcd\x57\xb7\xb5\x56\xa8\x9c\x14\xe5\x51\xeb\x53\x80\x3b\x88\x81\x13\x7b\xab\x7b\x00\xff\x71\xd3\x2b\xe4\x9a\x0a\x88\xf0\x96\x0b\xa0\xde\x2e\x25\x45\x83\xcc\xa0\xb0\xe4\xe1\x1b\x21\x1d\xdb\x87\xe5\x62\x05\xdd\x06\x51\x75\x07\x7f\x06\xa7\xb3\xd9\x14\x9e\xd1\x9f\xbf\xd0\x9f\xbf\xd2\x1f\x0a\x10\xa7\x2f\x66\x33\xa8\x64\x59\x4a\x6f\xc5\x16\xbe\x4a\x4f\xa0\xa9\x29\x25\x3e\xff\x12\x7e\x95\xce\xa1\x69\x8f\xf6\xb8\x14\x9f\x61\xd0\x94\x4c\x2a\x71\x83\xd1\xde\xf2\x14\x9e\xc7\xe3\x91\xc2\x5b\x86\x38\x9d\xcd\x5a\x23\xff\x71\xc7\xd1\x78\x64\x54\xce\x05\x81\x50\x79\xf2\x1a\x37\x51\xfb\x63\xce\x15\x71\xc4\x08\xaf\xf5\x26\x8a\x93\x9f\x94\xbc\x7d\x2d\x94\xf6\xd9\x92\xeb\x85\x59\x32\x7b\x0e\x69\xca\x62\x3d\xa7\x92\x2d\x43\xe5\x82\x5c\xe3\x11\x15\x9e\x32\x10\x5f\x72\x5c\x6f\x2d\xe2\x83\xfc\x08\xe7\xc0\xac\x7d\x05\x03\xa6\xa3\x28\x32\x2a\x4f\x5e\x96\x5a\xb8\x17\x7f\x89\xe2\xa7\xcf\xe2\x93\xd3\xf8\x29\x3e\x2d\xc2\x1b\x42\xa2\xfd\xbd\x60\x4f\xcf\xe1\x59\xdf\xaa\x0c\xba\xff\xb3\xbe\xfb\xd0\x01\xff\xff\x77\xe0\xd7\xfa\x78\xd6\xf0\x4e\x4a\x09\x52\x51\xe7\xe2\x95\x47\x0e\xd5\xe5\x8e\x90\x85\x87\x04\x1e\x77\x5c\x0a\x07\x55\xed\xb6\x60\x4b\x99\x61\xab\xdc\x01\x85\x7f\x33\x0b\x0c\xc3\xbe\x28\x37\x62\xdb\x8b\x17\x24\xff\x03\xbb\xfd\xab\x09\xb7\xc7\x83\x57\x6b\xdb\x1e\xb1\x82\x42\x09\x38\x54\xc3\xcf\xd2\xad\xfa\x3a\xea\xb4\x01\x0a\x37\x10\x9a\x47\x6f\xc6\x7a\x8d\xc6\xc8\x3c\xd4\x15\xbe\x53\x07\xbd\xa0\xa2\xee\x89\xed\x8a\xb1\xae\x0c\x62\x89\xf6\xc8\x53\xd9\xdd\x12\x6d\x4b\xd2\x29\x3c\x50\x72\xc5\xfb\x90\xfd\xb6\x29\xac\x10\x7d\xdf\x58\x64\xee\x76\x3a\x90\xf3\xee\x7e\x40\x39\xee\xb7\x3e\x4f\xbb\x5a\xf0\x8f\xe8\xe3\xda\x2d\xa6\xa0\x6f\xf6\x9a\xa0\xd0\xf5\x0c\xf9\x8a\x93\xa8\x2f\x26\x3b\xda\x17\xfa\xa6\xf5\x8a\x4e\x17\xe7\x90\x27\xbd\x67\x76\x92\x2e\xb3\xd0\x3e\xbb\xb5\x64\x67\x98\xbe\x99\x3a\xe2\xe3\x7e\xa1\xf3\xf3\x31\xd7\x7c\x73\xb1\xc6\x41\x61\xb4\xd0\x39\xe5\x28\xc8\xa8\x35\xde\x20\xac\x18\x40\xfb\xcd\x12\x78\xe3\x56\x68\x36\xd2\xaf\x71\x14\x64\x00\x51\x1a\x14\x39\x99\x8f\xc8\x99\x2e\x77\xd7\x4d\x41\xa5\xbc\x56\x5d\x74\xcb\x07\x5b\x31\x3a\xd5\x5d\x09\xcc\x11\x19\x8d\x18\x3e\x4b\x53\xeb\x48\x9c\x35\x9a\xa2\xd4\x1b\x9e\x7c\x30\x86\xd4\xca\xa6\xcf\xfe\x3c\xfb\x7a\xf6\xd7\xaf\x5f\xa4\xb4\x97\x54\xcb\x13\xe2\xf8\x44\x17\x27\x84\x7b\x12\x68\x9f\x50\xe2\xd5\x8d\x3b\xa9\x74\x2e\x0b\x8a\x0d\xdd\x8a\x75\xc2\x05\x5d\x2c\x9a\x02\x3e\x7c\x5c\x6c\xe9\x59\x16\x60\x92\xef\x48\xf8\x5e\x4f\x33\x54\xd8\x68\xb4\x68\x0a\x1f\x29\xcf\xc1\x4f\x97\x92\x77\x28\xf2\x6f\xcb\x32\xf2\xb8\x94\x3f\x86\x51\x93\xa8\x0c\x5a\x23\x34\x44\xe8\x9e\x0e\xd3\x67\xb2\xb6\xee\xa5\xb4\xf7\x0d\x47\xbf\x6f\xda\x77\x5f\x7d\xc5\xf8\x47\x59\x1b\x99\x9c\xdb\xbd\xc0\xc7\x6b\x5d\x5f\x94\xda\xa2\x89\x78\x5e\x46\x99\xf6\x3b\x56\x7f\xb4\x68\x0a\xce\x6b\xa3\x40\xe3\x1c\x4c\x1e\x58\xe0\xe8\xdc\x0a\x34\xe8\xae\xfc\xa6\x81\xb3\xf3\x73\x28\x51\x45\xad\xe9\xc5\x14\xf2\xbf\xe8\x1b\x5f\xc8\x34\x3e\xb3\xf8\x56\xce\xf3\xb8\x30\x28\x6e\xc2\x5e\x69\x0a\xcc\x61\xdb\x78\xb0\x4d\x7a\x73\x63\xc3\x20\x03\x59\x0a\xa9\xda\xa4\x41\xcc\x26\x8c\x41\x36\x3d\xf2\x65\x74\x89\x58\x77\x8c\x7c\x08\x0c\x7e\x8c\x87\xa9\x3a\xf0\x10\xa2\x6e\x26\x4d\xd6\x48\xf7\x1d\xb1\x82\x86\xfb\x3f\x59\xd5\x25\x56\xa8\x5c\x08\x65\x1e\x02\x16\x1e\x04\x6a\x6a\xb8\x8c\xe2\x9c\x3d\x47\x07\x39\x2e\x1a\x1e\x37\xd0\xe1\xd0\xb7\xae\xd1\x08\x87\x03\x64\xa9\x40\x40\x45\x29\x6e\xb3\x42\x83\xd4\x52\xb0\x7d\x6b\x55\x6e\xa1\xd4\xcb\x1e\x2b\xc0\x26\xe8\x4b\x39\x86\xa1\x52\x60\x51\xea\xec\x86\x0b\x80\xae\x78\x28\x8c\xae\x60\xa9\x79\xd6\xb1\x32\xba\x59\xae\x42\x5a\x3b\x22\xd2\x63\x2d\xad\xe7\xdf\x7f\xb8\x2f\x1b\x05\x02\x3c\x9e\xf1\x33\x98\x6e\x2c\xc8\x1f\xff\x3b\xf9\x3b\x4f\x04\x7f\xe0\x07\xd2\x26\xb9\x43\x40\x9d\xcf\xaf\xde\xa8\x0c\xc1\x6e\x55\x96\xd0\x2f\xd6\xf5\x2b\x3f\x15\x9d\xcf\xaf\xae\xd6\x94\x1d\xa4\x05\xac\xa8\x6a\xe3\x32\x66\x37\x3e\x85\xb5\x14\x60\xd1\xac\xd1\x9c\x58\x02\xf4\xc3\xd2\x84\x8b\x23\xb4\x99\x91\x0b\x5f\x13\x93\x86\x59\x5b\x94\xec\x45\xbb\x79\x50\xc3\xfe\x6e\x3b\x1d\x5c\xd3\xf2\x23\x1f\x2f\x33\xfc\xf2\xab\xd5\xea\x6c\x42\xc4\x26\xbf\x8c\x47\xac\x8e\xcf\xc6\x52\xa2\x62\xac\x90\x24\x2e\x74\xa3\xdc\x31\x2c\xe9\x5f\x07\x2c\xd3\x83\x26\x6c\x9e\x92\x3c\x88\xbb\x8f\x8d\x1d\x74\x87\xfb\xd6\x17\xc7\x62\x79\xc8\xfa\x11\xdc\x1d\x34\x11\xf8\xde\x5e\x0c\x2c\xe9\x4d\x8d\xaa\x4f\x80\x6b\x8a\x8e\x80\x3c\x02\xcd\x0a\xd0\x65\x29\xd5\x92\xd9\x7a\x29\x64\xd9\x18\x7c\x4c\x01\x87\xd0\x87\x44\xca\x92\x7c\xbc\x4f\xec\x31\x22\x03\xe8\x87\x88\xcd\x9b\x2c\x43\x6b\x3f\x93\x58\x80\xde\x27\x36\x5f\x69\xe3\x82\x16\x30\xff\x94\x78\x43\xe8\x03\x5a\x3d\x86\x3e\xad\xaa\x07\x18\xba\x5e\x51\x16\x7c\xab\x75\xf9\x0e\xa9\x10\x23\xa6\x1e\x26\x72\x08\x7d\x40\x4f\x56\xa8\x1b\xf7\x99\x4c\x05\x68\x22\x72\xe1\x3b\x99\x0b\xad\x42\x4f\x73\x75\x8b\x59\x43\x19\xdb\x1b\xf7\x90\x48\xf6\x38\x34\x11\xfc\x41\x38\x54\xd9\xf6\x5a\x3b\x51\xfe\x88\x42\x3d\x6e\xdc\x65\x0f\xfa\x1f\x15\x0a\x32\xcc\xb6\xde\x2b\xf5\x92\xe3\x43\x54\x1e\x8b\x6b\x53\x38\x08\x24\x9c\xbc\xca\xe4\x7b\x55\xe8\xcb\x08\x13\x3f\xf1\xad\x44\xfd\xc1\x07\x80\x8f\xdd\x3c\xef\xee\x9e\xb2\xdc\xd0\xa7\xcf\x8e\x79\x31\x26\xfd\x28\x31\x25\xa4\x9e\x2b\x1f\x45\x21\xa4\x5d\x70\xd8\xa1\xf4\x3c\xf8\x10\x2f\xa0\xec\x60\x18\xef\xa8\xe3\x9e\x0d\xf1\x8e\x85\x02\x46\x3e\xe6\xaf\x67\xfb\xc2\x1d\xc2\x1c\xc1\x1d\xba\xe9\xd9\x51\xdc\x01\xcc\x83\x34\x5a\x67\x78\x8c\x46\x80\x39\xa0\xb1\xe7\x94\x67\xc7\x64\x18\xc2\x1c\x92\x18\x6c\x7f\x5c\x0d\x0f\x6d\x7f\xc4\x05\xcf\xf6\x71\x0f\x61\x0e\xc9\x04\xcf\x7b\x8c\x85\x00\xc3\xb8\x9f\x72\xb8\x33\xc0\xe4\x13\x2e\xcc\x74\xca\x3d\xaf\x3c\xb4\x41\x4c\xf6\x3d\x77\x3a\x1e\xdd\xc7\xe3\x41\xfb\x75\x58\xc0\xc4\x20\x95\x74\x51\x1c\x46\xe4\x6f\xd1\x48\x9d\xcb\x8c\x27\x66\xa5\x5e\xfa\x19\xba\x12\xe5\xb0\x86\xa2\x62\x4c\x58\x2b\x2d\xd7\x5f\x16\x9d\xe3\x52\xa6\x57\x6a\xb9\x95\x41\xbb\xd2\x65\x6e\xb9\xdc\x6a\x54\x8e\xc6\x3a\xa1\x72\x1e\x17\xd4\x75\x29\x33\xdf\xbe\x2f\x70\x25\xd6\x52\x9b\x84\xd1\x7f\x52\x85\x36\xae\x51\xc2\x61\xb9\x9d\xf6\x2b\x97\x5c\xa3\x55\x4f\x5c\x68\x7b\x60\x69\x50\x38\xd8\x88\x2d\xb1\x82\xb7\xb5\x2f\x70\xa5\x65\x2a\xb9\x70\x62\x0a\x56\x53\xaf\x64\xd0\x6a\xe3\xb8\x8a\x6c\x8c\xe2\xf9\xbe\x02\xe9\x2c\xd8\xa6\xe6\xbb\x6e\xea\x05\x16\x46\x8b\x3c\x13\xf6\x40\x8c\x8a\x2a\xdd\xcc\x72\xdd\xc4\x13\xfd\xc3\xe2\x09\xa2\xf9\xfc\x2a\xf6\xec\xcf\xd1\x0f\xfe\xed\x59\x9a\x3e\x72\x89\x2d\xad\x6d\xd0\xa6\xcf\x5f\x24\x5d\x49\x18\xea\x3a\xea\x04\xe8\xb4\xfc\x81\x8c\x02\xce\xdc\x19\x14\x55\x7b\xdd\x72\x76\xde\xea\x85\xe7\x7a\xfd\x35\xae\xd8\x8f\x21\xf9\x0b\x2f\x5e\x2e\xa5\x75\xa8\x38\x00\xfb\x8b\x2b\x85\x2e\xf9\x81\x5f\x46\x13\x97\xd5\x93\x29\x4c\x4e\x9f\x7d\x9d\xcc\x92\x59\x72\x7a\x36\x9b\x3c\xd0\x5b\xd5\x42\xc9\x2c\xf2\xb7\x47\xdc\x53\x8d\x96\xfe\x56\x34\x99\x93\x8a\xa2\xdd\x36\xc7\xf8\x89\x3d\x7c\x4f\x54\x52\xdf\xcf\xc8\x36\x87\x6b\x34\x5b\x38\x9d\x41\x3b\x65\x5d\x60\x26\x9a\xd0\xc1\x10\x35\x34\xf2\xb6\x3b\x1a\x61\x90\x8e\x54\xc0\xe9\xec\xa4\x1d\x82\x32\xb5\xe0\xb7\xb0\x91\x2a\xd7\x9b\x04\xae\x57\xd2\x42\x89\xee\x89\x85\x86\x8e\xbf\xe2\xc9\xed\x31\x92\x4e\xc3\x12\xf9\x6a\xc2\x94\xdb\x40\x4d\x64\x59\xe3\x9b\x0f\xf2\xaf\x70\x6d\x64\x21\x52\x9a\x1b\x12\xe1\xd8\xfc\x40\xb2\x91\xd6\x68\x0a\xcc\x5c\xc7\xb8\x6e\x4c\xb8\x5d\x0a\xd4\x5a\x6b\x0e\x80\xe5\x16\x2a\xe1\xb2\x55\xc7\xca\x13\x1b\xda\x14\x6a\xf1\xad\x66\xb5\x6c\x56\xa8\x8e\xf5\x4d\x81\xa4\xe5\x61\x1f\x64\x2b\xa1\x96\x68\xb9\xf3\x2c\xf5\xf2\x25\x27\x49\x95\x6d\xfd\xcc\x78\x78\x2f\xc2\x30\xc2\x3a\xce\xbe\x73\x44\xe5\x47\xcf\x5d\xc2\xdd\xcb\xcf\x77\xf7\x03\x84\x1f\xf4\x92\x42\xdd\x1e\x0e\x93\xa7\xf7\x77\x6c\x14\xdc\x6a\xff\x03\xda\x99\x71\x58\xcd\x6e\xa2\xbd\x2b\x9a\x18\xee\xa0\x1b\x65\x49\xc5\x33\x47\x49\x41\x80\x68\x8c\x1a\x53\xd2\x36\x93\x30\xa6\x98\xc0\x57\xd0\xda\x57\xf2\x6d\x9e\x9b\x28\x4e\xe6\xbc\x3d\x5b\x38\x35\xb2\xbf\x75\xe6\xcd\x36\xf9\x1a\x37\xa1\x12\x88\x26\xff\x75\x75\x3d\x99\x42\x63\xca\x29\x59\xb3\x47\x38\x62\xe0\xac\xbe\xe4\xad\x91\xca\x15\x91\xaf\x01\x20\xd3\x4a\x61\xd6\xde\x82\xb7\xe7\x30\x9f\x5f\x51\x8f\x82\xa2\x3a\x83\x2f\x6d\x77\xa7\x4a\x9f\x4c\x2b\x27\x55\x83\xfc\xc4\xea\x1b\x79\xc8\x8e\xbd\xde\xbf\xab\x24\xf3\x66\xe1\x7b\xb0\x9f\xa5\x5b\x45\x93\xc9\x14\xfe\xd4\x9b\x8f\xf9\xc1\xda\x6f\xff\xeb\x0c\xd3\x09\xe2\x7a\x37\xf7\xf7\x98\xc9\x95\x8f\x7e\x61\x6b\x9e\xd8\xec\x17\x74\x7e\x69\x77\x45\x4e\x35\x63\xf2\x93\xaa\x84\xb1\x2b\x51\x46\x7e\x04\x14\xe1\x3a\xb9\x14\x4e\x44\x71\x3c\x85\x3f\xe1\xe1\x05\xf7\x01\x5b\x81\x2f\x26\x9c\x70\xcb\xf9\xc5\x39\x4c\xc2\xde\x17\xba\xaa\x84\xca\x27\x8f\xa3\x92\x11\x93\xc1\xb7\xa3\xc3\x81\x17\x7c\xf0\xb5\xe7\xc7\x1d\xe8\xc1\x12\x9c\x03\x8e\xfd\x7a\x9a\xb2\x77\xf6\x1d\xd3\xe7\x48\x59\x80\xa4\x60\x83\xd2\xad\xbc\x97\x32\x70\x74\x1a\x33\x70\x21\x8d\x0d\x39\x04\x36\xf8\x64\x8d\x60\xc9\x03\x49\xdb\x7d\x5a\xba\x87\xf9\x2c\x1e\x2e\x51\xdb\xe8\xf7\x5a\x89\xd6\xf3\xf3\x01\xc6\x9f\xe3\x7e\x1c\xe5\xdc\x59\x0b\x6b\x31\x07\x2b\x55\xc6\xc3\x44\xae\xcd\x73\xb0\xba\x42\xb7\x22\x43\xd9\xe3\xa0\xd3\x75\x3b\x2a\x1d\x1d\x09\x02\x3d\xbd\xec\x6e\x98\x5a\xd8\xb6\x0f\xc8\x93\xb2\x2d\xfd\xe3\x4f\x9c\x6b\x7b\x3e\x47\xeb\x63\x3a\xee\xe3\x95\xf3\x1f\xcd\x5f\xf8\x17\x12\x59\xf4\xb0\xc8\x4b\xa3\x87\xe8\xc7\xf0\x37\x18\x44\xdd\x3f\x9a\xa1\x9d\x5f\xd2\x9f\x7b\xc2\xb9\x8f\x3f\x59\xe3\xfd\xce\x59\xbb\x2c\x20\x4f\xfc\x34\xeb\x6e\x30\xbd\x3c\x3b\x18\x5f\xb6\x95\xc9\xa5\x8e\xf2\xa4\x37\xee\x9a\xb6\xb9\xde\xc7\x25\x56\xcb\xb1\x18\x16\x86\x89\x7e\x5a\xeb\x05\xe5\x89\xe8\xf0\x36\xeb\x6f\xe7\xdd\x75\xd6\xc8\xff\x07\x05\xe6\x61\x58\x4e\xd8\x42\x85\x6d\x78\x76\x28\x79\xbe\xd6\x77\x9a\x90\x87\x7b\x9b\x69\xc3\xa3\xdb\x68\xf2\xfc\xfd\x7b\xae\x78\xfc\xd6\x03\x6e\xee\xbb\x7c\x71\x30\xf1\xe4\x02\xe8\x33\xc7\xff\x23\x3f\xf6\xfd\x17\x14\xf5\xf8\xb4\xf8\x81\xa1\x77\x37\xef\xfe\x94\xfe\xfe\x6d\xf5\x3d\xa2\xbd\xfb\xf1\x90\x0f\xaf\x3a\x48\x9f\x82\xd2\x50\x84\x4e\x91\x05\xf5\x17\xdb\x5b\x74\xf0\x34\x8d\x8f\xce\x92\xff\x27\x00\x00\xff\xff\xfc\x09\x78\x30\xa3\x2a\x00\x00")

func _hardcodedDoerGoBytes() ([]byte, error) {
	return bindataRead(
		__hardcodedDoerGo,
		"../_hardcoded/doer.go",
	)
}

func _hardcodedDoerGo() (*asset, error) {
	bytes, err := _hardcodedDoerGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../_hardcoded/doer.go", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc2, 0xa1, 0x95, 0xb7, 0x11, 0xe5, 0xee, 0x76, 0x9d, 0x1e, 0x94, 0x42, 0x56, 0xd5, 0x0, 0xee, 0x1, 0xb4, 0xe4, 0x36, 0x4f, 0xc1, 0x90, 0x19, 0x25, 0xd4, 0x28, 0x14, 0x2e, 0xc1, 0x78, 0x0}}
	return a, nil
}

var __hardcodedMiddlewareGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x57\x5f\x6f\xdc\xc6\x11\x7f\x3e\x7e\x8a\x09\x0b\x5b\xa4\x40\xf1\xd4\xa2\xcd\x83\x02\x15\x08\x14\x29\x36\x6a\xc7\xaa\x24\x27\x05\x0c\xa3\xd9\x23\xe7\xc8\xcd\xf1\x76\x99\xdd\xe1\x51\x07\x41\xdf\xbd\x98\xdd\x25\x8f\x94\xe4\xc0\x7d\x68\x0d\x58\x47\xce\xee\xfc\xfb\xcd\x5f\xb6\xa2\xd8\x88\x0a\xc1\xa2\xd9\xa1\x89\x22\xb9\x6d\xb5\x21\x48\xa2\x45\x5c\x68\x45\x78\x4f\x71\xb4\x88\xd7\x5b\xf7\xa3\x90\x96\x35\x51\xcb\xcf\xa6\x53\x24\xb7\xb8\x2c\x71\xd5\x55\x71\x14\x2d\x74\x8b\x8a\x8c\x28\xa4\xaa\x20\xae\x24\xd5\xdd\x2a\x2f\xf4\x76\x39\xa1\x4f\x9f\x4f\x2a\x1d\x47\x0b\x12\x95\xfd\xca\xdb\x4b\x6f\xcb\x84\xd8\xe8\xaf\xd5\xb4\x6c\x74\xc5\x46\x57\xba\xdd\x54\xb9\x54\xcb\x8b\x06\x77\x68\x96\x1b\xb1\xdf\x21\x9e\x54\x3a\xdf\x7d\xcb\x77\x2a\x34\x71\x94\x46\xd1\x72\x09\xd7\x42\xc9\xe2\xbd\x2c\xcb\x06\x7b\x61\x10\x1a\x5d\x59\x10\x6a\x0f\x2d\x1f\xd8\x1c\xae\xb4\x01\xa5\xfb\x0c\x7a\x3c\x32\x08\x8c\x96\x54\x1d\x02\xd5\x46\xf7\x0c\x02\xd5\xe8\x2f\x43\xd7\xb2\x44\x7e\xb7\x24\x8a\x0d\x58\x0d\x54\x4b\x0b\x5b\xb1\x87\xc2\x08\x5b\xfb\xbb\x46\x17\x68\x6d\x1e\xad\x3b\x55\x3c\xd5\x9f\xd4\xc0\xc8\xe7\x6f\x84\x2a\x1b\x34\xe9\xec\x0d\x1e\xa2\x85\x41\xea\x8c\x9a\x91\xaf\x3a\x55\x24\x2c\x2c\xe9\x3d\xfd\x06\x6d\xab\x95\xc5\x5f\x8c\x24\x34\x19\x18\x38\x0e\xf4\xdf\x3b\xb4\x94\xb2\x9c\x45\x89\x6b\x34\xe0\xd8\x3c\x61\xe1\x9c\xb8\x34\x06\xce\xce\xc1\x60\xa1\x77\x68\x92\x94\x0f\xe4\x1a\xc6\xb3\xf3\x73\x50\xb2\xf1\x0c\xc1\x18\x7e\x7c\xe4\x3f\x3b\x61\x00\x8d\xfb\xaf\x4d\xc4\x14\xdb\x4b\x2a\x6a\x98\x4a\x1e\x9e\xf3\x84\xf6\x2d\x06\xd5\x85\xb0\x0c\x9a\x91\xaa\x3a\x73\x92\x59\xcc\x39\xac\xb7\x94\x5f\xb2\xb0\x75\x32\xb0\xa5\xe3\x75\xa7\x65\x7a\x7b\xb8\xc2\xa4\x12\xd7\xa2\x6b\xe8\x0b\xc2\xe2\x4e\x6d\x94\xee\x55\x88\xdb\xab\x3f\xed\x40\xaf\x81\xed\x81\x57\x77\x71\x36\x4a\x3a\x3c\xa5\xde\x49\xfe\xeb\xf3\x27\xbf\x32\x7a\x7b\xe1\x4b\x27\x31\xf9\xf0\x94\xa6\x5e\xc7\x0f\x49\xec\x58\xe3\xcc\x59\x10\x78\xde\x3f\xc4\x68\x4c\x7c\xc6\xb6\x67\x10\xbb\x2c\xe1\xec\xc5\xf8\x2c\x78\x9f\xb8\x3a\xcb\x6f\xf9\x24\x49\xd3\xc7\x74\x0c\xcc\x0c\x81\x47\x17\x98\x3a\xbf\xe5\x72\x7e\x73\x77\x77\x9d\xf4\x19\xf0\xc9\x63\x1a\x3d\xba\xbc\xb6\x24\xa8\xb3\xf3\x4c\x80\xde\x88\xd6\x82\x00\x13\xc8\xd0\x3b\x7a\xe4\x3c\x7f\x91\xc3\x92\xe9\x0a\xe2\x20\xbd\x90\x59\xd1\xc2\xf3\x80\x54\xc4\x6a\x5d\x42\x27\x16\x8e\x5f\x12\x95\x82\xfb\x7d\x83\xa2\x44\x93\x14\xba\x44\x66\x73\xf1\xb7\x79\x90\x73\x0e\x4c\x67\xc2\x9c\x37\x7f\xca\xea\xbc\x74\x56\x87\xe2\xff\xd0\xfe\x24\xb6\x18\xcc\x7d\xf0\x10\xfc\x22\xa9\xbe\x9b\x1d\x8b\xb2\xb4\xae\x06\x75\x0b\x8a\x09\xa4\x41\x40\x68\x80\xb0\xd6\x06\x3a\x8b\xb0\xda\xbb\x3b\x43\x93\x6b\xe4\xca\x08\xb3\xcf\xe1\x2d\xf1\xb1\x65\xd1\x02\x5a\x2d\x15\x03\xb4\xc2\x42\x30\x93\xa4\x23\x0b\x85\x68\x1a\x2c\x61\x85\x8d\xee\x41\xaa\x49\x2b\x10\xaa\xf4\x8a\x55\xb3\x87\x5e\xec\x59\x73\x2b\xac\xb7\x46\xaa\xb5\x0e\xcd\x43\x5a\x3e\xa9\xc5\x8e\x25\x82\x00\x8b\x74\x50\x96\xc3\xe5\x0e\x59\xaa\xee\xaa\x9a\xcf\x4b\x8d\x56\x1d\x11\x14\xb5\x50\x15\x3a\x59\x83\x33\x3d\x6b\x96\x4d\xe3\x64\xf9\xb6\x24\x2d\x84\xee\x71\xf0\x99\x34\x6c\x85\x54\x24\x82\xb5\xb2\x69\x3a\x2b\xb5\x0a\xdd\xe9\x19\x84\x49\x41\xf7\x03\xf3\x90\xf4\x19\xe8\x11\x7d\xa9\xaa\xf4\xe9\xb9\x0b\x31\x99\x6b\x72\xf5\x5f\xd0\x7d\xfe\xb3\x68\x3a\x4c\x66\xa1\x7b\x78\x4c\xf3\xe4\x38\x48\x88\xb8\xe5\x04\x96\x6f\x0e\x0d\xe7\x38\x90\xce\x83\xc2\x88\xdb\x4e\x70\xa9\xa0\xfb\x90\xf9\xc1\xde\x49\x4f\x2f\x0c\x0a\x42\x4e\x7c\x85\x3d\xd8\x56\x28\x17\xfd\x12\xc4\x9a\x43\xc8\x7e\x7f\xbc\x79\x07\xad\xa0\xda\xf5\x81\x1a\xc1\xf8\x56\x99\xb3\xc0\xb7\x04\x6d\x23\x0a\xb4\x1e\x43\xc7\x1f\xe0\x0a\xd7\x06\x8f\xb3\x69\x0e\x69\xaa\xd1\x40\xed\x7b\xb4\x85\x9d\x14\x30\x99\x56\xf9\x6d\x2b\xd4\xb4\x87\xa4\x4e\xd5\x9a\x63\xce\x0a\xf0\x5e\x5a\xe2\xca\x1a\x75\xd4\x2e\xfd\x6d\xe6\xb3\x8a\xef\x78\xbf\x4a\x9f\xb0\x3c\x67\x0e\x2e\xf7\x1c\xfa\x15\x72\xa4\x6b\xd9\x94\xde\x2d\x41\x8e\x2f\xc4\xf6\x19\x4e\xff\xbf\xd9\xb3\x5c\xc2\xf7\x44\xb8\x6d\x5d\x02\xfe\xa6\xa5\x1a\xdc\x5e\xed\xa1\x42\x22\x37\x57\xb9\x31\xfa\xda\x58\x1b\xbd\x75\x6e\x07\x0c\x72\x2f\xe3\x4e\x73\x75\x19\x82\x5e\x52\xed\x60\x1f\x42\x29\x86\x32\xf7\x79\x29\x55\x81\x5c\x11\x5c\x0b\x5c\x2f\x95\x26\xe2\x42\xd2\x3e\x88\xba\xe3\x34\xd8\x73\xa9\xa9\xd2\x8b\x9e\xd0\x79\x52\x58\x10\x2b\xdd\x51\x10\x68\xa3\xc5\x22\x88\xe6\x51\x99\x7f\xbc\x79\x97\x5f\x0b\xaa\x23\x3f\x02\x6d\xfb\x2c\xd0\x91\x1b\xa2\xb6\xc8\xdc\x7c\x3c\x3b\x9f\x5d\xf8\xb1\xd1\x2b\xd1\x70\x38\x78\xe0\xb2\x6f\x8b\xcb\x7b\x3e\xa4\x64\x7a\x8d\xdb\xfc\x9b\x90\x03\x6e\xa8\x7c\xe1\xf0\x42\x18\x23\xd1\x24\x26\xf7\x84\x34\xfd\xce\x69\x9d\x14\xd2\xc2\xb6\x30\xb7\xe1\x96\x71\x64\x4b\x13\xef\x98\x1b\x32\x80\x8d\xc5\xaf\x64\xc8\x66\xa7\x17\x9c\x74\x1f\xd6\x89\x2d\x52\x27\x69\xdc\x37\x6c\x9b\x5f\x49\x25\x6d\x9d\xa4\x91\x47\x5a\xaa\xdf\xb0\xf0\x89\x09\x6f\x7f\xe0\x99\xa0\xfd\x12\xc6\xbd\x59\x96\xd3\x0a\x70\xb3\xb1\x92\xaa\x8a\x16\x0b\x62\x14\xb7\x62\x83\xc9\x56\xb4\x9f\x7c\xdf\xf8\x3c\xb6\x0f\x46\x3b\x20\x6d\xdb\x7c\x84\xf6\xad\xd3\x95\xd8\xf6\x30\xaf\xe7\x76\xdf\xe1\x3d\xbd\x17\xad\xc3\xf7\x05\xfa\x00\x2d\x0d\x98\x4e\xb7\x21\x0e\x30\xcf\xe8\x32\x03\xbd\x61\xcd\xf4\x29\xd6\x74\xe2\xd2\xd8\x9c\xf8\xa3\xf8\xf3\x77\x7c\xf8\x30\x5d\x0a\xbe\xb8\x48\x7c\x5f\x96\xc3\xdb\x73\x41\x59\x50\x96\x0e\xdb\x97\x5b\x4e\x6c\x9b\xbf\xd3\x15\x4f\x09\x4a\xe2\x00\xdb\xbf\x0d\x16\x28\x77\x58\xc6\xe9\x8b\x6b\xdf\x8b\x3c\x6b\x17\xa4\xc0\xe3\xb7\x0d\x85\xfd\x05\xdd\x3f\x4d\xde\x60\x21\x0f\x0a\x97\x0d\x66\x0a\xad\x6d\x53\x1f\xe4\x8f\x96\x5b\x91\x0f\xcf\x38\x3a\xad\x86\x46\xec\xb9\x37\xfa\x81\x59\x08\x05\x5b\x5d\xca\xf5\x1e\x24\xb1\x33\xe3\xcc\x88\xe3\x83\xfe\xf3\x71\xbc\xb0\x4e\x3f\x49\xfc\x51\x06\x4f\x26\x4a\x06\xaf\xbd\x0c\x97\x6b\xd6\xf4\x2c\xeb\xf5\x4b\xcb\x89\x07\xc2\x1d\x9c\xc1\xf0\xef\x2f\xa7\xa7\x2e\x11\xe6\x57\xcf\xa0\xcf\x06\xb8\xf9\xb3\xc6\x95\xde\x7b\xa4\x5a\x97\xf9\x2d\x72\x72\x65\x60\x72\x4f\x48\x87\x3b\x0c\xcd\x3f\xa4\x3a\xdc\x98\x51\x6f\xae\x2f\xdc\x22\x67\x2e\x55\xb7\x4d\xa7\x72\x3f\x9a\x66\x22\x74\xe8\x33\xe9\x18\xe9\x2b\x89\x4d\x69\x93\xf9\xc7\x52\x7e\xeb\x57\xc9\xb8\x33\xcd\xc9\xef\x1d\x9a\x7d\x3c\x70\xdf\x88\xfe\x9f\x4c\x48\x1d\x22\xcf\x73\x61\x54\x7c\xeb\xb0\xb8\xd0\x25\x8e\xfa\x3b\xa9\xe8\xcf\xdf\x26\xd6\xf4\x61\x5d\x4b\x87\x8f\x83\x03\x09\xfe\x7e\x0e\x7f\x3b\x3d\x0d\x09\xee\xa4\xb9\x75\xf8\xe0\xb7\xe9\x70\x4c\x59\xce\x8c\x9f\x74\xef\x27\x53\x68\xcf\xd3\xbe\xdd\x20\x2f\x55\x64\xf6\xbc\x06\xb9\x99\xe0\xf2\x62\x31\x76\x1c\x57\x66\x3e\xf8\x5f\xb1\x53\x38\x5b\xf5\x06\x5e\xbf\x1e\x14\x4c\x5b\x22\x23\x7a\x8b\xf4\xa1\x45\x23\x48\x6a\xe5\xb6\x9d\xe3\x43\x37\xf4\x45\xe6\xdb\xd6\x74\xf1\xb6\x86\x57\x6f\x97\x8c\x43\xe6\x7b\x8b\xd2\xe9\x3a\xfe\x33\x1a\x5e\xab\x6e\xdc\x9e\x56\x62\x21\x4b\xb4\xd0\xd7\xe8\x76\x04\xee\x74\x45\x81\x2d\xaf\x7a\x3b\x7f\x31\xf7\xdb\xed\x8c\xcd\x05\x2a\x9c\x8f\xbb\xd6\x4a\xeb\xc6\x69\xb8\x68\x24\x2a\x0a\x0c\x17\x35\x16\x9b\xe9\x06\xc4\xef\x7e\x26\x16\xee\xde\x41\x8f\xdb\x05\xfe\x88\xf9\xc9\x5a\x90\x81\x51\xd5\xcc\xb0\xff\xe1\xa2\x30\x78\xeb\xc6\xac\x1f\x67\xf9\x8f\x48\x49\xfc\xaf\x13\x6f\xf2\x49\x30\xc4\xf5\xa9\xff\xa6\xa1\x7a\x18\x4e\x82\x82\x38\x1b\x00\x09\xc3\xe3\x1b\xa3\xaa\x01\xeb\x50\x1b\xfd\xec\x2b\xe4\xaf\xa7\xa7\xe9\x84\x9a\x7c\xfa\xbc\xda\x13\x26\xfc\x91\x79\xdb\x1a\xa9\x68\x9d\xfc\xfa\x10\x6f\xd1\x5a\x51\xf1\xe7\x5d\x3c\xc7\x1d\x8e\x5e\xd9\x23\x50\x9a\x42\xe4\xb1\xcc\xa0\x6d\x90\xbf\x6b\xbb\xb6\x32\xa2\xc4\xf8\xf1\xd7\x83\x51\xbe\xd4\xc6\xcf\xed\xc7\x3f\xf8\xf8\xfb\x4f\x00\x00\x00\xff\xff\x93\x7d\xa7\xbe\xea\x11\x00\x00")

func _hardcodedMiddlewareGoBytes() ([]byte, error) {
	return bindataRead(
		__hardcodedMiddlewareGo,
		"../_hardcoded/middleware.go",
	)
}

func _hardcodedMiddlewareGo() (*asset, error) {
	bytes, err := _hardcodedMiddlewareGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../_hardcoded/middleware.go", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x75, 0x4a, 0xcc, 0x73, 0x2e, 0x1e, 0x15, 0x65, 0x27, 0x38, 0x91, 0xa8, 0x5c, 0x11, 0x0, 0xb7, 0x9e, 0x46, 0xa0, 0x24, 0xe, 0xb8, 0x31, 0x4f, 0x74, 0xd4, 0xad, 0x58, 0xde, 0x97, 0x3d, 0x83}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"../_hardcoded/doer.go":       _hardcodedDoerGo,
	"../_hardcoded/middleware.go": _hardcodedMiddlewareGo,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"..": {nil, map[string]*bintree{
		"_hardcoded": {nil, map[string]*bintree{
			"doer.go":       {_hardcodedDoerGo, map[string]*bintree{}},
			"middleware.go": {_hardcodedMiddlewareGo, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
