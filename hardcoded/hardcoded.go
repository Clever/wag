// Code generated by go-bindata. DO NOT EDIT.
// sources:
// ../_hardcoded/doer.go (10.01kB)
// ../_hardcoded/middleware.go (1.683kB)
// ../_hardcoded/tracing.go (6.027kB)

package hardcoded

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __hardcodedDoerGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x5a\xff\x6f\xdb\x46\xb2\xff\x59\xfa\x2b\xa6\x02\xee\x42\x26\x32\x29\xe7\xce\xb9\x83\xfa\x7c\x40\x6b\xbb\xaf\xc5\x6b\x93\xa0\x4a\x5f\x03\x04\xc1\x75\x45\x8e\xa4\xad\x57\xbb\xea\xee\x52\xb2\xe0\xf3\xff\xfe\x30\xb3\x4b\x8a\x94\x68\x27\x77\x57\x3c\xbc\x97\x1f\x2c\x89\x3b\xf3\xd9\xd9\xd9\xf9\xce\x6c\x44\x71\x2b\x96\x08\x85\x92\xa8\xfd\x70\x28\xd7\x1b\x63\x3d\x24\xc3\xc1\x68\xbe\xf7\xe8\x46\xc3\xc1\xa8\x30\xda\xe3\x9d\xa7\xaf\xa8\x0b\x53\x4a\xbd\xcc\x7f\x75\x46\xf3\x03\x6b\x8d\x65\x2a\x69\x72\x69\x2a\x2f\x15\xfd\x50\x66\x49\x1f\x6b\xe1\x57\xb9\x15\xba\xa4\x1f\x1a\x7d\xfc\xc8\x57\xde\x6f\xe8\xbb\xdb\xeb\x82\x3e\xbd\x5c\xe3\x68\x38\x1c\x8c\x96\xd2\xaf\xaa\x79\x56\x98\x75\x2e\x16\x78\x97\xaf\xf6\xce\x5b\x79\x77\xb6\x34\xf5\xd7\x51\x97\xaa\x34\xda\x6c\x85\x5e\xc9\x12\x73\xdc\xa2\xf6\xce\x54\xb6\x40\xa6\x32\x4a\xe8\x65\x66\xec\x32\xbf\xcb\x69\xd7\x78\x8e\xbc\xf0\x77\x51\x00\x65\x96\x4b\xb4\x30\x5a\x9a\xcd\xed\x32\x93\x3a\xbf\x52\xb8\x45\x9b\xdf\x8a\xfd\x16\xf1\x6c\x69\xb2\xed\xab\x3c\x10\x8d\x86\xe9\x70\x98\xe7\x50\x1a\xb4\x20\x1d\x08\x0d\x52\x7b\xb4\x0b\x51\x20\x2c\x8c\x85\x51\x69\xa4\x5e\x8e\x80\xa0\xc1\xe2\x6f\x15\x3a\xef\x60\x63\x9c\x93\x73\xb5\x87\x9d\xf4\x2b\xd8\x59\xb1\xd9\x48\xbd\x1c\xfa\xfd\x06\x23\x54\x03\x72\x3f\x1c\x5c\x9b\xa4\x80\xe7\x84\x90\x5d\xf1\x85\x8c\xc1\xc6\xdf\x3f\x06\xc4\x14\x92\xfa\xb7\xdb\x18\xed\x70\x0c\x7c\x05\xe9\xf0\x61\x18\x50\xcd\xe6\xb5\x58\xe3\x95\xbf\x03\xe7\x6d\x55\xf8\xfb\x07\x96\x7b\x2e\x1c\x46\x8c\x6f\x85\x2e\x15\x5a\xd8\xa0\x5d\x18\xbb\x76\xe0\x57\xc8\xeb\x1d\xd9\x03\x1a\x3d\xbe\x26\x39\x0f\x60\x8b\x4a\x17\x90\x94\xcd\x52\x0a\xff\x86\xd8\x74\x6a\x8b\xbe\xb2\x1a\xe2\xb5\x64\xd7\x26\xb1\xd9\x55\xb8\xab\x24\x1d\x43\x31\x86\x70\xbc\x3c\x07\x8b\xde\xee\x6b\xf9\xe9\x87\x44\x07\x17\x93\xf7\x5d\xad\x07\xd1\x99\xb6\x25\x3b\x6d\x55\xc2\xe1\x1f\xa9\x9f\x37\xb7\xfb\xb7\x46\xc9\x62\x0f\x3f\x1e\xbe\xc7\xfd\x5a\x4f\xa0\xc4\x85\xd4\xe8\x40\x04\x64\xd8\xf0\xe3\x2c\x6c\xd6\x26\xec\x5c\x69\x9e\xc3\xd7\xa2\xb8\x35\x8b\x85\x83\x70\xd0\xa0\x6f\x5d\xad\xe7\x68\x41\xe8\x12\xbc\x5c\x4b\xbd\x04\xb3\x88\xc0\xc2\x7b\x5c\x6f\xbc\xcb\x86\x83\x9a\x35\x49\xe1\xc3\x47\xf2\x92\xec\xba\xb2\xc2\x4b\xa3\x19\x99\x77\x05\x8b\x05\xca\x2d\x06\xdc\xb6\x22\xc6\x20\x1c\xec\x50\x29\xfa\xa4\x45\x8b\xae\x52\x1e\xcc\x82\xb9\x6b\x4f\x8c\x97\xf6\xcc\xc1\x2f\xd7\xe6\x17\x58\xa3\x5f\x99\x32\x1b\x0e\x18\x3d\xe9\xdc\xe3\x18\x1e\xb9\xc6\xb9\x31\x2a\xea\x6c\x26\xf5\x52\xe1\x53\x9a\xf3\x2b\xe1\x9b\xdb\x13\xb5\xb4\x60\x74\x81\x41\x9b\xa7\x10\x1d\x5b\xee\x51\xa8\xf0\xb0\x37\x15\xb8\x95\xa9\x54\xd9\x6c\x83\x0d\xf6\xb9\xc3\xc2\xe8\x12\xc4\xc2\x93\xd3\x79\x58\x08\xa9\x5c\x16\x8d\xf9\x64\xbf\x14\x1e\xd7\x7c\xcb\x64\x8f\x56\xee\xcf\xe1\x39\xf0\x93\x19\xef\xf6\xd0\xb6\x22\xd8\x49\xa5\xa2\x64\xda\xe8\xb3\xb7\x6f\x66\xef\xc6\xe1\xdb\x57\xef\xae\xbe\x3d\x84\x0c\x3e\xcc\xc5\xfb\xf7\x19\xb1\xbe\x7b\x73\xfd\x66\x0a\xdf\x79\xb2\x56\x07\xda\x78\x28\x2a\x6b\x51\x7b\xb5\xaf\xad\x45\xef\xc3\x25\xd4\xea\xc0\x12\xe6\xfb\x47\x2e\xf7\x89\x03\x87\xdb\xb6\xf8\x1b\x1c\xdd\xb8\x45\xb7\xe9\xbb\xf6\xf6\xd5\x93\x4e\xe4\x82\x9f\x7e\x71\x09\x5a\x2a\xf8\xc7\x3f\xe8\x44\xd9\x0f\x6c\x4c\x70\x79\x09\x23\x3a\xf0\xa8\xef\x39\x1d\x9f\x16\x86\x83\x01\xed\x95\xcd\xbc\xf0\x95\xbb\x32\x25\xc2\x7f\xc0\xc5\x64\x42\xe0\xb5\xc6\x17\x42\x39\x1c\x0e\x1e\x9a\x2b\xf0\xb6\xc2\xa8\xe6\x9b\xbb\x8d\xd1\xa8\xbd\x14\xaa\xd7\xfa\x34\xe0\x81\xa2\xe3\xc4\xc1\xea\x1e\xe1\x7f\xda\xf4\x16\x72\x4b\x51\x32\x3e\xe5\x28\xdf\xda\x45\x51\x34\x28\x2c\x0a\x47\x1e\xbe\x13\xd2\xb3\x7d\x38\x8e\xc8\xe8\x77\x88\xba\xb9\xf8\x29\x9c\x4f\x26\x63\x78\x49\x7f\xfe\x4c\x7f\xfe\x4a\x7f\x28\x40\x9c\xbf\x9a\x4c\x60\x2d\x95\x92\xc1\x8a\x1d\xbc\xc8\xcf\xa0\xda\x80\x37\x70\xf1\x07\xf8\x55\x7a\x8f\xb6\xbe\xda\xfe\x53\x7c\x86\x41\xc3\xf4\x12\xd6\xe2\x16\x93\xa3\xe5\x31\x5c\xa4\xc3\x81\xc6\x3b\xa6\x38\x9f\x4c\x6a\x23\xff\xe1\x20\xd1\x70\x60\x75\x49\xcb\x94\xec\xb3\xd7\xb8\x4b\xea\x2f\x33\xce\xc7\x09\x33\xbc\x36\xbb\x24\xcd\x7e\xd2\xf2\xee\xb5\xd0\x26\x49\xd3\x74\x38\x40\xe2\x9a\x64\x93\x0b\xc8\x73\x3e\xd6\x05\xe5\xa5\x02\xb5\x8f\xe7\x1a\x0e\x28\xbb\xca\x08\xbe\xe4\xb8\x5e\x5b\xc4\x07\xf9\x11\x2e\x81\x45\x7b\x01\x1d\xa1\x93\x24\xb1\xba\xcc\xbe\x51\x46\xf8\x57\x7f\x4e\xd2\xe7\x2f\xd3\xb3\xf3\xf4\x39\x3e\x5f\xc4\x27\xc4\x44\xfb\x87\x83\x3d\xbf\x84\x97\x6d\xab\xb2\xe8\xff\xcf\xfa\xee\x63\x17\xfc\xff\xdf\x81\x5f\x9b\xfe\xac\x11\x9c\x94\x12\xa4\xa6\xf2\x2c\x28\x8f\x1c\xaa\xc9\x1d\x31\x0b\x77\x01\x9e\x76\x5c\x0a\x07\xeb\x8d\xdf\x83\x53\xb2\xc0\x5a\xb9\x1d\x84\x7f\x31\x0b\x74\xc3\xbe\x50\x3b\xb1\x6f\xc5\x0b\x3a\xff\x23\xbb\xfd\xb3\x09\xb7\x25\x43\x50\x6b\x5d\x03\xb2\x82\x62\x09\xd5\x55\xc3\xcf\xd2\xaf\xda\x3a\x6a\xb4\x01\x1a\x77\x10\x2b\xe4\x60\xc6\x66\x8b\xd6\xca\x32\xd6\x15\xa1\x41\x00\x33\xff\x15\x0b\xff\xcc\x35\xc5\x58\x53\x06\xf1\x89\x8e\xe0\x93\xc2\xdf\xd5\xa0\x75\x49\x37\x86\x47\x4a\xae\xf4\x98\xb2\x5d\x1b\xc6\x15\xc2\xff\x6f\xa1\x2a\x24\xe4\x71\xe7\x9c\xf7\x0f\x1d\x64\xae\x18\xeb\x52\xf5\x79\x53\x0b\xfe\x1e\xc5\x6a\xbd\xc5\x18\xcc\x2d\x87\xa5\x43\xb5\x9a\x05\xe1\xba\x72\xa5\x59\xd2\x3e\x26\x3b\xda\x17\xe6\xb6\xf6\x8a\x46\x17\x97\x50\x66\xad\xdf\xec\x24\x4d\x66\xa1\x7d\x0e\x6b\xd9\xc1\x30\x87\x83\xad\xb0\x7d\x3e\x1e\x16\x1a\x3f\x1f\x72\xcd\x37\x13\x5b\xec\x14\x46\x73\x53\x52\x8e\x82\x82\xea\xff\x1d\xc2\x8a\x09\x4c\xd8\x2c\x83\x37\x7e\x85\x76\x27\xc3\x1a\x47\x41\x26\x10\xca\xa2\x28\xc9\x7c\x44\xc9\xb8\xdc\x42\x54\x8b\x05\x5a\x30\xba\x89\x6e\x65\x67\x2b\x66\xa7\xba\x2b\x83\x19\x22\xb3\x91\xc0\xd3\x3c\x77\x9e\x8e\xb3\x45\xbb\x50\x66\xc7\x7d\x1d\x73\x48\xa3\x5d\xfe\xf2\x4f\x93\xbf\x4c\xfe\xfa\x97\x57\x39\xed\x25\xf5\xf2\x8c\x24\x3e\x33\x8b\x33\xe2\x3d\x8b\xd8\x67\x94\x78\x4d\xe5\xcf\xd6\xa6\x94\x0b\x8a\x0d\xcd\x8a\xf3\xc2\x47\x5d\xcc\xab\x05\x7c\xf8\x48\x7d\x2d\xdf\x81\xcd\xbe\xa6\xc3\xc7\x78\x47\xb7\xd1\x55\xd8\x60\x30\xaf\x16\x21\x52\x5e\x42\xe8\x6d\xb3\x1f\x51\x94\x5f\x29\x95\x04\x5e\xca\x1f\xdd\xa8\x49\x28\xb5\xd1\x6a\xa9\x98\x7b\x38\xa0\x9b\x7c\x18\x86\x4c\x56\xd7\xbd\x94\xf6\xbe\xe4\xe8\xf7\x65\xfd\xec\xc5\x0b\xe6\xef\x15\x6d\x60\x4b\x4b\x3c\x51\x8e\xd7\x66\x73\xa5\x8c\x43\x9b\x70\x9b\x4e\x99\xf6\x6b\x56\x7f\x32\xaf\x16\x9c\xd7\x06\x11\xe3\x12\x6c\x19\x45\xe0\xe8\x5c\x1f\xa8\xcc\x4a\x6a\xb5\x42\x77\x15\x36\x8d\x92\x5d\x5e\x82\x42\x9d\xd4\xa6\x97\x52\xc8\xff\xa2\x6d\x7c\x31\xd3\x84\xcc\xc2\x78\x69\x90\x71\x6e\x51\xdc\xc6\xbd\xf2\x1c\x58\xc2\xba\xf1\x60\x9b\x0c\xe6\xc6\x86\x41\x06\xb2\x14\x52\xd7\x49\x83\x84\xcd\x98\x83\x6c\x7a\x10\xca\x68\x85\xb8\x69\x04\xf9\x10\x05\xfc\x98\x76\x53\x75\x94\x21\x46\xdd\x42\xda\xa2\x92\xfe\x6b\x12\x05\x2d\xf7\x7f\x72\xbd\x51\xb8\x46\xed\x63\x28\x0b\x14\x30\x0f\x24\xb0\xa1\x86\xcb\x6a\xce\xd9\x33\xf4\x50\xe2\xbc\x5a\x92\x0f\xd0\xe5\xd0\xa7\xd9\xa0\x15\x1e\x3b\xcc\x52\x83\x80\x35\xa5\xb8\xdd\x0a\x2d\x52\x4b\xc1\xf6\x6d\xb4\xda\x83\x32\xcb\x96\x28\xc0\x26\x18\x4a\x39\xa6\xa1\x52\x60\xae\x4c\x71\xcb\x05\x40\x53\x3c\x2c\xac\x59\xc3\xd2\x50\x62\xf3\x2b\x6b\xaa\xe5\x2a\xa6\xb5\x9e\x23\x3d\xd5\xd2\x06\xf9\xc3\x3f\xee\xcb\x06\x11\xe0\xb5\x58\x23\x71\x4a\xbd\x6c\x66\x1f\xfc\x2f\x7c\xcf\xfe\x8b\xc7\x1e\xdf\xf3\x0f\xd2\x26\xb9\x43\x64\x9d\xcd\x6e\xde\xe8\x02\xc1\xed\x75\x91\xd1\x37\xd6\xf5\xb7\x61\x26\x33\x9b\xdd\xdc\x6c\x29\x3b\x48\x07\xb8\xa6\xaa\x8d\xcb\x98\xc3\xf0\x06\xb6\x52\x80\x43\xbb\x45\x7b\xe6\x88\x30\x8c\x6a\x32\x2e\x8e\xd0\x15\x56\xce\x43\x4d\x4c\x1a\x66\x6d\x51\xb2\x17\xf5\xe6\x51\x0d\xc7\xbb\x1d\x74\xf0\x8e\x96\x9f\xf8\x17\xce\x0c\xbf\xfc\xea\x8c\x9e\x8e\x08\x6c\xf4\xcb\x70\xc0\xea\xf8\x6c\x2e\x2d\xd6\xcc\x15\x93\xc4\x95\xa9\xb4\xef\xe3\x92\xe1\x71\xe4\xb2\x2d\x6a\xe2\xbe\xa1\xc8\xf2\x28\xef\x31\x37\x36\xd4\x0d\xef\xdb\x50\x1c\x8b\xe5\xa9\xe8\x3d\xbc\x07\x6a\x02\xf8\xce\x5d\x75\x2c\xe9\xcd\x06\x75\x1b\x80\x6b\x8a\x06\x40\xf6\x50\xb3\x02\x8c\x52\x52\x2f\x59\xac\x6f\x84\x54\x95\xc5\xa7\x14\x70\x4a\x7d\x0a\xa2\x14\xf9\x78\x1b\xec\x29\x90\x0e\xf5\x63\x60\xb3\xaa\x28\xd0\xb9\xcf\x04\x8b\xd4\xc7\x60\xb3\x95\xb1\x3e\x6a\x01\xcb\x4f\x1d\xaf\x4b\x7d\x82\xd5\x12\xe8\xd3\xaa\x7a\x44\xa0\x77\x2b\xca\x82\x6f\x8d\x51\x3f\x22\x15\x62\x24\xd4\xe3\x20\xa7\xd4\x27\x78\x72\x8d\xa6\xf2\x9f\x29\x54\xa4\x26\x90\xab\xd0\xc9\x5c\x19\x1d\x7b\x9a\x9b\x3b\x2c\x2a\xca\xd8\xc1\xb8\xbb\x20\xc5\xd3\xd4\x04\xf8\xbd\xf0\xa8\x8b\xfd\x3b\xe3\x85\xfa\x01\x85\x7e\xda\xb8\x55\x8b\xfa\xef\x6b\x14\x64\x98\x75\xbd\xa7\xcc\x92\xe3\x43\xa2\xfa\xe2\xda\x18\x4e\x02\x09\x27\x2f\x95\x7d\xa7\x17\xe6\x3a\xc1\x8c\xc2\xc2\x18\xd6\x62\xf3\x21\x04\x80\x8f\xcd\x3c\xef\xfe\x81\xb2\x5c\xd7\xa7\xa7\x7d\x5e\x8c\x59\x3b\x4a\x8c\x89\xa9\xe5\xca\xbd\x2c\xc4\x74\x08\x0e\x07\x96\x96\x07\x9f\xf2\x45\x96\x03\x0d\xf3\xf5\x3a\xee\xb4\xcb\xd7\x17\x0a\x98\xb9\xcf\x5f\xa7\xc7\x87\x3b\xa5\xe9\xe1\xed\xba\xe9\xb4\x97\xb7\x43\xf3\x28\x46\xed\x0c\x4f\x61\x44\x9a\x13\x8c\x23\xa7\x9c\xf6\x9d\xa1\x4b\x73\x0a\xd1\xd9\xbe\x5f\x0d\x8f\x6d\xdf\xe3\x82\xd3\x63\xde\x53\x9a\x53\x98\xe8\x79\x4f\x89\x10\x69\x98\xf7\x53\x0e\x37\x05\xcc\x3e\xe1\xc2\x8c\xa3\x8e\xbc\xf2\xd4\x06\x31\x3b\xf6\xdc\xf1\x70\xf0\x90\x0e\x3b\xed\xd7\x69\x01\x93\x82\xd4\xd2\x27\x69\x1c\x91\xbf\x45\x2b\x4d\x29\x0b\x9e\x98\x29\xb3\x0c\x33\x74\x2d\x54\xb7\x86\xa2\x62\x4c\x38\x27\x1d\xd7\x5f\x0e\xbd\xe7\x52\xa6\x55\x6a\xf9\x95\x45\xb7\x32\xaa\x74\x5c\x6e\x55\xba\x44\xeb\xbc\xd0\x25\x8f\x0b\x36\x1b\x25\x8b\xd0\xbe\xcf\x71\x25\xb6\xd2\xd8\x8c\xd9\x7f\xd2\x0b\x63\x7d\xa5\x85\x47\xb5\x1f\xb7\x2b\x97\xd2\xa0\xd3\xcf\x7c\x6c\x7b\x60\x69\x51\x78\xd8\x89\x3d\x89\x82\x77\x9b\x50\xe0\x4a\xc7\x28\xa5\xf0\x62\x0c\xce\x50\xaf\x64\xd1\x19\xeb\xb9\x8a\xac\xac\xe6\xf9\xbe\x06\xe9\x1d\xb8\x6a\xc3\xaf\xd8\xa8\x17\x98\x5b\x23\xca\x42\xb8\x93\x63\xac\xa9\xd2\x2d\x1c\xd7\x4d\x3c\xd1\x3f\x2d\x9e\x20\x99\xcd\x6e\xd2\x20\xfe\x0c\xc3\xe0\xdf\x4d\xf3\xfc\x89\x57\x68\xd2\xb9\x0a\x5d\x7e\xf1\x2a\x6b\x4a\xc2\x58\xd7\x51\x27\x40\xb7\x15\x2e\x64\x10\x79\x66\xde\xa2\x58\xd7\xaf\x5b\xa6\x97\xb5\x5e\x78\xae\xd7\x5e\xe3\x8a\xbd\x8f\x29\x9b\x79\x61\x3d\x2f\x2b\xe9\x3c\x6a\x0e\xc0\x96\xc1\x34\xfa\xec\x7b\x7e\x98\x8c\x7c\xb1\x19\x8d\x61\x74\xfe\xf2\x2f\xd9\x24\x9b\x64\xe7\xd3\xc9\xe8\x91\xde\x6a\x23\xb4\x2c\x12\x6a\x39\xb8\xcf\x18\x0e\x06\x4b\xc3\x67\xcf\x66\xa4\xa2\xe4\xb0\x4d\x9f\x3c\x69\xa0\x6f\x1d\x95\xd4\xf7\x33\xb2\xcd\xe1\x16\xed\x1e\xce\x27\x50\x4f\x59\xe7\x58\x88\x2a\x76\x30\x84\x86\x56\xde\x35\x57\x23\x2c\xd2\x95\x0a\x38\x9f\x9c\xd5\x43\x50\x46\x8b\x7e\x0b\x3b\xa9\x4b\xb3\xcb\xe0\xdd\x4a\x3a\x50\xe8\x9f\x39\xa8\xe8\xfa\xd7\x3c\xb9\xed\x83\xf4\x06\x96\xc8\xaf\x26\xac\xda\x47\x34\x51\x14\x55\x68\x3e\xc8\xbf\xe2\x6b\x23\x07\x89\x36\xdc\x90\x08\xcf\xe6\x07\x92\x8d\x74\x83\x76\x81\x85\x6f\x04\x37\x95\x8d\x6f\x97\x22\x5a\x6d\xcd\x91\x50\xed\x61\x2d\x7c\xb1\x6a\x44\x79\xe6\x62\x9b\x42\x2d\xbe\x33\xac\x96\xdd\x0a\x75\x5f\xdf\x14\x21\x1d\x0f\xfb\xa0\x58\x09\xbd\x44\xc7\x9d\xa7\x32\xcb\x6f\x38\x49\xea\x62\x1f\x66\xc6\xdd\xf7\x22\x4c\x23\x9c\xe7\xec\x3b\x43\xd4\x61\xf4\xdc\x24\xdc\xa3\xfc\x7c\xff\xd0\x61\xf8\xde\x2c\x29\xd4\x1d\xf1\x30\x3c\x3d\xbf\x67\xa3\xe0\x56\xfb\xef\x50\xcf\x8c\xe3\x6a\x71\x9b\x1c\xbd\xa2\x49\xe1\x1e\x9a\x51\x96\xd4\x3c\x73\x94\x14\x04\x08\x63\x50\x59\x45\xdb\x8c\xe2\x98\x62\x04\x2f\xa0\xb6\xaf\xec\xab\xb2\xb4\x49\x9a\xcd\x78\x7b\xb6\x70\x6a\x64\x7f\x6b\xcc\x9b\x6d\xf2\x35\xee\x62\x25\x90\x8c\xfe\xf3\xe6\xdd\x68\x0c\x95\x55\x63\xb2\xe6\xc0\xd0\x63\xe0\xac\xbe\xec\xad\x95\xda\x2f\x92\x50\x03\x40\x61\xb4\xc6\xc2\x73\x67\x68\x9a\x7b\x98\xcd\x6e\xa8\x47\x41\xb1\x9e\xc2\x1f\xdc\x28\x34\xe2\x01\xa2\x30\xda\x4b\x5d\x21\xff\x62\xf5\x0d\x02\x65\x23\x5e\xeb\x65\x79\x36\xab\xe6\xa1\x07\xfb\x59\xfa\x55\x32\x1a\x8d\xe1\x8f\xad\xf9\x58\x18\xac\xfd\xf6\xbf\x2e\x30\xdd\x20\x6e\x0f\x73\xff\xc0\x99\xdd\x84\xe8\x17\xb7\xe6\x89\xcd\x71\x41\x17\x96\xa2\xa8\xd3\x4b\xa0\x9a\x31\xfb\x49\xaf\x85\x75\x2b\xa1\x92\x30\x02\x4a\x70\x9b\x5d\x0b\x2f\x92\x34\x1d\xc3\x1f\x31\xfd\xb2\xe7\x60\x5d\xb1\xa2\x5c\x0c\x9c\x71\xcb\xf9\xc5\x25\x8c\xe2\xde\x57\x66\xbd\x16\xba\x1c\x3d\xcd\x4a\x46\x4c\x06\x5f\x8f\x0e\x3b\x5e\xf0\x21\xd4\x9e\x1f\x0f\xa4\x27\x4b\x70\x09\x38\x0c\xeb\x79\xce\xde\xd9\x76\xcc\x90\x23\xe5\x02\x24\x05\x1b\x94\x7e\x15\xbc\x94\x89\x93\xf3\x94\x89\x17\xd2\xba\x98\x43\x60\x87\xcf\xb6\x08\x8e\x3c\x90\xb4\xdd\xc6\x32\x2d\xce\x97\x69\x77\x89\xda\xc6\xb0\xd7\x4a\xd4\x9e\x5f\x76\x38\xfe\x94\xb6\xe3\x28\xe7\xce\x8d\x70\x0e\x4b\x70\x52\x17\x3c\x4c\xe4\xda\xbc\x04\x67\xd6\xe8\x57\x64\x28\x47\x12\x34\xba\xae\x47\xa5\x83\x9e\x20\xd0\xd2\xcb\xe1\x0d\x53\x4d\x5b\xf7\x01\x65\xa6\xea\xd2\x3f\xfd\xc4\xbd\xd6\xf7\xd3\x5b\x1f\xd3\x75\xf7\x57\xce\xbf\xb7\x7c\x0f\x80\xca\xf1\x4d\xb6\xde\x9b\xcd\xaa\x79\xf2\x18\x7e\x0a\x7f\x83\x4e\xd4\xfd\xbd\x05\x3a\xf8\x25\xfd\x79\x20\x9e\x87\xf4\x93\x35\xde\xbf\x39\x6b\x97\x0b\x28\xb3\x30\xcd\xba\xef\x4c\x2f\xa7\x27\xe3\xcb\xba\x32\xb9\x36\x49\x99\xb5\xc6\x5d\xe3\x3a\xd7\x87\xb8\xc4\x6a\xe9\x8b\x61\x71\x98\x18\xa6\xb5\xe1\xa0\x3c\x11\xed\xbe\xcd\xfa\xdb\x65\xf3\x3a\x6b\x10\xfe\x07\x05\x96\x71\x58\x4e\xdc\x42\xc7\x6d\x78\x76\x28\x79\xbe\xd6\x76\x9a\x98\x87\x5b\x9b\x19\xcb\xa3\xdb\x64\x74\xf1\xfe\x3d\x57\x3c\x61\xeb\x8e\x34\x0f\x4d\xbe\x38\x99\x78\x72\x01\xf4\x99\xe3\xff\x41\x18\xfb\xfe\x13\x8a\x7a\x7a\x5a\xfc\xc8\xd0\xbb\x99\x77\x7f\x4a\x7f\xff\xb2\xfa\x9e\xd0\xde\xc3\xb0\x2b\x47\x50\x1d\xe4\xcf\x41\x1b\x58\xc4\x4e\x91\x0f\x1a\x5e\x6c\xef\xd1\xc3\xf3\x3c\xed\x9d\x25\xff\x4f\x00\x00\x00\xff\xff\xd8\x75\x91\x7e\x1a\x27\x00\x00")

func _hardcodedDoerGoBytes() ([]byte, error) {
	return bindataRead(
		__hardcodedDoerGo,
		"../_hardcoded/doer.go",
	)
}

func _hardcodedDoerGo() (*asset, error) {
	bytes, err := _hardcodedDoerGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../_hardcoded/doer.go", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe0, 0x75, 0x77, 0x21, 0x5c, 0xa9, 0x5f, 0x84, 0x6f, 0x23, 0x76, 0x3b, 0x93, 0x3e, 0xa4, 0xa0, 0x45, 0xe0, 0xc, 0x3, 0xdf, 0xce, 0xd5, 0x94, 0xb0, 0x11, 0x19, 0x78, 0x4f, 0x65, 0x73, 0x16}}
	return a, nil
}

var __hardcodedMiddlewareGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x54\xcd\x6e\xe3\x36\x10\x3e\x5b\x4f\x31\x65\x11\x84\x5a\x38\xf2\x1e\x8a\x1e\x02\xf8\x50\xa4\x9b\xe6\xb2\xc0\x62\x13\xb4\x05\x8a\x02\xcb\x50\x23\x89\xb0\x4c\xaa\xc3\x91\x55\x23\xf0\xbb\x17\x43\x49\x4e\x14\xa4\xe9\xa9\x07\xcb\xe4\xcc\x7c\xdf\xfc\xb3\x33\x76\x67\x6a\x84\x88\x74\x40\xca\x32\xb7\xef\x02\x31\xe8\x6c\xa5\xaa\x3d\xab\x6c\xa5\x3c\xf2\xa6\x61\xee\xe4\x4c\xbd\x67\xb7\xc7\x4d\x89\x8f\x7d\xad\xb2\x6c\xa5\xea\xd0\xed\xea\xc2\xf9\xcd\x4d\x8b\x07\xa4\xcd\xce\x1c\x0f\x88\x57\x75\x28\x0e\x3f\x6e\xda\x50\xd7\x48\x2a\xcb\xb3\x6c\xb3\x81\x2f\xc6\x3b\xfb\xd9\x95\x65\x8b\x83\x21\x84\x36\xd4\x11\x8c\x3f\x42\x27\x8a\x58\xc0\x6d\x20\xf0\x61\x58\xc3\x80\x97\x84\x60\x83\x67\xe7\x7b\x04\x6e\x28\x0c\xce\xd7\xc0\x0d\x8e\xc6\xd0\x77\xc2\x28\xf7\xc8\xc6\xee\x20\x06\xe0\xc6\x45\xd8\x9b\x23\x58\x32\xb1\x19\x6d\x29\x58\x8c\xb1\xc8\xaa\xde\xdb\xd7\xfe\x75\x03\x92\x56\x71\x67\x7c\xd9\x22\xe5\x8b\x1b\x3c\x65\x2b\x42\xee\xc9\x2f\xc4\xb7\xbd\xb7\x5a\xc8\xf4\x30\xca\xbf\x62\xec\x82\x8f\xf8\x1b\x39\x46\x5a\x03\xc1\x87\x49\xfe\x57\x8f\x91\x73\xe1\x59\x95\x58\x21\x41\x82\x8d\x82\x55\x4a\xe2\x13\x11\x5c\x6f\x81\xd0\x86\x03\x92\xce\x45\xe1\x2a\x38\xeb\xb6\x5b\xf0\xae\x1d\x01\x53\x30\x72\x3c\xc9\xe7\x60\x08\x90\xd2\x2f\x50\x26\x92\x38\x38\xb6\x0d\xbc\x64\x9e\xcf\x85\xe6\x63\x87\x93\x6b\x6b\xa2\x14\x8d\x9c\xaf\xaf\x13\xb3\xd0\x6c\xa1\xda\x73\xf1\x49\xc8\x2a\x3d\xc3\xf2\xb3\x79\xf2\xf2\xd2\x7a\x36\x11\x51\x89\x95\xe9\x5b\xfe\x17\x32\xd5\xfb\x9d\x0f\x83\x9f\xfa\x76\xf1\xfd\x01\x42\x05\x12\x0f\x5c\x3c\xa8\xf5\x99\xe9\xf9\x94\x8f\x49\xca\x77\x9c\x9f\xe2\x96\xc2\xfe\x26\x78\xc6\xbf\x59\x53\x31\x9f\xf2\x7c\xf4\xf1\xb3\x56\x09\xaa\xd6\x29\x82\x09\xf3\xf9\x49\x21\x91\xba\x96\xd8\xd7\xa0\xd2\x94\x30\x19\x8b\xea\x7a\xca\x5e\xa7\x21\x2e\xee\x45\xa3\xf3\xfc\x94\x9f\x1b\xb3\xa8\xc0\x29\x35\xa6\x29\xee\x65\x41\xee\x1e\x1e\xbe\xe8\x61\x0d\xa2\x39\xe5\xd9\x29\xcd\x75\x64\xc3\x7d\x5c\x4e\x02\x0c\x64\xba\x08\x06\x68\x12\xc3\x90\xe4\x59\xca\xfc\x4d\x44\x64\xea\x2d\x4b\x93\xde\x98\xac\x6c\x35\x62\xc0\x79\x16\xb7\x69\xa0\x75\x84\x0f\x6f\x51\xe5\x90\xfe\xef\xd0\x94\x48\xda\x86\x12\x05\x96\xfa\x1f\x8b\x89\x67\x0b\x22\x17\xc1\x12\x5b\xbc\x86\xce\x59\xfe\x8a\x14\x5d\xf0\x5f\x8d\xaf\x11\x4a\xb4\xae\xc4\x08\x43\x83\xdc\x20\x01\x07\x30\xd6\x62\xc7\x60\xe0\x30\x1a\x16\x63\xaa\x0b\x58\x5a\x81\x49\x3f\x75\x21\x87\xc7\x10\xda\xe4\xe1\xa6\x75\xe8\x79\x02\xdc\x34\x68\x77\x2f\x1e\x0b\x2b\xf7\x98\xb6\xda\x26\xbb\x67\x3f\xa9\x16\xef\x81\x5f\x6d\xfa\x1a\xc8\xd7\x8b\xc0\xfe\xc7\xdd\x9f\xb3\x95\x45\x2f\xc6\xb2\x16\xbf\x20\x6b\xf5\xfb\xd5\x18\xf2\xd5\x14\x88\x92\x31\xfb\xaf\x81\xff\xa9\x2c\xe7\x9b\x1a\xcb\x70\x35\x39\x50\xeb\xb9\x20\xc2\xe3\x2a\xf8\x8e\x7c\x3d\xd7\x7a\x5a\xfd\x61\xd1\xdc\x1f\x3e\x7e\xcc\x5f\x48\xf5\x1f\x7f\x3e\x1e\x19\xb5\xec\xee\x7d\x47\xce\x73\xa5\xbf\x3d\xa9\x3d\xc6\x68\x6a\xd9\x1a\xb5\xac\x3b\x5c\x5e\xc4\x4b\xf0\x81\xa7\xce\x63\xb9\x86\xae\x45\x79\x2e\xfa\xae\x26\x53\xa2\x3a\x7d\x7b\x0e\x2a\x4f\xbe\xce\xaf\xd8\xe9\x9d\x9d\xfa\x27\x00\x00\xff\xff\x64\xba\x96\x25\x93\x06\x00\x00")

func _hardcodedMiddlewareGoBytes() ([]byte, error) {
	return bindataRead(
		__hardcodedMiddlewareGo,
		"../_hardcoded/middleware.go",
	)
}

func _hardcodedMiddlewareGo() (*asset, error) {
	bytes, err := _hardcodedMiddlewareGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../_hardcoded/middleware.go", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x17, 0x73, 0xff, 0x36, 0x5d, 0xfe, 0x40, 0x7c, 0x33, 0x99, 0xc8, 0x19, 0x37, 0x47, 0x59, 0x51, 0x96, 0xb, 0x22, 0x81, 0x1c, 0x7d, 0xe4, 0x3, 0x2f, 0x2d, 0x3c, 0x2d, 0xc5, 0x23, 0x70, 0xb8}}
	return a, nil
}

var __hardcodedTracingGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x58\x5d\x6f\xdb\x3a\xd2\xbe\x96\x7e\xc5\x1c\x03\x45\xa4\x42\xa1\x92\xf7\xb4\x7d\x17\x39\xc8\x45\x9a\xa4\xa9\x81\x24\x35\xe2\x60\x8b\xbd\x2a\x68\x69\x2c\x13\x91\x48\x2d\x49\xd9\xce\x09\xf2\xdf\x17\x43\x4a\xb2\x1c\x3b\xd9\x14\xdb\x8b\xd4\x26\xe7\x8b\xc3\x99\xe7\x19\xba\xe6\xd9\x03\x2f\x10\xac\xe6\x99\x90\x45\x18\x8a\xaa\x56\xda\x42\x14\x06\xa3\x4c\x49\x8b\x6b\x3b\x0a\x83\xd1\xbc\x72\xff\x49\xb4\xe9\xc2\xda\x9a\x3e\x2b\x43\x7f\x8d\xd5\x99\x92\x4b\xfa\x68\x45\x85\xa3\x30\x0c\x46\x85\x62\xaa\x46\x69\xb1\xc4\x0a\xad\x7e\x64\x42\xa5\x64\x4b\x8b\x59\x2a\xa4\xb1\xba\xa9\x50\x5a\x6e\x85\x92\x69\x21\xec\xa2\x99\xb1\x4c\x55\x69\xa1\xb4\x28\x4b\x9e\x56\xcd\x3a\x55\x16\xcb\xaa\x59\x8f\x7e\xd3\x5a\x17\x9f\xd3\xef\x02\x7d\xcb\x40\xad\x55\xcd\x0b\x6e\x95\x36\x29\x5f\x99\x74\xad\xf9\xe3\x6b\x3a\x64\xf3\xad\xbd\x14\xd7\x94\x3a\xd4\x26\x55\xb6\x7c\xd5\xb5\x13\xed\xfc\x0a\x25\x47\x61\x60\xf2\x07\xaf\x4b\xb7\x80\xf0\xba\x9a\xc9\x1f\x5a\x2f\xa9\x13\x7d\xd3\xc7\x4b\x61\xff\xd7\xa2\xb1\xde\xe5\x7b\x9c\xfd\x77\x2f\x03\x89\xfa\xa1\x60\x42\xa6\xe7\x25\x2e\x51\xa7\x0f\xfc\x71\x89\x78\x58\x28\xb6\xfc\x92\x96\xaa\x28\x50\x8f\xc2\x38\x0c\xd3\x14\x36\x59\x07\xab\xa0\x31\xc8\xc2\x25\xd7\xc3\xe5\x41\x7e\xd8\x3d\xae\xed\x0d\xaf\x27\x9b\xdd\xd3\xad\xfd\x5b\x5c\x9d\xab\xaa\x56\x46\x58\xdc\x91\x8d\xc2\x60\xcb\x16\x45\x7b\xee\xeb\xfa\xe9\x39\x81\x34\x75\x95\x8f\x35\xd7\x28\x2d\x2c\x90\xe7\xa8\xc3\x80\xca\x80\x6d\x8c\x90\x64\xff\x2f\x4d\x61\x7d\xc8\xab\xbf\xe5\xa1\xd3\x3c\x14\x79\xa7\xe6\x0f\x97\xe3\x9c\x37\xa5\x3d\x57\x65\x89\x99\x55\x7a\x42\xed\xb4\xe2\x06\xb2\x05\x97\x05\xe6\x30\xd7\xaa\x82\xcf\x9f\xff\xf1\xe5\x08\x84\x84\x5b\xb5\xc4\x6a\x86\x1a\xb8\xcc\xc1\x2e\x10\xae\x14\x94\x62\xa6\xb9\x7e\x24\x6b\x0b\x6e\xe4\x81\x85\x19\xa2\x84\xa6\xce\xb9\xc5\x1c\x56\x0b\x94\x20\x2c\x08\xb3\x59\x42\xc8\xb8\xa4\x54\x02\xd5\x1e\xbb\xd8\x13\x84\xcb\xf1\xde\xe8\x1a\x21\xed\xf1\x17\x38\x85\x4f\x7f\x1e\xff\xbf\x3b\xc4\x14\x6d\x53\x5f\x95\x6a\xc6\x4b\x97\xb2\x89\x56\x4b\x91\xa3\x3e\x93\xf9\x65\x5b\xe5\x60\xd0\x52\x00\xc0\x25\x74\x95\x4f\xd7\xe9\x3f\x27\x64\x85\x1b\x58\x61\x59\xd2\xff\x74\xb2\xad\x02\x82\xc2\x59\xf7\xe9\xa7\xfb\x74\xf6\x61\x4e\x35\xe1\x96\x0a\x94\xa8\x5d\x67\xf6\x45\x92\xa6\x70\xbf\xc0\x8d\x37\x4a\x59\xaf\xc9\x35\x82\x46\xdb\x68\x89\x39\x25\x56\xe9\xde\xde\x82\xb2\x53\x96\x3e\xbe\x1c\xe7\x14\xfc\xa2\xb1\xb9\x5a\x49\x16\xce\x1b\x99\xbd\xe7\xbc\x51\x0c\xd1\x76\xa3\xb2\x69\xcd\x65\xb7\x9d\xc0\xc7\xae\xa7\x7c\x95\xe9\xce\x46\x02\xa8\xb5\xd2\x31\x3c\x85\x41\x9a\xc2\x31\xa3\xcc\x51\xe2\xba\x73\xb8\xe5\xff\xeb\x97\x9d\x0d\xdd\x1f\xcc\xed\xfe\xc9\x80\x1b\x23\x0a\xb9\x95\xb6\x81\x90\x93\x1a\xcf\x61\x85\x07\x94\x87\x46\x4a\x21\x0b\x28\x15\x9d\xfb\x31\xa1\x14\x48\xa0\xdc\x80\x9a\xcf\xc1\xf0\xaa\x2e\x85\x2c\x18\xfc\xb0\x0b\xd4\x2b\x61\xd0\xaf\xa1\x8f\xf0\x03\x28\x0d\xab\x05\xb7\xd4\xc8\x70\x7f\x77\x76\x3e\xbe\xbd\xfa\x35\x3d\xbb\x99\x5c\xd3\x87\xc9\xdd\x8f\xaf\x67\x5f\xc7\xd7\xe3\xfb\x7f\x81\xa9\x31\x13\x73\x81\x86\x85\x41\x67\x76\xa2\xd5\x8c\xcf\x44\x29\xec\x23\x9c\x9c\xc2\x11\x3b\x3a\x0e\x03\x61\xae\x29\x18\x5a\x50\x86\x5d\xa1\x45\xb9\x8c\x46\xbf\xc6\xd3\x5f\xd7\x3f\xce\xcf\xae\x47\x31\x9c\x9e\xc2\xc8\xea\x86\xc0\x44\xcc\xa1\x93\x7f\x0a\x83\xbd\x86\x4f\xe1\x98\x1d\x85\xc1\x33\x60\x69\x10\xc4\x1c\x96\x2f\x4c\xbf\x15\xf6\x28\xfe\x0b\x96\xf0\xc7\x29\x8c\x46\xaf\x39\xf8\xa6\x55\x75\x29\x97\xee\xf2\xc8\x72\x4b\x74\x6c\xc2\xb5\xc1\x6f\xa5\xe2\x36\x5a\x26\xf0\xe5\x53\x1c\x06\x14\x2e\x49\xfd\x71\x0a\x52\xf8\x88\x03\x5f\x89\xf4\x3d\xf1\x7f\xe6\x95\x65\x97\x54\x07\xf3\x68\x94\xa9\xa6\xcc\x41\x2a\x0b\x35\x59\x83\x83\x0f\xe6\x80\x4a\x53\x48\x8b\x04\x93\x09\x2c\xc9\xec\xf3\xab\x47\x7f\x3d\xde\x30\x78\xf6\xb5\x70\xb9\x44\xfd\x08\xc7\x9f\xc1\x60\xa6\x64\x4e\x9d\x78\x50\x52\xdd\x3c\x92\xa7\x4c\x49\x89\x99\xa5\x8f\xdb\x5d\x99\x75\xc0\x00\xdc\x3a\x3b\xd4\x3c\x2d\x68\xb8\x72\x22\x18\x05\x35\xf7\xa5\xb5\x50\xc6\x9e\x38\xd0\x20\xd1\x9f\x54\x64\x5d\xe9\x09\x49\xc5\x99\x37\x99\x53\xb0\x0b\x61\x08\xaf\x38\x18\x91\x63\xc6\x75\xe2\x9a\x77\x35\xd0\x70\x26\xda\x82\x1d\xc8\x77\x2b\x9d\x5d\x55\x63\x1f\xed\x61\x1f\x2d\x0b\x03\xec\x1b\xb1\xbd\x31\x07\x84\xb7\xb8\xea\x1b\x38\x0c\x82\x76\xa4\x61\x5f\x79\xf6\x50\x68\xd5\xc8\x3c\x8a\x93\x30\x08\x9c\xec\x4f\x61\x17\x67\x79\xae\xd1\x98\x88\xae\x6b\x5a\x6b\x21\xed\x3c\x1a\x7d\x30\x27\x1f\xf2\x51\xb2\x1f\x5a\xbf\x2b\x63\x93\xbd\xb8\x1a\x6f\x9b\xbe\xc3\x36\xeb\x42\xc9\x09\x6a\xa1\xf2\xe8\xf8\xf3\x47\x9a\x9a\xd8\xd4\xdd\xd1\xb6\xf8\x58\x1a\xcc\x1a\x8d\x2e\xc0\x38\xdc\x53\x64\x6f\xd6\x98\xc3\x1c\xc8\x34\x72\x4b\x69\xeb\xb2\x73\x02\x1f\x96\x23\x97\xa2\xd8\x97\x8a\xad\x29\x57\x12\x57\xdb\xa0\x15\x6d\xd2\xb9\xa7\xd8\xe2\x30\x20\xf2\x67\x53\xb4\x2f\xd4\x6c\x1d\x87\x5d\x60\x1b\x13\xb6\x76\x11\x86\xcf\xef\x25\x97\x6f\x4a\xdf\xa3\x71\x14\x57\x21\x97\xae\x50\x67\x48\x2c\xe0\xb0\xbd\x91\xc2\x02\x4d\x32\x42\x16\x9e\x69\x64\x0e\x95\xa0\x23\x7b\xaa\x31\xe4\x02\xf8\x4c\x2d\xd1\x51\x80\x6a\x2c\x15\x1e\x15\xee\x50\x97\xc1\xd8\xb6\xa4\x61\x88\xc7\x84\x3c\xac\xb0\x52\x9e\x7a\x7b\x9a\x21\x03\xb8\xe6\x95\x70\x05\xd8\xf2\x12\xe6\x60\x6a\x2e\xcd\xfb\x09\xa4\x3d\x13\xf1\xc8\xc7\x7e\x14\x63\x63\x79\xe3\x3c\xfe\x1e\x8f\xf4\xb1\x9d\x9c\xc2\xc6\xd6\x2d\xae\x5e\x9a\x8b\xe2\xf7\x5c\xf1\x31\x3b\xfa\x1f\xae\xd4\x25\xe0\x75\xf3\xf0\x26\x6b\xee\x03\xb8\x39\xc1\xeb\x97\x4f\xf1\xab\xa9\xa0\x14\xb4\x11\xf5\x12\xb7\x3b\x01\x10\x7c\x76\xbb\xd4\x51\xe7\x4a\xce\x45\x11\xf5\x6b\xfe\xbb\x83\xeb\xf1\xc5\x55\x37\x6e\x9c\x6c\x46\x3d\x37\x06\x52\x52\x37\xbb\x1e\x2e\x82\x16\x04\xa6\x8e\x34\x7b\x95\xde\xf2\xc4\x8d\x93\x5f\xb9\xc1\x3c\xda\x3e\xc2\xf8\xe2\x8e\x20\xb4\xdd\xda\xd3\x59\xde\xfe\x0d\x5f\x5f\x2e\x51\x5a\x33\x41\x4d\xf9\xf2\x1e\x8e\x8f\x8e\xba\xdd\x33\x4b\xef\x97\xc6\xe2\x46\x62\xb0\x7b\x2d\xe4\xc3\xb6\x6a\xb7\xfb\xec\xec\x6f\xa5\x65\xfa\x28\xb3\xc1\x75\x79\xb8\xf1\x9d\x7a\xd3\xac\xa7\xa8\x97\xa8\x6f\x44\x9e\x97\xb8\xda\xcc\x58\x06\xaa\xcd\x92\x5d\x70\x0b\x66\xe1\x58\x6d\x86\xc0\xad\xe5\xd9\x02\x73\x6a\x5a\x0e\x83\x67\x1d\x18\x67\xcc\x0d\x72\x63\x0b\xb9\x42\x03\x76\xa5\x08\xed\x65\x61\x4e\xc0\x58\xae\xad\xf1\x7d\xe5\x09\x82\xe7\xb9\xff\xee\xdf\x19\x20\xe4\x5c\x91\x59\xea\x71\x8d\xff\x6e\xd0\xd8\xc3\x76\x04\xc9\xc0\x3f\x32\xda\x86\xdc\x13\x7a\x44\xee\x45\x86\xb7\xbc\x42\xe2\x73\x21\x8b\x18\x48\x38\xa2\xa7\x22\xfb\xce\x65\x5e\xa2\x8e\x61\xf8\x8d\x2a\x4d\x59\x7a\x8b\x7a\x4a\x71\xcf\x52\xb6\xdf\x66\xd2\xef\x53\x5a\x37\xcf\x07\x13\x6d\x5e\x36\xf1\xa6\x97\xbc\x67\x78\xdb\x77\x27\xec\x63\xd8\x0a\xf4\x1b\xe9\x3b\x23\x7a\xe5\xf5\xee\xd0\xd4\x4a\x1a\xfc\xa9\x85\xeb\x2d\x0d\x1f\xdb\x75\x97\xa9\xd8\x8f\x26\x69\xda\xc5\x49\xaf\x0b\xc0\x35\xa5\x96\xf0\xcc\x01\x67\xcd\x25\x03\xa9\x56\x50\x37\xd6\x3d\x32\x64\x9b\xee\xcc\xae\x5f\xa6\x9a\xac\x99\x1e\x82\x5c\x63\xd3\x18\xd2\xbe\xaf\x22\xcd\xba\x4f\x74\x6a\x37\x26\x99\xcc\xcd\x52\x4e\xb4\xdf\xfc\x0b\x4c\xc6\xbe\x73\xd3\x36\x48\xd4\xc6\x19\x50\x2c\xe3\x8b\xc4\x5b\x1f\x5f\x38\xcd\xcc\xa9\x8e\x2f\xd8\xd4\xdd\x5f\x14\x27\xb4\xd6\x6a\xf6\x8b\x4e\xbd\x2d\x87\xd7\x22\x62\x67\x79\xde\x7d\x1b\x91\x2b\x41\x14\xef\x7d\xfe\xbe\x01\x17\xa3\xb3\xd0\x46\xeb\x4c\xd0\x04\x17\x2c\x98\x2b\xc4\xef\xf7\xf7\x93\x48\xaf\x12\xd0\x6e\xb6\x8b\x1d\xff\xfa\x36\xf3\xd0\x25\x8d\xfb\xe5\xa5\xeb\x2f\xca\xb9\xed\x57\xfd\x13\x88\xb8\x2f\x2b\x05\x3d\x55\xdb\xea\x37\x5d\x33\x59\xfe\x80\x86\xf6\xf9\xb6\xd6\x4a\xf3\x3a\x01\x64\x05\xf3\x35\xd2\x22\x57\xef\x2f\xe9\x1f\x9e\xad\x45\xb2\xd7\x8e\x49\xb0\xe4\x65\x83\x64\xa5\x6e\x68\x76\x6c\xeb\x03\x24\x35\x90\x6a\xac\x7b\xca\xee\x3e\xcb\x84\x71\xf2\xdd\x53\x97\xd4\xda\x57\x8b\x92\x08\x4a\x02\xf2\x6c\xd1\xb9\x4b\xc0\xa8\xee\xd7\x27\x58\x29\x79\xe0\x02\x98\x61\xe1\x68\xde\x8a\xd2\xa3\x0b\x8d\x83\x52\x58\xc1\x4b\xf1\x37\xe6\x10\x21\x2b\x12\x3a\xad\x90\x2d\xa8\x78\xf0\x68\xea\xb8\xed\xff\x61\x4e\xa3\x19\x37\xb8\xc9\xb0\xef\x09\x1a\xfe\xee\xb5\xa8\x6b\xc7\x42\x35\x97\xd4\xc2\xe7\x76\xfd\x4f\x77\x66\x1a\xc5\xf5\x9c\x67\xf8\xf4\x1c\xef\x2a\x0c\xf8\x47\x0f\x96\x9f\xb6\xfc\x9c\xc0\xd6\xd7\x5d\x27\x27\x3b\x2b\xae\x20\xec\x63\x8d\x5b\x66\x09\xab\x9a\xcc\x92\xd3\xed\x83\x00\xec\x86\x16\x06\x6f\x9d\xa5\xa7\xeb\x88\x2a\x6d\xa0\x16\x43\x6f\x24\xda\x81\x8d\xe8\xe3\x16\xbc\x0c\x07\x91\x1e\x9e\xfc\xef\x6d\x6c\x2b\xed\x04\x5f\x96\x6d\x67\xc1\x8d\xb8\xad\x30\xc1\xe4\x0b\xce\x76\x33\xc8\xd5\xce\x0c\xd2\x8d\xd2\x03\xc5\x57\xf0\x75\x47\x6e\xda\xa6\xe3\x9b\xd2\x15\xb7\x34\x12\x39\xcc\xac\xd0\x2e\x54\xde\xd2\xc0\x1e\xa8\xf4\x1b\x1e\x89\x96\x09\xa8\x07\x82\x9f\x41\xfb\x33\x97\xdb\x48\x5b\xf6\x32\xdf\x31\x8b\x5a\x72\x69\x41\x4f\x3d\xb4\x80\xd6\x26\x6b\xd9\x43\x43\x57\x43\xec\xc6\x47\x93\xa6\x34\x0f\x21\x70\xd3\x67\xf4\xc0\xf4\xcf\xaf\xae\xf7\xdc\x63\xc9\x33\x79\xcc\x06\xd7\xd6\xb1\xf6\xa5\x47\x74\x3a\xf8\x19\xed\x79\xf4\x6c\x71\xde\xd3\xa9\x6f\x7a\x47\xa9\xe3\x0b\xe3\xfb\x94\x4b\x57\x4d\x5d\x63\xb6\xbf\x6a\xb5\xed\xb4\xd7\xe6\x9e\x4a\x69\xd1\xaf\x03\xd2\x9e\x66\x9f\xc2\xf7\x33\x05\xf1\xc4\x36\x43\xec\xb2\x43\x37\xfd\xbd\x90\x7b\x49\x04\xc9\x8e\xc4\x0b\xfa\x20\x10\x0e\x3c\x2b\xf9\xd0\xee\xb0\x52\x16\x07\x3a\xc3\x38\x37\x75\xc6\xda\x84\x0c\x43\x4f\x40\xb3\xef\x2e\x69\x03\x96\x7f\x2f\x63\x3d\x87\xff\x09\x00\x00\xff\xff\xc4\x5a\x1a\x1a\x8b\x17\x00\x00")

func _hardcodedTracingGoBytes() ([]byte, error) {
	return bindataRead(
		__hardcodedTracingGo,
		"../_hardcoded/tracing.go",
	)
}

func _hardcodedTracingGo() (*asset, error) {
	bytes, err := _hardcodedTracingGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../_hardcoded/tracing.go", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xfa, 0xd1, 0x87, 0x1c, 0x47, 0xbb, 0x36, 0x21, 0xf3, 0xd8, 0xf8, 0xf0, 0x38, 0x52, 0xff, 0x99, 0xab, 0x4, 0x61, 0x91, 0x67, 0x4e, 0xbf, 0xd2, 0xd8, 0x74, 0xfe, 0xce, 0xa1, 0x57, 0xa3, 0x6a}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"../_hardcoded/doer.go":       _hardcodedDoerGo,
	"../_hardcoded/middleware.go": _hardcodedMiddlewareGo,
	"../_hardcoded/tracing.go":    _hardcodedTracingGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"..": &bintree{nil, map[string]*bintree{
		"_hardcoded": &bintree{nil, map[string]*bintree{
			"doer.go":       &bintree{_hardcodedDoerGo, map[string]*bintree{}},
			"middleware.go": &bintree{_hardcodedMiddlewareGo, map[string]*bintree{}},
			"tracing.go":    &bintree{_hardcodedTracingGo, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
