// Code generated by go-bindata. DO NOT EDIT.
// sources:
// ../_hardcoded/doer.go (10.286kB)
// ../_hardcoded/middleware.go (1.685kB)
// ../_hardcoded/tracing.go (1.824kB)

package hardcoded

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __hardcodedDoerGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x5a\xff\x8f\xdb\x36\xb2\xff\xd9\xfe\x2b\x26\x06\xee\x22\x25\x5e\xd9\x9b\xbb\x6d\x0f\xee\xdb\x03\xda\xcd\xf6\xb5\x40\x9a\x04\xf5\xf6\x35\x40\x10\x5c\x69\x69\x64\xb3\xa1\x48\x97\xa4\xd6\x6b\xec\xed\xff\xfe\x30\x43\x4a\x96\xfc\x65\x93\xbb\x16\x0f\xef\xf2\xc3\xda\x96\x66\x3e\x1c\x0e\xe7\x3b\xb3\x16\xf9\x47\xb1\x44\xc8\x95\x44\xed\x87\x43\x59\xad\x8d\xf5\x90\x0c\x07\xa3\xc5\xd6\xa3\x1b\x0d\x07\xa3\xdc\x68\x8f\x77\x9e\xbe\xa2\xce\x4d\x21\xf5\x72\xf2\xab\x33\x9a\x1f\x58\x6b\x2c\x53\x49\x33\x91\xa6\xf6\x52\xd1\x0f\x65\x96\xf4\x51\x09\xbf\x9a\x58\xa1\x0b\xfa\xa1\xd1\xc7\x8f\xc9\xca\xfb\x35\x7d\x77\x5b\x9d\xd3\xa7\x97\x15\x8e\x86\xc3\xc1\x68\x29\xfd\xaa\x5e\x64\xb9\xa9\x26\xa2\xc4\xbb\xc9\x6a\xeb\xbc\x95\x77\x67\x4b\xd3\x7c\x1d\xf5\xa9\x0a\xa3\xcd\xad\xd0\x2b\x59\xe0\x04\x6f\x51\x7b\x67\x6a\x9b\xe3\x68\x98\x0e\x87\x93\x09\x14\x06\x2d\x48\x07\x42\x83\xd4\x1e\x6d\x29\x72\x84\xd2\x58\x18\x15\x46\xea\xe5\x08\x48\x12\xb0\xf8\x5b\x8d\xce\x3b\x58\x1b\xe7\xe4\x42\x6d\x61\x23\xfd\x0a\x36\x56\xac\xd7\x52\x2f\x87\x7e\xbb\xc6\x08\xd5\x82\xdc\x0f\x07\x2f\x4d\x92\xc3\x33\x42\xc8\xae\x58\x7d\x63\xb0\xf1\xf7\x8f\x01\x31\x85\xa4\xf9\xed\xd6\x46\x3b\x1c\x03\x2b\x2c\x1d\x3e\x0c\x03\xaa\x59\xbf\x16\x15\x5e\xf9\x3b\x70\xde\xd6\xb9\xbf\x7f\x60\xb9\x17\xc2\x61\xc4\xf8\x4e\xe8\x42\xa1\x85\x35\xda\xd2\xd8\xca\x81\x5f\x21\xbf\xef\xc9\x1e\xd0\xe8\xf1\x4b\x92\x73\x07\x56\xd6\x3a\x87\xa4\x68\x5f\xa5\xf0\x3b\xc4\xa6\x5d\x5b\xf4\xb5\xd5\x90\x67\x2f\x4d\x12\x36\x32\x99\x80\x45\x6f\xb7\x8d\xa4\xf4\x43\xa2\x83\x8b\xe9\xbb\xbe\x7e\x83\x90\x4c\xdb\x91\x92\x40\x0b\xd8\xfd\x23\x45\xf3\x32\x76\xfb\xd6\x28\x99\x6f\xe1\xc7\xdd\xf7\xb8\x5e\xe7\x09\x14\x58\x4a\x8d\x0e\x44\x40\x86\x35\x3f\xce\xc2\x62\x5d\xc2\xde\xe1\x4d\x26\xf0\x8d\xc8\x3f\x9a\xb2\x74\x10\xb6\x14\x34\xab\xeb\x6a\x81\x16\x84\x2e\xc0\xcb\x4a\xea\x25\x98\x32\x02\x0b\xef\xb1\x5a\x7b\x97\x0d\x07\x0d\x6b\x92\xc2\xfb\x0f\x64\xbd\xd9\xcb\xda\x0a\x2f\x8d\x66\x64\x5e\x15\x2c\xe6\x28\x6f\x31\xe0\x76\x15\x31\x06\xe1\x60\x83\x4a\xd1\x27\xbd\xb4\xe8\x6a\xe5\xc1\x94\xcc\xdd\x78\x48\x3c\x9e\xa7\x0e\x7e\x79\x69\x7e\x81\x0a\xfd\xca\x14\xd9\x70\xc0\xe8\x49\xef\xc4\xc6\x70\xe2\xc0\x16\xc6\xa8\xa8\xb3\xb9\xd4\x4b\x85\x8f\x69\xce\xaf\x84\x6f\x4f\x4f\x34\xd2\x82\xd1\x39\x06\x6d\x1e\x42\xf4\xac\xf6\x88\x42\x85\x87\xad\xa9\xc1\xad\x4c\xad\x8a\x76\x19\x6c\xb1\xcf\x1d\xe6\x46\x17\x20\x4a\x4f\xee\xe5\xa1\x14\x52\xb9\x2c\x9a\xed\xc1\x7a\x29\x9c\xd6\x7c\xc7\x38\xf7\xde\xdc\x9f\xc3\x33\xe0\x27\x73\x5e\xed\xa1\x6b\x45\xb0\x91\x4a\x45\xc9\xb4\xd1\x67\x6f\xdf\xcc\x6f\xc6\xe1\xdb\xd7\x37\x57\xdf\xed\x82\x03\x6f\xe6\xe2\xdd\xbb\x8c\x58\x6f\xde\xbc\x7c\x33\x83\xef\x3d\x59\xab\x03\x6d\x3c\xe4\xb5\xb5\xa8\xbd\xda\x36\xd6\xa2\xb7\xe1\x10\x1a\x75\x60\x01\x8b\xed\x89\xc3\x7d\x64\xc3\xe1\xb4\x2d\xfe\x06\x7b\x27\x6e\xd1\xad\x8f\x1d\x7b\xf7\xe8\x49\x27\xb2\xe4\xa7\x4f\x2e\x41\x4b\x05\xff\xfc\x27\xed\x28\xfb\x81\x8d\x09\x2e\x2f\x61\x44\x1b\x1e\x1d\x7b\x4e\xdb\xa7\x17\xc3\xc1\x80\xd6\xca\xe6\x5e\xf8\xda\x5d\x99\x02\xe1\xbf\xe0\x62\x3a\x25\xf0\x46\xe3\xa5\x50\x0e\x87\x83\x87\xf6\x08\xbc\xad\x31\xaa\xf9\xfa\x6e\x6d\x34\x6a\x2f\x85\x3a\x6a\x7d\x1a\x70\x47\xd1\x73\xe2\x60\x75\x27\xf8\x1f\x37\xbd\x52\xde\x52\x3c\x8c\x4f\x39\x9e\x77\x56\x51\x14\x0d\x72\x8b\xc2\x91\x87\x6f\x84\xf4\x6c\x1f\x8e\x63\x2f\xfa\x0d\xa2\x6e\x0f\x7e\x06\xe7\xd3\xe9\x18\x5e\xd0\x9f\xbf\xd2\x9f\xbf\xd1\x1f\x0a\x10\xe7\x5f\x4c\xa7\x50\x49\xa5\x64\xb0\x62\x07\xcf\x27\x67\x50\xaf\xc1\x1b\xb8\xf8\x13\xfc\x2a\xbd\x47\xdb\x1c\xed\xf1\x5d\x7c\x86\x41\xc3\xec\x12\x2a\xf1\x11\x93\xbd\xd7\x63\xb8\x48\x87\x03\x8d\x77\x4c\x71\x3e\x9d\x36\x46\xfe\xc3\x4e\xa2\xe1\xc0\xea\x82\x5e\x53\x12\xce\x5e\xe3\x26\x69\xbe\xcc\x39\x4f\x26\xcc\xf0\xda\x6c\x92\x34\xfb\x49\xcb\xbb\xd7\x42\x9b\x24\x4d\xd3\xe1\x00\x89\x6b\x9a\x4d\x2f\x60\x32\xe1\x6d\x5d\x50\x06\xca\x51\xfb\xb8\xaf\xe1\x80\xf2\xa8\x8c\xe0\x4b\x8e\xeb\x8d\x45\xbc\x97\x1f\xe0\x12\x58\xb4\xe7\xd0\x13\x3a\x49\x12\xab\x8b\xec\x5b\x65\x84\xff\xe2\xaf\x49\xfa\xec\x45\x7a\x76\x9e\x3e\xc3\x67\x65\x7c\x42\x4c\xb4\x7e\xd8\xd8\xb3\x4b\x78\xd1\xb5\x2a\x8b\xfe\xff\xad\xef\x9e\x3a\xe0\xff\x7c\x07\x7e\x6d\x8e\x67\x8d\xe0\xa4\x94\x20\x35\xde\xc6\xc4\xbf\x25\x87\x6a\x73\x47\xcc\xc2\x7d\x80\xc7\x1d\x97\xc2\x41\xb5\xf6\x5b\x70\x4a\xe6\xd8\x28\xb7\x87\xf0\x6f\x66\x81\x7e\xd8\x17\x6a\x23\xb6\x9d\x78\x41\xfb\x3f\xb1\xda\xbf\x9a\x70\x3b\x32\x04\xb5\x36\xd5\x1e\x2b\xe8\x2a\x94\xd3\x7d\x35\xfc\x2c\xfd\xaa\xab\xa3\x56\x1b\xa0\x71\x03\xb1\x02\x0f\x66\x6c\x6e\xd1\x5a\x59\xc4\xba\x22\x14\xee\x60\x16\xbf\x62\xee\x9f\xba\xb6\x18\x6b\xcb\x20\xde\xd1\x1e\x7c\x92\xfb\xbb\x06\x34\x8b\xf2\x8c\xe1\x44\xc9\x95\xee\x53\x76\xab\xc0\xf8\x86\xf0\xff\x47\xa8\x1a\x09\x79\xdc\xdb\xe7\xfd\x43\x0f\x99\x2b\xc6\xa6\x28\x7d\xd6\xd6\x82\x7f\x44\x59\xda\x2c\x31\x06\xf3\x91\xc3\x52\x23\x70\x92\x66\x41\xb8\xbe\x5c\x69\x96\x74\xb7\xc9\x8e\xf6\xc4\x7c\x6c\xbc\xa2\xd5\xc5\x25\x14\x59\xe7\x37\x3b\x49\x9b\x59\x68\x9d\xdd\xbb\x6c\x67\x98\xc3\xc1\xad\xb0\xc7\x7c\x3c\xbc\x68\xfd\x7c\xc8\x35\xdf\x5c\xdc\x62\xaf\x30\x5a\x98\x82\x72\x14\xe4\x54\xe9\x6f\x10\x56\x4c\x60\xc2\x62\x19\xbc\xf1\x2b\xb4\x1b\x19\xde\x71\x14\x64\x02\xa1\x2c\x8a\x82\xcc\x47\x14\x8c\xcb\xcd\x42\x5d\x96\x68\xc1\xe8\x36\xba\x15\xbd\xa5\x98\x9d\xea\xae\x0c\xe6\x88\xcc\x46\x02\xcf\x26\x13\xe7\x69\x3b\xb7\x68\x4b\x65\x36\xdc\x6f\x31\x87\x34\xda\x4d\x5e\xfc\x65\xfa\xe5\xf4\x6f\x5f\x7e\x31\xa1\xb5\xa4\x5e\x9e\x91\xc4\x67\xa6\x3c\x23\xde\xb3\x88\x7d\x46\x89\xd7\xd4\xfe\xac\x32\x85\x2c\x29\x36\xb4\x6f\x9c\x17\x3e\xea\x62\x51\x97\xf0\xfe\x03\xf5\x9b\x7c\x06\x36\xfb\x86\x36\x1f\xe3\x1d\x9d\x46\x5f\x61\x83\xc1\xa2\x2e\x43\xa4\xbc\x84\xd0\x73\x66\x3f\xa2\x28\xbe\x56\x2a\x09\xbc\x94\x3f\xfa\x51\x93\x50\x1a\xa3\xd5\x52\x31\xf7\x70\x40\x27\xf9\x30\x0c\x99\xac\xa9\x7b\x29\xed\x7d\xc5\xd1\xef\xab\xe6\xd9\xf3\xe7\xcc\x7f\x54\xb4\x81\x2d\x2c\xf1\x44\x39\x5e\x9b\xf5\x95\x32\x0e\x6d\xc2\xed\x33\x65\xda\x6f\x58\xfd\xc9\xa2\x2e\x39\xaf\x0d\x22\xc6\x25\xd8\x22\x8a\xc0\xd1\xb9\xd9\x50\x91\x15\xd4\x5a\xe5\x63\xb0\x71\x1b\x8d\x64\x97\x97\xa0\x50\x27\x8d\xe9\xa5\x14\xf2\x9f\x74\x8d\x2f\x66\x9a\x90\x59\x18\x2f\x0d\x32\x2e\x2c\x8a\x8f\x71\xad\xc9\x04\x58\xc2\xa6\xf1\x60\x9b\x8c\xe6\x56\xee\x1e\xc8\x90\x19\xb5\x54\x8d\x10\x6e\xbd\xa7\x4c\xb7\xe6\x9d\x64\x0c\x47\x06\xcf\xf8\xa1\xce\x56\x88\xeb\x56\xd2\xf7\x71\x07\x1f\xd2\x7e\x2e\x8f\x42\xc6\xb0\x9c\x4b\x9b\xd7\xd2\x7f\x43\xb2\xa2\xe5\x06\x51\x56\x6b\x85\x15\x75\xf5\x21\xd6\x05\x0a\x58\x04\x12\x58\x53\x47\x66\x35\x27\xf5\x39\x7a\x28\x70\x51\x2f\xc9\x49\xe8\xf4\xe8\xd3\xac\xd1\x0a\x8f\x3d\x66\xa9\x41\x40\x45\x39\x70\xb3\x42\x8b\xd4\x73\xb0\x03\x18\xad\xb6\xa0\xcc\xb2\x23\x0a\xb0\x8d\x86\x5a\x8f\x69\x48\x23\x0b\x65\xf2\x8f\x5c\x21\xb4\xd5\x45\x69\x4d\x05\x4b\x43\x99\xcf\xaf\xac\xa9\x97\xab\x98\xf7\x8e\x6c\xe9\xb1\x9e\x37\xc8\x1f\xfe\x71\xe3\x36\x88\x00\xaf\x45\x85\xc4\x29\xf5\x72\x38\x50\x66\xb9\x44\x1b\xa8\x7e\x16\xcb\x10\x2c\x5f\xf1\x43\xd2\x24\xf9\x4a\x64\x9b\xcf\xaf\xdf\xe8\x1c\xc1\x6d\x75\x9e\xd1\x37\xd6\xf3\x77\x61\x90\x32\x9f\x5f\x5f\xdf\x52\xea\x90\x0e\xb0\xa2\x92\x8e\x6b\x9c\xdd\xc4\x05\x6e\xa5\x00\x87\xf6\x16\xed\x99\x23\xc2\x30\x5f\xc9\xb8\x72\x42\x97\x5b\xb9\x08\x05\x33\x69\x97\x35\x45\x95\x80\x68\x16\x8f\x2a\xd8\x5f\x6d\xb7\xff\x1b\x7a\xfd\xc8\xbf\xb0\x5f\xf8\xe5\x57\x67\xf4\x6c\x44\x60\xa3\x5f\x86\x03\x56\xc5\x67\x73\x69\x51\x31\x57\xcc\x20\x57\xa6\xd6\xfe\x18\x97\x0c\x8f\x23\x97\xed\x50\x13\xf7\x35\x85\x9d\x93\xbc\xfb\xdc\xd8\x52\xb7\xbc\x6f\x43\xe5\x2c\x96\x87\xa2\x1f\xe1\xdd\x51\x13\xc0\xf7\xee\xaa\x67\x45\x6f\xd6\xa8\xbb\x00\x5c\x70\xb4\x00\xf2\x08\x35\x2b\xc0\x28\x25\xf5\x92\xc5\xfa\x56\x48\x55\x5b\x7c\x4c\x01\x87\xd4\x87\x20\x4a\x91\x7f\x77\xc1\x1e\x03\xe9\x51\x9f\x02\x9b\xd7\x79\x8e\xce\x7d\x26\x58\xa4\xde\x07\x9b\xaf\x8c\xf5\x51\x0b\x58\x7c\x6a\x7b\x7d\xea\x03\xac\x8e\x40\x9f\x56\xd5\x09\x81\x6e\x56\x94\x22\xdf\x1a\xa3\x7e\x44\xaa\xd2\x48\xa8\xd3\x20\x87\xd4\x07\x78\xb2\x42\x53\xfb\xcf\x14\x2a\x52\x13\xc8\x55\x68\x73\xae\x8c\x8e\x0d\xcf\xf5\x1d\xe6\x35\xa5\xf3\x60\xdc\x7d\x90\xfc\x71\x6a\x02\x7c\x25\x3c\xea\x7c\x7b\x63\xbc\x50\x3f\xa0\xd0\x8f\x1b\xb7\xea\x50\xff\xa3\x42\x41\x86\xd9\x14\x83\xca\x2c\x39\x3e\x24\x6a\x3f\xa6\x8d\xe1\x20\x88\x70\x56\x53\xd9\x2b\xb3\x4c\x46\x52\x97\x66\x34\x86\xd1\x68\x0c\x95\x58\xbf\x0f\xee\xff\xa1\x1d\xf5\xdd\x3f\x50\xb2\xea\x7b\xf4\xec\x98\x0f\x63\xd6\x8d\x11\x63\x62\xea\x38\xf2\x51\x16\x62\xda\x85\x86\x1d\x4b\xc7\x7f\x0f\xf9\x22\xcb\x8e\x86\xf9\x8e\xba\xed\xac\xcf\x77\x2c\x10\x30\xf3\x31\x6f\x9d\xed\x6f\xee\x90\xe6\x08\x6f\xdf\x49\x67\x47\x79\x7b\x34\x27\x31\x1a\x57\x78\x0c\x23\xd2\x1c\x60\xec\xb9\xe4\xec\xd8\x1e\xfa\x34\x87\x10\xbd\xe5\x8f\xab\xe1\xd4\xf2\x47\x1c\x70\xb6\xcf\x7b\x48\x73\x08\x13\xfd\xee\x31\x11\x22\x0d\xf3\x7e\xca\xdd\x66\x80\xd9\x27\x1c\x98\x71\xd4\x9e\x4f\x1e\xda\x20\x66\xfb\x7e\x3b\x1e\x0e\x1e\xfa\x8d\xd9\x61\xe5\x92\x82\xd4\xd2\x27\x69\x1c\x9e\xbf\x45\x2b\x4d\x21\x73\x9e\xa5\x29\xb3\x0c\xd3\x75\x2d\x54\xbf\x78\xa2\x2a\x4c\x38\x27\x1d\x17\x5e\x0e\xbd\xe7\x1a\xa6\x53\x63\xf9\x95\x45\xb7\x32\xaa\x70\x5c\x67\xd5\xba\x40\xeb\xbc\xd0\x05\x0f\x12\xd6\x6b\x25\xf3\xd0\xd8\x2f\x70\x25\x6e\xa5\xb1\x19\xb3\xff\xa4\x4b\x63\x7d\xad\x85\x47\xb5\x1d\x77\xcb\x96\xc2\xa0\xd3\x4f\x7d\x6c\x88\x60\x69\x51\x78\xd8\x88\x2d\x89\x82\x77\xeb\x50\xfa\x4a\xc7\x28\x85\xf0\x62\x0c\xce\x50\x17\x65\xd1\x19\xeb\xb9\x7c\xac\xad\xe6\xc9\xbf\x06\xe9\x1d\xb8\x7a\xcd\x97\x62\xd4\x25\x2c\xac\x11\x45\x2e\xdc\xc1\x36\x2a\x2a\x71\x73\xc7\x45\x13\xcf\xfa\x0f\x2b\x27\x48\xe6\xf3\xeb\x34\x88\x3f\xc7\x70\x25\xe0\x66\x93\xc9\x23\x97\x5e\xd2\xb9\x1a\xdd\xe4\xe2\x8b\xac\xad\x05\x63\x51\x47\x3d\x02\x9d\x56\x38\x90\x41\xe4\x99\x7b\x8b\xa2\x6a\x2e\x62\x66\x97\x8d\x5e\x78\xe2\xd7\x7d\xc7\xe5\xfa\x31\xa6\x6c\xee\x85\xf5\xfc\x5a\x49\xe7\x51\x73\x04\xb6\x0c\xa6\xd1\x67\xaf\xf8\x61\x32\xf2\xf9\x9a\xc2\xee\xf9\x8b\x2f\xb3\x69\x36\xcd\xce\x67\xd3\xd1\x89\xae\x6b\x2d\xb4\xcc\x13\x6a\x46\xb8\x43\x18\x0e\x06\x4b\xc3\x7b\xcf\xe6\xa4\xa2\x64\xb7\xcc\x31\x79\xd2\x40\xdf\xd9\x2a\xa9\xef\x67\x64\x9b\xc3\x5b\xb4\x5b\x38\x9f\x42\x33\x7f\x5d\x60\x2e\xea\xd8\xdb\x10\x1a\x5a\x79\xd7\x1e\x8d\xb0\x48\x47\x2a\xe0\x7c\x7a\xd6\x8c\x47\x19\x2d\xba\x2d\x6c\xa4\x2e\xcc\x26\x83\x9b\x95\x74\xa0\xd0\x3f\x75\x50\xd3\xf1\x57\x3c\xd3\x3d\x06\xe9\x0d\x2c\x91\x2f\x2d\xac\xda\x46\x34\x91\xe7\x75\xe8\x3a\xc8\xbd\xe2\x85\x92\x83\x44\x1b\xee\x44\x84\x67\xf3\x03\xc9\x46\xba\x46\x5b\x62\xee\x5b\xc1\x4d\x6d\xe3\xbd\x53\x44\x6b\xac\x39\x12\xaa\x2d\x54\xc2\xe7\xab\x56\x94\xa7\x2e\xf6\x27\xd4\xfc\x3b\xc3\x6a\xd9\xac\x50\x1f\x6b\x98\x22\xa4\xe3\x31\x20\xe4\x2b\xa1\x97\xe8\xb8\x27\x55\x66\xf9\x2d\xe7\x48\x9d\x6f\xc3\x34\xb9\x7f\x63\xc2\x34\xc2\x79\x4e\xbf\x73\x44\x1d\x86\xd2\x6d\xbe\xdd\x4b\xd0\xf7\x0f\x3d\x86\x57\x66\x49\x91\x6e\x8f\x87\xe1\xe9\xf9\x3d\x1b\x05\x37\xe1\xff\x80\x66\x9a\x1c\xdf\xe6\x1f\x93\xbd\xcb\x9b\x14\xee\xa1\x1d\x72\x49\xcd\xd3\x48\x49\x41\x80\x30\x06\xb5\x55\xb4\xcc\x28\x0e\x30\x46\xf0\x1c\x1a\xfb\xca\xbe\x2e\x0a\x9b\xa4\xd9\x9c\x97\x67\x0b\xa7\x2e\xf6\xb7\xd6\xbc\xd9\x26\x5f\xe3\x26\x16\x02\xc9\xe8\xbf\xaf\x6f\x46\x63\xa8\xad\x1a\x93\x35\x07\x86\x23\x06\xce\xea\xcb\xde\x5a\xa9\x7d\x99\x84\x12\x00\x72\xa3\x35\xe6\x9e\x5b\x42\xd3\x9e\xc3\x7c\x7e\x4d\x0d\x0a\x8a\x6a\x06\x7f\x72\xa3\xd0\xa2\x07\x88\xdc\x68\x2f\x75\x8d\xfc\x8b\xd5\x37\x08\x94\xad\x78\x9d\xeb\xed\x6c\x5e\x2f\x42\x03\xf6\xb3\xf4\xab\x84\x8a\x9f\x3f\x77\x26\x67\x61\xe4\xf6\xdb\xff\xb9\xc0\x74\x82\x78\xbb\xbb\x11\x08\x9c\xd9\x75\x88\x7e\x71\x69\x9e\xe5\xec\x57\x74\xe1\x55\x14\x75\x76\x09\x54\x30\x66\x3f\xe9\x4a\x58\xb7\x12\x2a\x09\xc3\xa1\x04\x6f\xb3\x97\xc2\x8b\x24\x4d\xc7\xf0\x67\x4c\xbf\x3a\xb2\xb1\xbe\x58\x51\x2e\x06\xce\xb8\xdf\x7c\x72\x09\xa3\xb8\xf6\x95\xa9\x2a\xa1\x8b\xd1\x49\xd6\xf0\x39\x99\xc0\x8d\x29\xc4\x96\x3d\xcc\x22\xe4\x94\x4f\xc2\x90\x3b\xec\x0f\xc2\xb6\x29\x12\xc5\x61\x2c\xb9\x21\x7a\xd7\x8e\x14\x9a\xf8\x4f\x84\x21\xf5\x44\xe0\xa6\x55\x86\xef\x35\xff\x17\x85\x02\x85\x82\x8d\xb1\x8a\xfd\x99\xd9\x79\x39\xca\x63\x8e\xaf\x06\x9b\x35\xc9\xe5\xd7\xc2\x39\x90\x21\x63\xb5\x93\xe0\xac\x05\x7f\x45\x22\x6c\x8c\xb5\x5b\x10\x0b\xea\x17\x8a\x38\xa1\x90\x2e\x44\x88\x0d\xee\x06\x2c\x0c\x46\xaf\xf3\xbd\x1a\x93\x87\x7d\x2d\xa6\x37\x50\x48\x27\x16\x0a\xe3\xb0\xa5\x32\x05\x76\x74\xcc\xdd\xf9\x93\x4b\x28\xb2\xee\xe4\xe2\x71\x05\x53\x98\xa0\x90\xd2\x8c\x6d\x7b\x71\xe6\x7d\xc0\xfc\xb0\x23\x3d\x78\x05\x97\x80\xbb\xb3\x22\x75\x77\x43\x5f\xa8\x42\x64\x09\x92\xc2\x39\x4a\xbf\x0a\x71\x90\x89\x93\xf3\x94\x89\x4b\x69\x5d\xcc\xd2\xb0\xc1\xa7\xb7\x08\x8e\x62\x5c\x38\xaf\x1d\x96\xe9\x70\xbe\x48\xfb\xaf\xa8\x2b\x0f\x6b\xad\x44\x13\x5b\x8b\x1e\xc7\x5f\xd2\x6e\xa6\xe2\xea\x84\x94\x8e\x05\x1d\x6d\xce\x83\x5c\x1e\xed\x14\xe0\x4c\x85\x7e\x45\xa7\xb1\x27\x41\xab\xe9\x66\x4c\x3d\x38\x12\x66\x3b\x7a\xd9\xdd\xee\x35\xb4\x4d\x9b\x55\x64\xaa\xe9\xae\xd2\x4f\x78\x4e\x73\x3e\x47\x1b\x10\x3a\xec\xe3\xad\xc9\x1f\x2d\xdf\x03\xa0\x72\x7c\x92\x9d\x3b\xcb\x79\xbd\x48\x4e\xe1\xa7\xf0\x77\xe8\xe5\xb5\x3f\x5a\xa0\x5d\xe4\xa3\x3f\x0f\xc4\xf3\x19\x55\xf4\xef\xbc\xe7\x90\x25\x14\x59\xf0\xbd\xfb\xde\xe4\x78\x76\x30\x3a\x6e\x6a\xbf\x97\x26\xe9\xf9\xe3\xb8\xa9\xa6\x42\xe4\x67\xb5\x1c\xcb\x12\x71\x4e\x1b\x26\xe5\x61\xa3\x71\x10\xdc\xbd\x49\xfc\xfb\x65\x7b\x95\x38\x08\xff\x7b\x05\x8b\x78\x51\x41\xdc\x42\xc7\x65\x78\x2c\x2b\x79\x74\xd9\x75\x9a\x58\xe9\x74\x16\x33\x96\xc7\xe6\xc9\xe8\xe2\xdd\x3b\xae\x29\xc3\xd2\x3d\x69\x1e\xda\x8c\x7c\x30\x4c\xe6\xb8\xf2\x99\x57\x2f\x83\x30\x72\xff\x17\x14\xf5\xf8\xa4\xfe\xc4\x85\x43\x7b\xd7\xf0\x29\xfd\xfd\xdb\xea\x7b\x44\x7b\x0f\xc3\xbe\x1c\x41\x75\x30\x79\x06\xda\x40\x19\x5b\x71\xde\x68\xf8\x4f\x05\x5b\xf4\xf0\x6c\x92\x1e\x1d\xd3\xff\x6f\x00\x00\x00\xff\xff\x8c\x40\x39\xdb\x2e\x28\x00\x00")

func _hardcodedDoerGoBytes() ([]byte, error) {
	return bindataRead(
		__hardcodedDoerGo,
		"../_hardcoded/doer.go",
	)
}

func _hardcodedDoerGo() (*asset, error) {
	bytes, err := _hardcodedDoerGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../_hardcoded/doer.go", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xec, 0x33, 0x38, 0xb2, 0x61, 0x45, 0x8d, 0xf8, 0xfd, 0xe4, 0x31, 0x4, 0x50, 0x4c, 0x3, 0x92, 0x88, 0xe5, 0x1, 0x77, 0xe9, 0xa3, 0x12, 0x72, 0x78, 0x52, 0xb0, 0xbf, 0xfc, 0xa1, 0x66, 0x54}}
	return a, nil
}

var __hardcodedMiddlewareGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x54\x5f\x6b\xe3\x46\x10\x7f\xb6\x3e\xc5\x74\x4b\xc8\xea\x70\xe4\x7b\x28\x14\x02\x7e\x28\xe9\xa5\x79\x39\x38\x2e\xa1\x2d\x94\xc2\x6d\x56\x23\x69\xb1\xbc\xab\xce\x8e\xac\x9a\xe0\xef\x5e\x66\x25\x39\x51\x48\xd3\xa7\x3e\x58\xde\x9d\x99\xdf\x6f\xfe\x6f\x67\xec\xce\xd4\x08\x11\xe9\x80\x94\x65\x6e\xdf\x05\x62\xd0\xd9\x4a\x55\x7b\x56\xd9\x4a\x79\xe4\x4d\xc3\xdc\xc9\x99\x7a\xcf\x6e\x8f\x9b\x12\x1f\xfb\x5a\x65\xd9\x4a\xd5\x8e\x9b\xfe\xb1\xb0\x61\xbf\xb9\x69\xf1\x80\xb4\xd9\x99\xe3\x01\xf1\xaa\x0e\x9b\xc3\x8f\x9b\x36\xd4\x35\x92\xca\xf2\x2c\xdb\x6c\xe0\x8b\xf1\xce\x7e\x76\x65\xd9\xe2\x60\x08\xa1\x0d\x75\x04\xe3\x8f\xd0\x89\x22\x16\x70\x1b\x08\x7c\x18\xd6\x30\xe0\x25\x21\xd8\xe0\xd9\xf9\x1e\x81\x1b\x0a\x83\xf3\x35\x70\x83\xa3\x31\xf4\x9d\x30\xca\x3d\xb2\xb1\x3b\x88\x01\xb8\x71\x11\xf6\xe6\x08\x96\x4c\x6c\x46\x5b\x0a\x16\x63\x2c\xb2\xaa\xf7\xf6\xb5\x7f\xdd\x80\x24\x56\xdc\x19\x5f\xb6\x48\xf9\xe2\x06\x4f\xd9\x8a\x90\x7b\xf2\x0b\xf1\x6d\xef\xad\x16\x32\x3d\x8c\xf2\xaf\x18\xbb\xe0\x23\xfe\x46\x8e\x91\xd6\x40\xf0\x61\x92\xff\xd5\x63\xe4\x5c\x78\x56\x25\x56\x48\x90\x60\xa3\x60\x95\x92\xf8\x44\x04\xd7\x5b\x20\xb4\xe1\x80\xa4\x73\x51\xb8\x0a\xce\xba\xed\x16\xbc\x6b\x47\xc0\x14\x8c\x1c\x4f\xf2\x39\x18\x02\xa4\xf4\x0b\x94\x89\x24\x0e\x8e\x6d\x03\x2f\x99\xe7\x73\xa1\xf9\xd8\xe1\xe4\xda\x9a\x28\x45\x23\xe7\xeb\xeb\xc4\x2c\x34\x5b\xa8\xf6\x5c\x7c\x12\xb2\x4a\xcf\xb0\xfc\x6c\x9e\xbc\xbc\xb4\x9e\x4d\x44\x54\x62\x65\xfa\x96\xff\x85\x4c\xf5\x7e\xe7\xc3\xe0\xa7\xbe\x5d\x7c\x7f\x80\x50\x81\xc4\x03\x17\x0f\x6a\x7d\x66\x7a\x3e\xe5\x63\x92\xf2\x1d\xe7\xa7\xb8\xa5\xb0\xbf\x09\x9e\xf1\x6f\xd6\x54\xcc\xa7\x3c\x1f\x7d\xfc\xac\x55\x82\xaa\x75\x8a\x60\xc2\x7c\x7e\x52\x48\xa4\xae\x25\xf6\x35\xa8\x34\x25\x4c\xc6\xa2\xba\x9e\xb2\xd7\x69\x8c\x8b\x7b\xd1\xe8\x3c\x3f\xe5\xe7\xc6\x2c\x2a\x70\x4a\x8d\x69\x8a\x7b\x59\x91\xbb\x87\x87\x2f\x7a\x58\x83\x68\x4e\x79\x76\x4a\x73\x1d\xd9\x70\x1f\x97\x93\x00\x03\x99\x2e\x82\x01\x9a\xc4\x30\x24\x79\x96\x32\x7f\x13\x11\x99\x7a\xcb\xd2\xa4\x37\x26\x2b\x5b\x8d\x18\x70\x9e\xc5\x6d\x1a\x68\x1d\xe1\xc3\x5b\x54\x39\xa4\xff\x3b\x34\x25\x92\xb6\xa1\x44\x81\xa5\xfe\xc7\x62\xe2\xd9\x82\xc8\x45\xb0\xc4\x16\xaf\xa1\x73\x96\xbf\x22\x45\x17\xfc\x57\xe3\x6b\x84\x12\xad\x2b\x31\xc2\xd0\x20\x37\x48\xc0\x01\x8c\xb5\xd8\x31\x18\x38\x8c\x86\xc5\x98\xea\x02\x96\x56\x60\xd2\x4f\x5d\xc8\xe1\x31\x84\x36\x79\xb8\x69\x1d\x7a\x9e\x00\x37\x0d\xda\xdd\x8b\xc7\xc2\xca\x3d\xa6\xad\xb6\xc9\xee\xd9\x4f\xaa\xc5\x7b\xe0\x57\x9b\xbe\x06\xf2\xf5\x22\xb0\xff\x71\xf7\xe7\x6c\x65\xd1\x8b\xb1\xac\xc5\x2f\xc8\x5a\xfd\x7e\x35\x86\x7c\x35\x05\xa2\x64\xcc\xfe\x6b\xe0\x7f\x2a\xcb\xf9\xa6\xc6\x32\x5c\x4d\x0e\xd4\x7a\x2e\x88\xf0\xb8\x0a\xbe\x23\x5f\xcf\xb5\x9e\x56\x7f\x58\x34\xf7\x87\x8f\x1f\xf3\x17\x52\xfd\xc7\x9f\x8f\x47\x46\x2d\xbb\x7b\xdf\x91\xf3\x5c\xe9\x6f\x4f\x6a\x8f\x31\x9a\x5a\xb6\x46\x2d\xeb\x0e\x97\x17\xf1\x12\x7c\xe0\xa9\xf3\x58\xae\xa1\x6b\x51\x9e\x8b\xbe\xab\xc9\x94\xa8\x4e\xdf\x9e\x83\xca\x93\xaf\xf3\x2b\x76\x7a\x67\xa7\xfe\x09\x00\x00\xff\xff\xa1\x73\xce\xd9\x95\x06\x00\x00")

func _hardcodedMiddlewareGoBytes() ([]byte, error) {
	return bindataRead(
		__hardcodedMiddlewareGo,
		"../_hardcoded/middleware.go",
	)
}

func _hardcodedMiddlewareGo() (*asset, error) {
	bytes, err := _hardcodedMiddlewareGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../_hardcoded/middleware.go", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xcb, 0x1, 0xb6, 0x9d, 0x16, 0xe7, 0x46, 0xa2, 0x49, 0x7d, 0xf6, 0xc, 0x20, 0x3a, 0xd4, 0x73, 0x64, 0xea, 0xcc, 0xe3, 0x1f, 0x62, 0xec, 0xc7, 0x5b, 0x68, 0x93, 0x2d, 0xaf, 0x96, 0x19, 0x61}}
	return a, nil
}

var __hardcodedTracingGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x54\xdf\x6f\xdb\x36\x10\x7e\xb6\xfe\x8a\x83\x81\x15\xd2\xa0\x90\x68\x3b\x64\x45\x86\x3c\xac\xf5\x8a\xf8\x21\x43\xd0\x64\xe8\xc3\x30\x14\x34\x79\x96\x88\x48\xa4\x46\x9e\x6c\x19\x81\xff\xf7\xe1\x28\xf9\x47\x86\x26\xc0\xf6\x62\x8b\xc7\xbb\xef\x3e\xde\xf7\x91\x9d\xd2\x8f\xaa\x42\x88\x18\x36\x18\x28\x28\x6d\x5d\x95\x65\xb6\xed\x7c\x20\xc8\xb3\xd9\x1c\x9d\xf6\xc6\xba\x4a\xae\xac\x53\x61\x37\x3f\x0f\xd5\x38\xf0\x7a\xdd\x12\xff\x39\x24\x59\x13\x75\xf3\x2c\x9b\xcd\x2b\x4b\x75\xbf\x12\xda\xb7\xf2\x53\x83\x1b\x0c\xf2\x51\xed\x36\x88\x17\x95\x97\x9b\x9f\x65\xe3\xab\x0a\x03\x57\x55\x5e\xf8\x0e\x1d\x61\x83\x2d\x52\xd8\x09\xeb\xa5\xf6\x8e\x82\x5d\x49\xeb\x22\x85\xbe\x45\x47\x8a\xac\x77\xf2\x0c\xb4\xf2\xc1\x36\x8d\x92\x6d\x3f\x48\x4f\xd8\xb4\xfd\xf0\x12\x1a\x6f\xcb\x2e\xf8\x4e\x55\x09\xe6\xd5\x3c\x1e\x01\xce\xb3\x22\xcb\xa4\x84\x43\x91\x0f\x40\x1e\xfa\x88\x22\xdb\xa8\x70\x1e\x3e\x83\x15\x0f\x38\xd0\xad\xea\xee\x4e\xbb\xd7\xcf\xf7\x19\xfa\x93\x77\x84\x03\x3d\xed\x41\x4a\x48\xcd\x3a\x15\xd0\x11\xd4\xa8\x0c\x86\xd4\xf6\xb6\x1f\xee\x93\x1e\xb7\xd6\x98\x06\xb7\x2a\x20\x04\xa4\x3e\xb8\x08\xed\x29\x44\xb5\x22\x88\xb5\xef\x1b\x03\x2b\x04\x45\xa4\x74\x8d\x86\xa9\x2a\x38\x9b\xcf\x24\xae\x60\xe8\x25\x81\xf1\x18\x81\xb6\x1e\xa8\xb6\xae\x8a\x57\x10\x49\x05\x8a\x10\x3b\xe5\x62\x09\xca\x19\x50\xc6\x8c\xeb\x71\x1c\x60\xdd\xda\x33\x2c\xd5\x4c\xe4\xef\x1e\x23\x5d\xc4\x0e\xb5\x5d\x5b\x0d\xa3\x94\x09\xfd\x8b\xad\x6a\x02\xe7\xb7\xb0\x45\xf0\xae\xd9\x41\xec\xbb\xe4\x24\x4e\xb2\xae\x82\xe5\x22\x82\x75\x09\x68\xed\x43\xab\x68\x3c\xc5\x42\x91\x32\xbe\x02\x1c\x3a\xd4\x14\x45\xb6\xee\x9d\xfe\xde\x1c\x72\x3e\x8b\xd5\xf8\xbb\x6a\x11\x22\x05\xeb\xaa\x02\x38\x39\x67\xe7\x89\x1b\xe5\x4c\x83\xa1\x80\xf3\x15\x3c\x65\x33\x4f\xec\x10\xb8\xba\x86\xc9\x2c\xe2\xfb\x98\xe5\x71\xff\xab\xa5\xfa\x24\x65\xcc\x4f\xa2\x17\x45\x36\x1b\xe5\x98\x3a\xc3\xeb\xbd\x0f\xc9\x23\x87\x67\x44\x3f\x73\x7d\x02\x09\xdb\xb1\xee\x0b\xc6\xce\xbb\x88\x5f\x83\x25\x0c\x25\x04\xf8\x71\x8a\xa7\xb1\x17\x09\x70\x26\xe5\x81\x27\xd4\x2a\x02\x0e\xac\x13\xb1\xf6\x35\x26\xe1\x44\x52\xa1\xeb\x09\x2c\x81\x75\x93\x76\x9a\x86\x7f\xeb\xc6\x68\x91\xe7\x92\x94\x16\xf7\x9d\x72\x9f\x83\x6f\x27\x9b\xe6\x41\x1c\xbe\xf8\xd4\xb3\xd9\xba\x25\x71\x17\xac\xa3\xc6\xe5\x31\x45\xec\x1a\xa2\x66\x80\x98\x8a\x8f\xe9\xbf\x40\xd4\xe2\x46\xc5\xe4\xfa\xe5\x22\x9f\x98\xcf\x98\xdd\x72\x51\x8e\xfd\x96\x8b\x54\xa9\x53\x29\x27\x89\xfb\xa4\x69\x5e\x94\x1c\x3d\xd6\x1e\xc3\x09\x42\x4a\x30\x93\x61\xb4\x77\xfc\x6e\x45\xa8\x71\x98\xfc\x10\xd3\x5d\xb5\x8e\x2e\x7f\x62\xbb\x95\x10\x3d\x9f\x15\xa8\xf6\x11\x79\x91\x1c\xa7\x7d\x08\xd8\x28\x62\x53\x36\xbe\x8a\xc9\xf7\x89\x53\x84\xad\x0f\x8f\x31\x75\xb2\x6b\x68\xd0\xe5\x13\xd7\x02\xae\xaf\xe1\xfd\x3b\x78\xf3\x26\x45\xc7\x93\xa4\xe0\xdb\x4b\x78\xe2\x0b\xfd\xec\x4d\x99\x1c\x7e\xc5\xbb\xab\x1d\x21\xe4\xef\xdf\x5d\xe8\x5a\x05\x26\x5b\x94\xf0\x61\x8a\xbe\xbd\x3c\x45\x47\x0a\x89\x0c\xc3\x83\x35\x23\x91\xd9\x44\xe1\x63\x2c\xe1\x1b\xcf\xac\xc6\x41\x2c\x50\x7b\x83\xd3\x68\x0e\x1c\xc7\xf4\xe9\x52\xbe\x24\xa5\xf8\xd5\x98\xc3\x6a\x9e\x2a\xbf\x59\x33\x2f\xc7\xda\x24\xf2\x7d\xc7\x2a\xaf\xf3\xf9\x0f\x66\x5e\xc2\xf8\xf6\x8b\x8f\xb6\xfa\xcd\x19\xab\x9c\xf8\x23\xcd\x37\x3f\xb2\xfa\xf3\xc3\xd5\x5f\x45\x31\x35\x1f\x07\xf3\x32\xd5\x69\x70\xff\x9d\x29\x17\xfe\x3f\xa2\x07\x4a\x07\x8e\xfb\xec\xf0\x53\x8b\xf4\xc6\xdc\x3c\x3c\xdc\xe5\x61\x5b\x42\xe0\x84\x3d\xa7\xed\xb3\x7d\xf6\x4f\x00\x00\x00\xff\xff\x17\x0a\x14\xd8\x20\x07\x00\x00")

func _hardcodedTracingGoBytes() ([]byte, error) {
	return bindataRead(
		__hardcodedTracingGo,
		"../_hardcoded/tracing.go",
	)
}

func _hardcodedTracingGo() (*asset, error) {
	bytes, err := _hardcodedTracingGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../_hardcoded/tracing.go", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x4f, 0xa8, 0xd2, 0xb5, 0x8e, 0x1b, 0x3e, 0x4a, 0x4c, 0xb1, 0x93, 0x2a, 0x36, 0x47, 0x9c, 0x64, 0xef, 0xfa, 0xca, 0x3f, 0x4, 0xc7, 0xa5, 0xb0, 0x7e, 0x87, 0x2d, 0x5b, 0x28, 0x38, 0xa4, 0x60}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"../_hardcoded/doer.go":       _hardcodedDoerGo,
	"../_hardcoded/middleware.go": _hardcodedMiddlewareGo,
	"../_hardcoded/tracing.go":    _hardcodedTracingGo,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"..": {nil, map[string]*bintree{
		"_hardcoded": {nil, map[string]*bintree{
			"doer.go":       {_hardcodedDoerGo, map[string]*bintree{}},
			"middleware.go": {_hardcodedMiddlewareGo, map[string]*bintree{}},
			"tracing.go":    {_hardcodedTracingGo, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
