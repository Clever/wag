// Code generated by go-bindata. DO NOT EDIT.
// sources:
// ../_hardcoded/doer.go (10.397kB)
// ../_hardcoded/middleware.go (1.683kB)
// ../_hardcoded/tracing.go (6.966kB)

package hardcoded

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __hardcodedDoerGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x3a\x7f\x6f\x1b\x37\xb2\x7f\x4b\x9f\x62\x22\xe0\x2e\xbb\x8e\xbc\x92\x73\xe7\xf6\xa0\x3e\x1f\xd0\xda\xee\x6b\xf1\xd2\x24\xa8\xdc\xd7\x00\x41\x70\xa5\x76\x47\x12\x1b\x8a\x54\x49\xae\x64\xc1\xe7\xef\xfe\x30\x43\xee\x6a\x57\x5a\x2b\xb9\xbb\xd7\x87\x77\xfe\x43\xd2\x2e\x67\x86\x33\xc3\xf9\x4d\xaf\x45\xfe\x51\x2c\x10\x72\x25\x51\xfb\x7e\x5f\xae\xd6\xc6\x7a\x48\xfa\xbd\xc1\x6c\xe7\xd1\x0d\xfa\xbd\x41\x6e\xb4\xc7\x7b\x4f\x3f\x51\xe7\xa6\x90\x7a\x31\xfa\xd5\x19\xcd\x2f\xac\x35\x96\xa1\xa4\x19\x49\x53\x7a\xa9\xe8\x41\x99\x05\x7d\xad\x84\x5f\x8e\xac\xd0\x05\x3d\x68\xf4\xf1\x6b\xb4\xf4\x7e\x4d\xbf\xdd\x4e\xe7\xf4\xed\xe5\x0a\x07\xfd\x7e\x6f\xb0\x90\x7e\x59\xce\xb2\xdc\xac\x46\x62\x8e\xf7\xa3\xe5\xce\x79\x2b\xef\xcf\x17\xa6\xfa\x39\x68\x43\x15\x46\x9b\x8d\xd0\x4b\x59\xe0\x08\x37\xa8\xbd\x33\xa5\xcd\x71\xd0\x4f\xfb\xfd\xd1\x08\x0a\x83\x16\xa4\x03\xa1\x41\x6a\x8f\x76\x2e\x72\x84\xb9\xb1\x30\x28\x8c\xd4\x8b\x01\x10\x27\x60\xf1\xb7\x12\x9d\x77\xb0\x36\xce\xc9\x99\xda\xc1\x56\xfa\x25\x6c\xad\x58\xaf\xa5\x5e\xf4\xfd\x6e\x8d\x91\x54\x4d\xe4\xa1\xdf\xbb\x31\x49\x0e\x67\x44\x21\xbb\x66\xf5\x0d\xc1\xc6\xe7\x1f\x03\xc5\x14\x92\xea\xd9\xad\x8d\x76\x38\x04\x56\x58\xda\x7f\xec\x07\xaa\x66\xfd\x5a\xac\xf0\xda\xdf\x83\xf3\xb6\xcc\xfd\xc3\x23\xf3\x3d\x13\x0e\x23\x8d\xef\x84\x2e\x14\x5a\x58\xa3\x9d\x1b\xbb\x72\xe0\x97\xc8\xeb\x2d\xde\x03\x35\x7a\x7d\x43\x7c\xee\x89\xcd\x4b\x9d\x43\x52\xd4\x4b\x29\xfc\x0b\x6c\x93\xd4\x16\x7d\x69\x35\xe4\xd9\x8d\x49\x6c\xda\xef\x8d\x46\x50\xbd\xf2\xf7\x8c\x45\x0b\xd9\x75\x30\x9a\x24\x1d\x42\x3e\x84\x20\x71\x00\xb5\xbb\x4a\x24\x7a\x90\xe8\xe0\x72\xfc\xae\x7d\x10\x41\x1a\x86\x6d\x88\x43\xbb\x17\xb0\xff\xa3\x13\x61\x7e\xec\xee\xad\x51\x32\xdf\xc1\x8f\xfb\xdf\x71\xbf\xc6\x1b\x28\x70\x2e\x35\x3a\x10\x81\x32\xac\xf9\x75\x16\x36\x6b\x02\xb6\x4e\x79\x34\x82\x6f\x44\xfe\xd1\xcc\xe7\x2e\x0a\x1a\x8e\x40\x97\xab\x19\x5a\x10\xba\x00\x2f\x57\x52\x2f\xc0\xcc\x23\x61\xe1\x3d\xae\xd6\xde\x65\xfd\x5e\x85\x9a\xa4\xf0\xfe\x03\x99\x79\x76\x53\x5a\xe1\xa5\xd1\x4c\x99\x77\x05\x8b\x39\xca\x0d\x06\xba\x4d\x45\x0c\x41\x38\xd8\xa2\x52\xf4\x4d\x8b\x16\x5d\xa9\x3c\x98\x39\x63\x57\xae\x14\xcf\xf1\xb9\x83\x5f\x6e\xcc\x2f\xb0\x42\xbf\x34\x45\xd6\xef\x31\xf5\xa4\x75\xb4\x43\x78\xe2\x64\x67\xc6\xa8\xa8\xb3\xa9\xd4\x0b\x85\xa7\x34\xe7\x97\xc2\xd7\xa7\x27\x2a\x6e\xc1\xe8\x1c\x83\x36\x8f\x49\xb4\xcc\xbb\x43\xa1\xc2\xc3\xce\x94\xe0\x96\xa6\x54\x45\xbd\x0d\xd6\xb4\x2f\x1c\xe6\x46\x17\x20\xe6\x9e\xfc\xd0\xc3\x5c\x48\xe5\xb2\x68\xdf\x47\xfb\xa5\xf0\xb4\xe6\x1b\x56\x7c\xb0\xf2\x70\x01\x67\xc0\x6f\xa6\xbc\xdb\x63\xd3\x8a\x60\x2b\x95\x8a\x9c\x69\xa3\xcf\xdf\xbe\x99\xde\x0d\xc3\xaf\xaf\xef\xae\xbf\xdb\x47\x11\x16\xe6\xf2\xdd\xbb\x8c\x50\xef\xde\xdc\xbc\x99\xc0\xf7\x9e\xac\xd5\x81\x36\x1e\xf2\xd2\x5a\xd4\x5e\xed\x2a\x6b\xd1\xbb\x70\x08\x95\x3a\xb0\x80\xd9\xee\x89\xc3\x3d\x21\x70\x38\x6d\x8b\xbf\xc1\xc1\x89\x5b\x74\xeb\xae\x63\x6f\x1e\x3d\xe9\x44\xce\xf9\xed\xb3\x2b\xd0\x52\xc1\xdf\xff\x4e\x12\x65\x3f\xb0\x31\xc1\xd5\x15\x0c\x48\xe0\x41\xd7\x7b\x12\x9f\x16\xfa\xbd\x1e\xed\x95\x4d\xbd\xf0\xa5\xbb\x36\x05\xc2\x7f\xc0\xe5\x78\x4c\xc4\x2b\x8d\xcf\x85\x72\xd8\xef\x3d\xd6\x47\xe0\x6d\x89\x51\xcd\xb7\xf7\x6b\xa3\x51\x7b\x29\x54\xa7\xf5\x69\xc0\x3d\x44\xcb\x89\x83\xd5\x3d\x81\x7f\xda\xf4\xe6\x72\x43\x81\x33\xbe\xe5\xc0\xdf\xd8\x45\x51\x34\xc8\x2d\x0a\x47\x1e\xbe\x15\xd2\xb3\x7d\x38\x0e\xd2\xe8\xb7\x88\xba\x3e\xf8\x09\x5c\x8c\xc7\x43\x78\x49\x1f\x7f\xa6\x8f\xbf\xd0\x07\x05\x88\x8b\x2f\xc6\x63\x58\x49\xa5\x64\xb0\x62\x07\x2f\x46\xe7\x50\xae\xc1\x1b\xb8\xfc\x03\xfc\x2a\xbd\x47\x5b\x1d\x6d\xb7\x14\x9f\x61\xd0\x30\xb9\x82\x95\xf8\x88\xc9\xc1\xf2\x10\x2e\xd3\x7e\x4f\xe3\x3d\x43\x5c\x8c\xc7\x95\x91\xff\xb0\xe7\xa8\xdf\xb3\xba\xa0\x65\xca\xd6\xd9\x6b\xdc\x26\xd5\x8f\x29\x27\xd4\x84\x11\x5e\x9b\x6d\x92\x66\x3f\x69\x79\xff\x5a\x68\x93\xa4\x69\xda\xef\x21\x61\x8d\xb3\xf1\x25\x8c\x46\x2c\xd6\x25\xa5\xaa\x1c\xb5\x8f\x72\xf5\x7b\x94\x70\x65\x24\xbe\xe0\xb8\x5e\x59\xc4\x7b\xf9\x01\xae\x80\x59\x7b\x01\x2d\xa6\x93\x24\xb1\xba\xc8\xbe\x55\x46\xf8\x2f\xfe\x9c\xa4\x67\x2f\xd3\xf3\x8b\xf4\x0c\xcf\xe6\xf1\x0d\x21\xd1\xfe\x41\xb0\xb3\x2b\x78\xd9\xb4\x2a\x8b\xfe\xff\xad\xef\x3e\x75\xc0\xff\xfe\x0e\xfc\xda\x74\x67\x8d\xe0\xa4\x94\x20\x35\x6e\x62\xe2\xdf\x91\x43\xd5\xb9\x23\x66\xe1\x36\x81\xd3\x8e\x4b\xe1\x60\xb5\xf6\x3b\x70\x4a\xe6\x58\x29\xb7\x45\xe1\x9f\xcc\x02\xed\xb0\x2f\xd4\x56\xec\x1a\xf1\x82\xe4\x7f\x62\xb7\x7f\x34\xe1\x36\x78\x08\x6a\xad\xca\x42\x56\x50\x2c\xa1\xda\x6a\xf8\x59\xfa\x65\x53\x47\xb5\x36\x40\xe3\x16\x62\xa9\x1e\xcc\xd8\x6c\xd0\x5a\x59\xc4\xba\x22\x54\xf8\x60\x66\xbf\x62\xee\x9f\xbb\xba\x18\xab\xcb\x20\x96\xe8\x80\x7c\x92\xfb\xfb\x8a\x68\x55\xd2\x0d\xe1\x89\x92\x2b\x3d\x84\x6c\x96\x8b\x71\x85\xe8\xff\xb7\x50\x25\x12\xe5\x61\x4b\xce\x87\xc7\x16\x65\xae\x18\xab\xea\xf5\xac\xae\x05\xff\x37\xea\xd7\x6a\x8b\x21\x98\x8f\x1c\x96\xf6\xd5\x6a\x16\x98\x6b\xf3\x95\x66\x49\x53\x4c\x76\xb4\x67\xe6\x63\xe5\x15\xb5\x2e\xae\xa0\xc8\x1a\xcf\xec\x24\x75\x66\xa1\x7d\xf6\x6b\xd9\xde\x30\xfb\xbd\x8d\xb0\x5d\x3e\x1e\x16\x6a\x3f\xef\x73\xcd\x37\x15\x1b\x6c\x15\x46\x33\x53\x50\x8e\x82\x9c\x5a\x82\x2d\xc2\x92\x01\x4c\xd8\x2c\x83\x37\x7e\x89\x76\x2b\xc3\x1a\x47\x41\x06\x10\xca\xa2\x28\xc8\x7c\x44\xc1\x74\xb9\xab\x28\xe7\x73\xb4\x60\x74\x1d\xdd\x8a\xd6\x56\x8c\x4e\x75\x57\x06\x53\x44\x46\x23\x86\x27\xa3\x91\xf3\x24\xce\x06\xed\x5c\x99\x2d\x37\x66\x8c\x21\x8d\x76\xa3\x97\x7f\x1a\x7f\x39\xfe\xcb\x97\x5f\x8c\x68\x2f\xa9\x17\xe7\xc4\xf1\xb9\x99\x9f\x13\xee\x79\xa4\x7d\x4e\x89\xd7\x94\xfe\x7c\x65\x0a\x39\xa7\xd8\x50\xaf\x38\x2f\x7c\xd4\xc5\xac\x9c\xc3\xfb\x0f\xd4\x98\xf2\x19\xd8\xec\x1b\x12\x3e\xc6\x3b\x3a\x8d\xb6\xc2\x7a\xbd\x59\x39\x0f\x91\xf2\x0a\x42\x73\x9a\xfd\x88\xa2\xf8\x5a\xa9\x24\xe0\x52\xfe\x68\x47\x4d\xa2\x52\x19\xad\x96\x8a\xb1\xfb\x3d\x3a\xc9\xc7\x7e\xc8\x64\x55\xdd\x4b\x69\xef\x2b\x8e\x7e\x5f\x55\xef\x5e\xbc\x60\xfc\x4e\xd6\x7a\xb6\xb0\x84\x13\xf9\x78\x6d\xd6\xd7\xca\x38\xb4\x09\xf7\xd9\x94\x69\xbf\x61\xf5\x27\xb3\x72\xce\x79\xad\x17\x69\x5c\x81\x2d\x22\x0b\x1c\x9d\x2b\x81\x8a\xac\xa0\x56\x2b\x74\x57\x61\xd3\xc8\xd9\xd5\x15\x28\xd4\x49\x65\x7a\x29\x85\xfc\x67\x4d\xe3\x8b\x99\x26\x64\x16\xa6\x97\x06\x1e\x67\x16\xc5\xc7\xb8\xd7\x68\x04\xcc\x61\xd5\x78\xb0\x4d\x46\x73\x9b\xef\x5f\xc8\x90\x19\xb5\x54\x15\x13\x6e\x7d\xa0\x4c\xb7\x66\x49\x32\x26\x47\x06\xcf\xf4\x43\x9d\xad\x10\xd7\x35\xa7\xef\xa3\x04\x1f\xd2\x76\x2e\x8f\x4c\xc6\xb0\x9c\x4b\x9b\x97\xd2\x7f\x43\xbc\xa2\xe5\x06\x51\xae\xd6\x0a\x57\xd4\xfe\x87\x58\x17\x20\x60\x16\x40\x60\x4d\x1d\x99\xd5\x9c\xd4\xa7\xe8\xa1\xc0\x59\xb9\x20\x27\xa1\xd3\xa3\x6f\xb3\x46\x2b\x3c\xb6\x90\xa5\x06\x01\x2b\xca\x81\xdb\x25\x5a\xa4\x9e\x83\x1d\xc0\x68\xb5\x03\x65\x16\x0d\x56\x80\x6d\x34\xd4\x7a\x0c\x43\x1a\x99\x29\x93\x7f\xe4\x0a\xa1\xae\x2e\xe6\xd6\xac\x60\x61\x28\xf3\xf9\xa5\x35\xe5\x62\x19\xf3\x5e\x87\x48\xa7\x7a\xde\xc0\x7f\xf8\xe3\xc6\xad\x17\x09\xbc\x16\x2b\x24\x4c\xa9\x17\xec\x9e\xca\x2c\x16\x68\x03\x60\xf8\x9d\xfd\x97\xd8\x6d\x10\x5f\xf1\x03\x29\x94\x5c\x26\x62\x4f\xa7\xb7\x6f\x74\x8e\xe0\x76\x3a\xcf\xe8\x17\xab\xfb\xbb\x30\x78\x99\x4e\x6f\x6f\x37\x94\x41\xa4\x03\x5c\x51\x65\xc7\xa5\xce\x7e\x42\x03\x1b\x29\xc0\xa1\xdd\xa0\x3d\x77\x04\x18\xe6\x31\x19\x17\x50\xe8\x72\x2b\x67\xa1\x6e\x26\x25\xb3\xc2\xa8\x20\x10\xd5\xe6\x51\x13\x87\xbb\xed\xd5\x70\x47\xcb\x27\xfe\x82\xd8\xf0\xcb\xaf\xce\xe8\xc9\x80\x88\x0d\x7e\xe9\xf7\x58\x23\x9f\x8d\xa5\xc5\x8a\xb1\x62\x22\xb9\x36\xa5\xf6\x5d\x58\x32\xbc\x8e\x58\xb6\x01\x4d\xd8\xb7\x14\x7d\x9e\xc4\x3d\xc4\xc6\x1a\xba\xc6\x7d\x1b\x0a\x68\xb1\x38\x66\xbd\x03\x77\x0f\x4d\x04\xbe\x77\xd7\x2d\x63\x7a\xb3\x46\xdd\x24\xc0\x75\x47\x4d\x40\x76\x40\xb3\x02\x8c\x52\x52\x2f\x98\xad\x6f\x85\x54\xa5\xc5\x53\x0a\x38\x86\x3e\x26\xa2\x14\xb9\x79\x93\xd8\x29\x22\x2d\xe8\xa7\x88\x4d\xcb\x3c\x47\xe7\x3e\x93\x58\x84\x3e\x24\x36\x5d\x1a\xeb\xa3\x16\xb0\xf8\x94\x78\x6d\xe8\x23\x5a\x0d\x86\x3e\xad\xaa\x27\x18\xba\x5b\x52\xa6\x7c\x6b\x8c\xfa\x11\xa9\x58\x23\xa6\x9e\x26\x72\x0c\x7d\x44\x4f\xae\xd0\x94\xfe\x33\x99\x8a\xd0\x44\xe4\x3a\x74\x3b\xd7\x46\xc7\xbe\xe7\xf6\x1e\xf3\x92\xb2\x7a\x30\xee\x36\x91\xfc\x34\x34\x11\x7c\x25\x3c\xea\x7c\x77\x67\xbc\x50\x3f\xa0\xd0\xa7\x8d\x5b\x35\xa0\xff\xb6\x42\x41\x86\x19\x32\x00\x97\x85\xca\x2c\x38\x44\x24\xaa\x2b\xb4\x0d\xe1\x28\x96\x50\x8e\x1b\x8d\xa0\xa7\xb2\xef\xf5\xdc\xdc\x24\x98\x51\x70\x18\xc2\x4a\xac\xdf\x87\x30\xf0\xa1\x9e\xfc\x3d\x3c\x06\xd8\x5e\xdb\xb9\x27\x5d\xee\x8c\x59\x33\x5c\x0c\x23\x5e\xc3\xad\x3b\xb1\x08\x6f\x1f\x28\x5a\x58\x0d\x87\x3e\x46\x8d\x58\x7b\x98\x0a\xb5\xd3\x95\x27\x6d\xd4\xae\xe0\x50\xe1\x77\x39\xf1\xe4\x50\xd0\x63\x98\x6e\xf4\xb6\xfb\x4e\x3a\xd1\x5b\x30\xa7\xc8\x54\x7e\x72\x8a\x4c\x84\xe9\x22\x73\xe0\xb2\x93\x2e\x61\xda\x30\x9d\x54\x5a\x4c\x74\xab\xe4\x04\x13\x1d\x6e\x3a\x39\x44\x3f\x86\xe9\xa4\x14\x1d\xf4\x14\x23\x11\xa6\x42\xff\x94\x6b\x4e\x00\xb3\x4f\x38\x7b\x45\x4a\x1d\xb8\xf0\xb1\x85\x62\x76\xe8\xe6\x01\xf7\x31\x5c\xc9\x34\xbb\xba\xe3\xb2\x27\x05\xa9\xa5\x4f\xd2\x38\x79\x7f\x8b\x56\x9a\x42\xe6\x3c\x88\x53\x66\x11\x46\xf3\x5a\xa8\x76\xe5\x45\x25\x9c\x70\x4e\x3a\xae\xda\x1c\x7a\x5f\x15\x40\x15\x98\x5f\x5a\x74\x4b\xa3\x0a\xc7\x45\x5a\xa9\x0b\xb4\xce\x0b\x5d\xf0\x14\x62\xbd\x56\x32\x0f\x53\x81\x19\x2e\xc5\x46\x1a\x9b\x31\xfa\x4f\x7a\x6e\xac\x2f\xb5\xf0\xa8\x76\xc3\x66\xb1\x53\x18\x74\xfa\xb9\x8f\xdd\x14\x2c\x2c\x0a\x0f\x5b\xb1\x23\x56\xf0\x7e\x1d\xea\x66\xe9\x98\x4a\x21\xbc\x18\x82\x33\xd4\x82\x59\x74\xc6\x7a\xae\x3d\x4b\xab\xf9\xda\x40\x83\xf4\x0e\x5c\xb9\xe6\xab\x37\x6a\x31\x66\xd6\x88\x22\x17\xee\x48\x8c\x15\xd5\xc7\xb9\xe3\x52\x8b\x2f\x0a\x8e\xeb\x2d\x48\xa6\xd3\xdb\x34\xb0\x3f\xc5\x70\x9f\xe0\x26\xa3\xd1\x89\xab\x35\xe9\x5c\x89\x6e\x74\xf9\x45\x56\x17\x92\xb1\x14\xa4\x06\x83\x4e\x2b\x1c\x48\x2f\xe2\x4c\xbd\x45\xb1\xaa\x6e\x71\x26\x57\x95\x5e\x78\x5c\xd8\x5c\xe3\x5a\xbf\x0b\x29\x9b\x7a\x61\x3d\x2f\x2b\xe9\x3c\x6a\x0e\xd8\x96\x89\x69\xf4\xd9\x2b\x7e\x99\x0c\x7c\xbe\x1e\x0c\x61\x70\xf1\xf2\xcb\x6c\x9c\x8d\xb3\x8b\xc9\x78\xf0\x44\xcb\xb6\x16\x5a\xe6\x09\x75\x32\xdc\x5e\xf4\x7b\xbd\x85\x61\xd9\xb3\x29\xa9\x28\xd9\x6f\xd3\xc5\x4f\x1a\xe0\x1b\xa2\x92\xfa\x7e\x46\xb6\x39\xdc\xa0\xdd\xc1\xc5\x18\xaa\xe1\xed\x0c\x73\x51\xc6\xc6\x88\xa8\xa1\x95\xf7\xf5\xd1\x08\x8b\x74\xa4\x02\x2e\xc6\xe7\xd5\x6c\x95\xa9\x45\x1f\x86\xad\xd4\x85\xd9\x66\x70\xb7\x94\x0e\x14\xfa\xe7\x0e\x4a\x3a\xfe\x15\x0f\x84\xbb\x48\x7a\x03\x0b\xe4\x1b\x0f\xab\x76\x91\x9a\xc8\xf3\x32\xb4\x2c\xe4\x65\xf1\x36\xca\x41\xa2\x0d\xb7\x31\xc2\xb3\xf9\x81\x64\x23\x5d\xa3\x9d\x63\xee\x6b\xc6\x4d\x69\xe3\xa5\x55\xa4\x56\x59\x73\x04\x54\x3b\x58\x09\x9f\x2f\x6b\x56\x9e\xbb\xd8\xdc\x20\x08\xe5\x0c\xab\x65\xbb\x44\xdd\xd5\x6d\x45\x92\x8e\x67\x88\x90\x2f\x85\x5e\xa0\xe3\x86\x56\x99\xc5\xb7\x9c\x4e\x75\xbe\x0b\xa3\xe8\xf6\x75\x0b\xc3\x08\xe7\x39\x5b\x4f\x11\x75\x98\x68\xd7\xd9\xf9\x20\x9f\x3f\x3c\xb6\x10\x5e\x99\x05\x85\xbd\x03\x1c\x26\x4f\xef\x1f\xd8\x28\xb8\x83\xff\x1b\x54\xa3\xe8\xb8\x9a\x7f\x4c\x0e\x6e\x7e\x52\x78\x80\x7a\x42\x26\x35\x8f\x32\x25\x05\x01\xa2\xd1\x2b\xad\xa2\x6d\x06\x71\xfa\x31\x80\x17\x50\xd9\x57\xf6\x75\x51\xd8\x24\xcd\xa6\xbc\x3d\x5b\x38\xb5\xc0\xbf\xd5\xe6\xcd\x36\xf9\x1a\xb7\xb1\x66\x48\x06\xff\x79\x7b\x37\x18\x42\x69\xd5\x90\xac\x39\x20\x74\x18\x38\xab\x2f\x7b\x6b\xa5\xf6\xf3\x24\xd4\x09\x90\x1b\xad\x31\xf7\xdc\x4f\x9a\xfa\x1c\xa6\xd3\x5b\x6a\x6b\x50\xac\x26\xf0\x07\x37\x08\xfd\x7d\x20\x91\x1b\xed\xa5\x2e\x91\x9f\x58\x7d\xbd\x00\x59\xb3\xd7\xb8\x44\xcf\xa6\xe5\x2c\xb4\x6d\x3f\x4b\xbf\x4c\x06\x83\x21\xfc\xb1\x31\x76\x0b\xf3\xba\xdf\xfe\xcf\x19\xa6\x13\xc4\xcd\xfe\x3a\x21\x60\x66\xb7\x21\xfa\xc5\xad\x79\x10\x74\x58\x00\x86\xa5\xc8\xea\xe4\x0a\xa8\xcc\xcc\x7e\xd2\x2b\x61\xdd\x52\xa8\x24\x4c\x96\x12\xdc\x64\x37\xc2\x8b\x24\x4d\x87\xf0\x47\x4c\xbf\xea\x10\xac\xcd\x56\xe4\x8b\x09\x67\xdc\xa5\x3e\xbb\x82\x41\xdc\xfb\xda\xac\x56\x42\x17\x83\x27\x51\xc3\xf7\x68\x04\x77\xa6\x10\x3b\xf6\x30\x8b\x90\x53\x3e\x09\x13\xf2\x20\x1f\x04\xb1\x29\x12\xc5\x49\x2e\xb9\x21\x7a\x57\xcf\x23\xaa\xf8\x4f\x80\x21\xf5\x44\xc2\x55\x83\x0d\xdf\x6b\xfe\x47\x88\x02\x85\x82\xad\xb1\x8a\xfd\x99\xd1\x79\x3b\xca\x63\x8e\xef\x15\xab\x3d\xc9\xe5\xd7\xc2\x39\x90\x21\x63\xd5\x63\xe4\xac\x26\xfe\x8a\x58\xd8\x1a\x6b\x77\x20\x66\xd4\x65\x14\x71\xbc\x21\x5d\x88\x10\x5b\xdc\x4f\x67\x98\x18\x2d\xe7\x07\x55\x28\x4f\x0a\x6b\x9a\xde\x40\x21\x9d\x98\x29\x8c\x93\x9a\x95\x29\xb0\xa1\x63\xee\xe9\x9f\x5d\x41\x91\x35\xc7\x1e\xa7\x15\x4c\x61\x82\x42\x4a\x35\xf3\x6d\xc5\x99\xf7\x81\xe6\x87\x3d\xe8\xd1\x12\x5c\x01\xee\xcf\x8a\xd4\xdd\x0c\x7d\xa1\x0a\x91\x73\x90\x14\xce\x51\xfa\x65\x88\x83\x0c\x9c\x5c\xa4\x0c\x3c\x97\xd6\xc5\x2c\x0d\x5b\x7c\xbe\x41\x70\x14\xe3\xc2\x79\xed\x69\x99\x06\xe6\xcb\xb4\xbd\x44\xbd\x7c\xd8\x6b\x29\xaa\xd8\x5a\xb4\x30\xfe\x94\x36\x33\x15\x57\x27\xa4\x74\x2c\xe8\x68\x73\x9e\x02\x73\xb7\x54\x80\x33\x2b\xf4\x4b\x3a\x8d\x03\x0e\x6a\x4d\x57\x33\xee\x5e\x47\x98\x6d\xe8\x65\x7f\x35\x18\x61\x83\x82\x42\x73\x56\x64\xaa\xea\xc7\xd2\x4f\x38\x4f\x75\x44\x9d\x5d\x0a\x9d\x77\x77\xff\xf2\x3b\xb0\xf8\x08\xa8\x1c\x9f\x67\xe3\xda\x73\x5a\xce\x92\xa7\xb6\x48\xe1\xaf\xd0\xca\x6e\xbf\x03\x4f\xfb\x10\x48\x1f\x8f\x84\xf6\xd8\xbe\x24\xe9\x2a\xa7\xff\xc5\xdb\x12\x39\x87\x22\x0b\x4e\xf8\xd0\x9a\x3f\x4f\x8e\x06\xd0\x55\x11\x78\x63\x92\x96\x63\x0e\xab\xb2\x2a\xa4\x00\xd6\x4c\x57\xba\x88\xd3\xde\x30\x6f\x0f\x82\xc6\x71\x72\xf3\x3e\xf2\xaf\x57\xf5\x85\x64\x2f\xfc\x0f\x0c\x16\xf1\xba\x83\xb0\x85\x8e\xdb\xf0\x70\x57\xf2\xf4\xb3\xe9\x3d\xb1\xe4\x69\x6c\x66\x2c\x0f\xdf\x93\xc1\xe5\xbb\x77\x5c\x5c\x86\xad\x5b\xdc\x3c\xd6\xa9\xf9\x68\x24\xcd\x01\xe6\x33\x2f\x70\x7a\x61\x70\xff\x0f\x28\xea\xf4\xbc\xff\x89\x6b\x8b\xfa\xc6\xe2\x53\xfa\xfb\xa7\xd5\x77\x42\x7b\x8f\xfd\x36\x1f\x41\x75\x30\x3a\x03\x6d\x60\x1e\x9b\x75\x16\x34\xfc\x6b\xc2\x0e\x3d\x9c\x8d\xd2\xce\x61\xff\xff\x04\x00\x00\xff\xff\x28\xb9\x98\x2a\x9d\x28\x00\x00")

func _hardcodedDoerGoBytes() ([]byte, error) {
	return bindataRead(
		__hardcodedDoerGo,
		"../_hardcoded/doer.go",
	)
}

func _hardcodedDoerGo() (*asset, error) {
	bytes, err := _hardcodedDoerGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../_hardcoded/doer.go", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x95, 0x31, 0x8c, 0x1b, 0x7e, 0xcc, 0x2a, 0xff, 0x1f, 0x77, 0xd6, 0x5, 0xf4, 0xc5, 0x64, 0x7c, 0x98, 0x9f, 0xb1, 0x2, 0x3e, 0x9d, 0x61, 0x9a, 0x4e, 0x86, 0x6a, 0xe9, 0xb5, 0x6d, 0xd1, 0xa6}}
	return a, nil
}

var __hardcodedMiddlewareGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x54\xcd\x6e\xe3\x36\x10\x3e\x5b\x4f\x31\x65\x11\x84\x5a\x38\xf2\x1e\x8a\x1e\x02\xf8\x50\xa4\x9b\xe6\xb2\xc0\x62\x13\xb4\x05\x8a\x02\xcb\x50\x23\x89\xb0\x4c\xaa\xc3\x91\x55\x23\xf0\xbb\x17\x43\x49\x4e\x14\xa4\xe9\xa9\x07\xcb\xe4\xcc\x7c\xdf\xfc\xb3\x33\x76\x67\x6a\x84\x88\x74\x40\xca\x32\xb7\xef\x02\x31\xe8\x6c\xa5\xaa\x3d\xab\x6c\xa5\x3c\xf2\xa6\x61\xee\xe4\x4c\xbd\x67\xb7\xc7\x4d\x89\x8f\x7d\xad\xb2\x6c\xa5\xea\xd0\xed\xea\xc2\xf9\xcd\x4d\x8b\x07\xa4\xcd\xce\x1c\x0f\x88\x57\x75\x28\x0e\x3f\x6e\xda\x50\xd7\x48\x2a\xcb\xb3\x6c\xb3\x81\x2f\xc6\x3b\xfb\xd9\x95\x65\x8b\x83\x21\x84\x36\xd4\x11\x8c\x3f\x42\x27\x8a\x58\xc0\x6d\x20\xf0\x61\x58\xc3\x80\x97\x84\x60\x83\x67\xe7\x7b\x04\x6e\x28\x0c\xce\xd7\xc0\x0d\x8e\xc6\xd0\x77\xc2\x28\xf7\xc8\xc6\xee\x20\x06\xe0\xc6\x45\xd8\x9b\x23\x58\x32\xb1\x19\x6d\x29\x58\x8c\xb1\xc8\xaa\xde\xdb\xd7\xfe\x75\x03\x92\x56\x71\x67\x7c\xd9\x22\xe5\x8b\x1b\x3c\x65\x2b\x42\xee\xc9\x2f\xc4\xb7\xbd\xb7\x5a\xc8\xf4\x30\xca\xbf\x62\xec\x82\x8f\xf8\x1b\x39\x46\x5a\x03\xc1\x87\x49\xfe\x57\x8f\x91\x73\xe1\x59\x95\x58\x21\x41\x82\x8d\x82\x55\x4a\xe2\x13\x11\x5c\x6f\x81\xd0\x86\x03\x92\xce\x45\xe1\x2a\x38\xeb\xb6\x5b\xf0\xae\x1d\x01\x53\x30\x72\x3c\xc9\xe7\x60\x08\x90\xd2\x2f\x50\x26\x92\x38\x38\xb6\x0d\xbc\x64\x9e\xcf\x85\xe6\x63\x87\x93\x6b\x6b\xa2\x14\x8d\x9c\xaf\xaf\x13\xb3\xd0\x6c\xa1\xda\x73\xf1\x49\xc8\x2a\x3d\xc3\xf2\xb3\x79\xf2\xf2\xd2\x7a\x36\x11\x51\x89\x95\xe9\x5b\xfe\x17\x32\xd5\xfb\x9d\x0f\x83\x9f\xfa\x76\xf1\xfd\x01\x42\x05\x12\x0f\x5c\x3c\xa8\xf5\x99\xe9\xf9\x94\x8f\x49\xca\x77\x9c\x9f\xe2\x96\xc2\xfe\x26\x78\xc6\xbf\x59\x53\x31\x9f\xf2\x7c\xf4\xf1\xb3\x56\x09\xaa\xd6\x29\x82\x09\xf3\xf9\x49\x21\x91\xba\x96\xd8\xd7\xa0\xd2\x94\x30\x19\x8b\xea\x7a\xca\x5e\xa7\x21\x2e\xee\x45\xa3\xf3\xfc\x94\x9f\x1b\xb3\xa8\xc0\x29\x35\xa6\x29\xee\x65\x41\xee\x1e\x1e\xbe\xe8\x61\x0d\xa2\x39\xe5\xd9\x29\xcd\x75\x64\xc3\x7d\x5c\x4e\x02\x0c\x64\xba\x08\x06\x68\x12\xc3\x90\xe4\x59\xca\xfc\x4d\x44\x64\xea\x2d\x4b\x93\xde\x98\xac\x6c\x35\x62\xc0\x79\x16\xb7\x69\xa0\x75\x84\x0f\x6f\x51\xe5\x90\xfe\xef\xd0\x94\x48\xda\x86\x12\x05\x96\xfa\x1f\x8b\x89\x67\x0b\x22\x17\xc1\x12\x5b\xbc\x86\xce\x59\xfe\x8a\x14\x5d\xf0\x5f\x8d\xaf\x11\x4a\xb4\xae\xc4\x08\x43\x83\xdc\x20\x01\x07\x30\xd6\x62\xc7\x60\xe0\x30\x1a\x16\x63\xaa\x0b\x58\x5a\x81\x49\x3f\x75\x21\x87\xc7\x10\xda\xe4\xe1\xa6\x75\xe8\x79\x02\xdc\x34\x68\x77\x2f\x1e\x0b\x2b\xf7\x98\xb6\xda\x26\xbb\x67\x3f\xa9\x16\xef\x81\x5f\x6d\xfa\x1a\xc8\xd7\x8b\xc0\xfe\xc7\xdd\x9f\xb3\x95\x45\x2f\xc6\xb2\x16\xbf\x20\x6b\xf5\xfb\xd5\x18\xf2\xd5\x14\x88\x92\x31\xfb\xaf\x81\xff\xa9\x2c\xe7\x9b\x1a\xcb\x70\x35\x39\x50\xeb\xb9\x20\xc2\xe3\x2a\xf8\x8e\x7c\x3d\xd7\x7a\x5a\xfd\x61\xd1\xdc\x1f\x3e\x7e\xcc\x5f\x48\xf5\x1f\x7f\x3e\x1e\x19\xb5\xec\xee\x7d\x47\xce\x73\xa5\xbf\x3d\xa9\x3d\xc6\x68\x6a\xd9\x1a\xb5\xac\x3b\x5c\x5e\xc4\x4b\xf0\x81\xa7\xce\x63\xb9\x86\xae\x45\x79\x2e\xfa\xae\x26\x53\xa2\x3a\x7d\x7b\x0e\x2a\x4f\xbe\xce\xaf\xd8\xe9\x9d\x9d\xfa\x27\x00\x00\xff\xff\x64\xba\x96\x25\x93\x06\x00\x00")

func _hardcodedMiddlewareGoBytes() ([]byte, error) {
	return bindataRead(
		__hardcodedMiddlewareGo,
		"../_hardcoded/middleware.go",
	)
}

func _hardcodedMiddlewareGo() (*asset, error) {
	bytes, err := _hardcodedMiddlewareGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../_hardcoded/middleware.go", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x17, 0x73, 0xff, 0x36, 0x5d, 0xfe, 0x40, 0x7c, 0x33, 0x99, 0xc8, 0x19, 0x37, 0x47, 0x59, 0x51, 0x96, 0xb, 0x22, 0x81, 0x1c, 0x7d, 0xe4, 0x3, 0x2f, 0x2d, 0x3c, 0x2d, 0xc5, 0x23, 0x70, 0xb8}}
	return a, nil
}

var __hardcodedTracingGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x59\x6f\x6f\xdb\x38\xf2\x7e\x2d\x7d\x8a\x59\x03\xdd\x4a\x85\x22\x27\xdb\x36\xbf\x45\x16\x79\x91\x26\x69\x6b\x20\xc9\x06\x4d\x7e\xb7\x38\x1c\x0e\x05\x2d\x8d\x25\x22\x12\xa9\x23\x29\xff\xb9\x20\xdf\xfd\x30\x43\x49\xb6\x63\x27\xd7\x5e\x5e\xa8\x16\xff\x0c\x9f\x19\x0e\x9f\x67\xa8\x36\x22\x7b\x10\x05\x82\x33\x22\x93\xaa\x08\x43\x59\x37\xda\x38\x88\xc2\x60\x94\x69\xe5\x70\xe9\x46\x61\x30\x42\x95\xe9\x5c\xaa\x62\x3c\x95\x4a\x98\xd5\x56\x53\x89\x4b\x7a\x9f\xd5\x3c\x52\xa1\x1b\x97\xce\x35\xf4\x5b\x5b\x7a\x5a\x67\x32\xad\xe6\xf4\xd3\xc9\x1a\x47\x61\x18\x8c\x0a\x9d\xea\x06\x95\xc3\x0a\x6b\x74\x66\x95\x4a\x3d\xa6\xe5\x8c\x9c\x8e\xa5\xb2\xce\xb4\x35\x2a\x27\x9c\xd4\x6a\x5c\x48\x57\xb6\xd3\x34\xd3\xf5\xb8\xd0\x46\x56\x95\x18\xd7\xed\x72\xac\x1d\x56\x75\xcb\x4b\xff\x8c\xb5\x1e\x1f\xcf\xef\x81\xee\x33\x40\xfd\xaf\xf5\x8d\x71\x49\x91\x42\x63\xc7\xda\x55\xaf\x9a\x79\x36\x94\x1f\x85\x69\xb2\x57\xe7\x34\x46\x37\xa2\x60\xd0\xa3\x30\xb0\xf9\x03\x6d\x11\xc2\xcb\x13\x6c\xfe\x30\xe6\x31\xaf\x9a\x1d\x46\xf9\xa7\x43\xeb\x5e\x1d\xbf\x61\xb1\x79\x28\x52\xa9\xc6\xe7\x15\xce\xd1\x8c\x1f\xc4\x6a\x8e\x78\x50\xe8\x74\x7e\x3c\xae\x74\x51\xa0\x19\x85\x71\x18\x8e\xc7\xd0\x43\xd7\x06\x9c\x86\xd6\x62\x1a\xce\x85\xd9\x6c\xde\x70\x2e\xbd\xc7\xa5\xbb\x16\xcd\xed\xba\xf7\x74\xbb\x9f\x10\x9c\xfb\x5c\x7c\x7c\x82\xf1\x98\x93\x15\x1b\x61\x50\x39\x28\x51\xe4\x68\x78\xd9\x1c\x67\xa2\xad\xdc\xb9\xae\x2a\xcc\x9c\x36\xb7\x94\xc8\x0b\x61\x21\x2b\x85\x2a\x30\x87\x99\xd1\x35\x7c\xfc\xf8\xfb\xf1\x21\x48\x05\x37\x7a\x8e\xf5\x14\x0d\x08\x95\x83\x2b\x11\xbe\x68\xa8\xe4\xd4\x08\xb3\x22\x6b\xa5\xb0\xea\xad\x83\x29\xa2\x82\xb6\xc9\x85\xc3\x1c\x16\x25\x2a\x90\x0e\xa4\x5d\x37\x21\x64\x42\x91\x93\x40\xdb\x9a\x5e\xec\x01\xc1\xde\xef\x45\xd7\x4a\xe5\x8e\x8e\xe1\x14\x3e\xbc\x3f\xfa\x3f\x76\xe2\x0e\x5d\xdb\x7c\xa9\xf4\x54\x54\xec\xf8\xad\xd1\x73\x99\xa3\x39\x53\xf9\x65\x97\x45\x60\xd1\x11\x00\x10\x0a\xfa\xcc\xa2\x40\xfb\xdf\x09\x59\x11\x16\x16\x58\x55\xf4\x2f\x79\xb6\xb5\xb5\x50\xb0\x75\x1f\x45\x8a\x34\xdb\x87\x19\xed\x16\x37\x15\xa8\xd0\xd0\x46\xd8\x61\xfb\xc6\x63\xb8\x2f\x71\xbd\x1a\x85\x6c\x98\x29\x0c\x82\x41\xd7\x1a\x85\x39\x05\x56\x9b\xc1\x5e\x49\xd1\xa9\x2a\x8f\x2f\xc7\x19\x81\x2f\x5b\x97\xeb\x85\x4a\xc3\x59\xab\xb2\x1f\xf1\x37\xca\xdc\x12\x3a\x32\x4a\xbb\x44\x88\x21\xea\x8f\x44\x7a\xd7\x08\xd5\x8f\x4d\xe0\xdd\xd0\xce\xf6\x4c\x6f\x30\x01\x34\x46\x9b\x18\x1e\xc3\x60\x3c\x86\xa3\x94\xc2\x48\x51\xec\x9d\xe2\xe6\xdf\x86\x66\xb6\x61\x06\x2f\xb9\xf7\x7d\x0a\xc2\x5a\x59\xa8\xad\x18\x6e\x0c\xe2\x51\x93\x19\x2c\xf0\x2d\x05\xa5\x55\x4a\xaa\x02\x2a\x4d\x41\x58\x25\x14\x0f\x05\x14\x28\xd0\xb3\x19\x58\x51\x37\x95\x54\x45\x0a\x7f\xba\x12\xcd\x42\x5a\xf4\x6d\xe8\x11\xbe\x01\x6d\x60\x51\x0a\x47\xe7\x0d\xee\xbf\x9d\x9d\x4f\x6e\xbe\x7c\xbf\x3b\xbb\xbe\xbd\xa2\x1f\xb7\xdf\xfe\xfc\x74\xf6\x69\x72\x35\xb9\xff\x3b\xd8\x06\x33\x39\x93\x68\xd3\x30\xe8\xcd\xde\x1a\x3d\x15\x53\x59\x49\xb7\x82\x93\x53\x38\x4c\x0f\x8f\xc2\x40\xda\x2b\x02\x43\x0d\xda\xa6\x5f\xd0\xa1\x9a\x47\xa3\xef\x93\xbb\xef\x57\x7f\x9e\x9f\x5d\x8d\x62\x38\x3d\x85\x91\x33\x2d\x9d\x79\x39\x83\x7e\xfc\x63\x18\xec\x35\x7c\x0a\x47\xe9\x61\x18\x3c\x01\x56\x16\x41\xce\x60\xfe\xcc\xf4\x6b\xb0\x47\xf1\x1f\x30\x87\x5f\x4e\x61\x34\x7a\x69\x81\xcf\x46\xd7\x97\x6a\xce\x9b\x47\x96\x3b\x31\x49\x6f\x85\xb1\xf8\xb9\xd2\xc2\x45\xf3\x04\x8e\x3f\xc4\x61\x40\x70\x69\xd4\x2f\xa7\xa0\xa4\x47\x1c\xf8\xb4\xa4\xf7\xc4\x3f\x66\xb5\x4b\x2f\x29\x0f\x66\xd1\x28\xd3\x6d\x95\x83\xd2\x0e\x1a\xb2\x06\x6f\xdf\xd8\xb7\x94\xa7\x33\x32\x3b\x4a\x60\x4e\x46\x9f\x5e\x74\xfc\x65\xb4\x61\xf0\x14\x86\x81\xc8\x73\x86\x4c\x4b\xde\x35\x46\x2a\x37\x8b\x46\x6f\xec\xc9\x9b\x7c\x94\xec\xe7\x8a\xaf\xda\xba\x64\x2f\x51\xc4\x3e\xb3\x2e\xe7\x68\x56\x70\xf4\x11\x2c\x66\x5a\xe5\x74\xc8\xdf\x56\x94\x85\x2b\xc2\x9d\x69\xa5\x30\x73\xf4\x73\xfb\xc0\x67\xbd\x29\x10\x8e\xed\xd0\xb9\xec\x96\xe1\xe4\x24\x9e\x05\x3d\xf3\x89\x5a\x6a\xeb\x4e\x98\x8f\x68\xe8\x5f\x94\xb2\x7d\x22\x4b\x45\xa9\x9e\xb7\x19\x4f\x70\xa5\xb4\x44\x85\x02\xac\xcc\x31\x13\x26\x61\x5e\x58\x6c\xcc\x60\x13\x5d\xfa\x6f\x8c\xef\x5b\x7a\xbb\xba\xc1\x01\xed\xc1\x80\x36\x0d\x83\xdc\x48\xca\x7d\x4a\xa9\x4e\x33\xd3\x1b\x5c\x5c\x70\x6b\x14\x06\xc1\xd0\xfa\x97\x74\xe5\x37\xec\x22\x20\xb5\xba\x45\x23\x75\x1e\x1d\x7d\x7c\x47\x35\x47\x7a\xc7\xf1\x8a\x93\xe7\x53\x2e\x55\xde\x68\xa9\x5c\x44\x9b\xb5\xdb\x3d\x51\x16\xb3\xd6\x60\x44\x5d\x71\x18\xe0\xc0\x32\x5d\x3a\xf2\x36\xde\xe0\x62\xa0\xaa\x30\x08\x32\xb7\x24\x43\x1e\xba\x9f\xb7\x9b\x99\xaf\x26\x26\x13\x15\x64\x06\x85\xa3\xe8\xf4\xab\x9e\xc0\x9b\xf9\x88\x97\x8e\x7d\x86\xb9\x86\x30\x28\x5c\x6c\x33\x5d\xb4\x86\xb9\x27\x47\xe3\x30\x20\x61\x4f\xef\xd0\x3d\x9b\xe6\x9a\x38\x0c\xbc\x92\xa7\x94\xc9\x1d\xd5\x12\xfd\xc6\xe9\x44\xcd\xf4\x45\x34\xb2\x4e\x18\x02\x75\xe0\x99\x6f\x94\x40\x37\xe1\x9a\xbc\x1a\x51\x18\xd1\xda\xd1\x09\xf8\x3f\x7a\xa7\x60\x8c\x7a\x20\x07\x46\x38\x1c\x9d\xec\x03\x96\x84\xc1\x53\x1c\xf6\x91\x59\xfb\xe0\x1a\x0e\x51\xf8\xf4\xa3\xfa\xf8\x59\x9b\x7b\xb4\xac\xd2\x35\x0a\xc5\x07\x62\x8a\x24\x64\x2c\x4f\xad\x92\x0e\xa8\xee\x91\xaa\xf0\x62\xa9\x72\xa8\x25\xc5\xdc\xab\xa5\xa5\x25\x40\x4c\xf5\x1c\x59\xc5\x74\xeb\x28\xc1\xe9\x80\x6c\xce\x4d\x61\xe2\x3a\xdd\xb3\x24\xc5\x52\x1d\xd4\x58\x6b\x5f\x3d\x0c\x4a\x49\x06\x70\x29\x6a\xc9\x89\xde\x49\x2b\xe6\x60\x1b\xa1\xec\x8f\x6b\x60\xe7\x53\x14\x43\xf4\x6e\x28\xdc\xd2\x89\xba\xe6\x15\x7f\x4e\xfd\x06\x6c\x27\xa7\xb0\xb6\x75\x83\x8b\xe7\xe6\xa2\xf8\x47\x72\xec\x28\x3d\xfc\x2f\x39\xf5\xda\x96\x72\x00\x5e\x36\x0f\x2f\xa8\xfc\x3e\x4a\x66\xde\x3e\xfe\x10\xbf\x18\x04\x72\xbe\xc3\x32\x8c\xb8\xd9\x59\x3a\x0c\x98\xf7\x38\x61\xb6\x98\x72\x72\xb1\x2e\x8d\x52\x98\x6c\x16\x3a\x3d\x1c\x4a\xb5\x85\x36\x0f\x10\x09\x07\x15\x0a\xeb\x60\x21\x5d\xe9\xa9\xcf\x6b\x3b\x1d\xde\x9e\x83\x37\x2d\x42\xdd\x5a\x37\x24\x48\x57\x8a\x4d\x2e\x2c\xe5\xdc\x4c\x9b\xba\x5a\x81\x70\x60\x84\xca\x75\xed\x2b\x59\xb2\x80\xca\x49\x83\x94\x4d\x99\x4f\x50\xa9\xdc\xf1\x87\xd4\x2f\xf1\xb9\xcb\xbd\xa6\xc2\x64\xcb\x93\xe5\x81\x11\xab\xed\xd5\x73\x8d\x96\xb5\x30\xd7\x8c\x96\x4c\x0c\x41\x22\x2e\xbc\xf3\xe8\xd7\x65\xd7\x2d\x17\xe0\x9f\x84\xc5\x3c\xda\x0e\xf8\xe4\xe2\x1b\x49\x4a\xd7\xb5\x87\x82\x62\xa6\x5a\x5f\x54\x5a\x84\x5a\x2c\x65\xdd\xd6\x96\x2b\x49\xa7\xa1\x68\x85\xc9\x41\x14\x82\x2e\x6f\x60\x75\x8d\xae\xe4\xd3\xa3\xe9\xb9\x30\x5a\x15\x7c\x68\x2d\x2a\xba\x81\x82\x00\xe7\xf5\x2b\x17\x4e\x40\xab\x70\xd9\x60\xe6\x30\xaf\x56\x3b\x4e\x34\x42\x5d\xc9\x5a\x3a\xbb\x5d\x3e\xfa\x36\x2e\x19\xce\x1c\xdd\x1b\x5b\x87\xe7\xba\x55\x8e\x3b\x4e\xe0\xe8\xf0\x90\x10\x07\x97\x73\x54\x6e\xb3\x83\xfe\xfa\xce\x2b\xa9\x1e\x9e\xf7\xf5\x9d\x4f\xec\xf1\x36\x96\x95\xca\x36\x32\xdd\x4b\x8c\x27\xb9\xeb\x76\x79\x87\x66\x8e\xe6\x5a\xe6\x79\x85\x8b\x75\x85\x6d\xa1\x5e\x37\xb9\x52\x38\xb0\x25\x97\x31\x53\x04\xe1\x9c\xc8\x4a\xcc\x29\x84\x02\x36\xee\xca\x60\xd9\x18\x97\xf1\x13\xe7\xb7\xda\x2d\x78\x9f\x55\x61\x4f\x80\x49\xdd\x7a\x4a\xf2\x1a\x2e\xf2\xdc\xbf\xfb\xfb\x1f\x48\x35\xd3\x64\x96\x92\xc8\xe0\xbf\x5a\xb4\xee\xa0\xab\x39\xb3\x5e\x01\xc8\xfa\x37\x59\x94\x0e\x94\x5e\xd0\xbd\x48\xab\x6a\x05\xb6\x6d\xf8\x83\x02\x0d\xa2\xbd\xa2\x8c\x96\x8a\x0d\x51\x56\x0b\xe7\xbd\xb8\x10\x4e\xe4\x9a\xb5\x0e\x33\xd7\x13\xe3\x9e\x38\x44\xe4\x8b\xcc\xf0\x46\xd4\x48\xd5\xa0\x54\x45\x0c\x34\x38\xa2\xcb\x7c\xfa\x55\xa8\x9c\xce\x18\x6c\xbe\xd1\xb9\xd7\xae\xa2\x48\xb0\x66\xf3\x87\x83\x74\xbf\xcd\x64\xe8\xa7\x3d\x5a\x5f\x4a\x6d\xb4\xbe\xbe\xc6\x6b\x4e\xf3\x2b\xc3\xeb\x6b\xf7\x83\x3d\x86\x2d\xa0\x9f\x69\x3e\x1b\x31\x0b\x3f\xef\x1b\xda\x46\x2b\x8b\x7f\x19\xc9\x4c\x67\xe0\x5d\xd7\xce\x61\x8f\x7d\x61\x3b\x1e\xf7\x38\xe9\xa2\x0a\xb8\xa4\x7d\x22\x5d\x61\x01\x6b\x84\x4a\x79\x17\x9a\xd6\xf1\x7d\x55\x75\x7b\x97\xb9\xe5\xf3\x7d\x23\x6b\x76\x90\x02\x3e\x0d\x9b\xe2\x6f\xfa\x1b\x57\x44\x5e\x73\x91\x6d\x33\xae\xc4\x79\xe8\xd0\xf9\x07\xd8\x2c\xfd\x2a\x6c\x47\x00\x51\x87\x33\x20\x2c\x93\x8b\xc4\x5b\x9f\x5c\xf0\xcc\x8c\xa7\xd2\xa0\xf4\x8e\x77\x30\x8a\x13\x6a\x1d\xe6\x0e\xcd\x6c\x82\xae\xf6\x5d\x7a\x50\xed\x8f\x94\xab\x25\x2e\xbb\xdd\xf7\x97\x54\xa6\x3d\x4a\xae\x04\xac\x26\xcf\xc0\x95\x9a\xee\x53\xda\xe7\x57\xa6\x8d\xc1\xca\xd7\x53\x95\x2e\xac\xbf\xf4\xd3\x7a\x96\x09\xdb\xf2\x4a\x72\x06\x15\xaa\xa8\xc3\xca\x77\xa1\xf7\xbf\xc1\xaf\xbf\x72\xab\xf7\x84\x1b\x8f\x8e\xe1\x11\x68\x0b\xb6\xca\x6c\x9f\xcf\x27\xd4\x3b\x5d\x39\x84\xe8\xfd\x6f\x07\x59\x29\x0c\x81\x8d\x13\xf8\xbd\x6b\x3d\x3a\x5e\xb7\x76\x34\xcf\x64\xd6\x50\x0d\x91\x7b\x20\x41\x07\xe1\x93\x4d\xe0\x3b\xc5\xac\xc4\x65\x7a\x81\x99\xce\xb1\x0b\x4d\x8f\xd1\x0f\xdf\x53\xb5\x6d\x6e\x5c\x7a\x96\xe7\xfd\xdb\x88\x67\x7e\x97\xf9\x28\xf1\x73\x83\xed\x0b\x0a\xdd\x4e\xfc\x57\xbe\xf4\x93\x2c\x2e\x55\x2e\x85\x4a\xff\x9f\xe3\x1b\x0d\xa8\xfe\xf1\xfb\xc9\x3f\xe3\xb8\x5b\xdc\x07\xe6\x65\xa8\x5d\xe0\x7e\x1e\x29\x4d\xfc\xdf\x80\xf6\x90\x7a\x8c\x74\x8b\xf3\x8f\x32\x65\x46\xf9\x7a\x7f\x7f\x1b\x99\x45\x02\x2c\xc7\x4f\x31\x57\xd4\x9e\x7c\x7d\x45\xa0\x2c\xd3\x56\xcf\xba\x74\x78\xdc\xd0\xea\x3f\x8b\x10\x8f\x65\x95\x44\xe5\x7a\x4e\xb4\x3d\xc5\x3a\xf1\x80\xcc\x73\x62\x7b\xd6\xc2\x88\x26\x01\x4c\x8b\xd4\x1f\xf6\xee\x06\x38\xac\x97\x0c\x1f\xa3\x3a\x8b\x64\xaf\xfb\xf4\x01\x73\x51\xb5\xac\x8f\x4d\x4b\x97\xbe\xee\xa0\x83\x22\x26\xd4\xad\xe3\xa2\x60\xf7\x53\x8d\xb4\x3c\xbe\xff\xfc\x45\xd3\xba\x8f\x17\x5a\x11\x47\x03\x8a\xac\xec\x97\xe3\xd3\xd3\x7d\x0b\x86\x85\x56\x6f\x19\xc0\x14\x0b\xae\x9b\x9d\xac\xfc\x69\xa2\x7b\x9c\x92\x4e\x8a\x4a\xfe\x1b\x73\x88\x30\x2d\x12\xf2\x56\xaa\x4e\x6a\xbc\xa4\xb4\x4d\xdc\x11\xf9\x66\x4c\xa3\xa9\xb0\xb8\x8e\xb0\x27\x37\xdd\xaa\xfc\xde\xc8\xa6\xe1\xe2\xae\x11\x8a\xb8\xf8\xdc\x2d\xff\xc6\x3e\x4b\xe5\xd0\xcc\x44\x86\x8f\x4f\xf1\xee\x84\x8d\xb2\xce\x6c\x34\x3f\x6e\xad\x73\x02\x5b\xaf\xbb\x8b\x9c\xec\xb4\x70\x42\xb8\x55\x83\x5b\x66\x89\x76\xda\xcc\xd1\xa2\xdb\x8e\x00\xec\x42\x0b\x83\xd7\x7c\x19\xea\xdf\x88\x32\x6d\x63\x5a\x0c\x83\x91\x68\x87\xff\xa3\x77\x5b\x3a\xb1\x59\xd9\x0f\x3a\xe3\x3f\x6d\xa7\x5b\x61\x27\x1d\x72\xe9\x76\x14\xf8\xc2\xdb\x0d\x26\xbd\x7b\x56\x0a\x73\x51\xff\x65\xa7\xa8\x8f\xe3\x9d\x89\x2f\x08\xe5\xce\xb8\xbb\x2e\x1c\x9f\x99\x2b\xe9\x8e\xc1\xe2\x47\x15\x9e\xce\x3b\x46\xdf\xa3\x79\xbe\xc3\x4b\xca\x3c\x01\xfd\x40\x44\xb3\xc1\x1b\x29\xc7\x36\x32\x2e\x7d\x1e\xef\x38\x8d\xba\x2a\xa1\x53\x2f\xfd\xd0\x29\x53\x17\xac\xf9\x40\x0d\x7d\x0e\xa5\xd7\x1e\xcd\x78\x4c\x25\x3b\x82\xb0\x43\x44\xdf\xda\xa1\x86\xee\xcf\x1e\x7f\xe5\xf0\xf5\x5d\x9c\x6e\x6c\x5b\x5f\xcb\x5d\x7a\x69\x26\xc7\xcf\xa8\xcf\xcb\x60\x27\xd8\xbe\xc8\x5a\x8b\x11\x97\x47\x7c\x4e\x85\xe2\x6c\xea\x0f\x66\xf7\x9d\xbb\x3b\x4e\x7b\x6d\xee\xc9\x94\x8e\xaf\x7d\xb2\x4f\x2e\x86\x7a\xe9\x31\xfc\x71\xc9\x27\xc1\xdf\x96\xfa\x5d\x99\xef\x2f\x55\xcf\xc6\xed\xea\x79\xb2\x33\x66\xa7\x12\x20\x22\x0e\x7c\x89\xb1\x86\xd7\x8d\xdf\x44\xb9\xce\xb2\xb4\x0b\xc7\x26\xf0\x64\xeb\xbf\x10\xbe\x72\xf0\xce\x85\x31\x12\x4d\x64\xba\xf7\x78\xa3\x8e\xfb\x99\x9a\xe4\x29\xfc\x4f\x00\x00\x00\xff\xff\xe6\xe6\x42\x5b\x36\x1b\x00\x00")

func _hardcodedTracingGoBytes() ([]byte, error) {
	return bindataRead(
		__hardcodedTracingGo,
		"../_hardcoded/tracing.go",
	)
}

func _hardcodedTracingGo() (*asset, error) {
	bytes, err := _hardcodedTracingGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../_hardcoded/tracing.go", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xf5, 0x4d, 0xd0, 0xa4, 0x31, 0x36, 0xe0, 0xe7, 0xb5, 0xe0, 0x7b, 0xc1, 0xf1, 0x1e, 0xba, 0xad, 0x67, 0x15, 0x12, 0x78, 0x74, 0x25, 0x5d, 0xc4, 0x16, 0x52, 0x52, 0xa1, 0xd, 0x89, 0xba, 0x58}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"../_hardcoded/doer.go":       _hardcodedDoerGo,
	"../_hardcoded/middleware.go": _hardcodedMiddlewareGo,
	"../_hardcoded/tracing.go":    _hardcodedTracingGo,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"..": {nil, map[string]*bintree{
		"_hardcoded": {nil, map[string]*bintree{
			"doer.go":       {_hardcodedDoerGo, map[string]*bintree{}},
			"middleware.go": {_hardcodedMiddlewareGo, map[string]*bintree{}},
			"tracing.go":    {_hardcodedTracingGo, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
