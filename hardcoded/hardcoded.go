// Code generated by go-bindata. DO NOT EDIT.
// sources:
// ../_hardcoded/doer.go (4.09kB)
// ../_hardcoded/middleware.go (1.685kB)
// ../_hardcoded/tracing.go (6.855kB)

package hardcoded

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __hardcodedDoerGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x57\x4d\x6f\xdb\x38\x13\x3e\x4b\xbf\x62\x6a\xe0\x45\xa5\xc4\x96\x9c\xbc\x4d\x5b\xa4\xeb\x43\x9b\xec\xa2\x7b\x68\x52\x34\xdd\xdd\x02\x41\x80\xd2\xd2\x28\x66\x43\x93\x2a\x49\xc5\x31\xd2\xfc\xf7\xc5\x90\x94\x2c\xa5\x4e\xb0\x5f\x87\xdd\x1c\x1c\x89\xe4\x3c\xf3\xf5\x70\x66\x54\xb3\xe2\x8a\x5d\x22\x14\x82\xa3\xb4\x71\xcc\x97\xb5\xd2\x16\x92\x38\x1a\xcd\xd7\x16\xcd\x28\x8e\x46\x85\x92\x16\x6f\x2c\x3d\x72\x45\xbf\x4b\x66\x17\xb9\x66\xb2\xa4\x17\x89\x36\x5f\x58\x5b\xd3\xb3\xe5\x4b\x1c\xc5\x69\x1c\xe7\x39\x94\x0a\x35\x70\x03\x4c\x02\x97\x16\x75\xc5\x0a\x84\x4a\x69\x18\x95\x8a\xcb\xcb\x11\x90\x10\x68\xfc\xda\xa0\xb1\x06\x6a\x65\x0c\x9f\x8b\x35\xac\xb8\x5d\xc0\x4a\xb3\xba\xe6\xf2\x32\xb6\xeb\x1a\x03\x54\x07\x72\x1b\x47\xc7\x2a\x29\x60\x87\x10\xb2\x23\x67\xf9\x18\x74\x78\xff\xe0\x11\x53\x48\xda\x77\x53\x2b\x69\x70\x0c\xa8\xb5\xd2\x69\x7c\x17\x7b\x54\x55\x9f\xb0\x25\x1e\xd9\x1b\x30\x56\x37\x85\xbd\xbd\x73\x76\xcf\x99\xc1\x80\xf1\x96\xc9\x52\xa0\x86\x1a\x75\xa5\xf4\xd2\x80\x5d\xa0\xdb\x1f\xd8\xee\xd1\x68\xf9\x98\xec\xdc\x80\x55\x8d\x2c\x20\x29\xbb\xad\x14\xfe\x86\xd9\xe4\xb5\x46\xdb\x68\x09\x45\x76\xac\x12\xef\x48\x9e\x83\x46\xab\xd7\xad\xa5\xf4\xc2\xd1\xc0\xc1\xf4\xd3\x30\xbe\xde\x48\x77\xb6\x67\x25\x81\x96\xb0\xf9\xa3\x40\x3b\x35\x7a\xfd\x5e\x09\x5e\xac\xe1\xc3\xe6\x39\xe8\xeb\xad\x40\x89\x15\x97\x68\x80\x79\x64\xa8\xdd\x72\xe6\x95\xf5\x0f\x0e\x92\x97\xe7\xf0\x86\x15\x57\xaa\xaa\x0c\x78\x97\x7c\x64\x65\xb3\x9c\xa3\x06\x26\x4b\xb0\x7c\xc9\xe5\x25\xa8\x2a\x00\x33\x6b\x71\x59\x5b\x93\xc5\x51\x2b\x9a\xa4\x70\x7e\x41\x84\xcb\x8e\x1b\xcd\x2c\x57\xd2\x21\x3b\xad\xa0\xb1\x40\x7e\x8d\x1e\xb7\x1f\x88\x31\x30\x03\x2b\x14\x82\xfe\xd3\xa6\x46\xd3\x08\x0b\xaa\x72\xd2\x2d\x99\x43\x7a\x9e\x1a\xf8\x7c\xac\x3e\xc3\x12\xed\x42\x95\x59\x1c\x39\xf4\x64\x90\xb1\x31\x3c\x90\xb0\xb9\x52\x22\xc4\xec\x8c\xcb\x4b\x81\x8f\x45\xce\x2e\x98\xed\xb2\xc7\x5a\x6b\x41\xc9\x02\x7d\x34\xbf\x87\x18\xb0\x76\x4b\x40\x99\x85\xb5\x6a\xc0\x2c\x54\x23\xca\x4e\x0d\x76\xd8\x7b\x06\x0b\x25\x4b\x60\x95\xa5\xeb\x65\xa1\x62\x5c\x98\x2c\xd0\xf6\x3b\x7d\x29\x3c\x1c\xf9\x1e\x39\xef\xed\xdc\xee\xc1\x0e\xb8\x95\x33\xa7\xed\xae\xcf\x22\x58\x71\x21\x82\x65\x52\xc9\xc9\xfb\xd3\xb3\x8f\x63\xff\xf4\xfa\xe3\xd1\xdb\x4d\x71\x70\xce\x1c\x7c\xfa\x94\x91\xe8\xc7\xd3\xe3\xd3\x43\xf8\xd9\x12\x5b\x0d\x48\x65\xa1\x68\xb4\x46\x69\xc5\xba\x65\x8b\x5c\xfb\x24\xb4\xe1\xc0\x12\xe6\xeb\x07\x92\xfb\x88\xc3\x3e\xdb\x1a\xbf\xc2\xbd\x8c\x6b\x34\xf5\xb6\xb4\xf7\x53\x4f\x31\xe1\x95\x5b\x7d\x32\x03\xc9\x05\x7c\xfb\x46\x1e\x65\xef\x1c\x99\x60\x36\x83\x11\x39\x3c\xda\xb6\x4e\xee\xd3\x46\x1c\x45\xa4\x2b\x3b\xb3\xcc\x36\xe6\x48\x95\x08\x3f\xc0\xc1\x74\x4a\xe0\x6d\xc4\x2b\x26\x0c\xc6\xd1\x5d\x97\x02\xab\x1b\x0c\x61\xfe\xf1\xa6\x56\x12\xa5\xe5\x4c\x6c\x65\x9f\x04\xdc\x9c\x18\x5c\x62\xcf\xba\x07\xe4\x1f\xa7\x5e\xc5\xaf\xa9\x1e\x86\x55\x57\xcf\x7b\x5a\x04\x55\x83\x42\x23\x33\x74\xc3\x57\x8c\x5b\xc7\x0f\xe3\x6a\x2f\xda\x15\xa2\xec\x12\x7f\x08\x7b\xd3\xe9\x18\xf6\xe9\xe7\x19\xfd\xbc\xa4\x1f\x2a\x10\x7b\xcf\xa7\x53\x58\x72\x21\xb8\x67\xb1\x81\xdd\x7c\x02\x4d\x0d\x56\xc1\xc1\xff\xe0\x0b\xb7\x16\x75\x9b\xda\xed\x5e\xfc\x01\x42\xc3\xe1\x0c\x96\xec\x0a\x93\x7b\xdb\x63\x38\x48\xe3\x48\xe2\x8d\x3b\xb1\x37\x9d\xb6\x24\x7f\xb7\xb1\x28\x8e\xb4\x2c\x69\x9b\x1a\x65\x76\x82\xab\xa4\x7d\x38\x53\x8d\x2e\x30\x71\x02\x27\x6a\x95\xa4\xd9\x2f\x92\xdf\x9c\x30\xa9\x92\x34\x4d\xe3\x08\x49\x6a\x9a\x4d\x0f\x20\xcf\x9d\x5b\x07\xd4\x81\x0a\x94\x36\xf8\x15\x47\xd4\x47\x79\x00\xbf\x74\x75\xbd\x65\xc4\x39\xbf\x80\x19\x38\xd3\x76\x61\x60\x74\x92\x24\x5a\x96\xd9\x4f\x42\x31\xfb\xfc\x59\x92\xee\xec\xa7\x93\xbd\x74\x07\x77\xaa\xb0\x42\x42\xa4\xdf\x3b\xb6\x33\x83\xfd\x3e\xab\x34\xda\x7f\xed\xdd\x7d\x28\xc1\xff\xfd\x0b\x7c\xa2\xb6\x77\x0d\x7f\x49\xa9\x41\x4a\xbc\x0e\x8d\x7f\x4d\x17\xaa\xeb\x1d\xa1\x0b\x0f\x01\x1e\xbf\xb8\x54\x0e\x96\xb5\x5d\x83\x11\xbc\xc0\x36\xb8\x03\x84\xbf\xd8\x05\x86\x65\x9f\x89\x15\x5b\xf7\xea\x05\xf9\xff\x80\xb6\x3f\xdb\x70\x7b\x36\xf8\xb0\xb6\xd3\x9e\x0b\xd0\x91\x9f\x64\x87\x61\xf8\x8d\xdb\x45\x3f\x46\x5d\x34\x40\xe2\x0a\xc2\xf0\xeb\x69\xac\xae\x51\x6b\x5e\x86\xb9\xc2\xcf\xcc\xa0\xe6\x5f\xb0\xb0\x4f\x4d\x37\x8c\x75\x63\x90\xf3\xe8\x1e\x7c\x52\xd8\x9b\x16\x34\x0b\xf6\x8c\xe1\x81\x91\x2b\xbd\x7f\xb2\x3f\x05\x86\x1d\xc2\xff\x95\x89\x06\x09\x79\x3c\xf0\xf3\xf6\x6e\x80\xec\x26\xc6\x76\x28\xdd\xe9\x66\xc1\x7f\x62\x2c\x6d\x55\x8c\x41\x5d\xb9\xb2\xd4\x1a\x9c\xa4\x99\x37\x6e\x68\x57\x9a\x25\x7d\x37\xdd\x45\x7b\xa2\xae\xda\x5b\xd1\xc5\x62\x06\x65\xd6\x7b\x77\x97\xa4\xeb\x2c\xa4\x67\xb3\x97\x6d\x88\x19\x47\xd7\x4c\x6f\xbb\xe3\x7e\xa3\xbb\xe7\xb1\x9b\xf9\xce\xd8\x35\x0e\x06\xa3\xb9\x2a\xa9\x47\x41\x41\x93\xfe\x0a\x61\xe1\x0e\x28\xaf\x2c\x83\x53\xbb\x40\xbd\xe2\x7e\xcf\x55\x41\x77\x80\x09\x8d\xac\x24\xfa\xb0\xd2\xe1\xba\x8f\x85\xa6\xaa\x50\x83\x92\x5d\x75\x2b\x07\xaa\x9c\x38\xcd\x5d\x19\x9c\x21\x3a\x31\x32\xf8\x30\xcf\x8d\x25\x77\xae\x51\x57\x42\xad\xb2\x42\x2d\x73\x27\xc1\x95\x34\xf9\xfe\xff\xa7\x2f\xa6\x2f\x5f\x3c\xcf\x49\x17\x97\x97\x13\xb2\x78\xa2\xaa\x09\xc9\x4e\x02\xf6\x84\x1a\xaf\x6a\xec\x64\xa9\x4a\x5e\x51\x6d\xe8\x76\x8c\x65\x36\xc4\x62\xde\x54\x70\x7e\x41\x9f\x7a\x2e\x07\x3a\x7b\x43\xce\x87\x7a\x47\xd9\x18\x06\x2c\x8a\xe6\x4d\xe5\x2b\xe5\x0c\xb8\xca\x3e\x20\x2b\x5f\x0b\x91\x78\x39\xea\x1d\xc3\x8a\x49\x08\x2d\x61\x25\x17\x4e\x32\x8e\x28\x8b\x77\xb1\xef\x62\xed\xcc\x4b\x2d\xef\x95\xab\x7c\xaf\xda\xb5\xdd\x5d\x27\xbf\xd5\xac\x48\x97\x9a\x64\xb8\xca\x4e\x54\x7d\x24\x94\x41\x9d\xb8\x2f\x56\xea\xb0\x6f\x5c\xd8\x93\x79\x53\xb9\x7e\x16\x05\xf9\x19\xe8\x32\xa8\x77\x55\xb9\x75\xa4\xcc\x4a\xfa\xa4\x2a\xc6\xa0\x83\x0b\xad\x55\xb3\x19\x08\x94\x49\x4b\xb9\x94\x4a\xfd\x93\x3e\xe9\x42\x87\xf1\x1d\xc5\xe1\xa5\xde\xbe\xb9\x46\x76\x15\x74\xe5\x39\x38\x0b\xdb\x0f\x0e\xc7\xc5\x40\xb3\x6a\xb3\xc0\x7d\x47\x94\x5c\xb4\x46\x98\xfa\x5e\x20\x4d\xed\x3c\xc9\x1c\x1c\x11\xdd\xe1\xfb\xf9\x5a\x20\xd6\x9d\xa5\xe7\xc1\x83\x8b\x74\xd8\xc3\x83\x91\xf1\x5d\xfc\x7b\x00\x00\x00\xff\xff\xae\xff\x9f\x32\xfa\x0f\x00\x00")

func _hardcodedDoerGoBytes() ([]byte, error) {
	return bindataRead(
		__hardcodedDoerGo,
		"../_hardcoded/doer.go",
	)
}

func _hardcodedDoerGo() (*asset, error) {
	bytes, err := _hardcodedDoerGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../_hardcoded/doer.go", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xff, 0x8e, 0xa6, 0x1c, 0x24, 0xd3, 0x13, 0x96, 0x5, 0x6a, 0x2a, 0xf2, 0x10, 0xda, 0x82, 0xaf, 0xee, 0xd7, 0x84, 0xe1, 0xab, 0xf6, 0xc0, 0x4a, 0x33, 0x7c, 0xd, 0x3f, 0x96, 0x90, 0xfd, 0xc0}}
	return a, nil
}

var __hardcodedMiddlewareGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x54\x5f\x6b\xe3\x46\x10\x7f\xb6\x3e\xc5\x74\x4b\xc8\xea\x70\xe4\x7b\x28\x14\x02\x7e\x28\xe9\xa5\x79\x39\x38\x2e\xa1\x2d\x94\xc2\x6d\x56\x23\x69\xb1\xbc\xab\xce\x8e\xac\x9a\xe0\xef\x5e\x66\x25\x39\x51\x48\xd3\xa7\x3e\x58\xde\x9d\x99\xdf\x6f\xfe\x6f\x67\xec\xce\xd4\x08\x11\xe9\x80\x94\x65\x6e\xdf\x05\x62\xd0\xd9\x4a\x55\x7b\x56\xd9\x4a\x79\xe4\x4d\xc3\xdc\xc9\x99\x7a\xcf\x6e\x8f\x9b\x12\x1f\xfb\x5a\x65\xd9\x4a\xd5\x8e\x9b\xfe\xb1\xb0\x61\xbf\xb9\x69\xf1\x80\xb4\xd9\x99\xe3\x01\xf1\xaa\x0e\x9b\xc3\x8f\x9b\x36\xd4\x35\x92\xca\xf2\x2c\xdb\x6c\xe0\x8b\xf1\xce\x7e\x76\x65\xd9\xe2\x60\x08\xa1\x0d\x75\x04\xe3\x8f\xd0\x89\x22\x16\x70\x1b\x08\x7c\x18\xd6\x30\xe0\x25\x21\xd8\xe0\xd9\xf9\x1e\x81\x1b\x0a\x83\xf3\x35\x70\x83\xa3\x31\xf4\x9d\x30\xca\x3d\xb2\xb1\x3b\x88\x01\xb8\x71\x11\xf6\xe6\x08\x96\x4c\x6c\x46\x5b\x0a\x16\x63\x2c\xb2\xaa\xf7\xf6\xb5\x7f\xdd\x80\x24\x56\xdc\x19\x5f\xb6\x48\xf9\xe2\x06\x4f\xd9\x8a\x90\x7b\xf2\x0b\xf1\x6d\xef\xad\x16\x32\x3d\x8c\xf2\xaf\x18\xbb\xe0\x23\xfe\x46\x8e\x91\xd6\x40\xf0\x61\x92\xff\xd5\x63\xe4\x5c\x78\x56\x25\x56\x48\x90\x60\xa3\x60\x95\x92\xf8\x44\x04\xd7\x5b\x20\xb4\xe1\x80\xa4\x73\x51\xb8\x0a\xce\xba\xed\x16\xbc\x6b\x47\xc0\x14\x8c\x1c\x4f\xf2\x39\x18\x02\xa4\xf4\x0b\x94\x89\x24\x0e\x8e\x6d\x03\x2f\x99\xe7\x73\xa1\xf9\xd8\xe1\xe4\xda\x9a\x28\x45\x23\xe7\xeb\xeb\xc4\x2c\x34\x5b\xa8\xf6\x5c\x7c\x12\xb2\x4a\xcf\xb0\xfc\x6c\x9e\xbc\xbc\xb4\x9e\x4d\x44\x54\x62\x65\xfa\x96\xff\x85\x4c\xf5\x7e\xe7\xc3\xe0\xa7\xbe\x5d\x7c\x7f\x80\x50\x81\xc4\x03\x17\x0f\x6a\x7d\x66\x7a\x3e\xe5\x63\x92\xf2\x1d\xe7\xa7\xb8\xa5\xb0\xbf\x09\x9e\xf1\x6f\xd6\x54\xcc\xa7\x3c\x1f\x7d\xfc\xac\x55\x82\xaa\x75\x8a\x60\xc2\x7c\x7e\x52\x48\xa4\xae\x25\xf6\x35\xa8\x34\x25\x4c\xc6\xa2\xba\x9e\xb2\xd7\x69\x8c\x8b\x7b\xd1\xe8\x3c\x3f\xe5\xe7\xc6\x2c\x2a\x70\x4a\x8d\x69\x8a\x7b\x59\x91\xbb\x87\x87\x2f\x7a\x58\x83\x68\x4e\x79\x76\x4a\x73\x1d\xd9\x70\x1f\x97\x93\x00\x03\x99\x2e\x82\x01\x9a\xc4\x30\x24\x79\x96\x32\x7f\x13\x11\x99\x7a\xcb\xd2\xa4\x37\x26\x2b\x5b\x8d\x18\x70\x9e\xc5\x6d\x1a\x68\x1d\xe1\xc3\x5b\x54\x39\xa4\xff\x3b\x34\x25\x92\xb6\xa1\x44\x81\xa5\xfe\xc7\x62\xe2\xd9\x82\xc8\x45\xb0\xc4\x16\xaf\xa1\x73\x96\xbf\x22\x45\x17\xfc\x57\xe3\x6b\x84\x12\xad\x2b\x31\xc2\xd0\x20\x37\x48\xc0\x01\x8c\xb5\xd8\x31\x18\x38\x8c\x86\xc5\x98\xea\x02\x96\x56\x60\xd2\x4f\x5d\xc8\xe1\x31\x84\x36\x79\xb8\x69\x1d\x7a\x9e\x00\x37\x0d\xda\xdd\x8b\xc7\xc2\xca\x3d\xa6\xad\xb6\xc9\xee\xd9\x4f\xaa\xc5\x7b\xe0\x57\x9b\xbe\x06\xf2\xf5\x22\xb0\xff\x71\xf7\xe7\x6c\x65\xd1\x8b\xb1\xac\xc5\x2f\xc8\x5a\xfd\x7e\x35\x86\x7c\x35\x05\xa2\x64\xcc\xfe\x6b\xe0\x7f\x2a\xcb\xf9\xa6\xc6\x32\x5c\x4d\x0e\xd4\x7a\x2e\x88\xf0\xb8\x0a\xbe\x23\x5f\xcf\xb5\x9e\x56\x7f\x58\x34\xf7\x87\x8f\x1f\xf3\x17\x52\xfd\xc7\x9f\x8f\x47\x46\x2d\xbb\x7b\xdf\x91\xf3\x5c\xe9\x6f\x4f\x6a\x8f\x31\x9a\x5a\xb6\x46\x2d\xeb\x0e\x97\x17\xf1\x12\x7c\xe0\xa9\xf3\x58\xae\xa1\x6b\x51\x9e\x8b\xbe\xab\xc9\x94\xa8\x4e\xdf\x9e\x83\xca\x93\xaf\xf3\x2b\x76\x7a\x67\xa7\xfe\x09\x00\x00\xff\xff\xa1\x73\xce\xd9\x95\x06\x00\x00")

func _hardcodedMiddlewareGoBytes() ([]byte, error) {
	return bindataRead(
		__hardcodedMiddlewareGo,
		"../_hardcoded/middleware.go",
	)
}

func _hardcodedMiddlewareGo() (*asset, error) {
	bytes, err := _hardcodedMiddlewareGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../_hardcoded/middleware.go", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xcb, 0x1, 0xb6, 0x9d, 0x16, 0xe7, 0x46, 0xa2, 0x49, 0x7d, 0xf6, 0xc, 0x20, 0x3a, 0xd4, 0x73, 0x64, 0xea, 0xcc, 0xe3, 0x1f, 0x62, 0xec, 0xc7, 0x5b, 0x68, 0x93, 0x2d, 0xaf, 0x96, 0x19, 0x61}}
	return a, nil
}

var __hardcodedTracingGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x58\xdd\x6f\xe3\x36\x12\x7f\x96\xfe\x8a\x39\x01\xed\x49\x0b\x45\x4a\xfa\xb1\x2d\x52\xe4\x21\x5f\xbb\x6b\x34\x49\x83\x24\x7b\xc5\xe1\x70\x08\x68\x69\x2c\x13\x2b\x91\x2a\x49\xd9\x31\x16\xf9\xdf\x0f\x43\x52\xb2\x9c\xd8\xbe\x74\xf7\x21\x2b\x93\xc3\xe1\x7c\xcf\x6f\xd8\xb2\xe2\x0b\xab\x10\x34\xaa\x05\x2a\xa3\x58\xc1\x45\x15\x86\xbc\x69\xa5\x32\x10\x87\x41\x54\x48\x61\xf0\xc9\x44\x61\x10\xa1\x28\x64\xc9\x45\x95\x4f\xb9\x60\x6a\xb5\xb1\x34\xc7\x27\xfa\x3d\x6b\x2c\xa5\x40\x93\xcf\x8d\x69\xe9\x5b\x6a\xfa\xab\x8d\x2a\xa4\x58\xd0\xa7\xe1\x0d\x46\x61\x18\x44\x15\x37\xf3\x6e\x9a\x15\xb2\xc9\x2b\x29\xab\x1a\xf3\xae\xe3\xe5\xcb\xad\xf3\x1a\x17\xa8\xf2\x2f\x6c\xb5\x40\x3c\xa8\x64\xbe\xf8\x25\xaf\x65\x55\xa1\x72\x94\x32\x93\x2d\x0a\x83\x35\x36\x68\xd4\x2a\xe3\x32\x27\x99\x15\x9f\xe6\x5c\x68\xa3\xba\x06\x85\x61\x86\x4b\x91\x6f\x5c\xa8\x78\x5d\xb3\xbc\xe9\x9e\x72\x69\xb0\x6e\x3a\x2b\xff\x36\x6e\xb4\xbd\x6f\x2f\x9f\xb2\xaa\x62\x15\xee\xa5\xc1\x27\xb2\x28\x2a\x9d\x4b\x53\xb7\xf6\x0f\x59\xfb\xdb\x0e\xad\xbf\x2a\xd5\x16\x7b\x59\xb4\x4a\xb6\xac\xb2\xea\xef\xa5\xd3\xe5\x97\x5c\xa1\x96\x9d\xb2\x32\xe9\xf2\x8b\xe5\x0f\xfb\x4f\xfc\x7f\x15\x06\x2a\xf7\xd7\xa0\xa6\x00\xd1\xd8\x50\x34\xec\xe3\xee\x28\xf2\xc5\x51\x76\x74\x98\x1d\xee\xbd\xc3\x4b\x91\x84\xe1\x82\x29\x28\x71\xc6\xba\xda\x9c\xcb\xba\xc6\xc2\x48\xf5\x49\x6a\x03\xda\x28\x2e\x2a\x38\x81\xa8\x96\x05\xab\xe7\x92\xc4\xd8\x46\x7d\x4b\x71\xdf\x71\x61\x8e\xde\xc3\x09\xfc\xf4\xe3\xd1\x2f\x61\x98\xe7\x70\x8f\xa6\x6b\x3f\xd6\x72\xca\xea\x07\xba\xed\x56\xc9\x05\x2f\x51\x9d\x8a\xf2\xd2\x3b\x09\x34\x1a\x0d\x5d\x0b\x66\x8e\x50\x59\x52\x70\x36\x6c\x3d\x31\x30\x51\x42\xef\xd3\x2c\x9c\x75\xa2\x78\x0b\xe3\xb8\x30\x4f\xe0\xd3\x30\x3b\x77\xff\x27\x10\xf7\x2e\xca\xee\x5b\x26\x7a\xda\x14\xde\x0d\xeb\x96\x9f\xea\x19\xa6\x80\x4a\x49\x95\xc0\xd7\x30\x0c\xf2\x1c\x2e\x17\xa8\x56\x70\xf4\x33\x68\x2c\xa4\x28\x35\x2c\xf1\x9f\x35\x49\xbc\x02\x23\xe9\x3a\x81\x85\xa1\xcf\x0d\x9b\x43\xd1\x1b\x0a\x98\xb1\x7c\x48\x5b\x6f\x44\x20\xdb\x52\xa4\x81\x9c\xc1\x60\xe7\x63\x6b\x44\x22\xfd\x73\x8e\x02\x54\x27\x04\xb9\x82\x0b\xb2\x4b\xd9\x15\xf6\x80\x99\x73\x0d\x5c\x03\x03\xcd\x4b\x2c\x98\x4a\xad\xb1\x96\xa3\x13\x96\x85\xe5\x5a\xaf\x46\xf4\xfd\x4a\xcf\x57\xb6\x38\x48\x7b\x30\x48\x9b\x85\x01\x79\x5b\x8f\x4c\x05\x5b\x0d\x18\x06\xac\x2c\x15\x1c\x9f\xc0\xac\x31\xd9\x7d\xab\xb8\x30\xb3\x38\xfa\x4e\x1f\x7f\x57\x46\xe9\xd6\xe0\x7a\xbd\x4a\x41\x94\x84\x01\x2a\xcb\xc8\xda\x3d\x16\xbc\x4e\xc2\x80\xcf\x20\x96\x3a\xfb\x88\x06\xc5\x22\x8e\x1e\x1f\xee\x4e\xcf\x27\x37\x1f\x1f\x2f\x6f\x4e\xcf\xae\x2e\x2f\xa2\x24\x81\x93\x13\x88\x8c\xea\x30\xb2\x9e\x0a\x28\xd5\xcf\x6b\x8e\xc2\x10\xaf\x8d\xc4\xcf\x6e\x70\xe9\xb6\xe2\x30\x70\x94\xeb\xbd\x3f\xb9\x99\xdf\xa1\xf7\x23\x97\xe2\x16\x15\x97\x65\x7c\xf4\xf3\x3b\xaa\xbf\xd9\xbd\xf5\x7a\x92\x6e\x3f\x78\x29\xca\x56\x72\x61\x62\x32\xc6\x2e\xa2\x89\xd0\x58\x74\x0a\x63\x4b\x90\x84\x41\xa0\x37\x22\x91\xd4\x1f\x49\x4c\xd2\x52\x28\xa7\xb0\x56\x89\x0e\xf1\x99\xa5\xfc\xc7\x09\x08\x5e\xc3\x57\xba\x4b\xa1\xe9\x94\xa0\xdf\xa9\xfb\x43\xbe\xb8\x24\x33\xce\xe2\xc8\x9a\x13\x0a\x85\xcc\x90\xbf\xfb\x7c\x3a\x86\xef\x16\x91\xbd\x94\x98\x3e\x87\xc1\x33\x60\xad\xd1\x32\xdc\x70\xfb\x09\x0c\x95\x88\x44\xba\x91\xb2\x1d\x32\x2d\x09\x83\xe7\x30\x0c\x4c\x4b\xb6\x16\xb8\xdc\x4c\xa1\x78\x53\x3f\x81\xcb\x3b\x5f\x31\xe3\x24\x09\x03\xaa\x45\xd9\x3d\x9a\x17\x87\x4c\x9b\x84\x61\xe0\x3a\x56\xf6\x41\xc9\xc6\xa7\x30\xd9\x22\xc9\x26\x62\x26\x2f\xe2\x48\x1b\xa6\x48\x9d\x03\x2b\x9b\x8a\x52\xf0\x07\xae\x49\xfe\x88\xdc\x80\x5a\x47\xc7\x40\x5f\x69\x18\x3c\x27\x61\x6f\xa5\x4d\xa1\x4c\x6b\x4d\x16\x3e\x87\xae\xbe\xbc\x56\x02\xf7\xc6\x7f\x0a\x7d\x17\x80\x77\xfd\x57\xd6\xab\x99\xec\xac\x2e\x64\x66\xcd\x9a\xb6\xe6\xa2\xba\x55\x72\xca\xa6\xbc\xe6\x66\x45\x66\x3c\xcc\x0e\x7f\x0e\x03\xae\xaf\x28\x51\x6d\x0c\x8f\xe2\x7f\x72\xff\x78\xf5\xc7\xf9\xe9\x55\x34\x8a\x7b\x9b\x25\x3d\xbd\x75\xdf\x16\xc6\x27\x70\x94\x1d\x0e\x4e\xe6\x33\x58\xbc\x60\xdd\x67\xd6\xfd\xe9\xf5\xed\x15\x7d\xdc\xde\xfd\x71\x76\x7a\x36\xb9\x9a\x3c\xfc\x3b\x4a\x7e\x83\x05\x45\x5c\x14\xed\xba\x80\x1c\x75\x29\x16\x2e\x8a\x8f\x4f\xc0\xe3\x97\xec\x96\x29\x8d\x1f\x6a\xc9\x4c\xbc\x48\xe1\xfd\x4f\x3b\x22\x78\x37\x47\x92\xdc\x05\xe8\x0e\xbd\x76\x1f\x1d\x07\xe7\xe0\x87\x9b\x57\x0e\x0e\x03\x5b\x6c\x11\x3a\x8d\x1b\xe5\x79\x72\x01\x15\x0a\x54\x8c\x0a\x22\x4c\x04\x48\x45\xae\x9b\x49\x35\x5c\x4a\x05\x7f\x29\xd5\x17\x88\x99\x81\x1a\x99\x36\xb0\xe4\x66\xee\xea\xad\x25\x42\x9b\x5f\xbe\xf0\x8f\x39\x42\xd3\x69\xd3\xff\x44\xdf\xfa\x26\x17\x1a\x3a\xc1\x67\x52\x35\xf5\x0a\x98\x01\xc5\x44\x29\x1b\x98\x29\xd9\x58\x0e\x28\x0c\x57\x48\x41\x5c\x20\xb5\x0d\x6a\xbd\xef\x7f\xca\xdc\x15\x1f\xa4\x02\x7c\xb2\xb7\xa6\x1b\x9a\x3c\x1d\x28\xb6\xda\xbc\xbd\x94\xa8\x41\x48\x03\xa5\xb4\xd2\x7a\x16\x83\x9d\xa8\x62\xdd\x3b\x05\xe2\xcd\x20\x9e\x5c\xdc\x51\xd7\x3a\x63\x1a\xcb\x38\xb1\xc5\x6c\xff\xa9\x5b\xa6\x50\x18\x47\xbf\x87\xd5\x16\x47\x26\x8e\x7d\x9e\xc3\xc3\x1c\x35\x42\xc3\x9e\x78\xd3\x35\x1a\x98\x42\x32\x7d\xd5\x31\x55\x02\xab\x18\x21\x57\xd0\xb2\x41\x33\x27\xaf\x54\x92\xfe\x2e\x95\x14\x95\xed\x8b\x1a\x05\xa1\x6e\x60\x60\x5c\xb7\x2d\x99\x61\xd0\x09\x7c\x6a\xb1\x30\x58\xd6\xab\x57\x4a\xb4\x4c\x5c\xf1\x86\x1b\xbd\x09\x1c\xdc\x9a\x8d\xd9\x53\x43\xa0\xb9\x33\x78\x2e\x3b\x61\xec\xc6\x31\x1c\x1d\x1e\xda\xf2\x7f\xb9\x40\x61\xc6\x1b\xf4\xaf\xdf\xbc\xe2\xe2\xcb\xcb\xbd\x7e\xf3\x39\x49\xc3\x97\xc2\x9c\x31\x53\xcc\x47\xa5\xe8\xb5\xcd\x87\xc2\xda\xd7\x20\x22\xd9\x5f\x63\xd7\x7b\xf8\x64\xae\x59\x7b\xeb\x91\xaf\x54\xf1\x08\x04\xdb\x9e\x29\x9b\x56\x6a\x6e\x70\x3f\xa5\xbd\xc3\x17\xeb\xaf\xcf\x29\x8c\xf7\xce\x1c\xe4\xff\xfa\x9c\x50\x71\xf7\x95\xd8\xb4\x54\x76\xdf\x86\x16\x3f\x48\xf5\x80\xda\x10\x86\x69\x90\x09\x8b\xb4\xa6\x36\x65\x4b\x82\x46\x9d\xe0\x06\xa8\x45\x71\x51\xa5\xc4\x92\xbc\xde\x70\x6a\x7d\xda\x66\x82\xa6\x2b\x80\x4d\xe5\x02\x6d\x02\xcb\xce\x10\x72\xb2\x29\x34\x3a\x9b\xc1\xc4\x80\x13\x4f\x03\x13\xc0\xc5\x41\x83\x8d\x54\x2b\xe2\x39\x74\x82\x99\xcf\x33\x6e\x11\x54\x9f\xc2\xa5\x6d\x2d\xfa\xed\x40\xd5\xeb\x14\x27\x10\xbf\x5b\xf7\xd8\x89\xb8\xb6\x37\xfe\x2d\x88\x1a\x0c\xb2\x1d\xbf\xe8\xd7\x2f\xd9\x51\xcf\xde\xd5\xaf\xf1\x5b\x7a\x75\xef\x4d\xdc\xd6\x53\xf3\x1c\xae\xbb\xa7\x7b\x3b\x2d\x5f\xf3\xb2\xac\x71\x49\xa9\xdb\x5b\xb8\x59\x2f\x99\x39\x33\xa0\xe7\xb2\xab\x4b\x72\x2c\x33\x86\x15\x73\x2c\xc9\xcf\x0c\x46\xd3\xa7\x1f\xbd\x33\x62\x3d\x31\xae\x8c\x99\xa5\xad\x61\xa2\xd2\xc7\x60\x91\x81\x76\xae\x70\xa0\x98\x95\xa5\xfb\xed\x06\x1f\xe0\x62\x26\x89\x2d\x85\x85\xc2\xbf\x3a\xd4\xe6\x40\xb7\x58\xf0\x19\x2f\x7a\x18\x41\xdc\xef\x78\x35\x37\x20\xe4\x12\x96\x08\x52\xd4\x2b\xd0\x5d\x6b\xe7\x7c\x22\x22\xcf\x53\xb5\xe6\xc2\x32\xa2\x8a\xcd\x8c\xd3\xe2\x82\x19\x56\x4a\x0b\xb5\xb0\x30\x7d\x40\x6c\xb1\x43\x4c\xba\xf0\x02\x6f\x58\x83\x7e\xe4\x4a\x80\x88\xe3\xb9\x31\x6d\xf6\x89\x89\x92\xfa\x07\x8c\x7f\x91\xb3\xa5\xa1\xf9\xdb\xe1\x5b\x3b\x8a\x67\xdb\x79\xa6\xc3\x3e\xd5\x88\x75\xda\xea\xd8\xfa\xf3\xe3\xb6\xdc\x4f\xc8\xdd\x79\x6e\x21\xe4\x2d\xa1\xf9\x5a\xc4\xd1\x69\x69\xcb\xe7\xda\xfc\x23\xcf\x45\xeb\x10\x70\xa2\xc3\x7e\xe1\x7b\x62\xa7\xc4\x86\xa6\x1f\xe8\xbc\x65\xa2\x96\xee\xdc\x1d\xea\x56\x0a\x8d\x7f\x2a\xee\xc0\x16\xbc\xf3\xeb\xd6\x6f\x89\x43\x0f\x7c\x06\xaa\x5f\xfa\x7c\x37\xb1\xd0\x28\x7f\x9c\x23\xab\xcd\xdc\x21\x96\x20\x98\x67\xd6\xfa\x9f\x1e\x1e\x6e\x63\xb5\x4c\xc1\xb6\xe5\x5e\x18\xfa\x24\x84\x11\xd0\xe8\x78\x7c\x02\xaa\x9f\x1b\x63\x2a\x57\x41\xa0\x87\xb4\xb2\x4d\xe0\x25\x2a\x25\x92\x29\xab\x2c\x95\x7f\xdc\x78\x85\x5c\x43\x2f\x28\xd1\x65\xd7\xd8\x4c\x51\xc5\x51\x61\xdf\x6a\x0e\xfa\x28\xe4\x65\x94\x64\xf7\x36\x0e\x62\x07\xf0\x4e\x22\xf8\x0a\x79\x4e\x80\xed\x15\x2d\xd5\x42\x6a\xe0\x1a\x8d\x57\xe5\x2f\x5e\x0e\x00\xac\x97\xe3\x06\x97\xbb\x6f\x4b\xa1\xeb\x78\x69\x27\x8d\xf5\xc5\xce\x30\x5b\x40\x5a\xb0\x13\x95\xdb\x59\xe3\xe2\xd5\xac\xe1\x65\x80\xc6\x0a\x30\x06\xe9\x8e\x32\x3a\xa6\x3b\xdc\xe9\x38\x79\x76\x17\x8f\xe6\x10\x6f\xd6\x7e\x34\xb2\xa6\xbb\x47\xe3\xf5\xb1\xfa\xba\x33\xdb\xa5\x7d\xa3\xb8\x1a\xcd\xb7\x4b\x6b\x21\x66\x1f\x3d\xee\x3b\xcf\xe1\xb4\x2c\x6d\x55\xe8\x59\xfa\x6a\xe3\x18\x12\x0d\x75\x90\xc7\x94\xf6\x6d\xb8\x31\x51\xe1\x38\x32\x74\xec\x23\x7b\xa7\x0a\xa7\x65\xd9\xff\x9e\xb2\x2a\xfb\x1d\x57\x71\x62\xf9\x65\xff\x62\x75\x87\xde\x8b\x1b\x02\xbd\x10\xc6\xbf\x90\xf4\x51\xbf\x8e\x18\xcf\xd7\x01\x0f\xbb\xe4\xc6\x50\x92\x2f\xe9\x19\x5e\x8a\x42\x96\x0e\x2e\xbb\xe7\x2a\x2a\xb0\xc0\xcb\xa1\x20\x5e\x5c\xf8\x9a\xe8\xe3\x5e\x17\x16\x86\xdb\xfc\x19\x92\xeb\x37\xd0\x45\xf6\x89\x69\x0f\x06\x63\xf7\xda\xe2\x6e\xb8\x92\x15\x85\xbd\x03\xd1\x65\x1f\x93\x2f\x18\x64\x13\xed\xe0\x66\x39\x58\xec\x2d\x26\x8b\x3c\xd7\x28\xf5\x33\xd4\xb6\xd0\xfb\x9b\x7c\x66\xac\xd6\x03\x23\xa7\x05\xd9\x64\x72\x91\x3a\x0b\x4d\x2e\xac\x01\x0a\xab\x00\xe9\x3a\x24\x5c\x4a\xab\x83\x09\x86\xe5\xde\x10\xa5\x6f\x27\x34\x4f\x21\xf5\xb6\x39\x3e\xf9\x6e\xa1\xc9\x99\x6e\x04\xa0\x66\x94\x82\x96\x14\x64\x60\xe6\x52\x23\xfd\xb0\xfd\xa8\x90\x4a\x61\xed\x52\xb2\x96\x95\xb6\x5d\xd1\xca\xa4\xed\xf0\xa2\x7b\xe3\xd6\x28\x62\x2f\xab\x2d\x3f\x3f\xfe\x00\xdf\x7f\x6f\x57\x9d\x26\x76\xf1\xe8\xbd\x2b\x49\x9b\xef\x5c\xce\xd7\xc7\xb4\x3b\x5d\x19\x84\xf8\xc7\x1f\x0e\x8a\x39\x53\x24\x6c\x92\xc2\xaf\x7e\xf5\xe8\xfd\x7a\xd5\x8f\x3c\x16\x9f\xfb\xe0\x71\x66\x0b\xbc\x0c\x67\x3a\x85\x47\x32\xda\x1c\x9f\xb2\x0b\xa4\x80\xf3\xb6\xe9\x85\x7c\xbb\xa3\xca\x32\xb3\x87\x1e\xa9\xea\xf9\xf2\xb0\xf9\x62\x45\x4e\x74\x0f\xf5\xd9\x19\xaf\x2e\x45\xc9\x99\xc8\x3e\x5b\xdb\xc6\x83\x40\xff\xf9\xf5\xf8\xbf\x89\xaf\x90\xde\xbd\xbb\xa5\xf4\x46\xfb\x5b\x42\xd2\x99\x6f\x93\xb1\x97\xa6\x17\x6f\x54\x91\xa8\x78\x2a\x8b\x01\x5e\x76\xad\xad\x5d\x91\x40\x7a\xf0\xec\xe1\xdb\x08\x09\xae\x81\xf1\xfa\xd1\xa3\x44\x5d\x28\x3e\xb5\xa3\x30\xcd\xbc\xac\x6d\x6b\xee\x5e\x35\x2d\x88\xfa\x4c\x00\x7d\x36\xaa\xb2\x5d\xeb\xfc\xae\x86\x67\xde\xe1\xe1\x65\x8d\x38\xb7\xbc\xa5\x50\x56\x2e\x98\xa2\x0b\x46\x70\xc9\xbe\x7d\x8c\x1f\x48\x4e\x6f\x6f\x1f\x6f\x4e\xaf\x2f\xa3\x64\xf4\x5e\xd1\x9f\x39\xd9\x41\x3a\x7e\x17\x19\x51\xbc\x9d\xd7\x06\xab\x30\x50\x3e\x22\x06\x25\xae\x51\x55\x18\x5b\xec\xe3\x57\x2e\xdc\x64\xee\xde\x02\x87\xd5\x1b\x5c\x92\x97\x86\xc9\x52\xdb\x87\x4a\xff\xb6\x9f\xdd\x17\x73\x6c\xd8\xe7\xbb\xab\x74\x63\x75\x8d\xf7\x7e\xc7\x55\x5f\x3d\xbc\x98\xee\xa9\xd1\xcd\x82\x1e\x77\xa9\xf0\x39\xfc\x5f\x00\x00\x00\xff\xff\x06\xb9\x8e\xbf\xc7\x1a\x00\x00")

func _hardcodedTracingGoBytes() ([]byte, error) {
	return bindataRead(
		__hardcodedTracingGo,
		"../_hardcoded/tracing.go",
	)
}

func _hardcodedTracingGo() (*asset, error) {
	bytes, err := _hardcodedTracingGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../_hardcoded/tracing.go", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x84, 0xe2, 0xb0, 0x9f, 0x2e, 0x93, 0xd7, 0xed, 0x9a, 0x48, 0x80, 0xf9, 0xae, 0x9, 0x3f, 0x5d, 0xdc, 0x51, 0x3d, 0x78, 0xdb, 0x34, 0x45, 0x65, 0xac, 0x28, 0x3e, 0xcd, 0xf9, 0x60, 0xc8, 0xc}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"../_hardcoded/doer.go":       _hardcodedDoerGo,
	"../_hardcoded/middleware.go": _hardcodedMiddlewareGo,
	"../_hardcoded/tracing.go":    _hardcodedTracingGo,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//
//	data/
//	  foo.txt
//	  img/
//	    a.png
//	    b.png
//
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"..": {nil, map[string]*bintree{
		"_hardcoded": {nil, map[string]*bintree{
			"doer.go":       {_hardcodedDoerGo, map[string]*bintree{}},
			"middleware.go": {_hardcodedMiddlewareGo, map[string]*bintree{}},
			"tracing.go":    {_hardcodedTracingGo, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = os.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
