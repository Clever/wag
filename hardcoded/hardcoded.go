// Code generated by go-bindata.
// sources:
// _hardcoded/doer.go
// _hardcoded/middleware.go
// DO NOT EDIT!

package hardcoded

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __hardcodedDoerGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd4\x39\x7f\x6f\xdb\x46\xb2\x7f\x93\x9f\x62\x22\xa0\x0d\xe9\x28\xa4\x9d\xd6\x7d\x0f\xca\x73\x1f\x5a\xdb\xb9\x04\x48\x93\xa0\x72\xaf\x01\x82\xa0\x59\x91\x23\x6a\x63\x72\x97\xd9\x5d\x4a\x16\x5c\x7f\xf7\xc3\xec\x2e\x29\x52\x92\x95\xf4\x07\x0e\x77\xfa\x43\xa2\xb8\x33\xb3\x33\xb3\xf3\x7b\x6b\x96\x5d\xb3\x02\x21\x2b\x39\x0a\x13\x86\xbc\xaa\xa5\x32\x10\x85\xc1\x28\x93\xc2\xe0\x8d\x19\x85\xc1\x08\x45\x26\x73\x2e\x8a\xf4\xa3\x96\xc2\xbe\x50\x4a\x2a\x4d\x4f\xf3\xca\x42\x94\xb2\xa0\x9f\x8a\x99\x45\xaa\x98\xc8\xe9\x8f\x40\xe3\x7f\xd2\x85\x31\x35\x3d\xeb\xb5\xc8\xe8\xd7\xf0\x0a\x47\x61\x18\x8c\x0a\x6e\x16\xcd\x2c\xc9\x64\x95\xb2\x39\xde\xa4\x8b\xb5\x36\x8a\xdf\x3c\x2e\x64\xfb\x38\x1a\x42\xe5\x52\xc8\x25\x13\x0b\x9e\x63\x8a\x4b\x14\x46\xcb\x46\x65\x38\x0a\x03\x59\xa3\x30\x8a\x65\x5c\x14\xd0\xc7\xe8\xbd\xef\x3f\x3f\x2e\xa4\x25\x2d\x4b\x26\x8a\x44\xaa\x22\xbd\x49\x89\x55\x2f\x76\x9a\x99\x1b\xcf\x75\x29\x8b\x02\x15\x8c\x0a\x59\x5f\x17\x09\x17\xe9\x79\x89\x4b\x54\xe9\x35\x5b\x2f\x11\x1f\x17\x32\x59\x9e\xa6\x0e\x68\x14\xc6\x61\x98\xa6\x90\x4b\x54\xc0\x35\x30\x01\x5c\x18\x54\x73\x96\x21\xcc\xa5\x82\x51\x2e\xb9\x28\x46\x40\xa4\x41\xe1\xa7\x06\xb5\xd1\x50\x4b\xad\xf9\xac\x5c\xc3\x8a\x9b\x05\xac\x14\xab\x6b\x2e\x8a\xd0\xac\x6b\xf4\xa4\x3a\x22\xb7\x61\x70\x21\xa3\x0c\x8e\x88\x42\x72\x6e\x8f\x6d\x0c\xca\xff\xff\xd9\x51\x8c\x21\x6a\xff\xeb\x5a\x0a\x8d\x63\xb0\x27\x16\x87\x77\xa1\xa3\x2a\xeb\x57\xac\xc2\x73\x73\x03\xda\xa8\x26\x33\xb7\x77\x96\xef\x19\xd3\xe8\x69\x3c\x67\x22\x2f\x51\x41\x8d\x6a\x2e\x55\xa5\xc1\x2c\xd0\xae\x0f\x78\x77\xd4\xe8\xf5\x05\xf1\xb9\x21\x36\x6f\x44\x06\x51\xde\x2d\xc5\xf0\x17\xd8\x26\xa9\x15\x9a\x46\x09\xf0\xc7\x92\x5c\xc8\x48\x25\xe7\xee\xac\xa2\x78\x0c\xd9\x18\x9c\x78\x69\x0a\xfe\x84\x2d\x47\x2c\xcf\x75\xfb\x02\x8c\x1c\x2a\xde\x71\xdf\x07\x77\x02\xd0\x7e\xb9\xd5\x7c\xd8\x13\xa5\x07\xf7\x57\xa5\x09\x83\xcc\xdc\xc0\xe4\x0c\x7a\x32\x90\x05\xd3\xa1\xd0\xeb\xcc\xdc\x24\xff\x64\x65\x83\x51\x77\x50\xb7\x77\x71\x12\x91\x47\x88\x22\x0e\x83\x25\x53\xa0\x6b\xe8\xd9\x73\x32\xad\x99\x08\x83\x34\x85\xab\xd7\x17\xaf\x27\x24\x38\x18\x56\x68\x50\x58\x32\xe3\xa5\xe7\xa2\x6e\x0c\xe4\xcc\xb0\xff\x0f\x03\x3e\x87\x9a\x29\x14\x86\x30\x69\xd7\x6d\x6a\xcf\x94\xac\x5a\xf6\x32\x73\x13\x3f\xed\xc3\x3f\x38\x03\xc1\x4b\xd2\x54\xa0\x6b\xd8\x42\x36\x4c\x59\x28\xcf\xfe\x78\xb0\x7a\xbe\xe0\x65\xfe\x7a\x1e\x6d\x88\x6d\x94\x10\xc7\x61\x70\x07\x58\x6a\xfc\x32\xca\x04\x6e\x25\x41\xa5\x48\x04\x5d\x27\x57\x8a\x65\xa8\xa2\x38\x79\x21\x3e\x62\x66\x22\x5d\xf7\xec\x24\x0c\xfa\x71\x22\x79\x7e\x75\xf5\xe6\x39\xb2\x1c\x95\x3e\xb0\x74\xce\x94\xe2\xa8\x22\x95\xb8\x17\x71\xfc\xd4\xee\xd7\x53\x81\xb7\x4e\xc1\xcb\x31\xcc\x2b\x93\x5c\xd2\x49\xcf\xa3\x51\x26\x9b\x32\x17\x0f\x0d\x70\xcb\x4c\x67\x89\x0b\x47\x19\xa2\xaf\x96\xf1\xc8\x1a\x86\x93\xc4\xd3\xc9\x93\x9c\x2c\xbc\x6f\xd4\x0a\x8d\x5a\xb7\x4e\x49\x7f\x38\x6a\x38\x3d\x7e\xbb\xcf\xa2\x2d\xec\x8e\x3d\x6f\x3e\xd6\xb2\x03\x0b\xf5\x46\x96\x3c\x5b\xc3\xcf\x9b\x67\xbf\x5f\xef\x0d\xe4\x38\xe7\x02\x35\x30\x47\x19\x6a\xfb\x3a\x71\x9b\xf5\x01\x07\x71\x2a\x4d\xe1\x47\x96\x5d\xcb\xf9\x9c\x8c\x90\xe4\x72\x41\x44\x34\xd5\x8c\x3c\x53\xe4\x60\x78\x45\xda\x90\x73\x4f\x98\x19\x83\x55\x6d\x74\x12\x06\x2d\x6a\x14\xc3\xbb\xf7\x94\x2f\x92\x8b\x46\x31\xc3\xa5\x33\x72\xbb\x2b\x28\xcc\x90\x2f\xd1\xd1\xed\x2b\x62\x0c\x4c\xc3\x0a\xcb\x92\x7e\x69\x51\xa1\x6e\x4a\x03\x72\x6e\xb1\xdb\x9c\xe4\x7d\xf7\xa1\x86\x0f\x17\xf2\x03\x54\x68\x16\x32\x4f\xc2\xc0\x52\x8f\x06\xee\x3c\x86\x7b\xbc\x79\x26\x65\xe9\x75\x36\xe5\xa2\x28\xf1\x90\xe6\xcc\x82\x99\xee\xf4\x58\xcb\x2d\x48\x91\xa1\xd3\xe6\x2e\x89\x41\x80\xde\xa3\x50\x66\x60\x2d\x1b\xd0\x0b\x32\xb5\x6e\x1b\xec\x68\x9f\x68\xcc\xa4\xc8\x81\xcd\x0d\x65\x12\x03\x73\xc6\x4b\x9d\xf8\xb0\xb6\xb3\x5f\x0c\xf7\x6b\xbe\x17\x87\xb7\x56\x6e\x4f\xe0\x08\xec\x9b\xa9\xdd\xed\xae\x6f\x45\xb0\xe2\x65\xe9\x39\x13\x52\x3c\x7e\xf3\x7a\x7a\x35\x76\x4f\x3f\x5c\x9d\x3f\xdf\xe4\x41\x2b\xcc\xe9\xdb\xb7\x49\xd8\x85\xb1\x17\x86\xac\x55\x83\x90\x06\xb2\x46\x51\xc4\x28\xd7\xad\xb5\x88\xb5\x3b\x84\x56\x1d\x98\xc3\x6c\x7d\xcf\xe1\x1e\x10\xd8\x9d\xb6\xc2\x4f\xb0\x75\xe2\x0a\x75\xbd\xef\xd8\xfb\x47\x4f\x3a\xf1\xf1\xc7\xc7\x83\xdf\x7f\x27\x89\x92\x9f\xac\x31\xc1\xd9\x19\x8c\x48\xe0\xd1\xbe\xf7\x24\x3e\x2d\xd8\x08\xa2\x6b\x0a\x6f\xa6\xd1\xe7\x32\x47\xf8\x3f\x38\x3d\x3e\xee\xc7\x96\x39\x2b\x35\xf6\x83\x84\x51\x0d\x7a\x35\x5f\xde\xd4\x52\xa0\x30\x9c\x95\x7b\xad\x4f\x00\x6e\x20\x06\x4e\xec\xac\xee\x1e\xfc\xc3\xa6\x37\xe7\x4b\x4a\xfd\xfe\xad\x2d\x5d\x7a\xbb\x94\x14\x0d\x32\x85\x4c\x93\x87\xaf\x18\x37\xd6\x3e\xb4\x2d\x33\xd0\xac\x10\x45\x77\xf0\x13\x38\x39\x3e\x1e\xc3\x13\xfa\xfa\x96\xbe\xfe\x97\xbe\x28\x40\x9c\x7c\x77\x7c\x0c\x15\x2f\x4b\xee\xac\x58\xc3\xa3\xf4\x31\x34\x35\x25\xb3\xd3\xaf\xe0\x23\x37\x06\x55\x7b\xb4\xfb\xa5\xf8\x02\x83\xa6\xcc\x51\xb1\x6b\x8c\xb6\x96\xc7\x70\x1a\x87\x81\xc0\x1b\x0b\x71\x72\x7c\xdc\x1a\xf9\x4f\x1b\x8e\xc2\x40\x89\xdc\xa6\x72\x26\xf2\xe4\x15\xae\xa2\xf6\x61\x6a\x2b\xd3\xc8\x22\xbc\x92\xab\x28\x4e\x7e\x11\xfc\xe6\x15\x13\xd2\xe5\x39\x9b\xe9\x8f\x93\xe3\x53\x48\x53\x2b\xd6\x29\x15\x5b\x19\x0a\xe3\xe5\x0a\x03\x2a\x19\xb9\x27\x5e\xd8\xb8\xde\x5a\xc4\x3b\xfe\x1e\xce\xc0\xb2\xf6\x08\x06\x4c\x47\x51\xa4\x44\x9e\x3c\x2b\x25\x33\xdf\x7d\x1b\xc5\x47\x4f\xe2\xc7\x27\xf1\x11\x1e\xcd\xfd\x1b\x42\xa2\xfd\x9d\x60\x47\x67\xf0\xa4\x6f\x55\x0a\xcd\x7f\xac\xef\xde\x77\xc0\xff\xfd\x0e\xfc\x4a\xee\xcf\x1a\xce\x49\x29\x41\x0a\xea\x39\x9c\xf2\xc8\xa1\xba\xdc\xe1\xb3\xf0\x90\xc0\x61\xc7\xa5\x70\x50\xd5\x66\x0d\xba\xe4\x19\xb6\xca\x1d\x50\xf8\x93\x59\x60\x18\xf6\x59\xb9\x62\xeb\x5e\xbc\x20\xf9\xef\xd9\xed\x8f\x26\xdc\x1e\x0f\x4e\xad\x6d\x63\x63\x15\xe4\xeb\xbd\xa1\x1a\x7e\xe5\x66\xd1\xd7\x51\xa7\x0d\x10\xb8\x02\xdf\xf6\x39\x33\x96\x4b\x54\x8a\xe7\xbe\xae\x70\xbd\x31\xc8\x19\x55\x70\x0f\x75\x57\x8c\x75\x65\x90\x95\x68\x8b\x3c\x15\xcc\x2d\xd1\xb6\xfe\x1c\xc3\x3d\x25\x57\xbc\x0d\xd9\x6f\x78\xfc\x0a\xd1\x77\x2d\x41\x66\x6e\xc6\x03\x39\x6f\xef\x06\x94\xe3\x7e\xd3\x72\xd4\xd5\x82\x7f\x47\x07\xd6\x6e\x31\x06\x79\xbd\xd5\xbe\xf8\x7e\x65\xc8\x57\x9c\x44\x7d\x31\xad\xa3\x3d\x90\xd7\xad\x57\x74\xba\x38\x83\x3c\xe9\xfd\xb7\x4e\xd2\x65\x16\xda\x67\xb3\x96\x6c\x0c\xd3\xb5\x41\x7b\x7c\xdc\x2d\x74\x7e\xee\xe2\x68\x5b\x75\x51\xd0\x7d\x6a\x7d\xef\x69\xfb\xee\xd1\x23\xcf\x91\xae\x5d\x78\x38\x1b\x56\xe0\x01\xf1\xdd\xe2\x9f\x9d\x41\x89\x22\x6a\xd9\x8b\x29\x2c\x3c\xe8\x33\xe8\xa3\x91\x8b\x3e\xae\xb6\xb7\xe4\x83\x99\x42\x76\x1d\x06\x24\x1c\x15\xa1\xe7\xa5\xd4\xd8\x16\xa7\x96\x6f\x98\xc9\x7c\xed\x0a\x63\x72\x9f\x82\x71\xd1\x06\x96\x1f\x65\xbe\x4e\x2c\x06\xc9\x1d\xb8\x52\xab\x44\xac\x3b\x46\xde\x79\x06\xdf\xc7\xc3\x70\xee\x79\xf0\x9e\x99\x71\x95\x35\xdc\xfc\x48\xac\xa0\xb2\x3d\x02\xaf\xea\x12\x2b\x14\xc6\x9b\xbb\x83\x80\x99\x03\x81\x9a\x8a\x72\x25\x6c\x5c\x9f\xa2\x81\x1c\x67\x8d\x6d\x26\x49\x85\xf4\x2b\x6b\x54\xcc\xe0\x00\x99\x0b\x60\x50\x51\x18\x5c\x2d\x50\x21\x95\x9d\x36\x91\x48\x51\xae\xa1\x94\x45\x8f\x15\xd0\x86\x19\x74\xe9\xde\xc2\x50\xba\x98\x95\x32\xbb\xb6\x49\xa2\x4b\x30\x73\x25\x2b\x28\xa4\xed\x64\x17\x4a\x36\xc5\xc2\x87\xbe\x3d\x22\x1d\x6a\x7b\x1c\xff\xee\x63\x6b\xf7\xc0\x13\xb0\xcd\xb7\xeb\xb0\xbb\xa1\x8f\xfd\x1c\xb9\x3f\xc9\x4b\xfb\x43\x8a\x24\xf3\xf2\x58\xd3\xe9\xe5\x6b\x91\x21\xe8\xb5\xc8\x12\x7a\xb2\x6a\x7e\xee\x86\x57\xd3\xe9\xe5\xe5\x92\x82\x07\xd7\x80\x15\x25\x75\x9b\xe5\x36\x53\x2e\x58\x72\x06\x1a\xd5\x12\xd5\x63\x4d\x80\x6e\xa6\x95\xd8\xdc\x89\x3a\x53\x7c\xe6\x4a\x26\x52\xae\x55\x14\xe5\x02\xd6\x6e\xee\x35\xb0\xbd\xdb\x46\xfc\x2b\x5a\x3e\xf0\x71\xe2\xc2\x87\x8f\x5a\x8a\xc9\x88\x88\x8d\x3e\x84\x81\xd5\xc4\x17\x63\x09\x56\x59\x2c\x1f\x43\xce\x65\x23\xcc\x3e\x2c\xee\x5e\x7b\x2c\xd5\x83\x26\x6c\xdb\x31\xdf\x8b\xbb\x8d\x8d\x1d\x74\x87\xfb\xc6\xd5\x4e\xac\xd8\x65\x7d\x0f\xee\x06\x9a\x08\xbc\xd0\xe7\x03\x23\x7a\x5d\xa3\xe8\x13\xb0\x29\xa7\x23\xc0\xf7\x40\x5b\x05\xc8\xb2\xe4\xa2\xb0\x6c\x3d\x63\xbc\x6c\x14\x1e\x52\xc0\x2e\xf4\x2e\x91\xb2\x24\xf7\xee\x13\x3b\x44\x64\x00\x7d\x1f\xb1\x69\x93\x65\xa8\xf5\x17\x12\xf3\xd0\xdb\xc4\xa6\x0b\xa9\x8c\xd7\x02\xe6\x9f\x13\x6f\x08\xbd\x43\xab\xc7\xd0\xe7\x55\x75\x0f\x43\x57\x0b\x85\x2c\x7f\x23\x65\xf9\x33\x52\x9e\x26\xa6\xee\x27\xb2\x0b\xbd\x43\x8f\x57\x28\x1b\xf3\x85\x4c\x79\x68\x22\x72\xee\x0a\xdd\x73\x29\x7c\xc9\x7b\x79\x83\x59\x43\xd5\x91\x33\xee\x21\x91\xec\x30\x34\x11\x7c\xc9\x0c\x8a\x6c\x7d\x25\x0d\x2b\x7f\x42\x26\x0e\x1b\x77\xd9\x83\xfe\xad\x42\x46\x86\xd9\x96\x03\xa5\x2c\x6c\x7c\x88\xca\xad\x90\x36\x86\x9d\x18\x62\x53\x56\x99\xbc\x10\x73\x79\x11\x61\xe2\xa6\x78\x15\xab\xdf\x39\xdf\x7f\xdf\x4d\x7a\x6e\xef\x28\xb7\x0d\xdd\x79\xb2\xcf\x81\x31\xe9\x07\x88\x31\x21\xf5\xbc\x78\x2f\x0a\x21\x6d\xe2\xc2\x06\xa5\xe7\xbc\xbb\x78\x1e\x65\x03\x63\xf1\xf6\xfa\xec\x64\x88\xb7\x2f\x0a\x58\xe4\x7d\xae\x3a\xd9\x16\x6e\x17\x66\x0f\xee\xd0\x43\x27\x7b\x71\x07\x30\xf7\xd2\x68\xfd\xe0\x10\x0d\x0f\xb3\x43\x63\xcb\x1f\x27\xfb\x64\x18\xc2\xec\x92\x18\x6c\xbf\x5f\x0d\xf7\x6d\xbf\xc7\xfb\x26\xdb\xb8\xbb\x30\xbb\x64\xbc\xd3\x1d\x62\xc1\xc3\x58\xdc\xcf\xf9\xda\x04\x30\xf9\x8c\xf7\x5a\x3a\xe5\x96\x43\xee\xda\x20\x26\xdb\x4e\x3b\x0e\x83\xbb\x38\x1c\x14\xe6\xbb\x65\x4b\x0c\x5c\x70\x13\xc5\x7e\x78\xfa\x06\x15\x97\x39\xcf\xec\x2c\xa5\x94\x85\x9b\xae\x0a\x56\x0e\x2b\x27\x2a\xc1\x98\xd6\x5c\xdb\xaa\x4b\xa3\x31\xb6\x80\xe9\x15\x58\x66\xa1\x50\x2f\x64\x99\x6b\x5b\x64\x35\x22\x47\xa5\x0d\x13\xb9\x6d\x24\xeb\xba\xe4\x99\x6b\xec\x66\xb8\x60\x4b\x2e\x55\x62\xd1\x7f\x11\x73\xa9\x4c\x23\x98\xc1\x72\x3d\xee\x17\x2d\xd4\xd5\x8b\x87\x06\x16\x6c\x89\xc0\xa0\x50\xc8\x0c\xac\xd8\x9a\x58\xc1\x9b\xda\x95\xb5\x5c\x5b\x2a\x39\x33\x6c\x0c\x5a\xc2\xca\xd6\xb9\x52\x19\x5b\x3b\x36\x4a\xd8\xc9\xaf\x00\x6e\x34\xe8\xa6\xb6\xf7\x8e\x54\xa7\xcf\x94\x64\x79\xc6\xf4\x8e\x18\x15\xd5\xb7\x99\xb6\x25\x93\x9d\xf5\xee\xd6\x4d\x10\x4d\xa7\x97\xb1\x63\x7f\x8a\x6e\x24\xac\x27\x69\x7a\xe0\x9a\x91\x6b\xdd\xa0\x4e\x4f\xbf\x4b\xba\x42\xd0\x97\x74\x54\xff\xd3\x69\xb9\x03\x09\x3c\xce\xd4\x28\x64\x55\x3b\x88\x9f\x9c\xb5\x7a\xb1\x13\x9f\xfe\x9a\xad\xd3\xf7\x21\xb9\x4b\x0c\xbb\x5c\x72\x6d\x50\xd8\x00\xec\xee\x2f\x04\x9a\xe4\xa5\x7d\x19\x8d\x4c\x56\x8f\xc6\x30\x3a\x79\xf2\x3f\xc9\x71\x72\x9c\x9c\x4c\x8e\x47\xbe\x15\xd9\xba\x7c\x08\x6a\x26\x78\x16\xb9\x4b\x84\xe0\x2e\x0c\x83\xa0\x70\x37\x5d\xc9\x94\x54\x14\x6d\xb6\xd9\xc7\x4f\xec\xe0\x7b\xa2\x52\xf5\xfb\xcc\x46\x74\x91\xad\x89\xad\x6f\x8e\x87\xe3\x5d\x0b\xc3\xb4\xb1\xa9\x62\x8a\x28\xdc\x04\xad\xcb\x0e\x5b\xc9\xe4\xf6\x6e\x80\xf0\x52\x16\xe4\x97\x5b\x38\x96\x3c\xbd\xbf\xb5\x12\xd8\x9e\xed\x37\x68\x47\x5f\x7e\x35\xbb\x8e\xb6\x26\xcd\x31\xdc\x42\xd7\x91\x73\x61\x47\x27\x9c\x2c\x96\x68\x04\x8d\x2a\x69\x9b\x11\x29\x63\x92\xa6\x23\x78\x04\xad\x32\x92\x1f\xf2\x5c\x45\x71\x32\xb5\xdb\xdb\xe3\xa0\x5e\xeb\x53\x77\x16\x56\x81\xaf\x70\xe5\xd3\x56\x34\xfa\xc7\xe5\xd5\x68\x0c\x8d\x2a\xc7\xa4\x7a\x87\xb0\xe7\x34\xac\xfa\x92\x37\x8a\x0b\x33\x8f\x5c\xc2\xa2\x2e\x5e\x60\xd6\x5e\xc3\xb5\x16\x3d\x9d\x5e\x52\x2d\x8d\xac\x9a\xc0\x57\xba\xbb\x07\xa2\x0f\xb5\xfd\x5c\x34\x68\xff\x59\xf5\x05\x0e\xb2\x63\xaf\x77\xfb\x9d\x4c\x9b\x99\xeb\x15\x7e\xe5\x66\x11\x8d\x46\x63\xf8\xba\xd7\xe6\xbb\xf9\xc0\xa7\x7f\x3b\xc3\x74\x82\xb8\xdc\x8c\x2f\x1d\x66\x72\xe9\x5c\xd5\x6f\x6d\x3b\xf5\xed\xea\xc3\x2d\x6d\xae\xf5\xa8\xb6\x49\x7e\x11\x15\x53\x7a\xc1\xca\xe8\xdd\xfb\xd9\xda\x60\x84\xcb\xe4\x82\x19\x16\xc5\xf1\x18\xbe\xc6\xdd\x4b\xb9\x1d\xb6\x3c\x5f\x96\x70\x62\x5b\xa3\x07\x67\x30\xf2\x7b\x9f\xcb\xaa\x62\x22\x1f\x1d\x46\x25\x23\x26\x83\x6f\x27\x20\x03\x2f\x78\xe7\x0a\xa5\xf7\x1b\xd0\x9d\x25\x38\x03\x0c\xdd\x7a\x9a\xda\xa8\xde\x6f\x9b\x5d\x40\xe7\x73\xe0\xe6\xa1\x06\xe4\x66\x41\x1d\xab\x07\x8e\x4e\x62\x0b\x3c\xe7\x4a\xfb\x80\x07\x2b\x7c\xb8\x44\xd0\xe4\x81\xa4\xed\x3e\x2d\xd9\xc3\x7c\x12\x0f\x97\xa8\xbd\x71\x7b\x2d\x98\x86\x6c\x41\xc7\x93\x0f\x30\xbe\x89\xc9\xe9\xdb\xa1\xbb\x0d\xf4\x35\xd3\x1a\x73\xd0\x9c\xda\xdd\x15\x82\x2d\x21\x73\xd0\xb2\x42\xb3\x20\x43\xd9\xe2\xa0\xd3\x75\x3b\xf1\x09\xf6\x04\x81\x9e\x5e\x36\x83\xf2\x16\xb6\xad\x57\xf3\xa4\x6c\xeb\xd4\xf8\x33\xe7\xda\x9e\xcf\xde\x62\x8e\x8e\x7b\x7f\x99\xf7\x77\xf3\xe7\xef\xb0\xf9\xbc\x87\x45\x5e\x1a\xdd\x47\x3f\x86\xef\x61\x10\x75\xff\x6e\x86\x36\x7e\x49\x5f\x77\x84\x73\x17\x7f\xb6\x20\xf9\x8b\x23\x43\x3e\x87\x3c\x71\x03\x97\xe1\x80\x6d\xb2\x33\x61\x6b\xd3\xe8\x85\x8c\xf2\xa4\x37\x91\x19\xb7\x89\xc9\xc5\x25\xab\x96\x7d\x31\xcc\xcf\xbb\x50\xa9\x56\x46\x37\xb4\x1b\x0e\xe5\xbf\x3f\xeb\xa6\xf2\x81\xbb\x08\xc6\x9c\x02\x9c\xc7\x66\xc2\x6f\x63\xc7\x5b\xdc\x8e\x80\xfa\x4e\x63\x4b\x92\xc1\x66\x52\x69\x7b\xe9\x33\x3a\x7d\xfb\xd6\xa6\x67\xb7\xf5\x80\x9b\xbb\x2e\x5f\xec\x0c\xe5\x6c\xb6\xfe\xd2\x29\xa6\x9b\x4c\xfe\x01\x45\x1d\x1e\x68\x6e\xab\x70\xc8\x73\xf8\x59\xfd\xfd\x69\xf5\x1d\xd0\xde\x5d\x38\xe4\xc3\xa9\x0e\xd2\x23\x10\x12\xe6\xbe\xad\xb1\x82\xba\xfb\xb9\x35\x1a\x38\x4a\xe3\xbd\xe3\xce\x7f\x05\x00\x00\xff\xff\xf7\xbf\x01\xa5\xdc\x26\x00\x00")

func _hardcodedDoerGoBytes() ([]byte, error) {
	return bindataRead(
		__hardcodedDoerGo,
		"_hardcoded/doer.go",
	)
}

func _hardcodedDoerGo() (*asset, error) {
	bytes, err := _hardcodedDoerGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "_hardcoded/doer.go", size: 9948, mode: os.FileMode(436), modTime: time.Unix(1479341783, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __hardcodedMiddlewareGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x56\xcd\x6e\xdc\x36\x10\x3e\x4b\x4f\x31\x55\x11\x54\x2c\x64\xee\xa9\x17\x07\x3e\x04\x8e\xdd\x04\x70\xd2\x20\x76\x90\x43\x10\x14\xb4\x34\x92\x98\x95\x48\x95\x1c\xad\x6c\x04\x7e\xf7\x62\x48\x69\x57\x1b\xdb\x6d\x4f\x3d\x78\xcd\xe5\xfc\x7f\x33\xf3\x71\x07\x55\x6e\x55\x83\xe0\xd1\xed\xd0\xa5\xa9\xee\x07\xeb\x08\xf2\x34\xc9\xea\x9e\xb2\x34\xc9\x0c\xd2\xa6\x25\x1a\xf8\xec\x46\x43\xba\xc7\x4d\x85\xb7\x63\x93\xa5\x69\x92\x35\x76\xd8\x36\x52\x9b\xcd\x79\x87\x3b\x74\x9b\xad\xba\xdf\x21\x9e\x34\x56\xee\x7e\xdb\x74\xb6\x69\xd0\x65\x69\xb2\xdd\xbd\xd3\x55\xd5\xe1\xa4\x1c\xc2\x3f\xdb\xf4\x7b\x45\xf6\x6f\x07\x34\xe4\x54\xa9\x4d\x03\x59\xa3\xa9\x1d\x6f\x65\x69\xfb\xcd\xea\x7e\x7d\x3e\x69\x6c\x96\x8a\x34\xad\x47\x53\xc2\xa4\xa9\x3d\x84\xcd\xb9\x42\x5d\xe2\x7b\xd5\x23\x78\x72\xda\x34\x05\x38\x3b\x12\x3a\xe0\xf2\xe4\x1b\x65\xaa\x0e\x9d\x38\xfa\x06\xdf\xd3\xa4\x9d\x8f\xa7\x67\x30\x87\x59\x79\x8d\x1e\xc4\x41\xeb\x0c\x06\x65\x74\xb9\x52\x99\x25\x22\x4d\x36\x1b\xb8\xb2\x4d\xc3\xc5\x1c\xca\x84\xd2\xf6\xe8\xa1\x53\x9e\x0a\xd0\x12\x25\x4c\xba\xeb\xe0\x16\xc1\x8d\x06\x6a\xed\x3c\xc9\x60\x7a\xd3\x6a\x0f\xbd\xda\xa2\x07\x4d\xe0\x2d\x50\xab\x08\x2c\xb5\xe8\xd6\xee\x5a\xe5\x41\x95\x25\x7a\x0f\xc4\x3a\x08\xb1\x0d\xc1\x47\x30\x39\xea\x86\x36\xdf\xb0\x24\x0f\xda\xcc\xda\x0e\xff\x1a\xd1\x13\x94\xd6\x10\xde\x71\xec\x43\x69\x6b\x4b\xf9\x1e\xa7\xa5\xb6\x02\x56\xe8\x8a\x34\x71\x48\xa3\x33\x30\x4b\xd3\x87\x34\xdd\x6c\x7e\xc4\x85\xd3\xf2\xa0\xcc\x7d\x14\x78\x09\x97\xd6\x81\xb1\x53\x01\x13\xfe\x12\x70\x31\xa4\xcd\x88\x40\xad\xb3\x13\x83\xc6\xe9\x05\x65\x18\x87\x34\x54\xc3\xad\x54\xe5\x36\xa2\x11\xe0\xb9\x87\xd2\x29\xdf\x46\x5d\x67\x19\x07\x19\xe7\xe1\x51\x5f\xfe\xa5\xef\x4b\x11\xab\xeb\xcb\xd1\x94\x39\x3b\xcb\xa7\x78\xff\x11\xfd\x60\x8d\xc7\xcf\x4e\x13\xc3\xe0\xe0\xd7\xf9\x3e\x80\x28\xd8\x4f\x52\x61\x8d\x0e\x82\x59\xbc\x48\x42\x2a\x17\x2e\xcc\x94\xc3\xd2\xee\xd0\xe5\x82\x05\xba\x86\xbd\xec\xec\x0c\x8c\xee\xa2\xc1\x9c\x0c\x1f\x1f\xf8\x63\xa7\x1c\xa0\x0b\x7f\xd6\xa5\x7c\xe3\x27\x4d\x65\x0b\x6b\xcf\xcb\x59\xe6\x74\x3f\xe0\x1c\xba\x54\x7e\x99\xff\xd3\xe0\x99\xdd\x9c\x41\xdd\x93\xbc\x60\x67\x75\xbe\x98\x89\xbd\x7a\x88\xb2\xd6\x5e\x54\xf8\xaa\xc2\x5a\x8d\x1d\x3d\xe3\x2c\x1b\xcd\xd6\xd8\xc9\xcc\x7d\x7b\xf1\xf3\x0e\x6c\x0d\x9c\x0f\xbc\xb8\xc9\x8a\xbd\xa7\xc3\x49\xc4\x22\xf9\x33\x0e\xae\xbc\x74\xb6\x3f\x8f\xd3\x98\x3b\xb9\x9c\x84\x88\x31\x5e\xe7\x59\x30\xcd\x8a\x90\xc1\x6c\xf3\xee\x7b\x86\xce\x65\xa7\x9c\x7b\x01\x59\x98\x12\xde\x5e\xcc\x4e\xe7\xea\xf3\x40\x62\xf2\x9a\x25\xb9\x10\x0f\x62\xdf\x98\x23\x04\x1e\x42\x63\x5a\x79\xcd\x04\xf9\xe6\xe6\xe6\x43\x3e\x15\xc0\x92\x07\x31\xcf\xf5\x23\x52\x80\xd2\xa1\x22\xf4\xa0\xc0\xe0\x04\x7e\x50\x06\x8c\xea\xb1\x02\x55\x33\xdd\xf0\x68\x7e\xfa\x78\x05\x83\xa2\x36\xa0\x71\xd8\x3a\xc9\x0e\xdf\x12\x0c\x9d\x2a\xd1\xc7\x99\x0e\xf6\xda\x3c\xb5\x9c\x05\xd4\xd6\xc1\xe8\x11\x6e\xef\x67\x26\x98\x77\xce\xc3\x4e\x2b\x58\x51\xa3\xbc\x1e\x94\x59\x23\x29\x42\xa8\x1a\x54\x0c\x80\x77\xda\x07\x1a\xd8\xc7\x68\x51\x55\xe8\x7c\x11\xd7\x8c\x75\x62\x5d\x15\x07\x8b\xdb\x76\x28\x79\xe1\x2c\x05\x65\xab\xbb\x2a\x96\xa5\x28\xd8\xcd\xfb\xf7\x98\x3c\xff\xb7\x0d\xdc\x6c\xe0\x15\x11\xf6\x03\x31\x27\x7e\xb3\xda\x2c\x65\xdf\xde\x43\x83\x44\x81\x5d\x78\x3c\x40\x9b\xda\x42\xed\x6c\x1f\xca\x9e\x31\x90\x69\x92\xd8\x21\x3c\x1d\xbc\xb1\xf2\xd3\xc7\x2b\xf9\x41\x51\x9b\xc6\x4d\xf4\xc3\x23\xa4\xd3\xb0\xcb\xbe\x2c\xc2\x9a\x9e\x9e\x1d\x29\xfc\xde\xd9\x5b\xd5\xdd\x70\x3c\x97\x0b\x76\x9e\x5c\xdc\xb1\x90\xf2\xb5\x1a\x4f\xdb\x9b\xb9\x09\x61\xb6\x9f\x11\x9e\x2b\xe7\x34\xba\xdc\xc9\x78\x21\xc4\xcb\x10\xf5\xa7\x15\x81\xf8\x01\x8e\x73\xb8\x26\xe5\x88\x33\xcd\x63\x61\x61\xd6\x01\x3b\x8f\xff\xd1\xa0\x38\x92\x9e\x73\xd7\xff\xa8\x73\x5f\x8a\xe0\x69\x4f\x7b\x7e\x90\x97\xda\x68\xdf\xe6\x22\x8d\x9d\x88\x2f\x4e\x84\xff\xed\xeb\xf8\xf0\x84\xb7\x80\x2c\x28\x5d\xad\x47\x30\xac\x28\xbf\x97\x69\x92\x10\xa3\xc8\xcf\x5f\xde\xab\xe1\x4b\xdc\xe1\xaf\xf1\x9f\x88\x68\xcf\x48\xfb\x41\xee\xa1\x7d\x1b\x62\xe5\x7e\x38\xd0\xc6\x71\xde\x37\x78\x47\xef\xd4\x10\xf0\x7d\xe2\x7e\x81\x96\x16\x4c\xd7\xa4\xcc\x0d\x66\xaa\xa8\x0a\xb0\xdb\xf0\xf3\xe0\x4b\x66\xe9\x24\xcc\x91\x3b\x89\xa2\xec\xeb\x4b\x16\x7e\x5f\x73\xd3\xb3\x7c\xf6\xaa\xaa\x96\x6f\x8f\x1d\x15\x73\x30\xb1\x3c\x02\x81\x23\xfd\x20\xaf\x6c\x73\xb1\x43\x43\x79\x36\xc3\xf6\xa7\xc3\x12\xf5\x0e\xab\x4c\x3c\xf9\xfa\x3c\x69\x53\x87\x26\xcd\x36\x91\xf4\x0c\x4e\xe7\x74\xf7\xe3\xf0\xce\x19\x7e\xd6\xd4\x86\x69\x70\x6b\x68\xfd\x10\xba\xfc\x23\x5d\x4a\xd6\x5e\xd4\xa2\x5b\xb1\x50\xe8\xdf\x01\x00\x00\xff\xff\x29\x98\x17\x0d\x82\x0a\x00\x00")

func _hardcodedMiddlewareGoBytes() ([]byte, error) {
	return bindataRead(
		__hardcodedMiddlewareGo,
		"_hardcoded/middleware.go",
	)
}

func _hardcodedMiddlewareGo() (*asset, error) {
	bytes, err := _hardcodedMiddlewareGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "_hardcoded/middleware.go", size: 2690, mode: os.FileMode(436), modTime: time.Unix(1479338437, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"_hardcoded/doer.go":       _hardcodedDoerGo,
	"_hardcoded/middleware.go": _hardcodedMiddlewareGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"_hardcoded": &bintree{nil, map[string]*bintree{
		"doer.go":       &bintree{_hardcodedDoerGo, map[string]*bintree{}},
		"middleware.go": &bintree{_hardcodedMiddlewareGo, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
