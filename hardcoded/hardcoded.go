// Code generated by go-bindata. DO NOT EDIT.
// sources:
// ../_hardcoded/doer.go (10.351kB)
// ../_hardcoded/middleware.go (1.643kB)
// ../_hardcoded/tracing.go (6.966kB)

package hardcoded

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __hardcodedDoerGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x5a\xff\x6f\x1b\x37\xb2\xff\x59\xfa\x2b\x26\x02\xee\xb2\xeb\xc8\x2b\x39\x77\x6e\x0f\xea\xf3\x01\xad\xed\xbe\x16\x2f\x4d\x82\xca\x7d\x0d\x10\x04\x57\x6a\x77\x24\xb1\xa1\x48\x95\xe4\x4a\x16\x7c\xfe\xdf\x1f\x66\xc8\x5d\xed\x4a\x2b\x27\x77\x2d\x1e\xde\xcb\x0f\x96\xb4\x3b\xf3\xe1\x70\x38\xdf\x99\xb5\xc8\x3f\x8a\x05\x42\xae\x24\x6a\xdf\xef\xcb\xd5\xda\x58\x0f\x49\xbf\x37\x98\xed\x3c\xba\x41\xbf\x37\xc8\x8d\xf6\x78\xef\xe9\x2b\xea\xdc\x14\x52\x2f\x46\xbf\x3a\xa3\xf9\x81\xb5\xc6\x32\x95\x34\x23\x69\x4a\x2f\x15\xfd\x50\x66\x41\x1f\x2b\xe1\x97\x23\x2b\x74\x41\x3f\x34\xfa\xf8\x31\x5a\x7a\xbf\xa6\xef\x6e\xa7\x73\xfa\xf4\x72\x85\x83\x7e\xbf\x37\x58\x48\xbf\x2c\x67\x59\x6e\x56\x23\x31\xc7\xfb\xd1\x72\xe7\xbc\x95\xf7\xe7\x0b\x53\x7d\x1d\xb4\xa9\x0a\xa3\xcd\x46\xe8\xa5\x2c\x70\x84\x1b\xd4\xde\x99\xd2\xe6\xc8\x54\x46\x09\xbd\xc8\x8c\x5d\x8c\xee\x47\xb4\x6a\xdc\xc7\x28\xf7\xf7\x41\x80\xb4\xdf\x1f\x8d\xa0\x30\x68\x41\x3a\x10\x1a\xa4\xf6\x68\xe7\x22\x47\x98\x1b\x0b\x83\xc2\x48\xbd\x18\x00\x11\x83\xc5\xdf\x4a\x74\xde\xc1\xda\x38\x27\x67\x6a\x07\x5b\xe9\x97\xb0\xb5\x62\xbd\x96\x7a\xd1\xf7\xbb\x35\x46\xa8\x1a\xe4\xa1\xdf\xbb\x31\x49\x0e\x67\x84\x90\x5d\xb3\x8a\x87\x60\xe3\xef\x1f\x03\x62\x0a\x49\xf5\xdb\xad\x8d\x76\x38\x04\x56\x6a\xda\x7f\xec\x07\x54\xb3\x7e\x2d\x56\x78\xed\xef\xc1\x79\x5b\xe6\xfe\xe1\x91\xe5\x9e\x09\x87\x11\xe3\x3b\xa1\x0b\x85\x16\xd6\x68\xe7\xc6\xae\x1c\xf8\x25\xf2\xfb\x96\xec\x01\x8d\x1e\xdf\x90\x9c\x7b\xb0\x79\xa9\x73\x48\x8a\xfa\x55\x0a\xbf\x43\x6c\xda\xb5\x45\x5f\x5a\x0d\x51\xd1\xd9\x8d\x49\x6c\x76\x1d\xb4\x9f\xa4\x43\xc8\x87\x10\xb6\x37\x1a\x81\x45\x6f\x77\x95\xfc\xf4\x43\xa2\x83\xcb\xf1\xbb\xb6\xd6\x83\xe8\x4c\xdb\x90\x9d\x96\x2a\x60\xff\x8f\xd4\xcf\x8b\xdb\xdd\x5b\xa3\x64\xbe\x83\x1f\xf7\xdf\xe3\x7a\x8d\x27\x50\xe0\x5c\x6a\x74\x20\x02\x32\xac\xf9\x71\x16\x16\x6b\x12\xb6\x8e\x74\x34\x82\x6f\x44\xfe\xd1\xcc\xe7\x0e\xc2\x46\x83\xbe\x75\xb9\x9a\xa1\x05\xa1\x0b\xf0\x72\x25\xf5\x02\xcc\x3c\x02\x0b\xef\x71\xb5\xf6\x2e\xeb\xf7\x2a\xd6\x24\x85\xf7\x1f\xc8\xee\xb3\x9b\xd2\x0a\x2f\x8d\x66\x64\x5e\x15\x2c\xe6\x28\x37\x18\x70\x9b\x8a\x18\x82\x70\xb0\x45\xa5\xe8\x93\x5e\x5a\x74\xa5\xf2\x60\xe6\xcc\x5d\xf9\x56\x3c\xb4\xe7\x0e\x7e\xb9\x31\xbf\xc0\x0a\xfd\xd2\x14\x59\xbf\xc7\xe8\x49\xeb\x1c\x87\x70\xe2\x18\x67\xc6\xa8\xa8\xb3\xa9\xd4\x0b\x85\x4f\x69\xce\x2f\x85\xaf\x4f\x4f\x54\xd2\x82\xd1\x39\x06\x6d\x1e\x43\xb4\x6c\xb9\x43\xa1\xc2\xc3\xce\x94\xe0\x96\xa6\x54\x45\xbd\x0c\xd6\xd8\x17\x0e\x73\xa3\x0b\x10\x73\x4f\x4e\xe7\x61\x2e\xa4\x72\x59\x34\xe6\xa3\xf5\x52\x38\xad\xf9\x86\xc9\x1e\xbc\x79\xb8\x80\x33\xe0\x27\x53\x5e\xed\xb1\x69\x45\xb0\x95\x4a\x45\xc9\xb4\xd1\xe7\x6f\xdf\x4c\xef\x86\xe1\xdb\xd7\x77\xd7\xdf\xed\x43\x06\x6f\xe6\xf2\xdd\xbb\x8c\x58\xef\xde\xdc\xbc\x99\xc0\xf7\x9e\xac\xd5\x81\x36\x1e\xf2\xd2\x5a\xd4\x5e\xed\x2a\x6b\xd1\xbb\x70\x08\x95\x3a\xb0\x80\xd9\xee\xc4\xe1\x3e\xb1\xe1\x70\xda\x16\x7f\x83\x83\x13\xb7\xe8\xd6\x5d\xc7\xde\x3c\x7a\xd2\x89\x9c\xf3\xd3\x67\x57\xa0\xa5\x82\x7f\xfe\x93\x76\x94\xfd\xc0\xc6\x04\x57\x57\x30\xa0\x0d\x0f\xba\x9e\xd3\xf6\xe9\x45\xbf\xd7\xa3\xb5\xb2\xa9\x17\xbe\x74\xd7\xa6\x40\xf8\x0f\xb8\x1c\x8f\x09\xbc\xd2\xf8\x5c\x28\x87\xfd\xde\x63\x7d\x04\xde\x96\x18\xd5\x7c\x7b\xbf\x36\x1a\xb5\x97\x42\x75\x5a\x9f\x06\xdc\x53\xb4\x9c\x38\x58\xdd\x09\xfe\xa7\x4d\x6f\x2e\x37\x14\x25\xe3\x53\x8e\xf2\x8d\x55\x14\x45\x83\xdc\xa2\x70\xe4\xe1\x5b\x21\x3d\xdb\x87\xe3\x88\x8c\x7e\x8b\xa8\xeb\x83\x9f\xc0\xc5\x78\x3c\x84\x97\xf4\xe7\xaf\xf4\xe7\x6f\xf4\x87\x02\xc4\xc5\x17\xe3\x31\xac\xa4\x52\x32\x58\xb1\x83\x17\xa3\x73\x28\xd7\xe0\x0d\x5c\xfe\x09\x7e\x95\xde\xa3\xad\x8e\xb6\x7b\x17\x9f\x61\xd0\x30\xb9\x82\x95\xf8\x88\xc9\xc1\xeb\x21\x5c\xa6\xfd\x9e\xc6\x7b\xa6\xb8\x18\x8f\x2b\x23\xff\x61\x2f\x51\xbf\x67\x75\x41\xaf\x29\x7d\x67\xaf\x71\x9b\x54\x5f\xa6\x9c\x61\x13\x66\x78\x6d\xb6\x49\x9a\xfd\xa4\xe5\xfd\x6b\xa1\x4d\x92\xa6\x69\xbf\x87\xc4\x35\xce\xc6\x97\x30\x1a\xf1\xb6\x2e\x29\x2f\xe5\xa8\x7d\xdc\x57\xbf\x47\xd9\x55\x46\xf0\x05\xc7\xf5\xca\x22\xde\xcb\x0f\x70\x05\x2c\xda\x0b\x68\x09\x9d\x24\x89\xd5\x45\xf6\xad\x32\xc2\x7f\xf1\xd7\x24\x3d\x7b\x99\x9e\x5f\xa4\x67\x78\x36\x8f\x4f\x88\x89\xd6\x0f\x1b\x3b\xbb\x82\x97\x4d\xab\xb2\xe8\xff\xcf\xfa\xee\xa9\x03\xfe\xff\xef\xc0\xaf\x4d\x77\xd6\x08\x4e\x4a\x09\x52\xe3\x26\x26\xfe\x1d\x39\x54\x9d\x3b\x62\x16\x6e\x03\x3c\xed\xb8\x14\x0e\x56\x6b\xbf\x03\xa7\x64\x8e\x95\x72\x5b\x08\xff\x66\x16\x68\x87\x7d\xa1\xb6\x62\xd7\x88\x17\xb4\xff\x13\xab\xfd\xab\x09\xb7\x21\x43\x50\x6b\x55\x03\xb2\x82\x62\x09\xd5\x56\xc3\xcf\xd2\x2f\x9b\x3a\xaa\xb5\x01\x1a\xb7\x10\x6b\xde\x60\xc6\x66\x83\xd6\xca\x22\xd6\x15\xa1\xe4\x07\x33\xfb\x15\x73\xff\xdc\xd5\xc5\x58\x5d\x06\xf1\x8e\x0e\xe0\x93\xdc\xdf\x57\xa0\x55\x49\x37\x84\x13\x25\x57\x7a\x48\xd9\xac\x0d\xe3\x1b\xc2\xff\x6f\xa1\x4a\x24\xe4\x61\x6b\x9f\x0f\x8f\x2d\x64\xae\x18\xab\x52\xf5\xac\xae\x05\xff\x88\x62\xb5\x5a\x62\x08\xe6\x23\x87\xa5\x7d\xb5\x9a\x05\xe1\xda\x72\xa5\x59\xd2\xdc\x26\x3b\xda\x33\xf3\xb1\xf2\x8a\x5a\x17\x57\x50\x64\x8d\xdf\xec\x24\x75\x66\xa1\x75\xf6\xef\xb2\xbd\x61\xf6\x7b\x1b\x61\xbb\x7c\x3c\xbc\xa8\xfd\xbc\xcf\x35\xdf\x54\x6c\xb0\x55\x18\xcd\x4c\x41\x39\x0a\x72\xaa\xff\xb7\x08\x4b\x26\x30\x61\xb1\x0c\xde\xf8\x25\xda\xad\x0c\xef\x38\x0a\x32\x81\x50\x16\x45\x41\xe6\x23\x0a\xc6\xe5\x16\xa2\x9c\xcf\xd1\x82\xd1\x75\x74\x2b\x5a\x4b\x31\x3b\xd5\x5d\x19\x4c\x11\x99\x8d\x04\x9e\x8c\x46\xce\xd3\x76\x36\x68\xe7\xca\x6c\xb9\x53\x63\x0e\x69\xb4\x1b\xbd\xfc\xcb\xf8\xcb\xf1\xdf\xbe\xfc\x62\x44\x6b\x49\xbd\x38\x27\x89\xcf\xcd\xfc\x9c\x78\xcf\x23\xf6\x39\x25\x5e\x53\xfa\xf3\x95\x29\xe4\x9c\x62\x43\xfd\xc6\x79\xe1\xa3\x2e\x66\xe5\x1c\xde\x7f\xa0\x4e\x95\xcf\xc0\x66\xdf\xd0\xe6\x63\xbc\xa3\xd3\x68\x2b\xac\xd7\x9b\x95\xf3\x10\x29\xaf\x20\x74\xab\xd9\x8f\x28\x8a\xaf\x95\x4a\x02\x2f\xe5\x8f\x76\xd4\x24\x94\xca\x68\xb5\x54\xcc\xdd\xef\xd1\x49\x3e\xf6\x43\x26\xab\xea\x5e\x4a\x7b\x5f\x71\xf4\xfb\xaa\x7a\xf6\xe2\x05\xf3\x77\x8a\xd6\xb3\x85\x25\x9e\x28\xc7\x6b\xb3\xbe\x56\xc6\xa1\x4d\xb8\xf1\xa6\x4c\xfb\x0d\xab\x3f\x99\x95\x73\xce\x6b\xbd\x88\x71\x05\xb6\x88\x22\x70\x74\xae\x36\x54\x64\x05\xb5\x5a\xa1\xbb\x0a\x8b\x46\xc9\xae\xae\x40\xa1\x4e\x2a\xd3\x4b\x29\xe4\x3f\x6b\x1a\x5f\xcc\x34\x21\xb3\x30\x5e\x1a\x64\x9c\x59\x14\x1f\xe3\x5a\xa3\x11\xb0\x84\x55\xe3\xc1\x36\x19\xcd\x6d\xbe\x7f\x20\x43\x66\xd4\x52\x55\x42\xb8\xf5\x81\x32\xdd\x9a\x77\x92\x31\x1c\x19\x3c\xe3\x87\x3a\x5b\x21\xae\x6b\x49\xdf\xc7\x1d\x7c\x48\xdb\xb9\x3c\x0a\x19\xc3\x72\x2e\x6d\x5e\x4a\xff\x0d\xc9\x8a\x96\x1b\x44\xb9\x5a\x2b\x5c\xa1\xf6\x31\xd6\x05\x0a\x98\x05\x12\x58\x53\x47\x66\x35\x27\xf5\x29\x7a\x28\x70\x56\x2e\xc8\x49\xe8\xf4\xe8\xd3\xac\xd1\x0a\x8f\x2d\x66\xa9\x41\xc0\x8a\x72\xe0\x76\x89\x16\xa9\xe7\x60\x07\x30\x5a\xed\x40\x99\x45\x43\x14\x60\x1b\x0d\xb5\x1e\xd3\x90\x46\x66\xca\xe4\x1f\xb9\x42\xa8\xab\x8b\xb9\x35\x2b\x58\x18\xca\x7c\x7e\x69\x4d\xb9\x58\xc6\xbc\xd7\xb1\xa5\xa7\x7a\xde\x20\x7f\xf8\xc7\x8d\x5b\x2f\x02\xbc\x16\x2b\x24\x4e\xa9\x17\xfd\x9e\x32\x8b\x05\xda\x40\x15\xbe\x67\xff\x25\x76\x1b\xc4\x57\xfc\x83\xb4\x49\xfe\x12\x59\xa7\xd3\xdb\x37\x3a\x47\x70\x3b\x9d\x67\xf4\x8d\x75\xfd\x5d\x18\xc3\x4c\xa7\xb7\xb7\x1b\x4a\x1f\xd2\x01\xae\xa8\xac\xe3\x3a\x67\x3f\xaf\x81\x8d\x14\xe0\xd0\x6e\xd0\x9e\x3b\x22\x0c\xd3\x99\x8c\xab\x27\x74\xb9\x95\xb3\x50\x34\x93\x86\x59\x5b\x54\x0d\x88\x6a\xf1\xa8\x86\xc3\xd5\xf6\x3a\xb8\xa3\xd7\x4f\xfc\x0b\x7b\x86\x5f\x7e\x75\x46\x4f\x06\x04\x36\xf8\xa5\xdf\x63\x75\x7c\x36\x97\x16\x2b\xe6\x8a\x59\xe4\xda\x94\xda\x77\x71\xc9\xf0\x38\x72\xd9\x06\x35\x71\xdf\x52\xe8\x39\xc9\x7b\xc8\x8d\x35\x75\xcd\xfb\x36\x54\xcf\x62\x71\x2c\x7a\x07\xef\x9e\x9a\x00\xbe\x77\xd7\x2d\x4b\x7a\xb3\x46\xdd\x04\xe0\xa2\xa3\x06\x90\x1d\xd4\xac\x00\xa3\x94\xd4\x0b\x16\xeb\x5b\x21\x55\x69\xf1\x29\x05\x1c\x53\x1f\x83\x28\x45\x3e\xde\x04\x7b\x0a\xa4\x45\x7d\x0a\x6c\x5a\xe6\x39\x3a\xf7\x99\x60\x91\xfa\x10\x6c\xba\x34\xd6\x47\x2d\x60\xf1\xa9\xed\xb5\xa9\x8f\xb0\x1a\x02\x7d\x5a\x55\x27\x04\xba\x5b\x52\x9a\x7c\x6b\x8c\xfa\x11\xa9\x52\x23\xa1\x4e\x83\x1c\x53\x1f\xe1\xc9\x15\x9a\xd2\x7f\xa6\x50\x91\x9a\x40\xae\x43\xab\x73\x6d\x74\x6c\x7a\x6e\xef\x31\x2f\x29\xa5\x07\xe3\x6e\x83\xe4\x4f\x53\x13\xe0\x2b\xe1\x51\xe7\xbb\x3b\xe3\x85\xfa\x01\x85\x7e\xda\xb8\x55\x83\xfa\x1f\x2b\x14\x64\x98\x55\x41\xa8\xcc\x82\xe3\x43\xa2\xba\xe2\xda\x10\x8e\x02\x09\x67\x37\x95\x7d\xaf\xe7\xe6\x26\xc1\x8c\xc2\xc2\x10\x56\x62\xfd\x3e\x04\x80\x0f\xf5\xc0\xef\xe1\x91\x52\x56\xdb\xa7\x27\x5d\x5e\x8c\x59\x33\x4a\x0c\x89\xa9\xe1\xca\x9d\x2c\xc4\xb4\x0f\x0e\x7b\x96\x86\x07\x1f\xf3\x45\x96\x3d\x0d\xf3\x75\x3a\xee\xa4\xcd\xd7\x15\x0a\x98\xb9\xcb\x5f\x27\x87\x9b\x3b\xa6\xe9\xe0\x6d\xbb\xe9\xa4\x93\xb7\x45\x73\x12\xa3\x72\x86\xa7\x30\x22\xcd\x11\xc6\x81\x53\x4e\xba\xf6\xd0\xa6\x39\x86\x68\x2d\xdf\xad\x86\x53\xcb\x77\xb8\xe0\xe4\x90\xf7\x98\xe6\x18\x26\x7a\xde\x53\x22\x44\x1a\xe6\xfd\x94\xc3\x4d\x00\xb3\x4f\xb8\x30\xe3\xa8\x03\xaf\x3c\xb6\x41\xcc\x0e\x3d\x77\xd8\xef\x3d\xa6\xfd\x56\x7f\x76\x5c\xc0\xa4\x20\xb5\xf4\x49\x1a\x67\xe8\x6f\xd1\x4a\x53\xc8\x9c\x47\x6a\xca\x2c\xc2\x90\x5d\x0b\xd5\xae\xa1\xa8\x18\x13\xce\x49\xc7\xf5\x97\x43\xef\xb9\x94\x69\x94\x5a\x7e\x69\xd1\x2d\x8d\x2a\x1c\x97\x5b\xa5\x2e\xd0\x3a\x2f\x74\xc1\xf3\x84\xf5\x5a\xc9\x3c\xf4\xf7\x33\x5c\x8a\x8d\x34\x36\x63\xf6\x9f\xf4\xdc\x58\x5f\x6a\xe1\x51\xed\x86\xcd\xca\xa5\x30\xe8\xf4\x73\x1f\xfb\x22\x58\x58\x14\x1e\xb6\x62\x47\xa2\xe0\xfd\x3a\x54\xc0\xd2\x31\x4a\x21\xbc\x18\x82\x33\xd4\x4c\x59\x74\xc6\x7a\xae\x22\x4b\xab\xf9\x02\x40\x83\xf4\x0e\x5c\xb9\xe6\x5b\x35\x6a\x16\x66\xd6\x88\x22\x17\xee\x68\x1b\x2b\xaa\x74\x73\xc7\x75\x13\x8f\xfc\x8f\x8b\x27\x48\xa6\xd3\xdb\x34\x88\x3f\xc5\x70\x33\xe0\x26\xa3\xd1\x13\xb7\x66\xd2\xb9\x12\xdd\xe8\xf2\x8b\xac\x2e\x09\x63\x5d\x47\xad\x02\x9d\x56\x38\x90\x5e\xe4\x99\x7a\x8b\x62\x55\xdd\xc7\x4c\xae\x2a\xbd\xf0\xe0\xaf\xf9\x8e\xab\xf6\x2e\xa6\x6c\xea\x85\xf5\xfc\x5a\x49\xe7\x51\x73\x00\xb6\x0c\xa6\xd1\x67\xaf\xf8\x61\x32\xf0\xf9\x7a\x30\x84\xc1\xc5\xcb\x2f\xb3\x71\x36\xce\x2e\x26\xe3\xc1\x89\xe6\x6b\x2d\xb4\xcc\x13\xea\x49\xb8\x51\xe8\xf7\x7a\x0b\xc3\x7b\xcf\xa6\xa4\xa2\x64\xbf\x4c\x97\x3c\x69\xa0\x6f\x6c\x95\xd4\xf7\x33\xb2\xcd\xe1\x06\xed\x0e\x2e\xc6\x50\x8d\x61\x67\x98\x8b\x32\xb6\x38\x84\x86\x56\xde\xd7\x47\x23\x2c\xd2\x91\x0a\xb8\x18\x9f\x57\x53\x52\x46\x8b\x7e\x0b\x5b\xa9\x0b\xb3\xcd\xe0\x6e\x29\x1d\x28\xf4\xcf\x1d\x94\x74\xfc\x2b\x1e\xed\x76\x41\x7a\x03\x0b\xe4\xbb\x0b\xab\x76\x11\x4d\xe4\x79\x19\x9a\x0f\xf2\xaf\x78\xaf\xe4\x20\xd1\x86\x1b\x12\xe1\xd9\xfc\x40\xb2\x91\xae\xd1\xce\x31\xf7\xb5\xe0\xa6\xb4\xf1\xfa\x29\xa2\x55\xd6\x1c\x09\xd5\x0e\x56\xc2\xe7\xcb\x5a\x94\xe7\x2e\xb6\x29\x08\x42\x39\xc3\x6a\xd9\x2e\x51\x77\xf5\x4d\x11\xd2\xf1\x34\x10\xf2\xa5\xd0\x0b\x74\xdc\x9a\x2a\xb3\xf8\x96\x93\xa4\xce\x77\x61\xa8\xdc\xbe\x38\x61\x1a\xe1\x3c\x67\xdf\x29\xa2\x0e\xb3\xe9\x3a\xe1\x1e\xe4\xe7\x87\xc7\x16\xc3\x2b\xb3\xa0\x50\x77\xc0\xc3\xf0\xf4\xfc\x81\x8d\x82\x7b\xf1\x7f\x40\x35\x54\x8e\x6f\xf3\x8f\xc9\xc1\x1d\x4e\x0a\x0f\x50\xcf\xba\xa4\xe6\xa1\xa4\xa4\x20\x40\x18\xbd\xd2\x2a\x5a\x66\x10\xe7\x18\x03\x78\x01\x95\x7d\x65\x5f\x17\x85\x4d\xd2\x6c\xca\xcb\xb3\x85\x53\x33\xfb\x5b\x6d\xde\x6c\x93\xaf\x71\x1b\x2b\x81\x64\xf0\x9f\xb7\x77\x83\x21\x94\x56\x0d\xc9\x9a\x03\x43\x87\x81\xb3\xfa\xb2\xb7\x56\x6a\x3f\x4f\x42\x0d\x00\xb9\xd1\x1a\x73\xcf\x9d\xa1\xa9\xcf\x61\x3a\xbd\xa5\x1e\x05\xc5\x6a\x02\x7f\x72\x83\xd0\xa9\x07\x88\xdc\x68\x2f\x75\x89\xfc\x8b\xd5\xd7\x0b\x94\xb5\x78\x8d\xfb\xf1\x6c\x5a\xce\x42\x0f\xf6\xb3\xf4\xcb\x64\x30\x18\xc2\x9f\x1b\x03\xb4\x30\x79\xfb\xed\x7f\x5d\x60\x3a\x41\xdc\xec\x2f\x06\x02\x67\x76\x1b\xa2\x5f\x5c\x9a\x47\x3a\x87\x05\x5d\x78\x15\x45\x9d\x5c\x01\xd5\x8c\xd9\x4f\x7a\x25\xac\x5b\x0a\x95\x84\x19\x51\x82\x9b\xec\x46\x78\x91\xa4\xe9\x10\xfe\x8c\xe9\x57\x1d\x1b\x6b\x8b\x15\xe5\x62\xe0\x8c\x5b\xce\x67\x57\x30\x88\x6b\x5f\x9b\xd5\x4a\xe8\x62\x70\x92\x35\x7c\x8e\x46\x70\x67\x0a\xb1\x63\x0f\xb3\x08\x39\xe5\x93\x30\xeb\x0e\xfb\x83\xb0\x6d\x8a\x44\x71\x26\x4b\x6e\x88\xde\xd5\x93\x85\x2a\xfe\x13\x61\x48\x3d\x11\xb8\xea\x96\xe1\x7b\xcd\xff\x7f\xa1\x40\xa1\x60\x6b\xac\x62\x7f\x66\x76\x5e\x8e\xf2\x98\xe3\x1b\xc2\x6a\x4d\x72\xf9\xb5\x70\x0e\x64\xc8\x58\xf5\x40\x38\xab\xc1\x5f\x91\x08\x5b\x63\xed\x0e\xc4\x8c\x5a\x86\x22\x0e\x2a\xa4\x0b\x11\x62\x8b\xfb\x39\x0b\x83\xd1\xeb\xfc\xa0\xc8\xe4\x99\x5f\x8d\xe9\x0d\x14\xd2\x89\x99\xc2\x38\x73\x59\x99\x02\x1b\x3a\xe6\x06\xfd\xd9\x15\x14\x59\x73\x80\xf1\xb4\x82\x29\x4c\x50\x48\xa9\xa6\xb7\xad\x38\xf3\x3e\x60\x7e\xd8\x93\x1e\xbd\x82\x2b\xc0\xfd\x59\x91\xba\x9b\xa1\x2f\x54\x21\x72\x0e\x92\xc2\x39\x4a\xbf\x0c\x71\x90\x89\x93\x8b\x94\x89\xe7\xd2\xba\x98\xa5\x61\x8b\xcf\x37\x08\x8e\x62\x5c\x38\xaf\x3d\x96\x69\x70\xbe\x4c\xdb\xaf\xa8\x31\x0f\x6b\x2d\x45\x15\x5b\x8b\x16\xc7\x5f\xd2\x66\xa6\xe2\xea\x84\x94\x8e\x05\x1d\x6d\xce\xf3\x5c\xee\x7e\x0a\x70\x66\x85\x7e\x49\xa7\x71\x20\x41\xad\xe9\x6a\x5a\xdd\xeb\x08\xb3\x0d\xbd\xec\x2f\xf9\x2a\xda\xaa\xd3\x2a\x32\x55\x35\x57\xe9\x27\x3c\xa7\x3a\x9f\xce\x0e\x84\x0e\xbb\xbb\x37\xf9\xa3\xe5\x7b\x04\x54\x8e\x4f\xb2\x71\x75\x39\x2d\x67\xc9\x29\xfc\x14\xfe\x0e\xad\xbc\xf6\x47\x0b\xb4\x8f\x7c\xf4\xe7\x91\x78\x1e\xd3\x4f\x56\xd1\xbf\xf3\xba\x43\xce\xa1\xc8\x82\xef\x3d\xb4\x06\xc8\x93\xa3\x09\x72\x55\xfb\xdd\x98\xa4\xe5\x8f\xc3\xaa\x9a\x0a\x91\x9f\xd5\xd2\x95\x25\xe2\xb8\x36\x0c\xcc\xc3\x46\xe3\x3c\xb8\x79\xa1\xf8\xf7\xab\xfa\x46\xb1\x17\xfe\x13\x0b\x16\xf1\xbe\x82\xb8\x85\x8e\xcb\xf0\x74\x56\xf2\x04\xb3\xe9\x34\xb1\xd2\x69\x2c\x66\x2c\x4f\xcf\x93\xc1\xe5\xbb\x77\x5c\x53\x86\xa5\x5b\xd2\x3c\xd6\x19\xf9\x68\xa6\xcc\x71\xe5\x33\x6f\x60\x7a\x61\xf2\xfe\x2f\x28\xea\xe9\x81\xfd\x89\x7b\x87\xfa\xca\xe1\x53\xfa\xfb\xb7\xd5\xf7\x84\xf6\x1e\xfb\x6d\x39\x82\xea\x60\x74\x06\xda\xc0\x3c\xf6\xe2\xbc\xd1\xf0\x7f\x0b\x76\xe8\xe1\x6c\x94\x76\x4e\xeb\xff\x27\x00\x00\xff\xff\x15\xc5\x6c\x73\x6f\x28\x00\x00")

func _hardcodedDoerGoBytes() ([]byte, error) {
	return bindataRead(
		__hardcodedDoerGo,
		"../_hardcoded/doer.go",
	)
}

func _hardcodedDoerGo() (*asset, error) {
	bytes, err := _hardcodedDoerGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../_hardcoded/doer.go", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x1e, 0xca, 0xb9, 0x9a, 0x8e, 0xda, 0x73, 0xcc, 0x32, 0xd9, 0xc4, 0x32, 0x76, 0x1b, 0x14, 0x35, 0x8b, 0x22, 0xc8, 0xa8, 0x8d, 0x2a, 0x33, 0xe0, 0x38, 0x73, 0x2d, 0x54, 0x5b, 0x9a, 0xde, 0x4f}}
	return a, nil
}

var __hardcodedMiddlewareGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x54\xcd\x6e\xe3\x36\x10\x3e\x5b\x4f\x31\x65\x11\x84\x5a\x28\xca\x1e\x7a\x0a\xe0\x43\x91\x6e\x9a\xcb\x02\x8b\x4d\xd0\x16\x28\x0a\x2c\x43\x8d\x24\x22\x32\xa9\x0e\x47\x56\x83\xc0\xef\x5e\x0c\x25\x39\x56\x90\xa6\xa7\x3d\x58\x26\x67\xe6\xfb\xe6\x9f\xbd\xb1\x8f\xa6\x41\x88\x48\x7b\xa4\x2c\x73\xbb\x3e\x10\x83\xce\x36\xaa\xde\xb1\xca\x36\xca\x23\x5f\xb6\xcc\xbd\x9c\x69\xf0\xec\x76\x78\x59\xe1\xc3\xd0\xa8\x2c\xcf\xb2\xcb\x4b\xf8\x62\xbc\xb3\x9f\x5d\x55\x75\x38\x1a\x42\xe8\x42\x13\xc1\xf8\x27\xe8\x45\x11\x4b\xb8\x09\x04\x3e\x8c\x05\x8c\x78\x4e\x08\x36\x78\x76\x7e\x40\xe0\x96\xc2\xe8\x7c\x03\xdc\xe2\x64\x0c\x43\x2f\x8c\x72\x8f\x6c\xec\x23\xc4\x00\xdc\xba\x08\x3b\xf3\x04\x96\x4c\x6c\x27\x5b\x0a\x16\x63\x2c\xb3\x7a\xf0\xf6\xb5\x7f\xdd\x82\x84\x5b\xde\x1a\x5f\x75\x48\xf9\xea\x06\xcf\xd9\x86\x90\x07\xf2\x2b\xf1\xcd\xe0\xad\x16\x32\x3d\x4e\xf2\xaf\x18\xfb\xe0\x23\xfe\x4e\x8e\x91\x0a\x20\xf8\x30\xcb\xff\x1e\x30\x72\x2e\x3c\x9b\x0a\x6b\x24\x48\xb0\x49\xb0\x49\x49\x7c\x22\x82\xab\x2d\x10\xda\xb0\x47\xd2\xb9\x28\x5c\x0d\x47\xdd\x76\x0b\xde\x75\x13\x60\x0e\x46\x8e\x07\xf9\xec\x0d\x01\x52\xfa\x05\xca\x44\x12\x47\xc7\xb6\x85\x53\xe6\xe5\x5c\x6a\x7e\xea\x71\x76\x6d\x4d\x94\xa2\x91\xf3\xcd\x55\x62\x16\x9a\x2d\xd4\x3b\x2e\x3f\x09\x59\xad\x17\x58\x7e\x34\x4f\x5e\x4e\xad\x17\x13\x11\x55\x58\x9b\xa1\xe3\xff\x20\x53\x83\x7f\xf4\x61\xf4\x73\xdf\xce\x7e\xdc\x43\xa8\x41\xe2\x81\xb3\x7b\x55\x1c\x99\x5e\x4e\xf9\x94\xa4\x7c\xbb\xd0\x34\x48\xe5\x0d\x85\xdd\x75\xf0\x8c\xff\xb0\xa6\x72\x39\xe5\xf9\xe4\xe3\x17\xad\x12\x54\x15\x29\x82\x19\xf3\xf9\x59\x21\x91\xba\x92\xd8\x0b\x50\x69\x4a\x98\x8c\x45\x75\x35\x67\xaf\xd3\x70\x96\x77\xa2\xd1\x79\x7e\xc8\x8f\x8d\x59\x55\xe0\x90\x1a\xd3\x96\x77\x32\xf8\xb7\xf7\xf7\x5f\xf4\x58\x80\x68\x0e\x79\x76\x48\x73\x1d\xd9\xf0\x10\xd7\x93\x00\x23\x99\x3e\x82\x01\x9a\xc5\x30\x26\x79\x96\x32\x7f\x13\x11\x99\x06\xcb\xd2\xa4\x37\x26\x2b\xdb\x4c\x18\x70\x9e\xc5\x6d\x1a\x68\x1d\xe1\xc3\x5b\x54\x39\xa4\xff\x5b\x34\x15\x92\xb6\xa1\x42\x81\xa5\xfe\xc7\x72\xe6\xd9\x82\xc8\x45\xb0\xc6\x96\xaf\xa1\x4b\x96\xbf\x21\x45\x17\xfc\x57\xe3\x1b\x84\x0a\xad\xab\x30\xc2\xd8\x22\xb7\x48\xc0\x01\x8c\xb5\xd8\x33\x18\xd8\x4f\x86\xe5\x94\xea\x0a\x96\x56\x60\xd6\xcf\x5d\xc8\xe1\x21\x84\x2e\x79\xb8\xee\x1c\x7a\x9e\x01\xd7\x2d\xda\xc7\x93\xc7\xc2\xca\x3d\xa6\xad\xb6\xc9\xee\xc5\x4f\xaa\xc5\x7b\xe0\x57\x9b\x5e\x00\xf9\x66\x15\xd8\x77\xdc\xfd\x25\x5b\x59\xf4\x72\x2a\x6b\xf9\x2b\xb2\x56\x7f\x5c\x4c\x21\x5f\xcc\x81\x28\x19\xb3\xff\x1b\xf8\x9f\xab\x6a\xb9\xa9\xa9\x0c\x17\xb3\x03\x55\x2c\x05\x11\x1e\x57\xc3\x0f\xe4\x9b\xa5\xd6\xf3\xea\x8f\xab\xe6\xfe\xf4\xf1\x63\x7e\x22\xd5\x7f\xfe\xf5\xf0\xc4\xa8\x65\x77\xef\x7a\x72\x9e\x6b\xfd\xed\x59\xed\x30\x46\xd3\xc8\xd6\xa8\x75\xdd\xe1\xfc\x2c\x9e\x83\x0f\x3c\x77\x1e\xab\x02\xfa\x0e\xe5\xb9\x18\xfa\x86\x4c\x85\xea\xf0\xed\x25\xa8\x3c\xf9\x3a\xbe\x62\x87\x77\x76\xea\xdf\x00\x00\x00\xff\xff\xaf\x06\x4e\x46\x6b\x06\x00\x00")

func _hardcodedMiddlewareGoBytes() ([]byte, error) {
	return bindataRead(
		__hardcodedMiddlewareGo,
		"../_hardcoded/middleware.go",
	)
}

func _hardcodedMiddlewareGo() (*asset, error) {
	bytes, err := _hardcodedMiddlewareGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../_hardcoded/middleware.go", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x6e, 0xc1, 0x2a, 0xfd, 0x92, 0x11, 0xdd, 0xad, 0xe, 0x6a, 0x1f, 0xed, 0x1a, 0x93, 0x27, 0x69, 0x9, 0x73, 0xc7, 0x26, 0xaf, 0xf, 0x8, 0x4c, 0xb2, 0xad, 0x38, 0xb6, 0x79, 0x64, 0xf1, 0xca}}
	return a, nil
}

var __hardcodedTracingGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x59\x6f\x6f\xdb\x38\xf2\x7e\x2d\x7d\x8a\x59\x03\xdd\x4a\x85\x22\x27\xdb\x36\xbf\x45\x16\x79\x91\x26\x69\x6b\x20\xc9\x06\x4d\x7e\xb7\x38\x1c\x0e\x05\x2d\x8d\x25\x22\x12\xa9\x23\x29\xff\xb9\x20\xdf\xfd\x30\x43\x49\xb6\x63\x27\xd7\x5e\x5e\xa8\x16\xff\x0c\x9f\x19\x0e\x9f\x67\xa8\x36\x22\x7b\x10\x05\x82\x33\x22\x93\xaa\x08\x43\x59\x37\xda\x38\x88\xc2\x60\x94\x69\xe5\x70\xe9\x46\x61\x30\x42\x95\xe9\x5c\xaa\x62\x3c\x95\x4a\x98\xd5\x56\x53\x89\x4b\x7a\x9f\xd5\x3c\x52\xa1\x1b\x97\xce\x35\xf4\x5b\x5b\x7a\x5a\x67\x32\xad\xe6\xf4\xd3\xc9\x1a\x47\x61\x18\x8c\x0a\x9d\xea\x06\x95\xc3\x0a\x6b\x74\x66\x95\x4a\x3d\xa6\xe5\x8c\x9c\x8e\xa5\xb2\xce\xb4\x35\x2a\x27\x9c\xd4\x6a\x5c\x48\x57\xb6\xd3\x34\xd3\xf5\xb8\xd0\x46\x56\x95\x18\xd7\xed\x72\xac\x1d\x56\x75\xcb\x4b\xff\x8c\xb5\x1e\x1f\xcf\xef\x81\xee\x33\x40\xfd\xaf\xf5\x8d\x71\x49\x91\x42\x63\xc7\xda\x55\xaf\x9a\x79\x36\x94\x1f\x85\x69\xb2\x57\xe7\x34\x46\x37\xa2\x60\xd0\xa3\x30\xb0\xf9\x03\x6d\x11\xc2\xcb\x13\x6c\xfe\x30\xe6\x31\xaf\x9a\x1d\x46\xf9\xa7\x43\xeb\x5e\x1d\xbf\x61\xb1\x79\x28\x52\xa9\xc6\xe7\x15\xce\xd1\x8c\x1f\xc4\x6a\x8e\x78\x50\xe8\x74\x7e\x3c\xae\x74\x51\xa0\x19\x85\x71\x18\x8e\xc7\xd0\x43\xd7\x06\x9c\x86\xd6\x62\x1a\xce\x85\xd9\x6c\xde\x70\x2e\xbd\xc7\xa5\xbb\x16\xcd\xed\xba\xf7\x74\xbb\x9f\x10\x9c\xfb\x5c\x7c\x7c\x82\xf1\x98\x93\x15\x1b\x61\x50\x39\x28\x51\xe4\x68\x78\xd9\x1c\x67\xa2\xad\xdc\xb9\xae\x2a\xcc\x9c\x36\xb7\x94\xc8\x0b\x61\x21\x2b\x85\x2a\x30\x87\x99\xd1\x35\x7c\xfc\xf8\xfb\xf1\x21\x48\x05\x37\x7a\x8e\xf5\x14\x0d\x08\x95\x83\x2b\x11\xbe\x68\xa8\xe4\xd4\x08\xb3\x22\x6b\xa5\xb0\xea\xad\x83\x29\xa2\x82\xb6\xc9\x85\xc3\x1c\x16\x25\x2a\x90\x0e\xa4\x5d\x37\x21\x64\x42\x91\x93\x40\xdb\x9a\x5e\xec\x01\xc1\xde\xef\x45\xd7\x4a\xe5\x8e\x8e\xe1\x14\x3e\xbc\x3f\xfa\x3f\x76\xe2\x0e\x5d\xdb\x7c\xa9\xf4\x54\x54\xec\xf8\xad\xd1\x73\x99\xa3\x39\x53\xf9\x65\x97\x45\x60\xd1\x11\x00\x10\x0a\xfa\xcc\xa2\x40\xfb\xdf\x09\x59\x11\x16\x16\x58\x55\xf4\x2f\x79\xb6\xb5\xb5\x50\xb0\x75\x1f\x45\x8a\x34\xdb\x87\x19\xed\x16\x37\x15\xa8\xd0\xd0\x46\xd8\x61\xfb\xc6\x63\xb8\x2f\x71\xbd\x1a\x85\x6c\x98\x29\x0c\x82\x41\xd7\x1a\x85\x39\x05\x56\x9b\xc1\x5e\x49\xd1\xa9\x2a\x8f\x2f\xc7\x19\x81\x2f\x5b\x97\xeb\x85\x4a\xc3\x59\xab\xb2\x1f\xf1\x37\xca\xdc\x12\x3a\x32\x4a\xbb\x44\x88\x21\xea\x8f\x44\x7a\xd7\x08\xd5\x8f\x4d\xe0\xdd\xd0\xce\xf6\x4c\x6f\x30\x01\x34\x46\x9b\x18\x1e\xc3\x60\x3c\x86\xa3\x94\xc2\x48\x51\xec\x9d\xe2\xe6\xdf\x86\x66\xb6\x61\x06\x2f\xb9\xf7\x7d\x0a\xc2\x5a\x59\xa8\xad\x18\x6e\x0c\xe2\x51\x93\x19\x2c\xf0\x2d\x05\xa5\x55\x4a\xaa\x02\x2a\x4d\x41\x58\x25\x14\x0f\x05\x14\x28\xd0\xb3\x19\x58\x51\x37\x95\x54\x45\x0a\x7f\xba\x12\xcd\x42\x5a\xf4\x6d\xe8\x11\xbe\x01\x6d\x60\x51\x0a\x47\xe7\x0d\xee\xbf\x9d\x9d\x4f\x6e\xbe\x7c\xbf\x3b\xbb\xbe\xbd\xa2\x1f\xb7\xdf\xfe\xfc\x74\xf6\x69\x72\x35\xb9\xff\x3b\xd8\x06\x33\x39\x93\x68\xd3\x30\xe8\xcd\xde\x1a\x3d\x15\x53\x59\x49\xb7\x82\x93\x53\x38\x4c\x0f\x8f\xc2\x40\xda\x2b\x02\x43\x0d\xda\xa6\x5f\xd0\xa1\x9a\x47\xa3\xef\x93\xbb\xef\x57\x7f\x9e\x9f\x5d\x8d\x62\x38\x3d\x85\x91\x33\x2d\x9d\x79\x39\x83\x7e\xfc\x63\x18\xec\x35\x7c\x0a\x47\xe9\x61\x18\x3c\x01\x56\x16\x41\xce\x60\xfe\xcc\xf4\x6b\xb0\x47\xf1\x1f\x30\x87\x5f\x4e\x61\x34\x7a\x69\x81\xcf\x46\xd7\x97\x6a\xce\x9b\x47\x96\x3b\x31\x49\x6f\x85\xb1\xf8\xb9\xd2\xc2\x45\xf3\x04\x8e\x3f\xc4\x61\x40\x70\x69\xd4\x2f\xa7\xa0\xa4\x47\x1c\xf8\xb4\xa4\xf7\xc4\x3f\x66\xb5\x4b\x2f\x29\x0f\x66\xd1\x28\xd3\x6d\x95\x83\xd2\x0e\x1a\xb2\x06\x6f\xdf\xd8\xb7\x94\xa7\x33\x32\x3b\x4a\x60\x4e\x46\x9f\x5e\x74\xfc\x65\xb4\x61\xf0\x14\x86\x81\xc8\x73\x86\x4c\x4b\xde\x35\x46\x2a\x37\x8b\x46\x6f\xec\xc9\x9b\x7c\x94\xec\xe7\x8a\xaf\xda\xba\x64\x2f\x51\xc4\x3e\xb3\x2e\xe7\x68\x56\x70\xf4\x11\x2c\x66\x5a\xe5\x74\xc8\xdf\x56\x94\x85\x2b\xc2\x9d\x69\xa5\x30\x73\xf4\x73\xfb\xc0\x67\xbd\x29\x10\x8e\xed\xd0\xb9\xec\x96\xe1\xe4\x24\x9e\x05\x3d\xf3\x89\x5a\x6a\xeb\x4e\x98\x8f\x68\xe8\x5f\x94\xb2\x7d\x22\x4b\x45\xa9\x9e\xb7\x19\x4f\x70\xa5\xb4\x44\x85\x02\xac\xcc\x31\x13\x26\x61\x5e\x58\x6c\xcc\x60\x13\x5d\xfa\x6f\x8c\xef\x5b\x7a\xbb\xba\xc1\x01\xed\xc1\x80\x36\x0d\x83\xdc\x48\xca\x7d\x4a\xa9\x4e\x33\xd3\x1b\x5c\x5c\x70\x6b\x14\x06\xc1\xd0\xfa\x97\x74\xe5\x37\xec\x22\x20\xb5\xba\x45\x23\x75\x1e\x1d\x7d\x7c\x47\x35\x47\x7a\xc7\xf1\x8a\x93\xe7\x53\x2e\x55\xde\x68\xa9\x5c\x44\x9b\xb5\xdb\x3d\x51\x16\xb3\xd6\x60\x44\x5d\x71\x18\xe0\xc0\x32\x5d\x3a\xf2\x36\xde\xe0\x62\xa0\xaa\x30\x08\x32\xb7\x24\x43\x1e\xba\x9f\xb7\x9b\x99\xaf\x26\x26\x13\x15\x64\x06\x85\xa3\xe8\xf4\xab\x9e\xc0\x9b\xf9\x88\x97\x8e\x7d\x86\xb9\x86\x30\x28\x5c\x6c\x33\x5d\xb4\x86\xb9\x27\x47\xe3\x30\x20\x61\x4f\xef\xd0\x3d\x9b\xe6\x9a\x38\x0c\xbc\x92\xa7\x94\xc9\x1d\xd5\x12\xfd\xc6\xe9\x44\xcd\xf4\x45\x34\xb2\x4e\x18\x02\x75\xe0\x99\x6f\x94\x40\x37\xe1\x9a\xbc\x1a\x51\x18\xd1\xda\xd1\x09\xf8\x3f\x7a\xa7\x60\x8c\x7a\x20\x07\x46\x38\x1c\x9d\xec\x03\x96\x84\xc1\x53\x1c\xf6\x91\x59\xfb\xe0\x1a\x0e\x51\xf8\xf4\xa3\xfa\xf8\x59\x9b\x7b\xb4\xac\xd2\x35\x0a\xc5\x07\x62\x8a\x24\x64\x2c\x4f\xad\x92\x0e\xa8\xee\x91\xaa\xf0\x62\xa9\x72\xa8\x25\xc5\xdc\xab\xa5\xa5\x25\x40\x4c\xf5\x1c\x59\xc5\x74\xeb\x28\xc1\xe9\x80\x6c\xce\x4d\x61\xe2\x3a\xdd\xb3\x24\xc5\x52\x1d\xd4\x58\x6b\x5f\x3d\x0c\x4a\x49\x06\x70\x29\x6a\xc9\x89\xde\x49\x2b\xe6\x60\x1b\xa1\xec\x8f\x6b\x60\xe7\x53\x14\x43\xf4\x6e\x28\xdc\xd2\x89\xba\xe6\x15\x7f\x4e\xfd\x06\x6c\x27\xa7\xb0\xb6\x75\x83\x8b\xe7\xe6\xa2\xf8\x47\x72\xec\x28\x3d\xfc\x2f\x39\xf5\xda\x96\x72\x00\x5e\x36\x0f\x2f\xa8\xfc\x3e\x4a\x66\xde\x3e\xfe\x10\xbf\x18\x04\x72\xbe\xc3\x32\x8c\xb8\xd9\x59\x3a\x0c\x98\xf7\x38\x61\xb6\x98\x72\x72\xb1\x2e\x8d\x52\x98\x6c\x16\x3a\x3d\x1c\x4a\xb5\x85\x36\x0f\x10\x09\x07\x15\x0a\xeb\x60\x21\x5d\xe9\xa9\xcf\x6b\x3b\x1d\xde\x9e\x83\x37\x2d\x42\xdd\x5a\x37\x24\x48\x57\x8a\x4d\x2e\x2c\xe5\xdc\x4c\x9b\xba\x5a\x81\x70\x60\x84\xca\x75\xed\x2b\x59\xb2\x80\xca\x49\x83\x94\x4d\x99\x4f\x50\xa9\xdc\xf1\x87\xd4\x2f\xf1\xb9\xcb\xbd\xa6\xc2\x64\xcb\x93\xe5\x81\x11\xab\xed\xd5\x73\x8d\x96\xb5\x30\xd7\x8c\x96\x4c\x0c\x41\x22\x2e\xbc\xf3\xe8\xd7\x65\xd7\x2d\x17\xe0\x9f\x84\xc5\x3c\xda\x0e\xf8\xe4\xe2\x1b\x49\x4a\xd7\xb5\x87\x82\x62\xa6\x5a\x5f\x54\x5a\x84\x5a\x2c\x65\xdd\xd6\x96\x2b\x49\xa7\xa1\x68\x85\xc9\x41\x14\x82\x2e\x6f\x60\x75\x8d\xae\xe4\xd3\xa3\xe9\xb9\x30\x5a\x15\x7c\x68\x2d\x2a\xba\x81\x82\x00\xe7\xf5\x2b\x17\x4e\x40\xab\x70\xd9\x60\xe6\x30\xaf\x56\x3b\x4e\x34\x42\x5d\xc9\x5a\x3a\xbb\x5d\x3e\xfa\x36\x2e\x19\xce\x1c\xdd\x1b\x5b\x87\xe7\xba\x55\x8e\x3b\x4e\xe0\xe8\xf0\x90\x10\x07\x97\x73\x54\x6e\xb3\x83\xfe\xfa\xce\x2b\xa9\x1e\x9e\xf7\xf5\x9d\x4f\xec\xf1\x36\x96\x95\xca\x36\x32\xdd\x4b\x8c\x27\xb9\xeb\x76\x79\x87\x66\x8e\xe6\x5a\xe6\x79\x85\x8b\x75\x85\x6d\xa1\x5e\x37\xb9\x52\x38\xb0\x25\x97\x31\x53\x04\xe1\x9c\xc8\x4a\xcc\x29\x84\x02\x36\xee\xca\x60\xd9\x18\x97\xf1\x13\xe7\xb7\xda\x2d\x78\x9f\x55\x61\x4f\x80\x49\xdd\x7a\x4a\xf2\x1a\x2e\xf2\xdc\xbf\xfb\xfb\x1f\x48\x35\xd3\x64\x96\x92\xc8\xe0\xbf\x5a\xb4\xee\xa0\xab\x39\xb3\x5e\x01\xc8\xfa\x37\x59\x94\x0e\x94\x5e\xd0\xbd\x48\xab\x6a\x05\xb6\x6d\xf8\x83\x02\x0d\xa2\xbd\xa2\x8c\x96\x8a\x0d\x51\x56\x0b\xe7\xbd\xb8\x10\x4e\xe4\x9a\xb5\x0e\x33\xd7\x13\xe3\x9e\x38\x44\xe4\x8b\xcc\xf0\x46\xd4\x48\xd5\xa0\x54\x45\x0c\x34\x38\xa2\xcb\x7c\xfa\x55\xa8\x9c\xce\x18\x6c\xbe\xd1\xb9\xd7\xae\xa2\x48\xb0\x66\xf3\x87\x83\x74\xbf\xcd\x64\xe8\xa7\x3d\x5a\x5f\x4a\x6d\xb4\xbe\xbe\xc6\x6b\x4e\xf3\x2b\xc3\xeb\x6b\xf7\x83\x3d\x86\x2d\xa0\x9f\x69\x3e\x1b\x31\x0b\x3f\xef\x1b\xda\x46\x2b\x8b\x7f\x19\xc9\x4c\x67\xe0\x5d\xd7\xce\x61\x8f\x7d\x61\x3b\x1e\xf7\x38\xe9\xa2\x0a\xb8\xa4\x7d\x22\x5d\x61\x01\x6b\x84\x4a\x79\x17\x9a\xd6\xf1\x7d\x55\x75\x7b\x97\xb9\xe5\xf3\x7d\x23\x6b\x76\x90\x02\x3e\x0d\x9b\xe2\x6f\xfa\x1b\x57\x44\x5e\x73\x91\x6d\x33\xae\xc4\x79\xe8\xd0\xf9\x07\xd8\x2c\xfd\x2a\x6c\x47\x00\x51\x87\x33\x20\x2c\x93\x8b\xc4\x5b\x9f\x5c\xf0\xcc\x8c\xa7\xd2\xa0\xf4\x8e\x77\x30\x8a\x13\x6a\x1d\xe6\x0e\xcd\x6c\x82\xae\xf6\x5d\x7a\x50\xed\x8f\x94\xab\x25\x2e\xbb\xdd\xf7\x97\x54\xa6\x3d\x4a\xae\x04\xac\x26\xcf\xc0\x95\x9a\xee\x53\xda\xe7\x57\xa6\x8d\xc1\xca\xd7\x53\x95\x2e\xac\xbf\xf4\xd3\x7a\x96\x09\xdb\xf2\x4a\x72\x06\x15\xaa\xa8\xc3\xca\x77\xa1\xf7\xbf\xc1\xaf\xbf\x72\xab\xf7\x84\x1b\x8f\x8e\xe1\x11\x68\x0b\xb6\xca\x6c\x9f\xcf\x27\xd4\x3b\x5d\x39\x84\xe8\xfd\x6f\x07\x59\x29\x0c\x81\x8d\x13\xf8\xbd\x6b\x3d\x3a\x5e\xb7\x76\x34\xcf\x64\xd6\x50\x0d\x91\x7b\x20\x41\x07\xe1\x93\x4d\xe0\x3b\xc5\xac\xc4\x65\x7a\x81\x99\xce\xb1\x0b\x4d\x8f\xd1\x0f\xdf\x53\xb5\x6d\x6e\x5c\x7a\x96\xe7\xfd\xdb\x88\x67\x7e\x97\xf9\x28\xf1\x73\x83\xed\x0b\x0a\xdd\x4e\xfc\x57\xbe\xf4\x93\x2c\x2e\x55\x2e\x85\x4a\xff\x9f\xe3\x1b\x0d\xa8\xfe\xf1\xfb\xc9\x3f\xe3\xb8\x5b\xdc\x07\xe6\x65\xa8\x5d\xe0\x7e\x1e\x29\x4d\xfc\xdf\x80\xf6\x90\x7a\x8c\x74\x8b\xf3\x8f\x32\x65\x46\xf9\x7a\x7f\x7f\x1b\x99\x45\x02\x2c\xc7\x4f\x31\x57\xd4\x9e\x7c\x7d\x45\xa0\x2c\xd3\x56\xcf\xba\x74\x78\xdc\xd0\xea\x3f\x8b\x10\x8f\x65\x95\x44\xe5\x7a\x4e\xb4\x3d\xc5\x3a\xf1\x80\xcc\x73\x62\x7b\xd6\xc2\x88\x26\x01\x4c\x8b\xd4\x1f\xf6\xee\x06\x38\xac\x97\x0c\x1f\xa3\x3a\x8b\x64\xaf\xfb\xf4\x01\x73\x51\xb5\xac\x8f\x4d\x4b\x97\xbe\xee\xa0\x83\x22\x26\xd4\xad\xe3\xa2\x60\xf7\x53\x8d\xb4\x3c\xbe\xff\xfc\x45\xd3\xba\x8f\x17\x5a\x11\x47\x03\x8a\xac\xec\x97\xe3\xd3\xd3\x7d\x0b\x86\x85\x56\x6f\x19\xc0\x14\x0b\xae\x9b\x9d\xac\xfc\x69\xa2\x7b\x9c\x92\x4e\x8a\x4a\xfe\x1b\x73\x88\x30\x2d\x12\xf2\x56\xaa\x4e\x6a\xbc\xa4\xb4\x4d\xdc\x11\xf9\x66\x4c\xa3\xa9\xb0\xb8\x8e\xb0\x27\x37\xdd\xaa\xfc\xde\xc8\xa6\xe1\xe2\xae\x11\x8a\xb8\xf8\xdc\x2d\xff\xc6\x3e\x4b\xe5\xd0\xcc\x44\x86\x8f\x4f\xf1\xee\x84\x8d\xb2\xce\x6c\x34\x3f\x6e\xad\x73\x02\x5b\xaf\xbb\x8b\x9c\xec\xb4\x70\x42\xb8\x55\x83\x5b\x66\x89\x76\xda\xcc\xd1\xa2\xdb\x8e\x00\xec\x42\x0b\x83\xd7\x7c\x19\xea\xdf\x88\x32\x6d\x63\x5a\x0c\x83\x91\x68\x87\xff\xa3\x77\x5b\x3a\xb1\x59\xd9\x0f\x3a\xe3\x3f\x6d\xa7\x5b\x61\x27\x1d\x72\xe9\x76\x14\xf8\xc2\xdb\x0d\x26\xbd\x7b\x56\x0a\x73\x51\xff\x65\xa7\xa8\x8f\xe3\x9d\x89\x2f\x08\xe5\xce\xb8\xbb\x2e\x1c\x9f\x99\x2b\xe9\x8e\xc1\xe2\x47\x15\x9e\xce\x3b\x46\xdf\xa3\x79\xbe\xc3\x4b\xca\x3c\x01\xfd\x40\x44\xb3\xc1\x1b\x29\xc7\x36\x32\x2e\x7d\x1e\xef\x38\x8d\xba\x2a\xa1\x53\x2f\xfd\xd0\x29\x53\x17\xac\xf9\x40\x0d\x7d\x0e\xa5\xd7\x1e\xcd\x78\x4c\x25\x3b\x82\xb0\x43\x44\xdf\xda\xa1\x86\xee\xcf\x1e\x7f\xe5\xf0\xf5\x5d\x9c\x6e\x6c\x5b\x5f\xcb\x5d\x7a\x69\x26\xc7\xcf\xa8\xcf\xcb\x60\x27\xd8\xbe\xc8\x5a\x8b\x11\x97\x47\x7c\x4e\x85\xe2\x6c\xea\x0f\x66\xf7\x9d\xbb\x3b\x4e\x7b\x6d\xee\xc9\x94\x8e\xaf\x7d\xb2\x4f\x2e\x86\x7a\xe9\x31\xfc\x71\xc9\x27\xc1\xdf\x96\xfa\x5d\x99\xef\x2f\x55\xcf\xc6\xed\xea\x79\xb2\x33\x66\xa7\x12\x20\x22\x0e\x7c\x89\xb1\x86\xd7\x8d\xdf\x44\xb9\xce\xb2\xb4\x0b\xc7\x26\xf0\x64\xeb\xbf\x10\xbe\x72\xf0\xce\x85\x31\x12\x4d\x64\xba\xf7\x78\xa3\x8e\xfb\x99\x9a\xe4\x29\xfc\x4f\x00\x00\x00\xff\xff\xe6\xe6\x42\x5b\x36\x1b\x00\x00")

func _hardcodedTracingGoBytes() ([]byte, error) {
	return bindataRead(
		__hardcodedTracingGo,
		"../_hardcoded/tracing.go",
	)
}

func _hardcodedTracingGo() (*asset, error) {
	bytes, err := _hardcodedTracingGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../_hardcoded/tracing.go", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xf5, 0x4d, 0xd0, 0xa4, 0x31, 0x36, 0xe0, 0xe7, 0xb5, 0xe0, 0x7b, 0xc1, 0xf1, 0x1e, 0xba, 0xad, 0x67, 0x15, 0x12, 0x78, 0x74, 0x25, 0x5d, 0xc4, 0x16, 0x52, 0x52, 0xa1, 0xd, 0x89, 0xba, 0x58}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"../_hardcoded/doer.go":       _hardcodedDoerGo,
	"../_hardcoded/middleware.go": _hardcodedMiddlewareGo,
	"../_hardcoded/tracing.go":    _hardcodedTracingGo,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"..": {nil, map[string]*bintree{
		"_hardcoded": {nil, map[string]*bintree{
			"doer.go":       {_hardcodedDoerGo, map[string]*bintree{}},
			"middleware.go": {_hardcodedMiddlewareGo, map[string]*bintree{}},
			"tracing.go":    {_hardcodedTracingGo, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
