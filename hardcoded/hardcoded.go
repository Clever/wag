// Code generated by go-bindata. DO NOT EDIT.
// sources:
// ../_hardcoded/doer.go (10.364kB)
// ../_hardcoded/middleware.go (1.683kB)
// ../_hardcoded/tracing.go (6.872kB)

package hardcoded

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __hardcodedDoerGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x3a\x7f\x6f\xdb\x46\xb2\x7f\x4b\x9f\x62\x22\xe0\x2e\x64\x22\x53\x72\xee\xdc\x1e\xd4\xe7\x03\x5a\xc7\x7d\x2d\x90\x26\x41\xe5\xbe\x06\x08\x82\xeb\x8a\x1c\x4a\xdb\x2c\x77\xd5\xdd\xa5\x65\xc1\xe7\xef\xfe\x30\xb3\x4b\x8a\xd4\x0f\x27\x77\x2d\x1e\xde\xf9\x0f\x89\xe2\xce\xcc\xce\xcc\xce\xef\xf5\x5a\xe4\x1f\xc5\x12\x21\x57\x12\xb5\x1f\x0e\x65\xb5\x36\xd6\x43\x32\x1c\x8c\x16\x5b\x8f\x6e\x34\x1c\x8c\x72\xa3\x3d\xde\x79\x7a\x44\x9d\x9b\x42\xea\xe5\xe4\x57\x67\x34\xbf\xb0\xd6\x58\x86\x92\x66\x22\x4d\xed\xa5\xa2\x1f\xca\x2c\xe9\xab\x12\x7e\x35\xb1\x42\x17\xf4\x43\xa3\x8f\x5f\x93\x95\xf7\x6b\x7a\x76\x5b\x9d\xd3\xb7\x97\x15\x8e\x86\xc3\xc1\x68\x29\xfd\xaa\x5e\x64\xb9\xa9\x26\x57\x0a\x6f\xd1\x4e\x36\x62\x39\x51\x66\xb9\x44\xeb\xe8\x39\x3c\x8e\xfa\xa0\xa2\xc4\xbb\xc9\x6a\xeb\xbc\x95\x77\x67\x4b\xd3\x3c\xee\x41\x15\x46\x9b\x5b\xa1\x57\xb2\xc0\x09\xde\xa2\xf6\xce\xd4\x36\xc7\xd1\x30\x1d\x0e\x27\x13\x28\x0c\x5a\x90\x0e\x84\x06\xa9\x3d\xda\x52\xe4\x08\xa5\xb1\x30\x2a\x8c\xd4\xcb\x11\x10\xd3\x60\xf1\xb7\x1a\x9d\x77\xb0\x36\xce\xc9\x85\xda\xc2\x46\xfa\x15\x6c\xac\x58\xaf\xa5\x5e\x0e\xfd\x76\x8d\x91\x54\x4b\xe4\x7e\x38\x78\x69\x92\x1c\x9e\x11\x85\xec\x8a\x35\x3d\x06\x1b\x7f\xff\x18\x28\xa6\x90\x34\xbf\xdd\xda\x68\x87\x63\x60\xdd\xa6\xc3\x87\x61\xa0\x6a\xd6\xaf\x45\x85\x57\xfe\x0e\x9c\xb7\x75\xee\xef\x1f\x98\xef\x85\x70\x18\x69\x7c\x27\x74\xa1\xd0\xc2\x1a\x6d\x69\x6c\xe5\xc0\xaf\x90\xd7\x7b\xbc\x07\x6a\xf4\xfa\x25\xf1\xb9\x23\x56\xd6\x3a\x87\xa4\x68\x97\x52\xf8\x1d\x6c\x93\xd4\x16\x7d\x6d\x35\xe4\xd9\x4b\x93\xd8\x74\x38\x98\x4c\xa0\x79\xe5\xef\x18\x8b\x16\xb2\xab\x60\x5f\x49\x3a\x86\x7c\x0c\x41\xe2\x00\x6a\xb7\x8d\x48\xf4\x43\xa2\x83\x8b\xe9\xbb\xfe\x41\x04\x69\x18\xb6\x23\x0e\xed\x5e\xc0\xee\x8f\x4e\x84\xf9\xb1\xdb\xb7\x46\xc9\x7c\x0b\x3f\xee\x9e\xe3\x7e\x9d\x37\x50\x60\x29\x35\x3a\x10\x81\x32\xac\xf9\x75\x16\x36\xeb\x02\xf6\x4e\x79\x32\x81\x6f\x44\xfe\xd1\x94\xa5\x8b\x82\x86\x23\xd0\x75\xb5\x40\x0b\x42\x17\xe0\x65\x25\xf5\x12\x4c\x19\x09\x0b\xef\xb1\x5a\x7b\x97\x0d\x07\x0d\x6a\x92\xc2\xfb\x0f\xe4\x11\xd9\xcb\xda\x0a\x2f\x8d\x66\xca\xbc\x2b\x58\xcc\x51\xde\x62\xa0\xdb\x55\xc4\x18\x84\x83\x0d\x2a\x45\xdf\xb4\x68\xd1\xd5\xca\x83\x29\x19\xbb\xf1\xba\x78\x8e\x4f\x1d\xfc\xf2\xd2\xfc\x02\x15\xfa\x95\x29\xb2\xe1\x80\xa9\x27\xbd\xa3\x1d\xc3\x89\x93\x5d\x18\xa3\xa2\xce\xe6\x52\x2f\x15\x3e\xa6\x39\xbf\x12\xbe\x3d\x3d\xd1\x70\x0b\x46\xe7\x18\xb4\x79\x48\xa2\x67\xde\x47\x14\x2a\x3c\x6c\x4d\x0d\x6e\x65\x6a\x55\xb4\xdb\x60\x4b\xfb\xdc\x61\x6e\x74\x01\xa2\xf4\xe4\x87\x1e\x4a\x21\x95\xcb\xa2\x7d\x1f\xec\x97\xc2\x69\xcd\x77\xac\x78\x6f\xe5\xfe\x1c\x9e\x01\xbf\x99\xf3\x6e\x0f\x5d\x2b\x82\x8d\x54\x2a\x72\xa6\x8d\x3e\x7b\xfb\x66\x7e\x33\x0e\x4f\x5f\xdf\x5c\x7d\xb7\x8b\x22\x2c\xcc\xc5\xbb\x77\x19\xa1\xde\xbc\x79\xf9\x66\x06\xdf\x7b\xb2\x56\x07\xda\x78\xc8\x6b\x6b\x51\x7b\xb5\x6d\xac\x45\x6f\xc3\x21\x34\xea\xc0\x02\x16\xdb\x13\x87\xfb\x88\xc0\xe1\xb4\x2d\xfe\x06\x7b\x27\x6e\xd1\xad\x8f\x1d\x7b\xf7\xe8\x49\x27\xb2\xe4\xb7\x4f\x2e\x41\x4b\x05\xff\xfc\x27\x49\x94\xfd\xc0\xc6\x04\x97\x97\x30\x22\x81\x47\xc7\xde\x93\xf8\xb4\x30\x1c\x0c\x68\xaf\x6c\xee\x85\xaf\xdd\x95\x29\x10\xfe\x0b\x2e\xa6\x53\x22\xde\x68\xbc\x14\xca\xe1\x70\xf0\xd0\x1e\x81\xb7\x35\x46\x35\x5f\xdf\xad\x8d\x46\xed\xa5\x50\x47\xad\x4f\x03\xee\x20\x7a\x4e\x1c\xac\xee\x04\xfe\xe3\xa6\x57\xca\x5b\x0a\x9c\xf1\x2d\x07\xfe\xce\x2e\x8a\xa2\x41\x6e\x51\x38\xf2\xf0\x8d\x90\x9e\xed\xc3\x71\x90\x46\xbf\x41\xd4\xed\xc1\xcf\xe0\x7c\x3a\x1d\xc3\x0b\xfa\xf8\x2b\x7d\xfc\x8d\x3e\x28\x40\x9c\x7f\x31\x9d\x42\x25\x95\x92\xc1\x8a\x1d\x3c\x9f\x9c\x41\xbd\x06\x6f\xe0\xe2\x4f\xf0\xab\xf4\x1e\x6d\x73\xb4\xc7\xa5\xf8\x0c\x83\x86\xd9\x25\x54\xe2\x23\x26\x7b\xcb\x63\xb8\x48\x87\x03\x8d\x77\x0c\x71\x3e\x9d\x36\x46\xfe\xc3\x8e\xa3\xe1\xc0\xea\x82\x96\x29\xb1\x67\xaf\x71\x93\x34\x0f\x73\x4e\xa8\x09\x23\xbc\x36\x9b\x24\xcd\x7e\xd2\xf2\xee\xb5\xd0\x26\x49\xd3\x74\x38\x40\xc2\x9a\x66\xd3\x0b\x98\x4c\x58\xac\x0b\x4a\x55\x39\x6a\x1f\xe5\x1a\x0e\x28\xe1\xca\x48\x7c\xc9\x71\xbd\xb1\x88\xf7\xf2\x03\x5c\x02\xb3\xf6\x1c\x7a\x4c\x27\x49\x62\x75\x91\x7d\xab\x8c\xf0\x5f\xfc\x35\x49\x9f\xbd\x48\xcf\xce\xd3\x67\xf8\xac\x8c\x6f\x08\x89\xf6\x0f\x82\x3d\xbb\x84\x17\x5d\xab\xb2\xe8\xff\xdf\xfa\xee\xa9\x03\xfe\xcf\x77\xe0\xd7\xe6\x78\xd6\x08\x4e\x4a\x09\x52\x53\xfd\x17\x94\x47\x0e\xd5\xe6\x8e\x98\x85\xfb\x04\x1e\x77\x5c\x0a\x07\xd5\xda\x6f\xc1\x29\x99\x63\xa3\xdc\x1e\x85\x7f\x33\x0b\xf4\xc3\xbe\x50\x1b\xb1\xed\xc4\x0b\x92\xff\xc4\x6e\xff\x6a\xc2\xed\xf0\x10\xd4\xda\x94\x85\xac\xa0\x58\x42\xf5\xd5\xf0\xb3\xf4\xab\xae\x8e\x5a\x6d\x80\xc6\x0d\xc4\xaa\x3e\x98\xb1\xb9\x45\x6b\x65\x11\xeb\x8a\xd0\x0c\x80\x59\xfc\x8a\xb9\x7f\xea\xda\x62\xac\x2d\x83\x58\xa2\x3d\xf2\x49\xee\xef\x1a\xa2\x4d\x49\x37\x86\x13\x25\x57\xba\x0f\xd9\x2d\x17\xe3\x0a\xd1\xff\x1f\xa1\x6a\x24\xca\xe3\x9e\x9c\xf7\x0f\x3d\xca\x5c\x31\x36\xd5\xeb\xb3\xb6\x16\xfc\x23\xea\xd7\x66\x8b\x31\x98\x8f\x1c\x96\x76\xd5\x6a\x16\x98\xeb\xf3\x95\x66\x49\x57\x4c\x76\xb4\x27\xe6\x63\xe3\x15\xad\x2e\x2e\xa1\xc8\x3a\xbf\xd9\x49\xda\xcc\x42\xfb\xec\xd6\xb2\x9d\x61\x0e\x07\xb7\xc2\x1e\xf3\xf1\xb0\xd0\xfa\xf9\x90\x6b\xbe\xb9\xb8\xc5\x5e\x61\xb4\x30\x05\xe5\x28\xc8\xa9\x25\xd8\x20\xac\x18\xc0\x84\xcd\x32\x78\xe3\x57\x68\x37\x32\xac\x71\x14\x64\x00\xa1\x2c\x8a\x82\xcc\x47\x14\x4c\x97\xbb\x8a\xba\x2c\xd1\x82\xd1\x6d\x74\x2b\x7a\x5b\x31\x3a\xd5\x5d\x19\xcc\x11\x19\x8d\x18\x9e\x4d\x26\xce\x93\x38\xb7\x68\x4b\x65\x36\xdc\x98\x31\x86\x34\xda\x4d\x5e\xfc\x65\xfa\xe5\xf4\x6f\x5f\x7e\x31\xa1\xbd\xa4\x5e\x9e\x11\xc7\x67\xa6\x3c\x23\xdc\xb3\x48\xfb\x8c\x12\xaf\xa9\xfd\x59\x65\x0a\x59\x52\x6c\x68\x57\x9c\x17\x3e\xea\x62\x51\x97\xf0\xfe\x03\xf5\xb0\x7c\x06\x36\xfb\x86\x84\x8f\xf1\x8e\x4e\xa3\xaf\xb0\xc1\x60\x51\x97\x21\x52\x5e\x42\xe8\x63\xb3\x1f\x51\x14\x5f\x2b\x95\x04\x5c\xca\x1f\xfd\xa8\x49\x54\x1a\xa3\xd5\x52\x31\xf6\x70\x40\x27\xf9\x30\x0c\x99\xac\xa9\x7b\x29\xed\x7d\xc5\xd1\xef\xab\xe6\xdd\xf3\xe7\x8c\x7f\x94\xb5\x81\x2d\x2c\xe1\x44\x3e\x5e\x9b\xf5\x95\x32\x0e\x6d\xc2\x2d\x39\x65\xda\x6f\x58\xfd\xc9\xa2\x2e\x39\xaf\x0d\x22\x8d\x4b\xb0\x45\x64\x81\xa3\x73\x23\x50\x91\x15\xd4\x6a\x85\xee\x2a\x6c\x1a\x39\xbb\xbc\x04\x85\x3a\x69\x4c\x2f\xa5\x90\xff\xa4\x6b\x7c\x31\xd3\x84\xcc\xc2\xf4\xd2\xc0\xe3\xc2\xa2\xf8\x18\xf7\x9a\x4c\x80\x39\x6c\x1a\x0f\xb6\xc9\x68\x6e\xe5\xee\x85\x0c\x99\x51\x4b\xd5\x30\xe1\xd6\x7b\xca\x74\x6b\x96\x24\x63\x72\x64\xf0\x4c\x3f\xd4\xd9\x0a\x71\xdd\x72\xfa\x3e\x4a\xf0\x21\xed\xe7\xf2\xc8\x64\x0c\xcb\xb9\xb4\x79\x2d\xfd\x37\xc4\x2b\x5a\x6e\x10\x65\xb5\x56\x58\x51\xfb\x1f\x62\x5d\x80\x80\x45\x00\x81\x35\x75\x64\x56\x73\x52\x9f\xa3\x87\x02\x17\xf5\x92\x9c\x84\x4e\x8f\xbe\xcd\x1a\xad\xf0\xd8\x43\x96\x1a\x04\x54\x94\x03\x37\x2b\xb4\x48\x3d\x07\x3b\x80\xd1\x6a\x0b\xca\x2c\x3b\xac\x00\xdb\x68\xa8\xf5\x18\x86\x34\xb2\x50\x26\xff\xc8\x15\x42\x5b\x5d\x94\xd6\x54\xb0\x34\x94\xf9\xfc\xca\x9a\x7a\xb9\x8a\x79\xef\x88\x48\x8f\xf5\xbc\x81\xff\xf0\xc7\x8d\xdb\x20\x12\x78\x2d\x2a\x24\x4c\xa9\x97\xc3\x41\x18\xab\x04\xa8\xf0\x9c\xfd\x2c\x96\x21\x66\xbe\xe2\xdf\xa4\x50\x72\x99\x88\x3d\x9f\x5f\xbf\xd1\x39\x82\xdb\xea\x3c\xa3\x27\x56\xf7\x77\x61\xf0\x32\x9f\x5f\x5f\xdf\x52\x06\x91\x0e\xb0\xa2\xca\x8e\x4b\x9d\xdd\x84\x06\x6e\xa5\x00\x87\xf6\x16\xed\x99\x23\xc0\x30\x8f\xc9\xb8\x80\x42\x97\x5b\xb9\x08\x75\x33\x29\x99\x15\x46\x05\x81\x68\x36\x8f\x9a\xd8\xdf\x6d\xa7\x86\x1b\x5a\x7e\xe4\x2f\x88\x0d\xbf\xfc\xea\x8c\x9e\x8d\x88\xd8\xe8\x97\xe1\x80\x35\xf2\xd9\x58\x5a\x54\x8c\x15\x13\xc9\x95\xa9\xb5\x3f\x86\x25\xc3\xeb\x88\x65\x3b\xd0\x84\x7d\x4d\xd1\xe7\x24\xee\x3e\x36\xb6\xd0\x2d\xee\xdb\x50\x40\x8b\xe5\x21\xeb\x47\x70\x77\xd0\x44\xe0\x7b\x77\xd5\x33\xa6\x37\x6b\xd4\x5d\x02\x5c\x77\xb4\x04\xe4\x11\x68\x56\x80\x51\x4a\xea\x25\xb3\xf5\xad\x90\xaa\xb6\xf8\x98\x02\x0e\xa1\x0f\x89\x28\x45\x6e\xde\x25\xf6\x18\x91\x1e\xf4\x29\x62\xf3\x3a\xcf\xd1\xb9\xcf\x24\x16\xa1\xf7\x89\xcd\x57\xc6\xfa\xa8\x05\x2c\x3e\x25\x5e\x1f\xfa\x80\x56\x87\xa1\x4f\xab\xea\x04\x43\x37\x2b\xca\x94\x6f\x8d\x51\x3f\x22\x15\x6b\xc4\xd4\x69\x22\x87\xd0\x07\xf4\x64\x85\xa6\xf6\x9f\xc9\x54\x84\x26\x22\x57\xa1\xdb\xb9\x32\x3a\xf6\x3d\xd7\x77\x98\xd7\x94\xd5\x83\x71\xf7\x89\xe4\x8f\x43\x13\xc1\x57\xc2\xa3\xce\xb7\x37\xc6\x0b\xf5\x03\x0a\xfd\xb8\x71\xab\x0e\xf4\x3f\x2a\x14\x64\x98\x4d\x4d\xa8\xcc\x92\xe3\x43\xa2\x62\x68\x1b\xc3\x41\xec\xe0\x9c\xa6\xb2\x57\x66\x99\x8c\xa4\x2e\xcd\x68\x0c\x95\x58\xbf\x0f\x1e\xff\xa1\x1d\xf2\xdd\x3f\x50\x9a\xea\x3b\xf1\xec\x98\xdb\x62\xd6\x0d\x0b\x63\x42\xea\xf8\xee\x51\x14\x42\xda\x45\x83\x1d\x4a\xc7\x65\x0f\xf1\x22\xca\x0e\x86\xf1\x8e\x7a\xea\xac\x8f\x77\xcc\xf7\x19\xf9\x98\x83\xce\xf6\x85\x3b\x84\x39\x82\xdb\xf7\xcb\xd9\x51\xdc\x1e\xcc\x49\x1a\x8d\xf5\x3f\x46\x23\xc2\x1c\xd0\xd8\xf3\xc2\xd9\x31\x19\xfa\x30\x87\x24\x7a\xdb\x1f\x57\xc3\xa9\xed\x8f\xf8\xdc\x6c\x1f\xf7\x10\xe6\x90\x4c\x74\xb5\xc7\x58\x88\x30\x8c\xfb\x29\x0f\x9b\x01\x66\x9f\xf0\x59\xa6\xa3\xf6\xdc\xf0\xd0\x06\x31\xdb\x77\xd5\xf1\x70\xf0\xd0\x6f\xc9\x0e\x6b\x96\x14\xa4\x96\x3e\x49\xe3\xd8\xfc\x2d\x5a\x69\x0a\x99\xf3\x14\x4d\x99\x65\x98\xab\x6b\xa1\xfa\x65\x13\xd5\x5f\xc2\x39\xe9\xb8\xe4\x72\xe8\x3d\x57\x2f\x9d\xea\xca\xaf\x2c\xba\x95\x51\x85\xe3\x0a\xab\xd6\x05\x5a\xe7\x85\x2e\x78\x84\xb0\x5e\x2b\x99\x87\x96\x7e\x81\x2b\x71\x2b\x8d\xcd\x18\xfd\x27\x5d\x1a\xeb\x6b\x2d\x3c\xaa\xed\xb8\x5b\xa9\x14\x06\x9d\x7e\xea\x63\x2b\x04\x4b\x8b\xc2\xc3\x46\x6c\x89\x15\xbc\x5b\x87\xa2\x57\x3a\xa6\x52\x08\x2f\xc6\xe0\x0c\xf5\x4f\x16\x9d\xb1\x9e\x0b\xc7\xda\x6a\x9e\xf9\x6b\x90\xde\x81\xab\xd7\x7c\xc5\x46\xfd\xc1\xc2\x1a\x51\xe4\xc2\x1d\x88\x51\x51\x71\x9b\x3b\xae\x93\x78\xca\x7f\x58\x2c\x41\x32\x9f\x5f\xa7\x81\xfd\x39\x86\xcb\x00\x37\x9b\x4c\x1e\xb9\x17\x93\xce\xd5\xe8\x26\x17\x5f\x64\x6d\x15\x18\xeb\x38\xea\x0e\xe8\xb4\xc2\x81\x0c\x22\xce\xdc\x5b\x14\x55\x73\x05\x33\xbb\x6c\xf4\xc2\xb3\xbe\xee\x1a\x17\xea\xc7\x90\xb2\xb9\x17\xd6\xf3\xb2\x92\xce\xa3\xe6\xe8\x6b\x99\x98\x46\x9f\xbd\xe2\x97\xc9\xc8\xe7\xeb\xd1\x18\x46\xe7\x2f\xbe\xcc\xa6\xd9\x34\x3b\x9f\x4d\x47\x27\xfa\xad\xb5\xd0\x32\x4f\xa8\x0d\xe1\xde\x60\x38\x18\x2c\x0d\xcb\x9e\xcd\x49\x45\xc9\x6e\x9b\x63\xfc\xa4\x01\xbe\x23\x2a\xa9\xef\x67\x64\x9b\xc3\x5b\xb4\x5b\x38\x9f\x42\x33\x79\x5d\x60\x2e\xea\xd8\xd5\x10\x35\xb4\xf2\xae\x3d\x1a\x61\x91\x8e\x54\xc0\xf9\xf4\xac\x19\x8c\x32\xb5\xe8\xb6\xb0\x91\xba\x30\x9b\x0c\x6e\x56\xd2\x81\x42\xff\xd4\x41\x4d\xc7\x5f\xf1\x34\xf7\x18\x49\x6f\x60\x89\x7c\x5d\x61\xd5\x36\x52\x13\x79\x5e\x87\x7e\x83\xdc\x2b\x5e\x25\x39\x48\xb4\xe1\x1e\x44\x78\x36\x3f\x90\x6c\xa4\x6b\xb4\x25\xe6\xbe\x65\xdc\xd4\x36\xde\x38\x45\x6a\x8d\x35\x47\x40\xb5\x85\x4a\xf8\x7c\xd5\xb2\xf2\xd4\xc5\xce\x84\xda\x7e\x67\x58\x2d\x9b\x15\xea\x63\xad\x52\x24\xe9\x78\x00\x08\xf9\x4a\xe8\x25\x3a\xee\x46\x95\x59\x7e\xcb\x39\x52\xe7\xdb\x30\x47\xee\xdf\x95\x30\x8c\x70\x9e\x53\xef\x1c\x51\x87\x71\x74\x9b\x6f\xf7\x92\xf3\xfd\x43\x0f\xe1\x95\x59\x52\xa4\xdb\xc3\x61\xf2\xf4\xfe\x9e\x8d\x82\xdb\xef\x7f\x40\x33\x47\x8e\xab\xf9\xc7\x64\xef\xda\x26\x85\x7b\x68\xc7\x5b\x52\xf3\x1c\x52\x52\x10\x20\x1a\x83\xda\x2a\xda\x66\x14\x47\x17\x23\x78\x0e\x8d\x7d\x65\x5f\x17\x85\x4d\xd2\x6c\xce\xdb\xb3\x85\x53\xff\xfa\x5b\x6b\xde\x6c\x93\xaf\x71\x13\x0b\x81\x64\xf4\xdf\xd7\x37\xa3\x31\xd4\x56\x8d\xc9\x9a\x03\xc2\x11\x03\x67\xf5\x65\x6f\xad\xd4\xbe\x4c\x42\x09\x00\xb9\xd1\x1a\x73\xcf\xcd\xa0\x69\xcf\x61\x3e\xbf\xa6\x9e\x04\x45\x35\x83\x3f\xb9\x51\x68\xce\x03\x89\xdc\x68\x2f\x75\x8d\xfc\x8b\xd5\x37\x08\x90\x2d\x7b\x9d\x1b\xf0\x6c\x5e\x2f\x42\xcf\xf5\xb3\xf4\xab\x64\x34\x1a\xc3\x9f\x3b\x33\xb3\x30\x6c\xfb\xed\xff\x9c\x61\x3a\x41\xbc\xdd\xdd\x05\x04\xcc\xec\x3a\x44\xbf\xb8\x35\x4f\x71\xf6\xab\xb9\xb0\x14\x59\x9d\x5d\x02\xd5\x88\xd9\x4f\xba\x12\xd6\xad\x84\x4a\xc2\x58\x28\xc1\xdb\xec\xa5\xf0\x22\x49\xd3\x31\xfc\x19\xd3\xaf\x8e\x08\xd6\x67\x2b\xf2\xc5\x84\x33\x6e\x31\x9f\x5c\xc2\x28\xee\x7d\x65\xaa\x4a\xe8\x62\x74\x12\x35\x7c\x4f\x26\x70\x63\x0a\xb1\x65\x0f\xb3\x08\x39\xe5\x93\x30\xde\x0e\xf2\x41\x10\x9b\x22\x51\x1c\xc3\x92\x1b\xa2\x77\xed\x30\xa1\x89\xff\x04\x18\x52\x4f\x24\xdc\x74\xc7\xf0\xbd\xe6\xff\x62\x28\x50\x28\xd8\x18\xab\xd8\x9f\x19\x9d\xb7\xa3\x3c\xe6\xf8\x52\xb0\xd9\x93\x5c\x7e\x2d\x9c\x03\x19\x32\x56\x3b\x03\xce\x5a\xe2\xaf\x88\x85\x8d\xb1\x76\x0b\x62\x41\x2d\x42\x11\x67\x13\xd2\x85\x08\xb1\xc1\xdd\x68\x85\x89\xd1\x72\xbe\x57\x63\xf2\x98\xaf\xa5\xe9\x0d\x14\xd2\x89\x85\xc2\x38\x66\xa9\x4c\x81\x1d\x1d\x73\x43\xfe\xe4\x12\x8a\xac\x3b\xb3\x78\x5c\xc1\x14\x26\x28\xa4\x34\x03\xdb\x5e\x9c\x79\x1f\x68\x7e\xd8\x81\x1e\x2c\xc1\x25\xe0\xee\xac\x48\xdd\xdd\xd0\x17\xaa\x10\x59\x82\xa4\x70\x8e\xd2\xaf\x42\x1c\x64\xe0\xe4\x3c\x65\xe0\x52\x5a\x17\xb3\x34\x6c\xf0\xe9\x2d\x82\xa3\x18\x17\xce\x6b\x47\xcb\x74\x30\x5f\xa4\xfd\x25\x6a\xc4\xc3\x5e\x2b\xd1\xc4\xd6\xa2\x87\xf1\x97\xb4\x9b\xa9\xb8\x3a\x21\xa5\x63\x41\x47\x9b\xf3\x08\x97\xbb\x9d\x02\x9c\xa9\xd0\xaf\xe8\x34\xf6\x38\x68\x35\xdd\x0c\xa8\x07\x47\xc2\x6c\x47\x2f\xbb\x7b\xbd\x06\xb6\xe9\xac\x8a\xac\xed\xac\xd2\x4f\x78\x4e\x73\x3e\x47\x1b\x10\x3a\xec\xe3\xad\xc9\x1f\xcd\xdf\x03\xa0\x72\x7c\x92\x9d\xdb\xca\x79\xbd\x48\x4e\xd1\x4f\xe1\xef\xd0\xcb\x6b\x7f\x34\x43\xbb\xc8\x47\x1f\x0f\x84\xf3\x19\x55\xf4\xef\xbc\xe1\x90\x25\x14\x59\xf0\xbd\xfb\xde\xcc\x78\x76\x30\x34\x6e\x6a\xbf\x97\x26\xe9\xf9\xe3\xb8\xa9\xa6\x42\xe4\x67\xb5\x1c\xcb\x12\x71\x42\x1b\x66\xe4\x41\xd0\x38\x02\xee\xde\x21\xfe\xfd\xb2\xbd\x44\x1c\x84\xff\x5b\xc1\x22\x5e\x51\x10\xb6\xd0\x71\x1b\x1e\xc8\x4a\x1e\x5a\x76\x9d\x26\x56\x3a\x9d\xcd\x8c\xe5\x81\x79\x32\xba\x78\xf7\x8e\x6b\xca\xb0\x75\x8f\x9b\x87\x36\x23\x1f\x8c\x91\x39\xae\x7c\xe6\xa5\xcb\x20\x0c\xdb\xff\x05\x45\x3d\x3e\xa3\x3f\x71\xd5\xd0\xde\x32\x7c\x4a\x7f\xff\xb6\xfa\x1e\xd1\xde\xc3\xb0\xcf\x47\x50\x1d\x4c\x9e\x81\x36\x50\xc6\x56\x9c\x05\x0d\xff\x4e\xb0\x45\x0f\xcf\x26\xe9\xd1\x01\xfd\xff\x06\x00\x00\xff\xff\x2a\xe0\x77\x30\x7c\x28\x00\x00")

func _hardcodedDoerGoBytes() ([]byte, error) {
	return bindataRead(
		__hardcodedDoerGo,
		"../_hardcoded/doer.go",
	)
}

func _hardcodedDoerGo() (*asset, error) {
	bytes, err := _hardcodedDoerGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../_hardcoded/doer.go", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x32, 0x46, 0x5, 0x54, 0xd5, 0x4b, 0x37, 0x5, 0x3a, 0x6f, 0xeb, 0xda, 0xfb, 0xb9, 0xf1, 0xce, 0xa6, 0x77, 0xf9, 0xcc, 0xb2, 0x67, 0x9d, 0x3d, 0xce, 0x34, 0x3, 0x9f, 0x5d, 0xa8, 0x50, 0x12}}
	return a, nil
}

var __hardcodedMiddlewareGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x54\xcd\x6e\xe3\x36\x10\x3e\x5b\x4f\x31\x65\x11\x84\x5a\x38\xf2\x1e\x8a\x1e\x02\xf8\x50\xa4\x9b\xe6\xb2\xc0\x62\x13\xb4\x05\x8a\x02\xcb\x50\x23\x89\xb0\x4c\xaa\xc3\x91\x55\x23\xf0\xbb\x17\x43\x49\x4e\x14\xa4\xe9\xa9\x07\xcb\xe4\xcc\x7c\xdf\xfc\xb3\x33\x76\x67\x6a\x84\x88\x74\x40\xca\x32\xb7\xef\x02\x31\xe8\x6c\xa5\xaa\x3d\xab\x6c\xa5\x3c\xf2\xa6\x61\xee\xe4\x4c\xbd\x67\xb7\xc7\x4d\x89\x8f\x7d\xad\xb2\x6c\xa5\xea\xd0\xed\xea\xc2\xf9\xcd\x4d\x8b\x07\xa4\xcd\xce\x1c\x0f\x88\x57\x75\x28\x0e\x3f\x6e\xda\x50\xd7\x48\x2a\xcb\xb3\x6c\xb3\x81\x2f\xc6\x3b\xfb\xd9\x95\x65\x8b\x83\x21\x84\x36\xd4\x11\x8c\x3f\x42\x27\x8a\x58\xc0\x6d\x20\xf0\x61\x58\xc3\x80\x97\x84\x60\x83\x67\xe7\x7b\x04\x6e\x28\x0c\xce\xd7\xc0\x0d\x8e\xc6\xd0\x77\xc2\x28\xf7\xc8\xc6\xee\x20\x06\xe0\xc6\x45\xd8\x9b\x23\x58\x32\xb1\x19\x6d\x29\x58\x8c\xb1\xc8\xaa\xde\xdb\xd7\xfe\x75\x03\x92\x56\x71\x67\x7c\xd9\x22\xe5\x8b\x1b\x3c\x65\x2b\x42\xee\xc9\x2f\xc4\xb7\xbd\xb7\x5a\xc8\xf4\x30\xca\xbf\x62\xec\x82\x8f\xf8\x1b\x39\x46\x5a\x03\xc1\x87\x49\xfe\x57\x8f\x91\x73\xe1\x59\x95\x58\x21\x41\x82\x8d\x82\x55\x4a\xe2\x13\x11\x5c\x6f\x81\xd0\x86\x03\x92\xce\x45\xe1\x2a\x38\xeb\xb6\x5b\xf0\xae\x1d\x01\x53\x30\x72\x3c\xc9\xe7\x60\x08\x90\xd2\x2f\x50\x26\x92\x38\x38\xb6\x0d\xbc\x64\x9e\xcf\x85\xe6\x63\x87\x93\x6b\x6b\xa2\x14\x8d\x9c\xaf\xaf\x13\xb3\xd0\x6c\xa1\xda\x73\xf1\x49\xc8\x2a\x3d\xc3\xf2\xb3\x79\xf2\xf2\xd2\x7a\x36\x11\x51\x89\x95\xe9\x5b\xfe\x17\x32\xd5\xfb\x9d\x0f\x83\x9f\xfa\x76\xf1\xfd\x01\x42\x05\x12\x0f\x5c\x3c\xa8\xf5\x99\xe9\xf9\x94\x8f\x49\xca\x77\x9c\x9f\xe2\x96\xc2\xfe\x26\x78\xc6\xbf\x59\x53\x31\x9f\xf2\x7c\xf4\xf1\xb3\x56\x09\xaa\xd6\x29\x82\x09\xf3\xf9\x49\x21\x91\xba\x96\xd8\xd7\xa0\xd2\x94\x30\x19\x8b\xea\x7a\xca\x5e\xa7\x21\x2e\xee\x45\xa3\xf3\xfc\x94\x9f\x1b\xb3\xa8\xc0\x29\x35\xa6\x29\xee\x65\x41\xee\x1e\x1e\xbe\xe8\x61\x0d\xa2\x39\xe5\xd9\x29\xcd\x75\x64\xc3\x7d\x5c\x4e\x02\x0c\x64\xba\x08\x06\x68\x12\xc3\x90\xe4\x59\xca\xfc\x4d\x44\x64\xea\x2d\x4b\x93\xde\x98\xac\x6c\x35\x62\xc0\x79\x16\xb7\x69\xa0\x75\x84\x0f\x6f\x51\xe5\x90\xfe\xef\xd0\x94\x48\xda\x86\x12\x05\x96\xfa\x1f\x8b\x89\x67\x0b\x22\x17\xc1\x12\x5b\xbc\x86\xce\x59\xfe\x8a\x14\x5d\xf0\x5f\x8d\xaf\x11\x4a\xb4\xae\xc4\x08\x43\x83\xdc\x20\x01\x07\x30\xd6\x62\xc7\x60\xe0\x30\x1a\x16\x63\xaa\x0b\x58\x5a\x81\x49\x3f\x75\x21\x87\xc7\x10\xda\xe4\xe1\xa6\x75\xe8\x79\x02\xdc\x34\x68\x77\x2f\x1e\x0b\x2b\xf7\x98\xb6\xda\x26\xbb\x67\x3f\xa9\x16\xef\x81\x5f\x6d\xfa\x1a\xc8\xd7\x8b\xc0\xfe\xc7\xdd\x9f\xb3\x95\x45\x2f\xc6\xb2\x16\xbf\x20\x6b\xf5\xfb\xd5\x18\xf2\xd5\x14\x88\x92\x31\xfb\xaf\x81\xff\xa9\x2c\xe7\x9b\x1a\xcb\x70\x35\x39\x50\xeb\xb9\x20\xc2\xe3\x2a\xf8\x8e\x7c\x3d\xd7\x7a\x5a\xfd\x61\xd1\xdc\x1f\x3e\x7e\xcc\x5f\x48\xf5\x1f\x7f\x3e\x1e\x19\xb5\xec\xee\x7d\x47\xce\x73\xa5\xbf\x3d\xa9\x3d\xc6\x68\x6a\xd9\x1a\xb5\xac\x3b\x5c\x5e\xc4\x4b\xf0\x81\xa7\xce\x63\xb9\x86\xae\x45\x79\x2e\xfa\xae\x26\x53\xa2\x3a\x7d\x7b\x0e\x2a\x4f\xbe\xce\xaf\xd8\xe9\x9d\x9d\xfa\x27\x00\x00\xff\xff\x64\xba\x96\x25\x93\x06\x00\x00")

func _hardcodedMiddlewareGoBytes() ([]byte, error) {
	return bindataRead(
		__hardcodedMiddlewareGo,
		"../_hardcoded/middleware.go",
	)
}

func _hardcodedMiddlewareGo() (*asset, error) {
	bytes, err := _hardcodedMiddlewareGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../_hardcoded/middleware.go", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x17, 0x73, 0xff, 0x36, 0x5d, 0xfe, 0x40, 0x7c, 0x33, 0x99, 0xc8, 0x19, 0x37, 0x47, 0x59, 0x51, 0x96, 0xb, 0x22, 0x81, 0x1c, 0x7d, 0xe4, 0x3, 0x2f, 0x2d, 0x3c, 0x2d, 0xc5, 0x23, 0x70, 0xb8}}
	return a, nil
}

var __hardcodedTracingGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x59\x6f\x6f\xdb\x38\xf2\x7e\x2d\x7d\x8a\x59\x03\xdd\x4a\x85\x22\x27\xdb\x36\xbf\x45\x16\x79\x91\x26\x69\x6b\x20\xc9\x06\x4d\x7e\xb7\x38\x1c\x0e\x05\x2d\x8d\x25\x22\x12\xa9\x23\x29\xff\xb9\x20\xdf\xfd\x30\x43\x49\xb6\x63\x27\xd7\x5e\x5e\xb8\x12\xff\x0c\x1f\x0e\x87\xcf\x33\xa3\x36\x22\x7b\x10\x05\x82\x33\x22\x93\xaa\x08\x43\x59\x37\xda\x38\x88\xc2\x60\x94\x69\xe5\x70\xe9\x46\x61\x30\x42\x95\xe9\x5c\xaa\x62\x3c\x95\x4a\x98\xd5\x56\x53\x89\x4b\x7a\x9f\xd5\x3c\x52\xa1\x1b\x97\xce\x35\xf4\xac\x2d\xfd\x5a\x67\x32\xad\xe6\xf4\xe8\x64\x8d\xa3\x30\x0c\x46\x85\x4e\x75\x83\xca\x61\x85\x35\x3a\xb3\x4a\xa5\x1e\xd3\x72\x46\x4e\xc7\x52\x59\x67\xda\x1a\x95\x13\x4e\x6a\x35\x2e\xa4\x2b\xdb\x69\x9a\xe9\x7a\x5c\x68\x23\xab\x4a\x8c\xeb\x76\x39\xd6\x0e\xab\xba\xe5\xa5\x7f\xc6\x5a\x8f\x8f\xe7\xf7\x40\xf7\x19\xa0\xfe\x17\xb1\x52\xe7\xb8\x31\xba\x11\x05\x9b\x1d\x85\x81\xcd\x1f\xc8\x89\x08\x2f\x4f\xb0\xf9\xc3\x98\xc7\xbc\xb6\xe6\x7a\x94\xff\x75\x68\xdd\xab\xe3\x37\x2c\x36\x0f\x45\x2a\xd5\xf8\xbc\xc2\x39\x9a\xf1\x83\x58\xcd\x11\x0f\x0a\x9d\xce\x8f\xc7\x95\x2e\x0a\x34\xa3\x30\x0e\xc3\xf1\x18\x7a\xe8\xda\x80\xd3\xd0\x5a\x4c\xc3\xb9\x30\x9b\xcd\x1b\x9b\x4b\xef\x71\xe9\xae\x45\x73\xbb\xee\x3d\xdd\xee\x27\x04\xe7\x3e\x5a\x1e\x9f\x60\x3c\xe6\x70\xc2\x46\x18\x54\x0e\x4a\x14\x39\x1a\x5e\x36\xc7\x99\x68\x2b\x77\xae\xab\x0a\x33\xa7\xcd\x2d\x85\xda\x42\x58\xc8\x4a\xa1\x0a\xcc\x61\x66\x74\x0d\x1f\x3f\xfe\x7e\x7c\x08\x52\xc1\x8d\x9e\x63\x3d\x45\x03\x42\xe5\xe0\x4a\x84\x2f\x1a\x2a\x39\x35\xc2\xac\xc8\x5a\x29\xac\x7a\xeb\x60\x8a\xa8\xa0\x6d\x72\xe1\x30\x87\x45\x89\x0a\xa4\x03\x69\xd7\x4d\x08\x99\x50\xb4\x49\xd0\xae\x6a\xd2\x8b\x3d\x20\x78\xf7\x7b\xd1\xb5\x52\xb9\xa3\x63\x38\x85\x0f\xef\x8f\xfe\x8f\x37\x71\x87\xae\x6d\xbe\x54\x7a\x2a\x2a\xde\xf8\xad\xd1\x73\x99\xa3\x39\x53\xf9\xe5\x92\x2e\x0f\x1a\xb0\xe8\x08\x00\x08\x05\xd8\xb7\x39\xdd\x3d\x27\x64\x45\x58\x58\x60\x55\xd1\xbf\xb4\xb3\xad\xa3\x85\x82\xad\x7b\x2f\x92\xa7\xd9\x3e\xcc\xe8\xb4\xb8\xa9\x40\x85\x86\x0e\xc2\x0e\xc7\x37\x1e\xc3\x7d\x89\xeb\xd5\xc8\x65\xc3\x4c\x61\x10\x0c\xba\xd6\x28\xcc\xc9\xb1\xda\x0c\xf6\x4a\xf2\x4e\x55\x79\x7c\x39\xce\x08\x7c\xd9\xba\x5c\x2f\x54\x1a\xce\x5a\x95\xfd\xc8\x7e\xa3\xcc\x2d\xa1\xa3\x8b\xb4\x0b\x84\x18\xa2\xfe\x4a\xa4\x77\x8d\x50\xfd\xd8\x04\xde\x0d\xed\x6c\xcf\xf4\x06\x13\x40\x63\xb4\x89\xe1\x31\x0c\xc6\x63\x38\x4a\xc9\x8d\xe4\xc5\x7e\x53\xdc\xfc\xdb\xd0\xcc\x36\xcc\xb0\x4b\xee\x7d\x9f\x82\xb0\x56\x16\x6a\xcb\x87\x1b\x83\x78\xd4\x64\x06\x0b\x7c\x4b\x4e\x69\x95\x92\xaa\x80\x4a\x93\x13\x56\x09\xf9\x43\x01\x39\x0a\xf4\x6c\x06\x56\xd4\x4d\x25\x55\x91\xc2\x9f\xae\x44\xb3\x90\x16\x7d\x1b\x7a\x84\x6f\x40\x1b\x58\x94\xc2\xd1\x7d\x83\xfb\x6f\x67\xe7\x93\x9b\x2f\xdf\xef\xce\xae\x6f\xaf\xe8\xe1\xf6\xdb\x9f\x9f\xce\x3e\x4d\xae\x26\xf7\x7f\x07\xdb\x60\x26\x67\x12\x6d\x1a\x06\xbd\xd9\x5b\xa3\xa7\x62\x2a\x2b\xe9\x56\x70\x72\x0a\x87\xe9\xe1\x51\x18\x48\x7b\x45\x60\xa8\x41\xdb\xf4\x0b\x3a\x54\xf3\x68\xf4\x7d\x72\xf7\xfd\xea\xcf\xf3\xb3\xab\x51\x0c\xa7\xa7\x30\x72\xa6\xa5\x3b\x2f\x67\xd0\x8f\x7f\x0c\x83\xbd\x86\x4f\xe1\x28\x3d\x0c\x83\x27\xc0\xca\x22\xc8\x19\xcc\x9f\x99\x7e\x0d\xf6\x28\xfe\x03\xe6\xf0\xcb\x29\x8c\x46\x2f\x2d\xf0\xd9\xe8\xfa\x52\xcd\xf9\xf0\xc8\x72\x47\xf7\xe9\xad\x30\x16\x3f\x57\x5a\xb8\x68\x9e\xc0\xf1\x87\x38\x0c\x08\x2e\x8d\xfa\xe5\x14\x94\xf4\x88\x03\x1f\x96\xf4\x9e\xf8\x9f\x59\xed\xd2\x4b\x8a\x83\x59\x34\xca\x74\x5b\xe5\xa0\xb4\x83\x86\xac\xc1\xdb\x37\xf6\x2d\xc5\xe9\x8c\xcc\x8e\x12\x98\x93\xd1\xa7\x17\x37\xfe\x32\xda\x30\x78\x0a\xc3\x40\xe4\x39\x43\xa6\x25\xef\x1a\x23\x95\x9b\x45\xa3\x37\xf6\xe4\x4d\x3e\x4a\xf6\x73\xc5\x57\x6d\x5d\xb2\x97\x28\x62\x1f\x59\x97\x73\x34\x2b\x38\xfa\x08\x16\x33\xad\x72\xba\xe4\x6f\x2b\x8a\xc2\x15\xe1\xce\xb4\x52\x98\x39\x7a\xdc\xbe\xf0\x59\x6f\x0a\x84\x63\x3b\x74\x2f\xbb\x65\x38\x38\x89\x67\x41\xcf\x7c\xa0\x96\xda\xba\x13\xe6\x23\x1a\xfa\x17\x85\x6c\x1f\xc8\x52\x51\xa8\xe7\x6d\xc6\x13\x5c\x29\x2d\x51\xa1\x00\x2b\x73\xcc\x84\x49\x98\x17\x16\x1b\x33\xd8\x44\x17\xfe\x1b\xe3\xfb\x96\xde\xae\x6e\x70\x40\x7b\x30\xa0\x4d\xc3\x20\x37\x92\x62\x9f\x42\xca\x55\x4d\x61\x9a\x2c\xbd\xc1\xc5\x05\xb7\x46\x61\x10\x0c\xad\x7f\x49\x57\x7e\xc3\xce\x03\x52\xab\x5b\x34\x52\xe7\xd1\xd1\xc7\x77\x94\x15\xa4\x77\xec\xaf\x38\x79\x3e\xe5\x52\xe5\x8d\x96\xca\x45\x74\x58\xbb\xdd\x13\x65\x31\x6b\x0d\x46\xd4\x15\x87\x01\x0e\x2c\xd3\x85\x23\x1f\xe3\x0d\x2e\x06\xaa\x0a\x83\x20\x73\x4b\x32\xe4\xa1\xfb\x79\xbb\x91\xf9\x6a\x60\x32\x51\x41\x66\x50\x38\xf2\x4e\xbf\xea\x09\xbc\x99\x8f\x78\xe9\xd8\x47\x98\x6b\x08\x83\xc2\xc5\x36\xd3\x45\x6b\x98\x7b\x62\x34\x0e\x03\x12\xf6\xf4\x0e\xdd\xb3\x69\xae\x89\xc3\xc0\x2b\x79\x4a\x91\xdc\x51\x2d\xd1\x6f\x9c\x4e\xd4\x4c\x5f\x44\x23\xeb\x84\x21\x50\x07\x9e\xf9\x46\x09\x74\x13\xae\x69\x57\x23\x72\x23\x5a\x3b\x3a\x01\xff\x47\xef\xe4\x8c\x51\x0f\xe4\xc0\x08\x87\xa3\x93\x7d\xc0\x92\x30\x78\x8a\xc3\xde\x33\xeb\x3d\xb8\x86\x5d\x14\x3e\xfd\xa8\x3e\x7e\xd6\xe6\x1e\x2d\xab\x74\x8d\x42\xf1\x85\x98\x22\x09\x19\xcb\x53\xab\xa4\x03\xca\x7b\xa4\x2a\xbc\x58\xaa\x1c\x6a\x49\x3e\xf7\x6a\x69\x69\x09\x10\x53\x3d\x47\x56\x31\xdd\x3a\x0a\x70\xba\x20\x9b\x73\x53\x98\xb8\x4e\xf7\x2c\x49\xb1\x54\x07\x35\xd6\xda\x67\x0f\x83\x52\x92\x01\x5c\x8a\x5a\x72\xa0\x77\xd2\x8a\x39\xd8\x46\x28\xfb\xe3\x1a\xd8\xed\x29\x8a\x21\x7a\x37\x24\x6e\xe9\x44\x5d\xf3\x8a\x3f\xa7\x7e\x03\xb6\x93\x53\x58\xdb\xba\xc1\xc5\x73\x73\x51\xfc\x23\x31\x76\x94\x1e\xfe\x97\x98\x7a\xed\x48\xd9\x01\x2f\x9b\x87\x17\x54\x7e\x1f\x25\x33\x6f\x1f\x7f\x88\x5f\x74\x02\x6d\xbe\xc3\x32\x8c\xb8\xd9\x59\x3a\x0c\x98\xf7\x38\x60\xb6\x98\x72\x72\xb1\x4e\x8d\x52\x98\x6c\x26\x3a\x3d\x1c\x0a\xb5\x85\x36\x0f\x10\x09\x07\x15\x0a\xeb\x60\x21\x5d\xe9\xa9\xcf\x6b\x3b\x5d\xde\x9e\x83\x37\x2d\x42\xdd\x5a\x37\x04\x48\x97\x8a\x4d\x2e\x2c\xc5\xdc\x4c\x9b\xba\x5a\x81\x70\x60\x84\xca\x75\xed\x33\x59\xb2\x80\xca\x49\x83\x14\x4d\x99\x0f\x50\xa9\xdc\xf1\x87\xd4\x2f\xf1\xb9\x8b\xbd\xa6\xc2\x64\x6b\x27\xcb\x03\x23\x56\xdb\xab\xe7\x1a\x2d\x6b\x61\xae\x19\x2d\x99\x18\x9c\x44\x5c\x78\xe7\xd1\xaf\xd3\xae\x5b\x4e\xc0\x3f\x09\x8b\x79\xb4\xed\xf0\xc9\xc5\x37\x92\x94\xae\x6b\x0f\x05\xc5\x4c\xb5\x3e\xa9\xb4\x08\xb5\x58\xca\xba\xad\x2d\x67\x92\x4e\x43\xd1\x0a\x93\x83\x28\x04\x95\x57\x60\x75\x8d\xae\xe4\xdb\xa3\xe9\x77\x61\xb4\x2a\xf8\xd2\x5a\x54\x54\x23\x82\x00\xe7\xf5\x2b\x17\x4e\x40\xab\x70\xd9\x60\xe6\x30\xaf\x56\x3b\x9b\x68\x84\xba\x92\xb5\x74\x76\x3b\x7d\xf4\x6d\x9c\x32\x9c\x39\xaa\xec\x5a\x87\xe7\xba\x55\x8e\x3b\x4e\xe0\xe8\xf0\x90\x10\x07\x97\x73\x54\x6e\xb3\x83\xfe\xfa\xce\x2b\xa9\x1e\x9e\xf7\xf5\x9d\x4f\xbc\xe3\x6d\x2c\x2b\x95\x6d\x44\xba\x97\x18\x4f\x72\xd7\xed\xf2\x0e\xcd\x1c\xcd\xb5\xcc\xf3\x0a\x17\xeb\x0c\xdb\x42\xbd\x6e\x72\xa5\x70\x60\x4b\x4e\x63\xa6\x08\xc2\x39\x91\x95\x98\x93\x0b\x05\x6c\x54\xb3\x60\xd9\x18\xa7\xf1\x13\xe7\x8f\xda\x2d\xf8\x9c\x55\x61\x4f\x80\x49\xdd\x7a\x4a\xf2\x1a\x2e\xf2\xdc\xbf\xfb\xfa\x0f\xa4\x9a\x69\x32\x4b\x41\x64\xf0\x5f\x2d\x5a\x77\xd0\xe5\x9c\x59\xaf\x00\x64\xfd\x9b\x2c\x4a\x07\x4a\x2f\xa8\x2e\xd2\xaa\x5a\x81\x6d\x1b\x2e\xf9\x69\x10\x9d\x15\x45\xb4\x54\x6c\x88\xa2\x5a\x38\xbf\x8b\x0b\xe1\x44\xae\x59\xeb\x30\x73\x3d\x31\xee\xf1\x43\x44\x7b\x91\x19\xde\x88\x1a\x29\x1b\x94\xaa\x88\x81\x06\x47\x54\x6e\xa7\x5f\x85\xca\xe9\x8e\xc1\xe6\x1b\xdd\x7b\xed\xa8\x9e\xf7\x9a\xcd\xa5\x7d\xba\xdf\x66\x32\xf4\xd3\x19\xad\x8b\x52\x1b\xad\xcb\xd7\x78\xcd\x69\x7e\x65\x78\x7d\xed\x7e\xb0\xc7\xb0\x05\xf4\x33\xcd\x67\x23\x66\xe1\xe7\x7d\x43\xdb\x68\x65\xf1\x2f\x23\x99\xe9\x0c\xbc\xeb\xda\xd9\xed\xb1\x4f\x6c\xc7\xe3\x1e\x27\x15\xaa\x80\x4b\x3a\x27\xd2\x15\x16\xb0\x46\xa8\x94\x4f\xa1\x69\x1d\xd7\xab\xaa\x3b\xbb\xcc\x2d\x9f\x9f\x1b\x59\xb3\x83\x14\xf0\x6d\xd8\x14\x7f\xd3\x57\x5c\x11\xed\x9a\x93\x6c\x9b\x71\x26\xce\x43\x87\xce\x3f\xc0\x66\xe9\x57\x61\x3b\x02\x88\x3a\x9c\x01\x61\x99\x5c\x24\xde\xfa\xe4\x82\x67\x66\x3c\x95\x06\xa5\x77\x7c\x82\x51\x9c\x50\xeb\x30\x77\x68\x66\x13\x54\xda\x77\xe1\x41\xb9\x3f\x52\xac\x96\xb8\xec\x4e\xdf\x17\xa9\x4c\x7b\x14\x5c\x09\x58\x4d\x3b\x03\x57\x6a\xaa\xa7\xb4\x8f\xaf\x4c\x1b\x83\x95\xcf\xa7\x2a\x5d\x58\x5f\xf4\xd3\x7a\x96\x09\xdb\xf2\x4a\x72\x06\x15\xaa\xa8\xc3\xca\xb5\xd0\xfb\xdf\xe0\xd7\x5f\xb9\xd5\xef\x84\x1b\x8f\x8e\xe1\x11\xe8\x08\xb6\xd2\x6c\x1f\xcf\x27\xd4\x3b\x5d\x39\x84\xe8\xfd\x6f\x07\x59\x29\x0c\x81\x8d\x13\xf8\xbd\x6b\x3d\x3a\x5e\xb7\x76\x34\xcf\x64\xd6\x50\x0e\x91\x7b\x20\x41\x07\xe1\x93\x4d\xe0\x3b\xf9\xac\xc4\x65\x7a\x81\x99\xce\xb1\x73\x4d\x8f\xd1\x0f\xdf\x93\xb5\x6d\x1e\x5c\x7a\x96\xe7\xfd\xdb\x88\x67\x7e\x97\xf9\x28\xf1\x73\x83\xed\x02\x85\xaa\x13\xff\x1d\x2e\xfd\x24\x8b\x4b\x95\x4b\xa1\xd2\xff\x67\xff\x46\x03\xaa\x7f\xfc\x7e\xf2\xcf\x38\xee\x16\xf7\x8e\x79\x19\x6a\xe7\xb8\x9f\x47\x4a\x13\xff\x37\xa0\x3d\xa4\x1e\x23\x55\x71\xfe\xa7\x4c\x99\x51\xbe\xde\xdf\xdf\x46\x66\x91\x00\xcb\xf1\x53\xcc\x19\xb5\x27\x5f\x9f\x11\x28\xcb\xb4\xd5\xb3\x2e\x5d\x1e\x37\xb4\xfa\xcf\x22\xc4\x63\x59\x25\x51\xb9\x9e\x13\x6d\x4f\xb1\x4e\x3c\x20\xf3\x9c\xd8\x9e\xb5\x30\xa2\x49\x00\xd3\x22\xf5\x97\xbd\xab\x00\x87\xf5\x92\xe1\x63\x54\x67\x91\xec\x75\x9f\x3e\x60\x2e\xaa\x96\xf5\xb1\x69\xa9\xe8\xeb\x2e\x3a\x28\x62\x42\xdd\x3a\x4e\x0a\x76\x3f\xd5\x48\xcb\xe3\xfb\xcf\x5f\x34\xad\xfb\x78\xa1\x15\x71\x34\xa0\xc8\xca\x7e\x39\xbe\x3d\xdd\xd7\x5a\x58\x68\xf5\x96\x01\x4c\xb1\xe0\xbc\xd9\xc9\xca\xdf\x26\xaa\xe3\x94\x74\x52\x54\xf2\xdf\x98\x43\x84\x69\x91\xd0\x6e\xa5\xea\xa4\xc6\x4b\x4a\xdb\xc4\x1d\x91\x6f\xfa\x34\x9a\x0a\x8b\x6b\x0f\x7b\x72\xd3\xad\xca\xef\x8d\x6c\x1a\x4e\xee\x1a\xa1\x88\x8b\xcf\xdd\xf2\x6f\xbc\x67\xa9\x1c\x9a\x99\xc8\xf0\xf1\x29\xde\x9d\xb0\x91\xd6\x99\x8d\xe6\xc7\xad\x75\x4e\x60\xeb\x75\x77\x91\x93\x9d\x16\x0e\x08\xb7\x6a\x70\xcb\x2c\xd1\x4e\x9b\x39\x5a\x74\x7b\x23\x00\xbb\xd0\xc2\xe0\xb5\xbd\x0c\xf9\x6f\x44\x91\xb6\x31\x2d\x86\xc1\x48\xb4\xc3\xff\xd1\xbb\x2d\x9d\xd8\xcc\xec\x07\x9d\xf1\x1f\x9f\xd3\x2d\xb7\x93\x0e\xb9\x74\xdb\x0b\x5c\xf0\x76\x83\x49\xef\x9e\xa5\xc2\x9c\xd4\x7f\xd9\x49\xea\xe3\x78\x67\xe2\x0b\x42\xb9\x33\xee\xae\x73\xc7\x67\xe6\x4a\xaa\x31\x58\xfc\x28\xc3\xd3\x79\xc7\xe8\x7b\x34\xcf\x77\x78\x49\x99\x27\xa0\x1f\x88\x68\x36\x78\x23\x65\xdf\x46\xc6\xa5\xcf\xfd\x1d\xa7\x51\x97\x25\x74\xea\xa5\x1f\x3a\x65\xea\x9c\x35\x1f\xa8\xa1\x8f\xa1\xf4\xda\xa3\x19\x8f\x29\x65\x47\x10\x76\xf0\xe8\x5b\x3b\xe4\xd0\xfd\xdd\xe3\xaf\x1c\x3e\xbf\x8b\xd3\x8d\x63\xeb\x73\xb9\x4b\x2f\xcd\xb4\xf1\x33\xea\xf3\x32\xd8\x09\xb6\x4f\xb2\xd6\x62\xc4\xe9\x11\xdf\x53\xa1\x38\x9a\xfa\x8b\xd9\x7d\xe7\xee\xae\xd3\x5e\x9b\x7b\x22\xa5\xe3\x6b\x1f\xec\x93\x8b\x21\x5f\x7a\x0c\x7f\x5c\xf2\x49\xf0\xb7\xa5\x7e\x57\xe6\xfb\xa2\xea\xd9\xb8\x5d\x3d\x4f\x76\xc6\xec\x64\x02\x44\xc4\x81\x4f\x31\xd6\xf0\xba\xf1\x9b\x28\xd7\x51\x96\x76\xee\xd8\x04\x9e\x6c\xfd\x17\xc2\x57\x76\xde\xb9\x30\x46\xa2\x89\x4c\xf7\x1e\x6f\xe4\x71\x3f\x93\x93\x3c\x85\xff\x09\x00\x00\xff\xff\x6f\x3d\x7c\xff\xd8\x1a\x00\x00")

func _hardcodedTracingGoBytes() ([]byte, error) {
	return bindataRead(
		__hardcodedTracingGo,
		"../_hardcoded/tracing.go",
	)
}

func _hardcodedTracingGo() (*asset, error) {
	bytes, err := _hardcodedTracingGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../_hardcoded/tracing.go", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe8, 0xe5, 0xee, 0x2f, 0x60, 0x91, 0xf5, 0xe7, 0x98, 0xa6, 0xf5, 0x9c, 0x2a, 0x53, 0x8f, 0xce, 0x7a, 0x2d, 0xfe, 0xab, 0xb0, 0xdb, 0xae, 0x9, 0xe8, 0xaa, 0xe5, 0xac, 0x4a, 0x5a, 0x39, 0xc3}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"../_hardcoded/doer.go":       _hardcodedDoerGo,
	"../_hardcoded/middleware.go": _hardcodedMiddlewareGo,
	"../_hardcoded/tracing.go":    _hardcodedTracingGo,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"..": {nil, map[string]*bintree{
		"_hardcoded": {nil, map[string]*bintree{
			"doer.go":       {_hardcodedDoerGo, map[string]*bintree{}},
			"middleware.go": {_hardcodedMiddlewareGo, map[string]*bintree{}},
			"tracing.go":    {_hardcodedTracingGo, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
