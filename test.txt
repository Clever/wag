go generate ./hardcoded/
go generate ./server/gendb/
go build -o bin/wag
hash npm 2>/dev/null || (echo "Could not run npm, please install node" && false)
hash jsdoc2md 2>/dev/null || npm install -g jsdoc-to-markdown@^2.0.0
./bin/wag -file samples/swagger.yml -go-package github.com/Clever/wag/samples/gen-go -js-path /Users/adamvictor/go/src/github.com/Clever/wag/samples/gen-js
(spec.Swagger) {
 VendorExtensible: (spec.VendorExtensible) {
  Extensions: (spec.Extensions) <nil>
 },
 SwaggerProps: (spec.SwaggerProps) {
  ID: (string) "",
  Consumes: ([]string) (len=1 cap=4) {
   (string) (len=16) "application/json"
  },
  Produces: ([]string) (len=1 cap=4) {
   (string) (len=16) "application/json"
  },
  Schemes: ([]string) (len=1 cap=4) {
   (string) (len=4) "http"
  },
  Swagger: (string) (len=3) "2.0",
  Info: (*spec.Info)(0xc00044e900)({
   VendorExtensible: (spec.VendorExtensible) {
    Extensions: (spec.Extensions) (len=1) {
     (string) (len=13) "x-npm-package": (string) (len=12) "swagger-test"
    }
   },
   InfoProps: (spec.InfoProps) {
    Description: (string) (len=23) "Testing Swagger Codegen",
    Title: (string) (len=12) "swagger-test",
    TermsOfService: (string) "",
    Contact: (*spec.ContactInfo)(<nil>),
    License: (*spec.License)(<nil>),
    Version: (string) (len=5) "0.1.0"
   }
  }),
  Host: (string) "",
  BasePath: (string) (len=3) "/v1",
  Paths: (*spec.Paths)(0xc00083e9b0)({
   VendorExtensible: (spec.VendorExtensible) {
    Extensions: (spec.Extensions) <nil>
   },
   Paths: (map[string]spec.PathItem) (len=5) {
    (string) (len=8) "/authors": (spec.PathItem) {
     Refable: (spec.Refable) {
      Ref: (spec.Ref) 
     },
     VendorExtensible: (spec.VendorExtensible) {
      Extensions: (spec.Extensions) <nil>
     },
     PathItemProps: (spec.PathItemProps) {
      Get: (*spec.Operation)(0xc0001029a0)({
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) (len=1) {
         (string) (len=8) "x-paging": (map[string]interface {}) (len=2) {
          (string) (len=13) "pageParameter": (string) (len=13) "startingAfter",
          (string) (len=12) "resourcePath": (string) (len=17) "authorSet.results"
         }
        }
       },
       OperationProps: (spec.OperationProps) {
        Description: (string) (len=12) "Gets authors",
        Consumes: ([]string) <nil>,
        Produces: ([]string) <nil>,
        Schemes: ([]string) <nil>,
        Tags: ([]string) <nil>,
        Summary: (string) "",
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        ID: (string) (len=10) "getAuthors",
        Deprecated: (bool) false,
        Security: ([]map[string][]string) <nil>,
        Parameters: ([]spec.Parameter) (len=2 cap=4) {
         (spec.Parameter) {
          Refable: (spec.Refable) {
           Ref: (spec.Ref) 
          },
          CommonValidations: (spec.CommonValidations) {
           Maximum: (*float64)(<nil>),
           ExclusiveMaximum: (bool) false,
           Minimum: (*float64)(<nil>),
           ExclusiveMinimum: (bool) false,
           MaxLength: (*int64)(<nil>),
           MinLength: (*int64)(<nil>),
           Pattern: (string) "",
           MaxItems: (*int64)(<nil>),
           MinItems: (*int64)(<nil>),
           UniqueItems: (bool) false,
           MultipleOf: (*float64)(<nil>),
           Enum: ([]interface {}) <nil>
          },
          SimpleSchema: (spec.SimpleSchema) {
           Type: (string) (len=6) "string",
           Format: (string) "",
           Items: (*spec.Items)(<nil>),
           CollectionFormat: (string) "",
           Default: (interface {}) <nil>,
           Example: (interface {}) <nil>
          },
          VendorExtensible: (spec.VendorExtensible) {
           Extensions: (spec.Extensions) <nil>
          },
          ParamProps: (spec.ParamProps) {
           Description: (string) "",
           Name: (string) (len=4) "name",
           In: (string) (len=5) "query",
           Required: (bool) false,
           Schema: (*spec.Schema)(<nil>),
           AllowEmptyValue: (bool) false
          }
         },
         (spec.Parameter) {
          Refable: (spec.Refable) {
           Ref: (spec.Ref) 
          },
          CommonValidations: (spec.CommonValidations) {
           Maximum: (*float64)(<nil>),
           ExclusiveMaximum: (bool) false,
           Minimum: (*float64)(<nil>),
           ExclusiveMinimum: (bool) false,
           MaxLength: (*int64)(<nil>),
           MinLength: (*int64)(<nil>),
           Pattern: (string) "",
           MaxItems: (*int64)(<nil>),
           MinItems: (*int64)(<nil>),
           UniqueItems: (bool) false,
           MultipleOf: (*float64)(<nil>),
           Enum: ([]interface {}) <nil>
          },
          SimpleSchema: (spec.SimpleSchema) {
           Type: (string) (len=6) "string",
           Format: (string) "",
           Items: (*spec.Items)(<nil>),
           CollectionFormat: (string) "",
           Default: (interface {}) <nil>,
           Example: (interface {}) <nil>
          },
          VendorExtensible: (spec.VendorExtensible) {
           Extensions: (spec.Extensions) <nil>
          },
          ParamProps: (spec.ParamProps) {
           Description: (string) "",
           Name: (string) (len=13) "startingAfter",
           In: (string) (len=5) "query",
           Required: (bool) false,
           Schema: (*spec.Schema)(<nil>),
           AllowEmptyValue: (bool) false
          }
         }
        },
        Responses: (*spec.Responses)(0xc0006fe080)({
         VendorExtensible: (spec.VendorExtensible) {
          Extensions: (spec.Extensions) <nil>
         },
         ResponsesProps: (spec.ResponsesProps) {
          Default: (*spec.Response)(<nil>),
          StatusCodeResponses: (map[int]spec.Response) (len=1) {
           (int) 200: (spec.Response) {
            Refable: (spec.Refable) {
             Ref: (spec.Ref) 
            },
            ResponseProps: (spec.ResponseProps) {
             Description: (string) (len=7) "Success",
             Schema: (*spec.Schema)(0xc000410240)({
              VendorExtensible: (spec.VendorExtensible) {
               Extensions: (spec.Extensions) <nil>
              },
              SchemaProps: (spec.SchemaProps) {
               ID: (string) "",
               Ref: (spec.Ref) #/definitions/AuthorsResponse,
               Schema: (spec.SchemaURL) "",
               Description: (string) "",
               Type: (spec.StringOrArray) <nil>,
               Format: (string) "",
               Title: (string) "",
               Default: (interface {}) <nil>,
               Maximum: (*float64)(<nil>),
               ExclusiveMaximum: (bool) false,
               Minimum: (*float64)(<nil>),
               ExclusiveMinimum: (bool) false,
               MaxLength: (*int64)(<nil>),
               MinLength: (*int64)(<nil>),
               Pattern: (string) "",
               MaxItems: (*int64)(<nil>),
               MinItems: (*int64)(<nil>),
               UniqueItems: (bool) false,
               MultipleOf: (*float64)(<nil>),
               Enum: ([]interface {}) <nil>,
               MaxProperties: (*int64)(<nil>),
               MinProperties: (*int64)(<nil>),
               Required: ([]string) <nil>,
               Items: (*spec.SchemaOrArray)(<nil>),
               AllOf: ([]spec.Schema) <nil>,
               OneOf: ([]spec.Schema) <nil>,
               AnyOf: ([]spec.Schema) <nil>,
               Not: (*spec.Schema)(<nil>),
               Properties: (map[string]spec.Schema) <nil>,
               AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
               PatternProperties: (map[string]spec.Schema) <nil>,
               Dependencies: (spec.Dependencies) <nil>,
               AdditionalItems: (*spec.SchemaOrBool)(<nil>),
               Definitions: (spec.Definitions) <nil>
              },
              SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
               Discriminator: (string) "",
               ReadOnly: (bool) false,
               XML: (*spec.XMLObject)(<nil>),
               ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
               Example: (interface {}) <nil>
              },
              ExtraProps: (map[string]interface {}) <nil>
             }),
             Headers: (map[string]spec.Header) <nil>,
             Examples: (map[string]interface {}) <nil>
            },
            VendorExtensible: (spec.VendorExtensible) {
             Extensions: (spec.Extensions) <nil>
            }
           }
          }
         }
        })
       }
      }),
      Put: (*spec.Operation)(0xc000102a80)({
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) (len=1) {
         (string) (len=8) "x-paging": (map[string]interface {}) (len=2) {
          (string) (len=13) "pageParameter": (string) (len=13) "startingAfter",
          (string) (len=12) "resourcePath": (string) (len=17) "authorSet.results"
         }
        }
       },
       OperationProps: (spec.OperationProps) {
        Description: (string) (len=53) "Gets authors, but needs to use the body so it's a PUT",
        Consumes: ([]string) <nil>,
        Produces: ([]string) <nil>,
        Schemes: ([]string) <nil>,
        Tags: ([]string) <nil>,
        Summary: (string) "",
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        ID: (string) (len=17) "getAuthorsWithPut",
        Deprecated: (bool) false,
        Security: ([]map[string][]string) <nil>,
        Parameters: ([]spec.Parameter) (len=3 cap=4) {
         (spec.Parameter) {
          Refable: (spec.Refable) {
           Ref: (spec.Ref) 
          },
          CommonValidations: (spec.CommonValidations) {
           Maximum: (*float64)(<nil>),
           ExclusiveMaximum: (bool) false,
           Minimum: (*float64)(<nil>),
           ExclusiveMinimum: (bool) false,
           MaxLength: (*int64)(<nil>),
           MinLength: (*int64)(<nil>),
           Pattern: (string) "",
           MaxItems: (*int64)(<nil>),
           MinItems: (*int64)(<nil>),
           UniqueItems: (bool) false,
           MultipleOf: (*float64)(<nil>),
           Enum: ([]interface {}) <nil>
          },
          SimpleSchema: (spec.SimpleSchema) {
           Type: (string) (len=6) "string",
           Format: (string) "",
           Items: (*spec.Items)(<nil>),
           CollectionFormat: (string) "",
           Default: (interface {}) <nil>,
           Example: (interface {}) <nil>
          },
          VendorExtensible: (spec.VendorExtensible) {
           Extensions: (spec.Extensions) <nil>
          },
          ParamProps: (spec.ParamProps) {
           Description: (string) "",
           Name: (string) (len=4) "name",
           In: (string) (len=5) "query",
           Required: (bool) false,
           Schema: (*spec.Schema)(<nil>),
           AllowEmptyValue: (bool) false
          }
         },
         (spec.Parameter) {
          Refable: (spec.Refable) {
           Ref: (spec.Ref) 
          },
          CommonValidations: (spec.CommonValidations) {
           Maximum: (*float64)(<nil>),
           ExclusiveMaximum: (bool) false,
           Minimum: (*float64)(<nil>),
           ExclusiveMinimum: (bool) false,
           MaxLength: (*int64)(<nil>),
           MinLength: (*int64)(<nil>),
           Pattern: (string) "",
           MaxItems: (*int64)(<nil>),
           MinItems: (*int64)(<nil>),
           UniqueItems: (bool) false,
           MultipleOf: (*float64)(<nil>),
           Enum: ([]interface {}) <nil>
          },
          SimpleSchema: (spec.SimpleSchema) {
           Type: (string) (len=6) "string",
           Format: (string) "",
           Items: (*spec.Items)(<nil>),
           CollectionFormat: (string) "",
           Default: (interface {}) <nil>,
           Example: (interface {}) <nil>
          },
          VendorExtensible: (spec.VendorExtensible) {
           Extensions: (spec.Extensions) <nil>
          },
          ParamProps: (spec.ParamProps) {
           Description: (string) "",
           Name: (string) (len=13) "startingAfter",
           In: (string) (len=5) "query",
           Required: (bool) false,
           Schema: (*spec.Schema)(<nil>),
           AllowEmptyValue: (bool) false
          }
         },
         (spec.Parameter) {
          Refable: (spec.Refable) {
           Ref: (spec.Ref) 
          },
          CommonValidations: (spec.CommonValidations) {
           Maximum: (*float64)(<nil>),
           ExclusiveMaximum: (bool) false,
           Minimum: (*float64)(<nil>),
           ExclusiveMinimum: (bool) false,
           MaxLength: (*int64)(<nil>),
           MinLength: (*int64)(<nil>),
           Pattern: (string) "",
           MaxItems: (*int64)(<nil>),
           MinItems: (*int64)(<nil>),
           UniqueItems: (bool) false,
           MultipleOf: (*float64)(<nil>),
           Enum: ([]interface {}) <nil>
          },
          SimpleSchema: (spec.SimpleSchema) {
           Type: (string) "",
           Format: (string) "",
           Items: (*spec.Items)(<nil>),
           CollectionFormat: (string) "",
           Default: (interface {}) <nil>,
           Example: (interface {}) <nil>
          },
          VendorExtensible: (spec.VendorExtensible) {
           Extensions: (spec.Extensions) <nil>
          },
          ParamProps: (spec.ParamProps) {
           Description: (string) "",
           Name: (string) (len=13) "favoriteBooks",
           In: (string) (len=4) "body",
           Required: (bool) false,
           Schema: (*spec.Schema)(0xc000410b40)({
            VendorExtensible: (spec.VendorExtensible) {
             Extensions: (spec.Extensions) <nil>
            },
            SchemaProps: (spec.SchemaProps) {
             ID: (string) "",
             Ref: (spec.Ref) #/definitions/Book,
             Schema: (spec.SchemaURL) "",
             Description: (string) "",
             Type: (spec.StringOrArray) <nil>,
             Format: (string) "",
             Title: (string) "",
             Default: (interface {}) <nil>,
             Maximum: (*float64)(<nil>),
             ExclusiveMaximum: (bool) false,
             Minimum: (*float64)(<nil>),
             ExclusiveMinimum: (bool) false,
             MaxLength: (*int64)(<nil>),
             MinLength: (*int64)(<nil>),
             Pattern: (string) "",
             MaxItems: (*int64)(<nil>),
             MinItems: (*int64)(<nil>),
             UniqueItems: (bool) false,
             MultipleOf: (*float64)(<nil>),
             Enum: ([]interface {}) <nil>,
             MaxProperties: (*int64)(<nil>),
             MinProperties: (*int64)(<nil>),
             Required: ([]string) <nil>,
             Items: (*spec.SchemaOrArray)(<nil>),
             AllOf: ([]spec.Schema) <nil>,
             OneOf: ([]spec.Schema) <nil>,
             AnyOf: ([]spec.Schema) <nil>,
             Not: (*spec.Schema)(<nil>),
             Properties: (map[string]spec.Schema) <nil>,
             AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
             PatternProperties: (map[string]spec.Schema) <nil>,
             Dependencies: (spec.Dependencies) <nil>,
             AdditionalItems: (*spec.SchemaOrBool)(<nil>),
             Definitions: (spec.Definitions) <nil>
            },
            SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
             Discriminator: (string) "",
             ReadOnly: (bool) false,
             XML: (*spec.XMLObject)(<nil>),
             ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
             Example: (interface {}) <nil>
            },
            ExtraProps: (map[string]interface {}) <nil>
           }),
           AllowEmptyValue: (bool) false
          }
         }
        },
        Responses: (*spec.Responses)(0xc0006fe560)({
         VendorExtensible: (spec.VendorExtensible) {
          Extensions: (spec.Extensions) <nil>
         },
         ResponsesProps: (spec.ResponsesProps) {
          Default: (*spec.Response)(<nil>),
          StatusCodeResponses: (map[int]spec.Response) (len=1) {
           (int) 200: (spec.Response) {
            Refable: (spec.Refable) {
             Ref: (spec.Ref) 
            },
            ResponseProps: (spec.ResponseProps) {
             Description: (string) (len=7) "Success",
             Schema: (*spec.Schema)(0xc000411440)({
              VendorExtensible: (spec.VendorExtensible) {
               Extensions: (spec.Extensions) <nil>
              },
              SchemaProps: (spec.SchemaProps) {
               ID: (string) "",
               Ref: (spec.Ref) #/definitions/AuthorsResponse,
               Schema: (spec.SchemaURL) "",
               Description: (string) "",
               Type: (spec.StringOrArray) <nil>,
               Format: (string) "",
               Title: (string) "",
               Default: (interface {}) <nil>,
               Maximum: (*float64)(<nil>),
               ExclusiveMaximum: (bool) false,
               Minimum: (*float64)(<nil>),
               ExclusiveMinimum: (bool) false,
               MaxLength: (*int64)(<nil>),
               MinLength: (*int64)(<nil>),
               Pattern: (string) "",
               MaxItems: (*int64)(<nil>),
               MinItems: (*int64)(<nil>),
               UniqueItems: (bool) false,
               MultipleOf: (*float64)(<nil>),
               Enum: ([]interface {}) <nil>,
               MaxProperties: (*int64)(<nil>),
               MinProperties: (*int64)(<nil>),
               Required: ([]string) <nil>,
               Items: (*spec.SchemaOrArray)(<nil>),
               AllOf: ([]spec.Schema) <nil>,
               OneOf: ([]spec.Schema) <nil>,
               AnyOf: ([]spec.Schema) <nil>,
               Not: (*spec.Schema)(<nil>),
               Properties: (map[string]spec.Schema) <nil>,
               AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
               PatternProperties: (map[string]spec.Schema) <nil>,
               Dependencies: (spec.Dependencies) <nil>,
               AdditionalItems: (*spec.SchemaOrBool)(<nil>),
               Definitions: (spec.Definitions) <nil>
              },
              SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
               Discriminator: (string) "",
               ReadOnly: (bool) false,
               XML: (*spec.XMLObject)(<nil>),
               ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
               Example: (interface {}) <nil>
              },
              ExtraProps: (map[string]interface {}) <nil>
             }),
             Headers: (map[string]spec.Header) <nil>,
             Examples: (map[string]interface {}) <nil>
            },
            VendorExtensible: (spec.VendorExtensible) {
             Extensions: (spec.Extensions) <nil>
            }
           }
          }
         }
        })
       }
      }),
      Post: (*spec.Operation)(<nil>),
      Delete: (*spec.Operation)(<nil>),
      Options: (*spec.Operation)(<nil>),
      Head: (*spec.Operation)(<nil>),
      Patch: (*spec.Operation)(<nil>),
      Parameters: ([]spec.Parameter) <nil>
     }
    },
    (string) (len=13) "/health/check": (spec.PathItem) {
     Refable: (spec.Refable) {
      Ref: (spec.Ref) 
     },
     VendorExtensible: (spec.VendorExtensible) {
      Extensions: (spec.Extensions) <nil>
     },
     PathItemProps: (spec.PathItemProps) {
      Get: (*spec.Operation)(0xc000102460)({
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       OperationProps: (spec.OperationProps) {
        Description: (string) "",
        Consumes: ([]string) <nil>,
        Produces: ([]string) <nil>,
        Schemes: ([]string) <nil>,
        Tags: ([]string) (len=1 cap=4) {
         (string) (len=5) "Infra"
        },
        Summary: (string) "",
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        ID: (string) (len=11) "healthCheck",
        Deprecated: (bool) false,
        Security: ([]map[string][]string) <nil>,
        Parameters: ([]spec.Parameter) <nil>,
        Responses: (*spec.Responses)(0xc000478d00)({
         VendorExtensible: (spec.VendorExtensible) {
          Extensions: (spec.Extensions) <nil>
         },
         ResponsesProps: (spec.ResponsesProps) {
          Default: (*spec.Response)(<nil>),
          StatusCodeResponses: (map[int]spec.Response) (len=1) {
           (int) 200: (spec.Response) {
            Refable: (spec.Refable) {
             Ref: (spec.Ref) 
            },
            ResponseProps: (spec.ResponseProps) {
             Description: (string) (len=11) "OK response",
             Schema: (*spec.Schema)(<nil>),
             Headers: (map[string]spec.Header) <nil>,
             Examples: (map[string]interface {}) <nil>
            },
            VendorExtensible: (spec.VendorExtensible) {
             Extensions: (spec.Extensions) <nil>
            }
           }
          }
         }
        })
       }
      }),
      Put: (*spec.Operation)(<nil>),
      Post: (*spec.Operation)(<nil>),
      Delete: (*spec.Operation)(<nil>),
      Options: (*spec.Operation)(<nil>),
      Head: (*spec.Operation)(<nil>),
      Patch: (*spec.Operation)(<nil>),
      Parameters: ([]spec.Parameter) <nil>
     }
    },
    (string) (len=16) "/books/{book_id}": (spec.PathItem) {
     Refable: (spec.Refable) {
      Ref: (spec.Ref) 
     },
     VendorExtensible: (spec.VendorExtensible) {
      Extensions: (spec.Extensions) <nil>
     },
     PathItemProps: (spec.PathItemProps) {
      Get: (*spec.Operation)(0xc000102540)({
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       OperationProps: (spec.OperationProps) {
        Description: (string) (len=14) "Returns a book",
        Consumes: ([]string) <nil>,
        Produces: ([]string) <nil>,
        Schemes: ([]string) <nil>,
        Tags: ([]string) <nil>,
        Summary: (string) "",
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        ID: (string) (len=11) "getBookByID",
        Deprecated: (bool) false,
        Security: ([]map[string][]string) <nil>,
        Parameters: ([]spec.Parameter) (len=5 cap=6) {
         (spec.Parameter) {
          Refable: (spec.Refable) {
           Ref: (spec.Ref) 
          },
          CommonValidations: (spec.CommonValidations) {
           Maximum: (*float64)(0xc000436dc8)(1e+07),
           ExclusiveMaximum: (bool) false,
           Minimum: (*float64)(0xc000436dd8)(2),
           ExclusiveMinimum: (bool) false,
           MaxLength: (*int64)(<nil>),
           MinLength: (*int64)(<nil>),
           Pattern: (string) "",
           MaxItems: (*int64)(<nil>),
           MinItems: (*int64)(<nil>),
           UniqueItems: (bool) false,
           MultipleOf: (*float64)(0xc000436de0)(2),
           Enum: ([]interface {}) <nil>
          },
          SimpleSchema: (spec.SimpleSchema) {
           Type: (string) (len=7) "integer",
           Format: (string) "",
           Items: (*spec.Items)(<nil>),
           CollectionFormat: (string) "",
           Default: (interface {}) <nil>,
           Example: (interface {}) <nil>
          },
          VendorExtensible: (spec.VendorExtensible) {
           Extensions: (spec.Extensions) <nil>
          },
          ParamProps: (spec.ParamProps) {
           Description: (string) "",
           Name: (string) (len=7) "book_id",
           In: (string) (len=4) "path",
           Required: (bool) true,
           Schema: (*spec.Schema)(<nil>),
           AllowEmptyValue: (bool) false
          }
         },
         (spec.Parameter) {
          Refable: (spec.Refable) {
           Ref: (spec.Ref) 
          },
          CommonValidations: (spec.CommonValidations) {
           Maximum: (*float64)(<nil>),
           ExclusiveMaximum: (bool) false,
           Minimum: (*float64)(<nil>),
           ExclusiveMinimum: (bool) false,
           MaxLength: (*int64)(<nil>),
           MinLength: (*int64)(<nil>),
           Pattern: (string) "",
           MaxItems: (*int64)(<nil>),
           MinItems: (*int64)(<nil>),
           UniqueItems: (bool) false,
           MultipleOf: (*float64)(<nil>),
           Enum: ([]interface {}) <nil>
          },
          SimpleSchema: (spec.SimpleSchema) {
           Type: (string) (len=6) "string",
           Format: (string) (len=8) "mongo-id",
           Items: (*spec.Items)(<nil>),
           CollectionFormat: (string) "",
           Default: (interface {}) <nil>,
           Example: (interface {}) <nil>
          },
          VendorExtensible: (spec.VendorExtensible) {
           Extensions: (spec.Extensions) <nil>
          },
          ParamProps: (spec.ParamProps) {
           Description: (string) "",
           Name: (string) (len=8) "authorID",
           In: (string) (len=5) "query",
           Required: (bool) false,
           Schema: (*spec.Schema)(<nil>),
           AllowEmptyValue: (bool) false
          }
         },
         (spec.Parameter) {
          Refable: (spec.Refable) {
           Ref: (spec.Ref) 
          },
          CommonValidations: (spec.CommonValidations) {
           Maximum: (*float64)(<nil>),
           ExclusiveMaximum: (bool) false,
           Minimum: (*float64)(<nil>),
           ExclusiveMinimum: (bool) false,
           MaxLength: (*int64)(0xc000437ae0)(24),
           MinLength: (*int64)(0xc000437ad8)(1),
           Pattern: (string) (len=9) "[0-9a-f]+",
           MaxItems: (*int64)(<nil>),
           MinItems: (*int64)(<nil>),
           UniqueItems: (bool) false,
           MultipleOf: (*float64)(<nil>),
           Enum: ([]interface {}) <nil>
          },
          SimpleSchema: (spec.SimpleSchema) {
           Type: (string) (len=6) "string",
           Format: (string) "",
           Items: (*spec.Items)(<nil>),
           CollectionFormat: (string) "",
           Default: (interface {}) <nil>,
           Example: (interface {}) <nil>
          },
          VendorExtensible: (spec.VendorExtensible) {
           Extensions: (spec.Extensions) <nil>
          },
          ParamProps: (spec.ParamProps) {
           Description: (string) "",
           Name: (string) (len=13) "authorization",
           In: (string) (len=6) "header",
           Required: (bool) false,
           Schema: (*spec.Schema)(<nil>),
           AllowEmptyValue: (bool) false
          }
         },
         (spec.Parameter) {
          Refable: (spec.Refable) {
           Ref: (spec.Ref) 
          },
          CommonValidations: (spec.CommonValidations) {
           Maximum: (*float64)(<nil>),
           ExclusiveMaximum: (bool) false,
           Minimum: (*float64)(<nil>),
           ExclusiveMinimum: (bool) false,
           MaxLength: (*int64)(<nil>),
           MinLength: (*int64)(<nil>),
           Pattern: (string) "",
           MaxItems: (*int64)(<nil>),
           MinItems: (*int64)(<nil>),
           UniqueItems: (bool) false,
           MultipleOf: (*float64)(<nil>),
           Enum: ([]interface {}) <nil>
          },
          SimpleSchema: (spec.SimpleSchema) {
           Type: (string) (len=6) "string",
           Format: (string) "",
           Items: (*spec.Items)(<nil>),
           CollectionFormat: (string) "",
           Default: (interface {}) <nil>,
           Example: (interface {}) <nil>
          },
          VendorExtensible: (spec.VendorExtensible) {
           Extensions: (spec.Extensions) <nil>
          },
          ParamProps: (spec.ParamProps) {
           Description: (string) "",
           Name: (string) (len=24) "X-Dont-Rate-Limit-Me-Bro",
           In: (string) (len=6) "header",
           Required: (bool) false,
           Schema: (*spec.Schema)(<nil>),
           AllowEmptyValue: (bool) false
          }
         },
         (spec.Parameter) {
          Refable: (spec.Refable) {
           Ref: (spec.Ref) 
          },
          CommonValidations: (spec.CommonValidations) {
           Maximum: (*float64)(<nil>),
           ExclusiveMaximum: (bool) false,
           Minimum: (*float64)(<nil>),
           ExclusiveMinimum: (bool) false,
           MaxLength: (*int64)(<nil>),
           MinLength: (*int64)(<nil>),
           Pattern: (string) "",
           MaxItems: (*int64)(<nil>),
           MinItems: (*int64)(<nil>),
           UniqueItems: (bool) false,
           MultipleOf: (*float64)(<nil>),
           Enum: ([]interface {}) <nil>
          },
          SimpleSchema: (spec.SimpleSchema) {
           Type: (string) (len=6) "string",
           Format: (string) (len=4) "byte",
           Items: (*spec.Items)(<nil>),
           CollectionFormat: (string) "",
           Default: (interface {}) <nil>,
           Example: (interface {}) <nil>
          },
          VendorExtensible: (spec.VendorExtensible) {
           Extensions: (spec.Extensions) <nil>
          },
          ParamProps: (spec.ParamProps) {
           Description: (string) "",
           Name: (string) (len=11) "randomBytes",
           In: (string) (len=5) "query",
           Required: (bool) false,
           Schema: (*spec.Schema)(<nil>),
           AllowEmptyValue: (bool) false
          }
         }
        },
        Responses: (*spec.Responses)(0xc000479660)({
         VendorExtensible: (spec.VendorExtensible) {
          Extensions: (spec.Extensions) <nil>
         },
         ResponsesProps: (spec.ResponsesProps) {
          Default: (*spec.Response)(<nil>),
          StatusCodeResponses: (map[int]spec.Response) (len=3) {
           (int) 401: (spec.Response) {
            Refable: (spec.Refable) {
             Ref: (spec.Ref) 
            },
            ResponseProps: (spec.ResponseProps) {
             Description: (string) (len=12) "Unauthorized",
             Schema: (*spec.Schema)(0xc00044a000)({
              VendorExtensible: (spec.VendorExtensible) {
               Extensions: (spec.Extensions) <nil>
              },
              SchemaProps: (spec.SchemaProps) {
               ID: (string) "",
               Ref: (spec.Ref) #/definitions/Unathorized,
               Schema: (spec.SchemaURL) "",
               Description: (string) "",
               Type: (spec.StringOrArray) <nil>,
               Format: (string) "",
               Title: (string) "",
               Default: (interface {}) <nil>,
               Maximum: (*float64)(<nil>),
               ExclusiveMaximum: (bool) false,
               Minimum: (*float64)(<nil>),
               ExclusiveMinimum: (bool) false,
               MaxLength: (*int64)(<nil>),
               MinLength: (*int64)(<nil>),
               Pattern: (string) "",
               MaxItems: (*int64)(<nil>),
               MinItems: (*int64)(<nil>),
               UniqueItems: (bool) false,
               MultipleOf: (*float64)(<nil>),
               Enum: ([]interface {}) <nil>,
               MaxProperties: (*int64)(<nil>),
               MinProperties: (*int64)(<nil>),
               Required: ([]string) <nil>,
               Items: (*spec.SchemaOrArray)(<nil>),
               AllOf: ([]spec.Schema) <nil>,
               OneOf: ([]spec.Schema) <nil>,
               AnyOf: ([]spec.Schema) <nil>,
               Not: (*spec.Schema)(<nil>),
               Properties: (map[string]spec.Schema) <nil>,
               AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
               PatternProperties: (map[string]spec.Schema) <nil>,
               Dependencies: (spec.Dependencies) <nil>,
               AdditionalItems: (*spec.SchemaOrBool)(<nil>),
               Definitions: (spec.Definitions) <nil>
              },
              SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
               Discriminator: (string) "",
               ReadOnly: (bool) false,
               XML: (*spec.XMLObject)(<nil>),
               ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
               Example: (interface {}) <nil>
              },
              ExtraProps: (map[string]interface {}) <nil>
             }),
             Headers: (map[string]spec.Header) <nil>,
             Examples: (map[string]interface {}) <nil>
            },
            VendorExtensible: (spec.VendorExtensible) {
             Extensions: (spec.Extensions) <nil>
            }
           },
           (int) 404: (spec.Response) {
            Refable: (spec.Refable) {
             Ref: (spec.Ref) 
            },
            ResponseProps: (spec.ResponseProps) {
             Description: (string) (len=9) "Not found",
             Schema: (*spec.Schema)(0xc00044a480)({
              VendorExtensible: (spec.VendorExtensible) {
               Extensions: (spec.Extensions) <nil>
              },
              SchemaProps: (spec.SchemaProps) {
               ID: (string) "",
               Ref: (spec.Ref) #/definitions/Error,
               Schema: (spec.SchemaURL) "",
               Description: (string) "",
               Type: (spec.StringOrArray) <nil>,
               Format: (string) "",
               Title: (string) "",
               Default: (interface {}) <nil>,
               Maximum: (*float64)(<nil>),
               ExclusiveMaximum: (bool) false,
               Minimum: (*float64)(<nil>),
               ExclusiveMinimum: (bool) false,
               MaxLength: (*int64)(<nil>),
               MinLength: (*int64)(<nil>),
               Pattern: (string) "",
               MaxItems: (*int64)(<nil>),
               MinItems: (*int64)(<nil>),
               UniqueItems: (bool) false,
               MultipleOf: (*float64)(<nil>),
               Enum: ([]interface {}) <nil>,
               MaxProperties: (*int64)(<nil>),
               MinProperties: (*int64)(<nil>),
               Required: ([]string) <nil>,
               Items: (*spec.SchemaOrArray)(<nil>),
               AllOf: ([]spec.Schema) <nil>,
               OneOf: ([]spec.Schema) <nil>,
               AnyOf: ([]spec.Schema) <nil>,
               Not: (*spec.Schema)(<nil>),
               Properties: (map[string]spec.Schema) <nil>,
               AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
               PatternProperties: (map[string]spec.Schema) <nil>,
               Dependencies: (spec.Dependencies) <nil>,
               AdditionalItems: (*spec.SchemaOrBool)(<nil>),
               Definitions: (spec.Definitions) <nil>
              },
              SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
               Discriminator: (string) "",
               ReadOnly: (bool) false,
               XML: (*spec.XMLObject)(<nil>),
               ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
               Example: (interface {}) <nil>
              },
              ExtraProps: (map[string]interface {}) <nil>
             }),
             Headers: (map[string]spec.Header) <nil>,
             Examples: (map[string]interface {}) <nil>
            },
            VendorExtensible: (spec.VendorExtensible) {
             Extensions: (spec.Extensions) <nil>
            }
           },
           (int) 200: (spec.Response) {
            Refable: (spec.Refable) {
             Ref: (spec.Ref) 
            },
            ResponseProps: (spec.ResponseProps) {
             Description: (string) (len=7) "Success",
             Schema: (*spec.Schema)(0xc0004b3b00)({
              VendorExtensible: (spec.VendorExtensible) {
               Extensions: (spec.Extensions) <nil>
              },
              SchemaProps: (spec.SchemaProps) {
               ID: (string) "",
               Ref: (spec.Ref) #/definitions/Book,
               Schema: (spec.SchemaURL) "",
               Description: (string) "",
               Type: (spec.StringOrArray) <nil>,
               Format: (string) "",
               Title: (string) "",
               Default: (interface {}) <nil>,
               Maximum: (*float64)(<nil>),
               ExclusiveMaximum: (bool) false,
               Minimum: (*float64)(<nil>),
               ExclusiveMinimum: (bool) false,
               MaxLength: (*int64)(<nil>),
               MinLength: (*int64)(<nil>),
               Pattern: (string) "",
               MaxItems: (*int64)(<nil>),
               MinItems: (*int64)(<nil>),
               UniqueItems: (bool) false,
               MultipleOf: (*float64)(<nil>),
               Enum: ([]interface {}) <nil>,
               MaxProperties: (*int64)(<nil>),
               MinProperties: (*int64)(<nil>),
               Required: ([]string) <nil>,
               Items: (*spec.SchemaOrArray)(<nil>),
               AllOf: ([]spec.Schema) <nil>,
               OneOf: ([]spec.Schema) <nil>,
               AnyOf: ([]spec.Schema) <nil>,
               Not: (*spec.Schema)(<nil>),
               Properties: (map[string]spec.Schema) <nil>,
               AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
               PatternProperties: (map[string]spec.Schema) <nil>,
               Dependencies: (spec.Dependencies) <nil>,
               AdditionalItems: (*spec.SchemaOrBool)(<nil>),
               Definitions: (spec.Definitions) <nil>
              },
              SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
               Discriminator: (string) "",
               ReadOnly: (bool) false,
               XML: (*spec.XMLObject)(<nil>),
               ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
               Example: (interface {}) <nil>
              },
              ExtraProps: (map[string]interface {}) <nil>
             }),
             Headers: (map[string]spec.Header) <nil>,
             Examples: (map[string]interface {}) <nil>
            },
            VendorExtensible: (spec.VendorExtensible) {
             Extensions: (spec.Extensions) <nil>
            }
           }
          }
         }
        })
       }
      }),
      Put: (*spec.Operation)(<nil>),
      Post: (*spec.Operation)(<nil>),
      Delete: (*spec.Operation)(<nil>),
      Options: (*spec.Operation)(<nil>),
      Head: (*spec.Operation)(<nil>),
      Patch: (*spec.Operation)(<nil>),
      Parameters: ([]spec.Parameter) <nil>
     }
    },
    (string) (len=12) "/books2/{id}": (spec.PathItem) {
     Refable: (spec.Refable) {
      Ref: (spec.Ref) 
     },
     VendorExtensible: (spec.VendorExtensible) {
      Extensions: (spec.Extensions) <nil>
     },
     PathItemProps: (spec.PathItemProps) {
      Get: (*spec.Operation)(0xc000102620)({
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       OperationProps: (spec.OperationProps) {
        Description: (string) (len=15) "Retrieve a book",
        Consumes: ([]string) <nil>,
        Produces: ([]string) <nil>,
        Schemes: ([]string) <nil>,
        Tags: ([]string) <nil>,
        Summary: (string) "",
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        ID: (string) (len=12) "getBookByID2",
        Deprecated: (bool) false,
        Security: ([]map[string][]string) <nil>,
        Parameters: ([]spec.Parameter) (len=1 cap=4) {
         (spec.Parameter) {
          Refable: (spec.Refable) {
           Ref: (spec.Ref) 
          },
          CommonValidations: (spec.CommonValidations) {
           Maximum: (*float64)(<nil>),
           ExclusiveMaximum: (bool) false,
           Minimum: (*float64)(<nil>),
           ExclusiveMinimum: (bool) false,
           MaxLength: (*int64)(<nil>),
           MinLength: (*int64)(<nil>),
           Pattern: (string) (len=14) "^[0-9a-f]{24}$",
           MaxItems: (*int64)(<nil>),
           MinItems: (*int64)(<nil>),
           UniqueItems: (bool) false,
           MultipleOf: (*float64)(<nil>),
           Enum: ([]interface {}) <nil>
          },
          SimpleSchema: (spec.SimpleSchema) {
           Type: (string) (len=6) "string",
           Format: (string) "",
           Items: (*spec.Items)(<nil>),
           CollectionFormat: (string) "",
           Default: (interface {}) <nil>,
           Example: (interface {}) <nil>
          },
          VendorExtensible: (spec.VendorExtensible) {
           Extensions: (spec.Extensions) <nil>
          },
          ParamProps: (spec.ParamProps) {
           Description: (string) "",
           Name: (string) (len=2) "id",
           In: (string) (len=4) "path",
           Required: (bool) true,
           Schema: (*spec.Schema)(<nil>),
           AllowEmptyValue: (bool) false
          }
         }
        },
        Responses: (*spec.Responses)(0xc000479c80)({
         VendorExtensible: (spec.VendorExtensible) {
          Extensions: (spec.Extensions) <nil>
         },
         ResponsesProps: (spec.ResponsesProps) {
          Default: (*spec.Response)(<nil>),
          StatusCodeResponses: (map[int]spec.Response) (len=2) {
           (int) 200: (spec.Response) {
            Refable: (spec.Refable) {
             Ref: (spec.Ref) 
            },
            ResponseProps: (spec.ResponseProps) {
             Description: (string) (len=11) "OK response",
             Schema: (*spec.Schema)(0xc00044ab40)({
              VendorExtensible: (spec.VendorExtensible) {
               Extensions: (spec.Extensions) <nil>
              },
              SchemaProps: (spec.SchemaProps) {
               ID: (string) "",
               Ref: (spec.Ref) #/definitions/Book,
               Schema: (spec.SchemaURL) "",
               Description: (string) "",
               Type: (spec.StringOrArray) <nil>,
               Format: (string) "",
               Title: (string) "",
               Default: (interface {}) <nil>,
               Maximum: (*float64)(<nil>),
               ExclusiveMaximum: (bool) false,
               Minimum: (*float64)(<nil>),
               ExclusiveMinimum: (bool) false,
               MaxLength: (*int64)(<nil>),
               MinLength: (*int64)(<nil>),
               Pattern: (string) "",
               MaxItems: (*int64)(<nil>),
               MinItems: (*int64)(<nil>),
               UniqueItems: (bool) false,
               MultipleOf: (*float64)(<nil>),
               Enum: ([]interface {}) <nil>,
               MaxProperties: (*int64)(<nil>),
               MinProperties: (*int64)(<nil>),
               Required: ([]string) <nil>,
               Items: (*spec.SchemaOrArray)(<nil>),
               AllOf: ([]spec.Schema) <nil>,
               OneOf: ([]spec.Schema) <nil>,
               AnyOf: ([]spec.Schema) <nil>,
               Not: (*spec.Schema)(<nil>),
               Properties: (map[string]spec.Schema) <nil>,
               AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
               PatternProperties: (map[string]spec.Schema) <nil>,
               Dependencies: (spec.Dependencies) <nil>,
               AdditionalItems: (*spec.SchemaOrBool)(<nil>),
               Definitions: (spec.Definitions) <nil>
              },
              SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
               Discriminator: (string) "",
               ReadOnly: (bool) false,
               XML: (*spec.XMLObject)(<nil>),
               ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
               Example: (interface {}) <nil>
              },
              ExtraProps: (map[string]interface {}) <nil>
             }),
             Headers: (map[string]spec.Header) <nil>,
             Examples: (map[string]interface {}) <nil>
            },
            VendorExtensible: (spec.VendorExtensible) {
             Extensions: (spec.Extensions) <nil>
            }
           },
           (int) 404: (spec.Response) {
            Refable: (spec.Refable) {
             Ref: (spec.Ref) 
            },
            ResponseProps: (spec.ResponseProps) {
             Description: (string) (len=13) "Job not found",
             Schema: (*spec.Schema)(0xc00044afc0)({
              VendorExtensible: (spec.VendorExtensible) {
               Extensions: (spec.Extensions) <nil>
              },
              SchemaProps: (spec.SchemaProps) {
               ID: (string) "",
               Ref: (spec.Ref) #/definitions/Error,
               Schema: (spec.SchemaURL) "",
               Description: (string) "",
               Type: (spec.StringOrArray) <nil>,
               Format: (string) "",
               Title: (string) "",
               Default: (interface {}) <nil>,
               Maximum: (*float64)(<nil>),
               ExclusiveMaximum: (bool) false,
               Minimum: (*float64)(<nil>),
               ExclusiveMinimum: (bool) false,
               MaxLength: (*int64)(<nil>),
               MinLength: (*int64)(<nil>),
               Pattern: (string) "",
               MaxItems: (*int64)(<nil>),
               MinItems: (*int64)(<nil>),
               UniqueItems: (bool) false,
               MultipleOf: (*float64)(<nil>),
               Enum: ([]interface {}) <nil>,
               MaxProperties: (*int64)(<nil>),
               MinProperties: (*int64)(<nil>),
               Required: ([]string) <nil>,
               Items: (*spec.SchemaOrArray)(<nil>),
               AllOf: ([]spec.Schema) <nil>,
               OneOf: ([]spec.Schema) <nil>,
               AnyOf: ([]spec.Schema) <nil>,
               Not: (*spec.Schema)(<nil>),
               Properties: (map[string]spec.Schema) <nil>,
               AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
               PatternProperties: (map[string]spec.Schema) <nil>,
               Dependencies: (spec.Dependencies) <nil>,
               AdditionalItems: (*spec.SchemaOrBool)(<nil>),
               Definitions: (spec.Definitions) <nil>
              },
              SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
               Discriminator: (string) "",
               ReadOnly: (bool) false,
               XML: (*spec.XMLObject)(<nil>),
               ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
               Example: (interface {}) <nil>
              },
              ExtraProps: (map[string]interface {}) <nil>
             }),
             Headers: (map[string]spec.Header) <nil>,
             Examples: (map[string]interface {}) <nil>
            },
            VendorExtensible: (spec.VendorExtensible) {
             Extensions: (spec.Extensions) <nil>
            }
           }
          }
         }
        })
       }
      }),
      Put: (*spec.Operation)(<nil>),
      Post: (*spec.Operation)(<nil>),
      Delete: (*spec.Operation)(<nil>),
      Options: (*spec.Operation)(<nil>),
      Head: (*spec.Operation)(<nil>),
      Patch: (*spec.Operation)(<nil>),
      Parameters: ([]spec.Parameter) <nil>
     }
    },
    (string) (len=6) "/books": (spec.PathItem) {
     Refable: (spec.Refable) {
      Ref: (spec.Ref) 
     },
     VendorExtensible: (spec.VendorExtensible) {
      Extensions: (spec.Extensions) <nil>
     },
     PathItemProps: (spec.PathItemProps) {
      Get: (*spec.Operation)(0xc000102700)({
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) (len=1) {
         (string) (len=8) "x-paging": (map[string]interface {}) (len=1) {
          (string) (len=13) "pageParameter": (string) (len=13) "startingAfter"
         }
        }
       },
       OperationProps: (spec.OperationProps) {
        Description: (string) (len=23) "Returns a list of books",
        Consumes: ([]string) <nil>,
        Produces: ([]string) <nil>,
        Schemes: ([]string) <nil>,
        Tags: ([]string) <nil>,
        Summary: (string) (len=243) "For a given district:app pair, provides boolean on whether the user exists. This endpoint is preferred over an alternative getUser endpoint if existence confirmation is all that's needed, as this provides significant performance improvements.\n",
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        ID: (string) (len=8) "getBooks",
        Deprecated: (bool) false,
        Security: ([]map[string][]string) <nil>,
        Parameters: ([]spec.Parameter) (len=11 cap=13) {
         (spec.Parameter) {
          Refable: (spec.Refable) {
           Ref: (spec.Ref) 
          },
          CommonValidations: (spec.CommonValidations) {
           Maximum: (*float64)(<nil>),
           ExclusiveMaximum: (bool) false,
           Minimum: (*float64)(<nil>),
           ExclusiveMinimum: (bool) false,
           MaxLength: (*int64)(<nil>),
           MinLength: (*int64)(<nil>),
           Pattern: (string) "",
           MaxItems: (*int64)(0xc000842e50)(2),
           MinItems: (*int64)(0xc000842e58)(1),
           UniqueItems: (bool) true,
           MultipleOf: (*float64)(<nil>),
           Enum: ([]interface {}) <nil>
          },
          SimpleSchema: (spec.SimpleSchema) {
           Type: (string) (len=5) "array",
           Format: (string) "",
           Items: (*spec.Items)(0xc0006dea00)({
            Refable: (spec.Refable) {
             Ref: (spec.Ref) 
            },
            CommonValidations: (spec.CommonValidations) {
             Maximum: (*float64)(<nil>),
             ExclusiveMaximum: (bool) false,
             Minimum: (*float64)(<nil>),
             ExclusiveMinimum: (bool) false,
             MaxLength: (*int64)(<nil>),
             MinLength: (*int64)(<nil>),
             Pattern: (string) "",
             MaxItems: (*int64)(<nil>),
             MinItems: (*int64)(<nil>),
             UniqueItems: (bool) false,
             MultipleOf: (*float64)(<nil>),
             Enum: ([]interface {}) <nil>
            },
            SimpleSchema: (spec.SimpleSchema) {
             Type: (string) (len=6) "string",
             Format: (string) "",
             Items: (*spec.Items)(<nil>),
             CollectionFormat: (string) "",
             Default: (interface {}) <nil>,
             Example: (interface {}) <nil>
            },
            VendorExtensible: (spec.VendorExtensible) {
             Extensions: (spec.Extensions) <nil>
            }
           }),
           CollectionFormat: (string) "",
           Default: (interface {}) <nil>,
           Example: (interface {}) <nil>
          },
          VendorExtensible: (spec.VendorExtensible) {
           Extensions: (spec.Extensions) <nil>
          },
          ParamProps: (spec.ParamProps) {
           Description: (string) (len=60) "A list of authors. Must specify at least one and at most two",
           Name: (string) (len=7) "authors",
           In: (string) (len=5) "query",
           Required: (bool) false,
           Schema: (*spec.Schema)(<nil>),
           AllowEmptyValue: (bool) false
          }
         },
         (spec.Parameter) {
          Refable: (spec.Refable) {
           Ref: (spec.Ref) 
          },
          CommonValidations: (spec.CommonValidations) {
           Maximum: (*float64)(<nil>),
           ExclusiveMaximum: (bool) false,
           Minimum: (*float64)(<nil>),
           ExclusiveMinimum: (bool) false,
           MaxLength: (*int64)(<nil>),
           MinLength: (*int64)(<nil>),
           Pattern: (string) "",
           MaxItems: (*int64)(<nil>),
           MinItems: (*int64)(<nil>),
           UniqueItems: (bool) false,
           MultipleOf: (*float64)(<nil>),
           Enum: ([]interface {}) <nil>
          },
          SimpleSchema: (spec.SimpleSchema) {
           Type: (string) (len=7) "boolean",
           Format: (string) "",
           Items: (*spec.Items)(<nil>),
           CollectionFormat: (string) "",
           Default: (bool) true,
           Example: (interface {}) <nil>
          },
          VendorExtensible: (spec.VendorExtensible) {
           Extensions: (spec.Extensions) <nil>
          },
          ParamProps: (spec.ParamProps) {
           Description: (string) "",
           Name: (string) (len=9) "available",
           In: (string) (len=5) "query",
           Required: (bool) false,
           Schema: (*spec.Schema)(<nil>),
           AllowEmptyValue: (bool) false
          }
         },
         (spec.Parameter) {
          Refable: (spec.Refable) {
           Ref: (spec.Ref) 
          },
          CommonValidations: (spec.CommonValidations) {
           Maximum: (*float64)(<nil>),
           ExclusiveMaximum: (bool) false,
           Minimum: (*float64)(<nil>),
           ExclusiveMinimum: (bool) false,
           MaxLength: (*int64)(<nil>),
           MinLength: (*int64)(<nil>),
           Pattern: (string) "",
           MaxItems: (*int64)(<nil>),
           MinItems: (*int64)(<nil>),
           UniqueItems: (bool) false,
           MultipleOf: (*float64)(<nil>),
           Enum: ([]interface {}) (len=2 cap=4) {
            (string) (len=8) "finished",
            (string) (len=10) "inprogress"
           }
          },
          SimpleSchema: (spec.SimpleSchema) {
           Type: (string) (len=6) "string",
           Format: (string) "",
           Items: (*spec.Items)(<nil>),
           CollectionFormat: (string) "",
           Default: (string) (len=8) "finished",
           Example: (interface {}) <nil>
          },
          VendorExtensible: (spec.VendorExtensible) {
           Extensions: (spec.Extensions) <nil>
          },
          ParamProps: (spec.ParamProps) {
           Description: (string) (len=22) "The state of the thing",
           Name: (string) (len=5) "state",
           In: (string) (len=5) "query",
           Required: (bool) false,
           Schema: (*spec.Schema)(<nil>),
           AllowEmptyValue: (bool) false
          }
         },
         (spec.Parameter) {
          Refable: (spec.Refable) {
           Ref: (spec.Ref) 
          },
          CommonValidations: (spec.CommonValidations) {
           Maximum: (*float64)(<nil>),
           ExclusiveMaximum: (bool) false,
           Minimum: (*float64)(<nil>),
           ExclusiveMinimum: (bool) false,
           MaxLength: (*int64)(<nil>),
           MinLength: (*int64)(<nil>),
           Pattern: (string) "",
           MaxItems: (*int64)(<nil>),
           MinItems: (*int64)(<nil>),
           UniqueItems: (bool) false,
           MultipleOf: (*float64)(<nil>),
           Enum: ([]interface {}) <nil>
          },
          SimpleSchema: (spec.SimpleSchema) {
           Type: (string) (len=6) "string",
           Format: (string) (len=4) "date",
           Items: (*spec.Items)(<nil>),
           CollectionFormat: (string) "",
           Default: (interface {}) <nil>,
           Example: (interface {}) <nil>
          },
          VendorExtensible: (spec.VendorExtensible) {
           Extensions: (spec.Extensions) <nil>
          },
          ParamProps: (spec.ParamProps) {
           Description: (string) "",
           Name: (string) (len=9) "published",
           In: (string) (len=5) "query",
           Required: (bool) false,
           Schema: (*spec.Schema)(<nil>),
           AllowEmptyValue: (bool) false
          }
         },
         (spec.Parameter) {
          Refable: (spec.Refable) {
           Ref: (spec.Ref) 
          },
          CommonValidations: (spec.CommonValidations) {
           Maximum: (*float64)(<nil>),
           ExclusiveMaximum: (bool) false,
           Minimum: (*float64)(<nil>),
           ExclusiveMinimum: (bool) false,
           MaxLength: (*int64)(0xc0008433f8)(5),
           MinLength: (*int64)(<nil>),
           Pattern: (string) "",
           MaxItems: (*int64)(<nil>),
           MinItems: (*int64)(<nil>),
           UniqueItems: (bool) false,
           MultipleOf: (*float64)(<nil>),
           Enum: ([]interface {}) <nil>
          },
          SimpleSchema: (spec.SimpleSchema) {
           Type: (string) (len=6) "string",
           Format: (string) "",
           Items: (*spec.Items)(<nil>),
           CollectionFormat: (string) "",
           Default: (interface {}) <nil>,
           Example: (interface {}) <nil>
          },
          VendorExtensible: (spec.VendorExtensible) {
           Extensions: (spec.Extensions) <nil>
          },
          ParamProps: (spec.ParamProps) {
           Description: (string) "",
           Name: (string) (len=10) "snake_case",
           In: (string) (len=5) "query",
           Required: (bool) false,
           Schema: (*spec.Schema)(<nil>),
           AllowEmptyValue: (bool) false
          }
         },
         (spec.Parameter) {
          Refable: (spec.Refable) {
           Ref: (spec.Ref) 
          },
          CommonValidations: (spec.CommonValidations) {
           Maximum: (*float64)(<nil>),
           ExclusiveMaximum: (bool) false,
           Minimum: (*float64)(<nil>),
           ExclusiveMinimum: (bool) false,
           MaxLength: (*int64)(<nil>),
           MinLength: (*int64)(<nil>),
           Pattern: (string) "",
           MaxItems: (*int64)(<nil>),
           MinItems: (*int64)(<nil>),
           UniqueItems: (bool) false,
           MultipleOf: (*float64)(<nil>),
           Enum: ([]interface {}) <nil>
          },
          SimpleSchema: (spec.SimpleSchema) {
           Type: (string) (len=6) "string",
           Format: (string) (len=9) "date-time",
           Items: (*spec.Items)(<nil>),
           CollectionFormat: (string) "",
           Default: (interface {}) <nil>,
           Example: (interface {}) <nil>
          },
          VendorExtensible: (spec.VendorExtensible) {
           Extensions: (spec.Extensions) <nil>
          },
          ParamProps: (spec.ParamProps) {
           Description: (string) "",
           Name: (string) (len=9) "completed",
           In: (string) (len=5) "query",
           Required: (bool) false,
           Schema: (*spec.Schema)(<nil>),
           AllowEmptyValue: (bool) false
          }
         },
         (spec.Parameter) {
          Refable: (spec.Refable) {
           Ref: (spec.Ref) 
          },
          CommonValidations: (spec.CommonValidations) {
           Maximum: (*float64)(0xc0008435c8)(1000),
           ExclusiveMaximum: (bool) false,
           Minimum: (*float64)(0xc0008435d8)(-5),
           ExclusiveMinimum: (bool) false,
           MaxLength: (*int64)(<nil>),
           MinLength: (*int64)(<nil>),
           Pattern: (string) "",
           MaxItems: (*int64)(<nil>),
           MinItems: (*int64)(<nil>),
           UniqueItems: (bool) false,
           MultipleOf: (*float64)(0xc0008435e8)(0.5),
           Enum: ([]interface {}) <nil>
          },
          SimpleSchema: (spec.SimpleSchema) {
           Type: (string) (len=6) "number",
           Format: (string) "",
           Items: (*spec.Items)(<nil>),
           CollectionFormat: (string) "",
           Default: (float64) 500.5,
           Example: (interface {}) <nil>
          },
          VendorExtensible: (spec.VendorExtensible) {
           Extensions: (spec.Extensions) <nil>
          },
          ParamProps: (spec.ParamProps) {
           Description: (string) "",
           Name: (string) (len=8) "maxPages",
           In: (string) (len=5) "query",
           Required: (bool) false,
           Schema: (*spec.Schema)(<nil>),
           AllowEmptyValue: (bool) false
          }
         },
         (spec.Parameter) {
          Refable: (spec.Refable) {
           Ref: (spec.Ref) 
          },
          CommonValidations: (spec.CommonValidations) {
           Maximum: (*float64)(<nil>),
           ExclusiveMaximum: (bool) false,
           Minimum: (*float64)(<nil>),
           ExclusiveMinimum: (bool) false,
           MaxLength: (*int64)(<nil>),
           MinLength: (*int64)(<nil>),
           Pattern: (string) "",
           MaxItems: (*int64)(<nil>),
           MinItems: (*int64)(<nil>),
           UniqueItems: (bool) false,
           MultipleOf: (*float64)(<nil>),
           Enum: ([]interface {}) <nil>
          },
          SimpleSchema: (spec.SimpleSchema) {
           Type: (string) (len=7) "integer",
           Format: (string) (len=5) "int32",
           Items: (*spec.Items)(<nil>),
           CollectionFormat: (string) "",
           Default: (float64) 5,
           Example: (interface {}) <nil>
          },
          VendorExtensible: (spec.VendorExtensible) {
           Extensions: (spec.Extensions) <nil>
          },
          ParamProps: (spec.ParamProps) {
           Description: (string) "",
           Name: (string) (len=9) "min_pages",
           In: (string) (len=5) "query",
           Required: (bool) false,
           Schema: (*spec.Schema)(<nil>),
           AllowEmptyValue: (bool) false
          }
         },
         (spec.Parameter) {
          Refable: (spec.Refable) {
           Ref: (spec.Ref) 
          },
          CommonValidations: (spec.CommonValidations) {
           Maximum: (*float64)(<nil>),
           ExclusiveMaximum: (bool) false,
           Minimum: (*float64)(<nil>),
           ExclusiveMinimum: (bool) false,
           MaxLength: (*int64)(<nil>),
           MinLength: (*int64)(<nil>),
           Pattern: (string) "",
           MaxItems: (*int64)(<nil>),
           MinItems: (*int64)(<nil>),
           UniqueItems: (bool) false,
           MultipleOf: (*float64)(<nil>),
           Enum: ([]interface {}) <nil>
          },
          SimpleSchema: (spec.SimpleSchema) {
           Type: (string) (len=6) "number",
           Format: (string) (len=5) "float",
           Items: (*spec.Items)(<nil>),
           CollectionFormat: (string) "",
           Default: (interface {}) <nil>,
           Example: (interface {}) <nil>
          },
          VendorExtensible: (spec.VendorExtensible) {
           Extensions: (spec.Extensions) <nil>
          },
          ParamProps: (spec.ParamProps) {
           Description: (string) "",
           Name: (string) (len=11) "pagesToTime",
           In: (string) (len=5) "query",
           Required: (bool) false,
           Schema: (*spec.Schema)(<nil>),
           AllowEmptyValue: (bool) false
          }
         },
         (spec.Parameter) {
          Refable: (spec.Refable) {
           Ref: (spec.Ref) 
          },
          CommonValidations: (spec.CommonValidations) {
           Maximum: (*float64)(<nil>),
           ExclusiveMaximum: (bool) false,
           Minimum: (*float64)(<nil>),
           ExclusiveMinimum: (bool) false,
           MaxLength: (*int64)(<nil>),
           MinLength: (*int64)(<nil>),
           Pattern: (string) "",
           MaxItems: (*int64)(<nil>),
           MinItems: (*int64)(<nil>),
           UniqueItems: (bool) false,
           MultipleOf: (*float64)(<nil>),
           Enum: ([]interface {}) <nil>
          },
          SimpleSchema: (spec.SimpleSchema) {
           Type: (string) (len=6) "string",
           Format: (string) "",
           Items: (*spec.Items)(<nil>),
           CollectionFormat: (string) "",
           Default: (interface {}) <nil>,
           Example: (interface {}) <nil>
          },
          VendorExtensible: (spec.VendorExtensible) {
           Extensions: (spec.Extensions) <nil>
          },
          ParamProps: (spec.ParamProps) {
           Description: (string) "",
           Name: (string) (len=13) "authorization",
           In: (string) (len=6) "header",
           Required: (bool) false,
           Schema: (*spec.Schema)(<nil>),
           AllowEmptyValue: (bool) false
          }
         },
         (spec.Parameter) {
          Refable: (spec.Refable) {
           Ref: (spec.Ref) 
          },
          CommonValidations: (spec.CommonValidations) {
           Maximum: (*float64)(<nil>),
           ExclusiveMaximum: (bool) false,
           Minimum: (*float64)(<nil>),
           ExclusiveMinimum: (bool) false,
           MaxLength: (*int64)(<nil>),
           MinLength: (*int64)(<nil>),
           Pattern: (string) "",
           MaxItems: (*int64)(<nil>),
           MinItems: (*int64)(<nil>),
           UniqueItems: (bool) false,
           MultipleOf: (*float64)(<nil>),
           Enum: ([]interface {}) <nil>
          },
          SimpleSchema: (spec.SimpleSchema) {
           Type: (string) (len=7) "integer",
           Format: (string) "",
           Items: (*spec.Items)(<nil>),
           CollectionFormat: (string) "",
           Default: (interface {}) <nil>,
           Example: (interface {}) <nil>
          },
          VendorExtensible: (spec.VendorExtensible) {
           Extensions: (spec.Extensions) <nil>
          },
          ParamProps: (spec.ParamProps) {
           Description: (string) "",
           Name: (string) (len=13) "startingAfter",
           In: (string) (len=5) "query",
           Required: (bool) false,
           Schema: (*spec.Schema)(<nil>),
           AllowEmptyValue: (bool) false
          }
         }
        },
        Responses: (*spec.Responses)(0xc00059b060)({
         VendorExtensible: (spec.VendorExtensible) {
          Extensions: (spec.Extensions) <nil>
         },
         ResponsesProps: (spec.ResponsesProps) {
          Default: (*spec.Response)(0xc00044eea0)({
           Refable: (spec.Refable) {
            Ref: (spec.Ref) 
           },
           ResponseProps: (spec.ResponseProps) {
            Description: (string) (len=5) "Error",
            Schema: (*spec.Schema)(0xc00044bb00)({
             VendorExtensible: (spec.VendorExtensible) {
              Extensions: (spec.Extensions) <nil>
             },
             SchemaProps: (spec.SchemaProps) {
              ID: (string) "",
              Ref: (spec.Ref) #/definitions/Error,
              Schema: (spec.SchemaURL) "",
              Description: (string) "",
              Type: (spec.StringOrArray) <nil>,
              Format: (string) "",
              Title: (string) "",
              Default: (interface {}) <nil>,
              Maximum: (*float64)(<nil>),
              ExclusiveMaximum: (bool) false,
              Minimum: (*float64)(<nil>),
              ExclusiveMinimum: (bool) false,
              MaxLength: (*int64)(<nil>),
              MinLength: (*int64)(<nil>),
              Pattern: (string) "",
              MaxItems: (*int64)(<nil>),
              MinItems: (*int64)(<nil>),
              UniqueItems: (bool) false,
              MultipleOf: (*float64)(<nil>),
              Enum: ([]interface {}) <nil>,
              MaxProperties: (*int64)(<nil>),
              MinProperties: (*int64)(<nil>),
              Required: ([]string) <nil>,
              Items: (*spec.SchemaOrArray)(<nil>),
              AllOf: ([]spec.Schema) <nil>,
              OneOf: ([]spec.Schema) <nil>,
              AnyOf: ([]spec.Schema) <nil>,
              Not: (*spec.Schema)(<nil>),
              Properties: (map[string]spec.Schema) <nil>,
              AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
              PatternProperties: (map[string]spec.Schema) <nil>,
              Dependencies: (spec.Dependencies) <nil>,
              AdditionalItems: (*spec.SchemaOrBool)(<nil>),
              Definitions: (spec.Definitions) <nil>
             },
             SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
              Discriminator: (string) "",
              ReadOnly: (bool) false,
              XML: (*spec.XMLObject)(<nil>),
              ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
              Example: (interface {}) <nil>
             },
             ExtraProps: (map[string]interface {}) <nil>
            }),
            Headers: (map[string]spec.Header) <nil>,
            Examples: (map[string]interface {}) <nil>
           },
           VendorExtensible: (spec.VendorExtensible) {
            Extensions: (spec.Extensions) <nil>
           }
          }),
          StatusCodeResponses: (map[int]spec.Response) (len=1) {
           (int) 200: (spec.Response) {
            Refable: (spec.Refable) {
             Ref: (spec.Ref) 
            },
            ResponseProps: (spec.ResponseProps) {
             Description: (string) (len=7) "Success",
             Schema: (*spec.Schema)(0xc00044b200)({
              VendorExtensible: (spec.VendorExtensible) {
               Extensions: (spec.Extensions) <nil>
              },
              SchemaProps: (spec.SchemaProps) {
               ID: (string) "",
               Ref: (spec.Ref) ,
               Schema: (spec.SchemaURL) "",
               Description: (string) "",
               Type: (spec.StringOrArray) (len=1 cap=1) {
                (string) (len=5) "array"
               },
               Format: (string) "",
               Title: (string) "",
               Default: (interface {}) <nil>,
               Maximum: (*float64)(<nil>),
               ExclusiveMaximum: (bool) false,
               Minimum: (*float64)(<nil>),
               ExclusiveMinimum: (bool) false,
               MaxLength: (*int64)(<nil>),
               MinLength: (*int64)(<nil>),
               Pattern: (string) "",
               MaxItems: (*int64)(<nil>),
               MinItems: (*int64)(<nil>),
               UniqueItems: (bool) false,
               MultipleOf: (*float64)(<nil>),
               Enum: ([]interface {}) <nil>,
               MaxProperties: (*int64)(<nil>),
               MinProperties: (*int64)(<nil>),
               Required: ([]string) <nil>,
               Items: (*spec.SchemaOrArray)(0xc00059b080)({
                Schema: (*spec.Schema)(0xc00044b680)({
                 VendorExtensible: (spec.VendorExtensible) {
                  Extensions: (spec.Extensions) <nil>
                 },
                 SchemaProps: (spec.SchemaProps) {
                  ID: (string) "",
                  Ref: (spec.Ref) #/definitions/Book,
                  Schema: (spec.SchemaURL) "",
                  Description: (string) "",
                  Type: (spec.StringOrArray) <nil>,
                  Format: (string) "",
                  Title: (string) "",
                  Default: (interface {}) <nil>,
                  Maximum: (*float64)(<nil>),
                  ExclusiveMaximum: (bool) false,
                  Minimum: (*float64)(<nil>),
                  ExclusiveMinimum: (bool) false,
                  MaxLength: (*int64)(<nil>),
                  MinLength: (*int64)(<nil>),
                  Pattern: (string) "",
                  MaxItems: (*int64)(<nil>),
                  MinItems: (*int64)(<nil>),
                  UniqueItems: (bool) false,
                  MultipleOf: (*float64)(<nil>),
                  Enum: ([]interface {}) <nil>,
                  MaxProperties: (*int64)(<nil>),
                  MinProperties: (*int64)(<nil>),
                  Required: ([]string) <nil>,
                  Items: (*spec.SchemaOrArray)(<nil>),
                  AllOf: ([]spec.Schema) <nil>,
                  OneOf: ([]spec.Schema) <nil>,
                  AnyOf: ([]spec.Schema) <nil>,
                  Not: (*spec.Schema)(<nil>),
                  Properties: (map[string]spec.Schema) <nil>,
                  AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
                  PatternProperties: (map[string]spec.Schema) <nil>,
                  Dependencies: (spec.Dependencies) <nil>,
                  AdditionalItems: (*spec.SchemaOrBool)(<nil>),
                  Definitions: (spec.Definitions) <nil>
                 },
                 SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
                  Discriminator: (string) "",
                  ReadOnly: (bool) false,
                  XML: (*spec.XMLObject)(<nil>),
                  ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
                  Example: (interface {}) <nil>
                 },
                 ExtraProps: (map[string]interface {}) <nil>
                }),
                Schemas: ([]spec.Schema) <nil>
               }),
               AllOf: ([]spec.Schema) <nil>,
               OneOf: ([]spec.Schema) <nil>,
               AnyOf: ([]spec.Schema) <nil>,
               Not: (*spec.Schema)(<nil>),
               Properties: (map[string]spec.Schema) <nil>,
               AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
               PatternProperties: (map[string]spec.Schema) <nil>,
               Dependencies: (spec.Dependencies) <nil>,
               AdditionalItems: (*spec.SchemaOrBool)(<nil>),
               Definitions: (spec.Definitions) <nil>
              },
              SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
               Discriminator: (string) "",
               ReadOnly: (bool) false,
               XML: (*spec.XMLObject)(<nil>),
               ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
               Example: (interface {}) <nil>
              },
              ExtraProps: (map[string]interface {}) <nil>
             }),
             Headers: (map[string]spec.Header) <nil>,
             Examples: (map[string]interface {}) <nil>
            },
            VendorExtensible: (spec.VendorExtensible) {
             Extensions: (spec.Extensions) <nil>
            }
           }
          }
         }
        })
       }
      }),
      Put: (*spec.Operation)(0xc0001028c0)({
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       OperationProps: (spec.OperationProps) {
        Description: (string) (len=11) "Puts a book",
        Consumes: ([]string) <nil>,
        Produces: ([]string) <nil>,
        Schemes: ([]string) <nil>,
        Tags: ([]string) <nil>,
        Summary: (string) "",
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        ID: (string) (len=7) "putBook",
        Deprecated: (bool) false,
        Security: ([]map[string][]string) <nil>,
        Parameters: ([]spec.Parameter) (len=1 cap=4) {
         (spec.Parameter) {
          Refable: (spec.Refable) {
           Ref: (spec.Ref) 
          },
          CommonValidations: (spec.CommonValidations) {
           Maximum: (*float64)(<nil>),
           ExclusiveMaximum: (bool) false,
           Minimum: (*float64)(<nil>),
           ExclusiveMinimum: (bool) false,
           MaxLength: (*int64)(<nil>),
           MinLength: (*int64)(<nil>),
           Pattern: (string) "",
           MaxItems: (*int64)(<nil>),
           MinItems: (*int64)(<nil>),
           UniqueItems: (bool) false,
           MultipleOf: (*float64)(<nil>),
           Enum: ([]interface {}) <nil>
          },
          SimpleSchema: (spec.SimpleSchema) {
           Type: (string) "",
           Format: (string) "",
           Items: (*spec.Items)(<nil>),
           CollectionFormat: (string) "",
           Default: (interface {}) <nil>,
           Example: (interface {}) <nil>
          },
          VendorExtensible: (spec.VendorExtensible) {
           Extensions: (spec.Extensions) <nil>
          },
          ParamProps: (spec.ParamProps) {
           Description: (string) "",
           Name: (string) (len=7) "newBook",
           In: (string) (len=4) "body",
           Required: (bool) false,
           Schema: (*spec.Schema)(0xc00041c6c0)({
            VendorExtensible: (spec.VendorExtensible) {
             Extensions: (spec.Extensions) <nil>
            },
            SchemaProps: (spec.SchemaProps) {
             ID: (string) "",
             Ref: (spec.Ref) #/definitions/Book,
             Schema: (spec.SchemaURL) "",
             Description: (string) "",
             Type: (spec.StringOrArray) <nil>,
             Format: (string) "",
             Title: (string) "",
             Default: (interface {}) <nil>,
             Maximum: (*float64)(<nil>),
             ExclusiveMaximum: (bool) false,
             Minimum: (*float64)(<nil>),
             ExclusiveMinimum: (bool) false,
             MaxLength: (*int64)(<nil>),
             MinLength: (*int64)(<nil>),
             Pattern: (string) "",
             MaxItems: (*int64)(<nil>),
             MinItems: (*int64)(<nil>),
             UniqueItems: (bool) false,
             MultipleOf: (*float64)(<nil>),
             Enum: ([]interface {}) <nil>,
             MaxProperties: (*int64)(<nil>),
             MinProperties: (*int64)(<nil>),
             Required: ([]string) <nil>,
             Items: (*spec.SchemaOrArray)(<nil>),
             AllOf: ([]spec.Schema) <nil>,
             OneOf: ([]spec.Schema) <nil>,
             AnyOf: ([]spec.Schema) <nil>,
             Not: (*spec.Schema)(<nil>),
             Properties: (map[string]spec.Schema) <nil>,
             AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
             PatternProperties: (map[string]spec.Schema) <nil>,
             Dependencies: (spec.Dependencies) <nil>,
             AdditionalItems: (*spec.SchemaOrBool)(<nil>),
             Definitions: (spec.Definitions) <nil>
            },
            SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
             Discriminator: (string) "",
             ReadOnly: (bool) false,
             XML: (*spec.XMLObject)(<nil>),
             ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
             Example: (interface {}) <nil>
            },
            ExtraProps: (map[string]interface {}) <nil>
           }),
           AllowEmptyValue: (bool) false
          }
         }
        },
        Responses: (*spec.Responses)(0xc00059ba60)({
         VendorExtensible: (spec.VendorExtensible) {
          Extensions: (spec.Extensions) <nil>
         },
         ResponsesProps: (spec.ResponsesProps) {
          Default: (*spec.Response)(0xc00044f0e0)({
           Refable: (spec.Refable) {
            Ref: (spec.Ref) 
           },
           ResponseProps: (spec.ResponseProps) {
            Description: (string) (len=5) "Error",
            Schema: (*spec.Schema)(0xc00041d8c0)({
             VendorExtensible: (spec.VendorExtensible) {
              Extensions: (spec.Extensions) <nil>
             },
             SchemaProps: (spec.SchemaProps) {
              ID: (string) "",
              Ref: (spec.Ref) #/definitions/Error,
              Schema: (spec.SchemaURL) "",
              Description: (string) "",
              Type: (spec.StringOrArray) <nil>,
              Format: (string) "",
              Title: (string) "",
              Default: (interface {}) <nil>,
              Maximum: (*float64)(<nil>),
              ExclusiveMaximum: (bool) false,
              Minimum: (*float64)(<nil>),
              ExclusiveMinimum: (bool) false,
              MaxLength: (*int64)(<nil>),
              MinLength: (*int64)(<nil>),
              Pattern: (string) "",
              MaxItems: (*int64)(<nil>),
              MinItems: (*int64)(<nil>),
              UniqueItems: (bool) false,
              MultipleOf: (*float64)(<nil>),
              Enum: ([]interface {}) <nil>,
              MaxProperties: (*int64)(<nil>),
              MinProperties: (*int64)(<nil>),
              Required: ([]string) <nil>,
              Items: (*spec.SchemaOrArray)(<nil>),
              AllOf: ([]spec.Schema) <nil>,
              OneOf: ([]spec.Schema) <nil>,
              AnyOf: ([]spec.Schema) <nil>,
              Not: (*spec.Schema)(<nil>),
              Properties: (map[string]spec.Schema) <nil>,
              AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
              PatternProperties: (map[string]spec.Schema) <nil>,
              Dependencies: (spec.Dependencies) <nil>,
              AdditionalItems: (*spec.SchemaOrBool)(<nil>),
              Definitions: (spec.Definitions) <nil>
             },
             SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
              Discriminator: (string) "",
              ReadOnly: (bool) false,
              XML: (*spec.XMLObject)(<nil>),
              ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
              Example: (interface {}) <nil>
             },
             ExtraProps: (map[string]interface {}) <nil>
            }),
            Headers: (map[string]spec.Header) <nil>,
            Examples: (map[string]interface {}) <nil>
           },
           VendorExtensible: (spec.VendorExtensible) {
            Extensions: (spec.Extensions) <nil>
           }
          }),
          StatusCodeResponses: (map[int]spec.Response) (len=1) {
           (int) 200: (spec.Response) {
            Refable: (spec.Refable) {
             Ref: (spec.Ref) 
            },
            ResponseProps: (spec.ResponseProps) {
             Description: (string) (len=7) "Success",
             Schema: (*spec.Schema)(0xc00041cfc0)({
              VendorExtensible: (spec.VendorExtensible) {
               Extensions: (spec.Extensions) <nil>
              },
              SchemaProps: (spec.SchemaProps) {
               ID: (string) "",
               Ref: (spec.Ref) #/definitions/Book,
               Schema: (spec.SchemaURL) "",
               Description: (string) "",
               Type: (spec.StringOrArray) <nil>,
               Format: (string) "",
               Title: (string) "",
               Default: (interface {}) <nil>,
               Maximum: (*float64)(<nil>),
               ExclusiveMaximum: (bool) false,
               Minimum: (*float64)(<nil>),
               ExclusiveMinimum: (bool) false,
               MaxLength: (*int64)(<nil>),
               MinLength: (*int64)(<nil>),
               Pattern: (string) "",
               MaxItems: (*int64)(<nil>),
               MinItems: (*int64)(<nil>),
               UniqueItems: (bool) false,
               MultipleOf: (*float64)(<nil>),
               Enum: ([]interface {}) <nil>,
               MaxProperties: (*int64)(<nil>),
               MinProperties: (*int64)(<nil>),
               Required: ([]string) <nil>,
               Items: (*spec.SchemaOrArray)(<nil>),
               AllOf: ([]spec.Schema) <nil>,
               OneOf: ([]spec.Schema) <nil>,
               AnyOf: ([]spec.Schema) <nil>,
               Not: (*spec.Schema)(<nil>),
               Properties: (map[string]spec.Schema) <nil>,
               AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
               PatternProperties: (map[string]spec.Schema) <nil>,
               Dependencies: (spec.Dependencies) <nil>,
               AdditionalItems: (*spec.SchemaOrBool)(<nil>),
               Definitions: (spec.Definitions) <nil>
              },
              SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
               Discriminator: (string) "",
               ReadOnly: (bool) false,
               XML: (*spec.XMLObject)(<nil>),
               ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
               Example: (interface {}) <nil>
              },
              ExtraProps: (map[string]interface {}) <nil>
             }),
             Headers: (map[string]spec.Header) <nil>,
             Examples: (map[string]interface {}) <nil>
            },
            VendorExtensible: (spec.VendorExtensible) {
             Extensions: (spec.Extensions) <nil>
            }
           }
          }
         }
        })
       }
      }),
      Post: (*spec.Operation)(0xc0001027e0)({
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       OperationProps: (spec.OperationProps) {
        Description: (string) (len=14) "Creates a book",
        Consumes: ([]string) <nil>,
        Produces: ([]string) <nil>,
        Schemes: ([]string) <nil>,
        Tags: ([]string) <nil>,
        Summary: (string) "",
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        ID: (string) (len=10) "createBook",
        Deprecated: (bool) false,
        Security: ([]map[string][]string) <nil>,
        Parameters: ([]spec.Parameter) (len=1 cap=4) {
         (spec.Parameter) {
          Refable: (spec.Refable) {
           Ref: (spec.Ref) 
          },
          CommonValidations: (spec.CommonValidations) {
           Maximum: (*float64)(<nil>),
           ExclusiveMaximum: (bool) false,
           Minimum: (*float64)(<nil>),
           ExclusiveMinimum: (bool) false,
           MaxLength: (*int64)(<nil>),
           MinLength: (*int64)(<nil>),
           Pattern: (string) "",
           MaxItems: (*int64)(<nil>),
           MinItems: (*int64)(<nil>),
           UniqueItems: (bool) false,
           MultipleOf: (*float64)(<nil>),
           Enum: ([]interface {}) <nil>
          },
          SimpleSchema: (spec.SimpleSchema) {
           Type: (string) "",
           Format: (string) "",
           Items: (*spec.Items)(<nil>),
           CollectionFormat: (string) "",
           Default: (interface {}) <nil>,
           Example: (interface {}) <nil>
          },
          VendorExtensible: (spec.VendorExtensible) {
           Extensions: (spec.Extensions) <nil>
          },
          ParamProps: (spec.ParamProps) {
           Description: (string) "",
           Name: (string) (len=7) "newBook",
           In: (string) (len=4) "body",
           Required: (bool) true,
           Schema: (*spec.Schema)(0xc00042e240)({
            VendorExtensible: (spec.VendorExtensible) {
             Extensions: (spec.Extensions) <nil>
            },
            SchemaProps: (spec.SchemaProps) {
             ID: (string) "",
             Ref: (spec.Ref) #/definitions/Book,
             Schema: (spec.SchemaURL) "",
             Description: (string) "",
             Type: (spec.StringOrArray) <nil>,
             Format: (string) "",
             Title: (string) "",
             Default: (interface {}) <nil>,
             Maximum: (*float64)(<nil>),
             ExclusiveMaximum: (bool) false,
             Minimum: (*float64)(<nil>),
             ExclusiveMinimum: (bool) false,
             MaxLength: (*int64)(<nil>),
             MinLength: (*int64)(<nil>),
             Pattern: (string) "",
             MaxItems: (*int64)(<nil>),
             MinItems: (*int64)(<nil>),
             UniqueItems: (bool) false,
             MultipleOf: (*float64)(<nil>),
             Enum: ([]interface {}) <nil>,
             MaxProperties: (*int64)(<nil>),
             MinProperties: (*int64)(<nil>),
             Required: ([]string) <nil>,
             Items: (*spec.SchemaOrArray)(<nil>),
             AllOf: ([]spec.Schema) <nil>,
             OneOf: ([]spec.Schema) <nil>,
             AnyOf: ([]spec.Schema) <nil>,
             Not: (*spec.Schema)(<nil>),
             Properties: (map[string]spec.Schema) <nil>,
             AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
             PatternProperties: (map[string]spec.Schema) <nil>,
             Dependencies: (spec.Dependencies) <nil>,
             AdditionalItems: (*spec.SchemaOrBool)(<nil>),
             Definitions: (spec.Definitions) <nil>
            },
            SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
             Discriminator: (string) "",
             ReadOnly: (bool) false,
             XML: (*spec.XMLObject)(<nil>),
             ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
             Example: (interface {}) <nil>
            },
            ExtraProps: (map[string]interface {}) <nil>
           }),
           AllowEmptyValue: (bool) false
          }
         }
        },
        Responses: (*spec.Responses)(0xc00059b620)({
         VendorExtensible: (spec.VendorExtensible) {
          Extensions: (spec.Extensions) <nil>
         },
         ResponsesProps: (spec.ResponsesProps) {
          Default: (*spec.Response)(0xc00044efc0)({
           Refable: (spec.Refable) {
            Ref: (spec.Ref) 
           },
           ResponseProps: (spec.ResponseProps) {
            Description: (string) (len=5) "Error",
            Schema: (*spec.Schema)(0xc00042fb00)({
             VendorExtensible: (spec.VendorExtensible) {
              Extensions: (spec.Extensions) <nil>
             },
             SchemaProps: (spec.SchemaProps) {
              ID: (string) "",
              Ref: (spec.Ref) #/definitions/Error,
              Schema: (spec.SchemaURL) "",
              Description: (string) "",
              Type: (spec.StringOrArray) <nil>,
              Format: (string) "",
              Title: (string) "",
              Default: (interface {}) <nil>,
              Maximum: (*float64)(<nil>),
              ExclusiveMaximum: (bool) false,
              Minimum: (*float64)(<nil>),
              ExclusiveMinimum: (bool) false,
              MaxLength: (*int64)(<nil>),
              MinLength: (*int64)(<nil>),
              Pattern: (string) "",
              MaxItems: (*int64)(<nil>),
              MinItems: (*int64)(<nil>),
              UniqueItems: (bool) false,
              MultipleOf: (*float64)(<nil>),
              Enum: ([]interface {}) <nil>,
              MaxProperties: (*int64)(<nil>),
              MinProperties: (*int64)(<nil>),
              Required: ([]string) <nil>,
              Items: (*spec.SchemaOrArray)(<nil>),
              AllOf: ([]spec.Schema) <nil>,
              OneOf: ([]spec.Schema) <nil>,
              AnyOf: ([]spec.Schema) <nil>,
              Not: (*spec.Schema)(<nil>),
              Properties: (map[string]spec.Schema) <nil>,
              AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
              PatternProperties: (map[string]spec.Schema) <nil>,
              Dependencies: (spec.Dependencies) <nil>,
              AdditionalItems: (*spec.SchemaOrBool)(<nil>),
              Definitions: (spec.Definitions) <nil>
             },
             SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
              Discriminator: (string) "",
              ReadOnly: (bool) false,
              XML: (*spec.XMLObject)(<nil>),
              ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
              Example: (interface {}) <nil>
             },
             ExtraProps: (map[string]interface {}) <nil>
            }),
            Headers: (map[string]spec.Header) <nil>,
            Examples: (map[string]interface {}) <nil>
           },
           VendorExtensible: (spec.VendorExtensible) {
            Extensions: (spec.Extensions) <nil>
           }
          }),
          StatusCodeResponses: (map[int]spec.Response) (len=1) {
           (int) 200: (spec.Response) {
            Refable: (spec.Refable) {
             Ref: (spec.Ref) 
            },
            ResponseProps: (spec.ResponseProps) {
             Description: (string) (len=7) "Success",
             Schema: (*spec.Schema)(0xc00042ed80)({
              VendorExtensible: (spec.VendorExtensible) {
               Extensions: (spec.Extensions) <nil>
              },
              SchemaProps: (spec.SchemaProps) {
               ID: (string) "",
               Ref: (spec.Ref) #/definitions/Book,
               Schema: (spec.SchemaURL) "",
               Description: (string) "",
               Type: (spec.StringOrArray) <nil>,
               Format: (string) "",
               Title: (string) "",
               Default: (interface {}) <nil>,
               Maximum: (*float64)(<nil>),
               ExclusiveMaximum: (bool) false,
               Minimum: (*float64)(<nil>),
               ExclusiveMinimum: (bool) false,
               MaxLength: (*int64)(<nil>),
               MinLength: (*int64)(<nil>),
               Pattern: (string) "",
               MaxItems: (*int64)(<nil>),
               MinItems: (*int64)(<nil>),
               UniqueItems: (bool) false,
               MultipleOf: (*float64)(<nil>),
               Enum: ([]interface {}) <nil>,
               MaxProperties: (*int64)(<nil>),
               MinProperties: (*int64)(<nil>),
               Required: ([]string) <nil>,
               Items: (*spec.SchemaOrArray)(<nil>),
               AllOf: ([]spec.Schema) <nil>,
               OneOf: ([]spec.Schema) <nil>,
               AnyOf: ([]spec.Schema) <nil>,
               Not: (*spec.Schema)(<nil>),
               Properties: (map[string]spec.Schema) <nil>,
               AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
               PatternProperties: (map[string]spec.Schema) <nil>,
               Dependencies: (spec.Dependencies) <nil>,
               AdditionalItems: (*spec.SchemaOrBool)(<nil>),
               Definitions: (spec.Definitions) <nil>
              },
              SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
               Discriminator: (string) "",
               ReadOnly: (bool) false,
               XML: (*spec.XMLObject)(<nil>),
               ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
               Example: (interface {}) <nil>
              },
              ExtraProps: (map[string]interface {}) <nil>
             }),
             Headers: (map[string]spec.Header) <nil>,
             Examples: (map[string]interface {}) <nil>
            },
            VendorExtensible: (spec.VendorExtensible) {
             Extensions: (spec.Extensions) <nil>
            }
           }
          }
         }
        })
       }
      }),
      Delete: (*spec.Operation)(<nil>),
      Options: (*spec.Operation)(<nil>),
      Head: (*spec.Operation)(<nil>),
      Patch: (*spec.Operation)(<nil>),
      Parameters: ([]spec.Parameter) <nil>
     }
    }
   }
  }),
  Definitions: (spec.Definitions) (len=11) {
   (string) (len=15) "AuthorsResponse": (spec.Schema) {
    VendorExtensible: (spec.VendorExtensible) {
     Extensions: (spec.Extensions) <nil>
    },
    SchemaProps: (spec.SchemaProps) {
     ID: (string) "",
     Ref: (spec.Ref) ,
     Schema: (spec.SchemaURL) "",
     Description: (string) "",
     Type: (spec.StringOrArray) (len=1 cap=1) {
      (string) (len=6) "object"
     },
     Format: (string) "",
     Title: (string) "",
     Default: (interface {}) <nil>,
     Maximum: (*float64)(<nil>),
     ExclusiveMaximum: (bool) false,
     Minimum: (*float64)(<nil>),
     ExclusiveMinimum: (bool) false,
     MaxLength: (*int64)(<nil>),
     MinLength: (*int64)(<nil>),
     Pattern: (string) "",
     MaxItems: (*int64)(<nil>),
     MinItems: (*int64)(<nil>),
     UniqueItems: (bool) false,
     MultipleOf: (*float64)(<nil>),
     Enum: ([]interface {}) <nil>,
     MaxProperties: (*int64)(<nil>),
     MinProperties: (*int64)(<nil>),
     Required: ([]string) <nil>,
     Items: (*spec.SchemaOrArray)(<nil>),
     AllOf: ([]spec.Schema) <nil>,
     OneOf: ([]spec.Schema) <nil>,
     AnyOf: ([]spec.Schema) <nil>,
     Not: (*spec.Schema)(<nil>),
     Properties: (map[string]spec.Schema) (len=2) {
      (string) (len=9) "authorSet": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) #/definitions/AuthorSet,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) <nil>,
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=8) "metadata": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) #/definitions/AuthorsResponseMetadata,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) <nil>,
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      }
     },
     AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
     PatternProperties: (map[string]spec.Schema) <nil>,
     Dependencies: (spec.Dependencies) <nil>,
     AdditionalItems: (*spec.SchemaOrBool)(<nil>),
     Definitions: (spec.Definitions) <nil>
    },
    SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
     Discriminator: (string) "",
     ReadOnly: (bool) false,
     XML: (*spec.XMLObject)(<nil>),
     ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
     Example: (interface {}) <nil>
    },
    ExtraProps: (map[string]interface {}) <nil>
   },
   (string) (len=11) "AuthorArray": (spec.Schema) {
    VendorExtensible: (spec.VendorExtensible) {
     Extensions: (spec.Extensions) <nil>
    },
    SchemaProps: (spec.SchemaProps) {
     ID: (string) "",
     Ref: (spec.Ref) ,
     Schema: (spec.SchemaURL) "",
     Description: (string) "",
     Type: (spec.StringOrArray) (len=1 cap=1) {
      (string) (len=5) "array"
     },
     Format: (string) "",
     Title: (string) "",
     Default: (interface {}) <nil>,
     Maximum: (*float64)(<nil>),
     ExclusiveMaximum: (bool) false,
     Minimum: (*float64)(<nil>),
     ExclusiveMinimum: (bool) false,
     MaxLength: (*int64)(<nil>),
     MinLength: (*int64)(<nil>),
     Pattern: (string) "",
     MaxItems: (*int64)(<nil>),
     MinItems: (*int64)(<nil>),
     UniqueItems: (bool) false,
     MultipleOf: (*float64)(<nil>),
     Enum: ([]interface {}) <nil>,
     MaxProperties: (*int64)(<nil>),
     MinProperties: (*int64)(<nil>),
     Required: ([]string) <nil>,
     Items: (*spec.SchemaOrArray)(0xc0006ff060)({
      Schema: (*spec.Schema)(0xc000372fc0)({
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) #/definitions/Author,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) <nil>,
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      }),
      Schemas: ([]spec.Schema) <nil>
     }),
     AllOf: ([]spec.Schema) <nil>,
     OneOf: ([]spec.Schema) <nil>,
     AnyOf: ([]spec.Schema) <nil>,
     Not: (*spec.Schema)(<nil>),
     Properties: (map[string]spec.Schema) <nil>,
     AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
     PatternProperties: (map[string]spec.Schema) <nil>,
     Dependencies: (spec.Dependencies) <nil>,
     AdditionalItems: (*spec.SchemaOrBool)(<nil>),
     Definitions: (spec.Definitions) <nil>
    },
    SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
     Discriminator: (string) "",
     ReadOnly: (bool) false,
     XML: (*spec.XMLObject)(<nil>),
     ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
     Example: (interface {}) <nil>
    },
    ExtraProps: (map[string]interface {}) <nil>
   },
   (string) (len=23) "AuthorsResponseMetadata": (spec.Schema) {
    VendorExtensible: (spec.VendorExtensible) {
     Extensions: (spec.Extensions) <nil>
    },
    SchemaProps: (spec.SchemaProps) {
     ID: (string) "",
     Ref: (spec.Ref) ,
     Schema: (spec.SchemaURL) "",
     Description: (string) "",
     Type: (spec.StringOrArray) (len=1 cap=1) {
      (string) (len=6) "object"
     },
     Format: (string) "",
     Title: (string) "",
     Default: (interface {}) <nil>,
     Maximum: (*float64)(<nil>),
     ExclusiveMaximum: (bool) false,
     Minimum: (*float64)(<nil>),
     ExclusiveMinimum: (bool) false,
     MaxLength: (*int64)(<nil>),
     MinLength: (*int64)(<nil>),
     Pattern: (string) "",
     MaxItems: (*int64)(<nil>),
     MinItems: (*int64)(<nil>),
     UniqueItems: (bool) false,
     MultipleOf: (*float64)(<nil>),
     Enum: ([]interface {}) <nil>,
     MaxProperties: (*int64)(<nil>),
     MinProperties: (*int64)(<nil>),
     Required: ([]string) <nil>,
     Items: (*spec.SchemaOrArray)(<nil>),
     AllOf: ([]spec.Schema) <nil>,
     OneOf: ([]spec.Schema) <nil>,
     AnyOf: ([]spec.Schema) <nil>,
     Not: (*spec.Schema)(<nil>),
     Properties: (map[string]spec.Schema) (len=1) {
      (string) (len=5) "count": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=7) "integer"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      }
     },
     AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
     PatternProperties: (map[string]spec.Schema) <nil>,
     Dependencies: (spec.Dependencies) <nil>,
     AdditionalItems: (*spec.SchemaOrBool)(<nil>),
     Definitions: (spec.Definitions) <nil>
    },
    SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
     Discriminator: (string) "",
     ReadOnly: (bool) false,
     XML: (*spec.XMLObject)(<nil>),
     ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
     Example: (interface {}) <nil>
    },
    ExtraProps: (map[string]interface {}) <nil>
   },
   (string) (len=5) "Error": (spec.Schema) {
    VendorExtensible: (spec.VendorExtensible) {
     Extensions: (spec.Extensions) <nil>
    },
    SchemaProps: (spec.SchemaProps) {
     ID: (string) "",
     Ref: (spec.Ref) ,
     Schema: (spec.SchemaURL) "",
     Description: (string) "",
     Type: (spec.StringOrArray) (len=1 cap=1) {
      (string) (len=6) "object"
     },
     Format: (string) "",
     Title: (string) "",
     Default: (interface {}) <nil>,
     Maximum: (*float64)(<nil>),
     ExclusiveMaximum: (bool) false,
     Minimum: (*float64)(<nil>),
     ExclusiveMinimum: (bool) false,
     MaxLength: (*int64)(<nil>),
     MinLength: (*int64)(<nil>),
     Pattern: (string) "",
     MaxItems: (*int64)(<nil>),
     MinItems: (*int64)(<nil>),
     UniqueItems: (bool) false,
     MultipleOf: (*float64)(<nil>),
     Enum: ([]interface {}) <nil>,
     MaxProperties: (*int64)(<nil>),
     MinProperties: (*int64)(<nil>),
     Required: ([]string) <nil>,
     Items: (*spec.SchemaOrArray)(<nil>),
     AllOf: ([]spec.Schema) <nil>,
     OneOf: ([]spec.Schema) <nil>,
     AnyOf: ([]spec.Schema) <nil>,
     Not: (*spec.Schema)(<nil>),
     Properties: (map[string]spec.Schema) (len=2) {
      (string) (len=4) "code": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=7) "integer"
        },
        Format: (string) (len=5) "int32",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=7) "message": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      }
     },
     AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
     PatternProperties: (map[string]spec.Schema) <nil>,
     Dependencies: (spec.Dependencies) <nil>,
     AdditionalItems: (*spec.SchemaOrBool)(<nil>),
     Definitions: (spec.Definitions) <nil>
    },
    SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
     Discriminator: (string) "",
     ReadOnly: (bool) false,
     XML: (*spec.XMLObject)(<nil>),
     ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
     Example: (interface {}) <nil>
    },
    ExtraProps: (map[string]interface {}) <nil>
   },
   (string) (len=9) "OmitEmpty": (spec.Schema) {
    VendorExtensible: (spec.VendorExtensible) {
     Extensions: (spec.Extensions) <nil>
    },
    SchemaProps: (spec.SchemaProps) {
     ID: (string) "",
     Ref: (spec.Ref) ,
     Schema: (spec.SchemaURL) "",
     Description: (string) "",
     Type: (spec.StringOrArray) (len=1 cap=1) {
      (string) (len=6) "object"
     },
     Format: (string) "",
     Title: (string) "",
     Default: (interface {}) <nil>,
     Maximum: (*float64)(<nil>),
     ExclusiveMaximum: (bool) false,
     Minimum: (*float64)(<nil>),
     ExclusiveMinimum: (bool) false,
     MaxLength: (*int64)(<nil>),
     MinLength: (*int64)(<nil>),
     Pattern: (string) "",
     MaxItems: (*int64)(<nil>),
     MinItems: (*int64)(<nil>),
     UniqueItems: (bool) false,
     MultipleOf: (*float64)(<nil>),
     Enum: ([]interface {}) <nil>,
     MaxProperties: (*int64)(<nil>),
     MinProperties: (*int64)(<nil>),
     Required: ([]string) <nil>,
     Items: (*spec.SchemaOrArray)(<nil>),
     AllOf: ([]spec.Schema) <nil>,
     OneOf: ([]spec.Schema) <nil>,
     AnyOf: ([]spec.Schema) <nil>,
     Not: (*spec.Schema)(<nil>),
     Properties: (map[string]spec.Schema) (len=2) {
      (string) (len=20) "arrayFieldNotOmitted": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=5) "array"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(0xc0006ff660)({
         Schema: (*spec.Schema)(0xc000326480)({
          VendorExtensible: (spec.VendorExtensible) {
           Extensions: (spec.Extensions) <nil>
          },
          SchemaProps: (spec.SchemaProps) {
           ID: (string) "",
           Ref: (spec.Ref) ,
           Schema: (spec.SchemaURL) "",
           Description: (string) "",
           Type: (spec.StringOrArray) (len=1 cap=1) {
            (string) (len=6) "string"
           },
           Format: (string) "",
           Title: (string) "",
           Default: (interface {}) <nil>,
           Maximum: (*float64)(<nil>),
           ExclusiveMaximum: (bool) false,
           Minimum: (*float64)(<nil>),
           ExclusiveMinimum: (bool) false,
           MaxLength: (*int64)(<nil>),
           MinLength: (*int64)(<nil>),
           Pattern: (string) "",
           MaxItems: (*int64)(<nil>),
           MinItems: (*int64)(<nil>),
           UniqueItems: (bool) false,
           MultipleOf: (*float64)(<nil>),
           Enum: ([]interface {}) <nil>,
           MaxProperties: (*int64)(<nil>),
           MinProperties: (*int64)(<nil>),
           Required: ([]string) <nil>,
           Items: (*spec.SchemaOrArray)(<nil>),
           AllOf: ([]spec.Schema) <nil>,
           OneOf: ([]spec.Schema) <nil>,
           AnyOf: ([]spec.Schema) <nil>,
           Not: (*spec.Schema)(<nil>),
           Properties: (map[string]spec.Schema) <nil>,
           AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
           PatternProperties: (map[string]spec.Schema) <nil>,
           Dependencies: (spec.Dependencies) <nil>,
           AdditionalItems: (*spec.SchemaOrBool)(<nil>),
           Definitions: (spec.Definitions) <nil>
          },
          SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
           Discriminator: (string) "",
           ReadOnly: (bool) false,
           XML: (*spec.XMLObject)(<nil>),
           ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
           Example: (interface {}) <nil>
          },
          ExtraProps: (map[string]interface {}) <nil>
         }),
         Schemas: ([]spec.Schema) <nil>
        }),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=17) "arrayFieldOmitted": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) (len=1) {
         (string) (len=11) "x-omitempty": (bool) true
        }
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=5) "array"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(0xc0006ff760)({
         Schema: (*spec.Schema)(0xc000327b00)({
          VendorExtensible: (spec.VendorExtensible) {
           Extensions: (spec.Extensions) <nil>
          },
          SchemaProps: (spec.SchemaProps) {
           ID: (string) "",
           Ref: (spec.Ref) ,
           Schema: (spec.SchemaURL) "",
           Description: (string) "",
           Type: (spec.StringOrArray) (len=1 cap=1) {
            (string) (len=6) "string"
           },
           Format: (string) "",
           Title: (string) "",
           Default: (interface {}) <nil>,
           Maximum: (*float64)(<nil>),
           ExclusiveMaximum: (bool) false,
           Minimum: (*float64)(<nil>),
           ExclusiveMinimum: (bool) false,
           MaxLength: (*int64)(<nil>),
           MinLength: (*int64)(<nil>),
           Pattern: (string) "",
           MaxItems: (*int64)(<nil>),
           MinItems: (*int64)(<nil>),
           UniqueItems: (bool) false,
           MultipleOf: (*float64)(<nil>),
           Enum: ([]interface {}) <nil>,
           MaxProperties: (*int64)(<nil>),
           MinProperties: (*int64)(<nil>),
           Required: ([]string) <nil>,
           Items: (*spec.SchemaOrArray)(<nil>),
           AllOf: ([]spec.Schema) <nil>,
           OneOf: ([]spec.Schema) <nil>,
           AnyOf: ([]spec.Schema) <nil>,
           Not: (*spec.Schema)(<nil>),
           Properties: (map[string]spec.Schema) <nil>,
           AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
           PatternProperties: (map[string]spec.Schema) <nil>,
           Dependencies: (spec.Dependencies) <nil>,
           AdditionalItems: (*spec.SchemaOrBool)(<nil>),
           Definitions: (spec.Definitions) <nil>
          },
          SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
           Discriminator: (string) "",
           ReadOnly: (bool) false,
           XML: (*spec.XMLObject)(<nil>),
           ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
           Example: (interface {}) <nil>
          },
          ExtraProps: (map[string]interface {}) <nil>
         }),
         Schemas: ([]spec.Schema) <nil>
        }),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      }
     },
     AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
     PatternProperties: (map[string]spec.Schema) <nil>,
     Dependencies: (spec.Dependencies) <nil>,
     AdditionalItems: (*spec.SchemaOrBool)(<nil>),
     Definitions: (spec.Definitions) <nil>
    },
    SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
     Discriminator: (string) "",
     ReadOnly: (bool) false,
     XML: (*spec.XMLObject)(<nil>),
     ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
     Example: (interface {}) <nil>
    },
    ExtraProps: (map[string]interface {}) <nil>
   },
   (string) (len=4) "Book": (spec.Schema) {
    VendorExtensible: (spec.VendorExtensible) {
     Extensions: (spec.Extensions) <nil>
    },
    SchemaProps: (spec.SchemaProps) {
     ID: (string) "",
     Ref: (spec.Ref) ,
     Schema: (spec.SchemaURL) "",
     Description: (string) "",
     Type: (spec.StringOrArray) (len=1 cap=1) {
      (string) (len=6) "object"
     },
     Format: (string) "",
     Title: (string) "",
     Default: (interface {}) <nil>,
     Maximum: (*float64)(<nil>),
     ExclusiveMaximum: (bool) false,
     Minimum: (*float64)(<nil>),
     ExclusiveMinimum: (bool) false,
     MaxLength: (*int64)(<nil>),
     MinLength: (*int64)(<nil>),
     Pattern: (string) "",
     MaxItems: (*int64)(<nil>),
     MinItems: (*int64)(<nil>),
     UniqueItems: (bool) false,
     MultipleOf: (*float64)(<nil>),
     Enum: ([]interface {}) <nil>,
     MaxProperties: (*int64)(<nil>),
     MinProperties: (*int64)(<nil>),
     Required: ([]string) <nil>,
     Items: (*spec.SchemaOrArray)(<nil>),
     AllOf: ([]spec.Schema) <nil>,
     OneOf: ([]spec.Schema) <nil>,
     AnyOf: ([]spec.Schema) <nil>,
     Not: (*spec.Schema)(<nil>),
     Properties: (map[string]spec.Schema) (len=6) {
      (string) (len=5) "genre": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) (len=3 cap=4) {
         (string) (len=5) "scifi",
         (string) (len=7) "mystery",
         (string) (len=6) "horror"
        },
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=5) "other": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) <nil>,
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(0xc0006d6fd0)({
         Allows: (bool) true,
         Schema: (*spec.Schema)(0xc0003c0fc0)({
          VendorExtensible: (spec.VendorExtensible) {
           Extensions: (spec.Extensions) <nil>
          },
          SchemaProps: (spec.SchemaProps) {
           ID: (string) "",
           Ref: (spec.Ref) ,
           Schema: (spec.SchemaURL) "",
           Description: (string) "",
           Type: (spec.StringOrArray) (len=1 cap=1) {
            (string) (len=6) "string"
           },
           Format: (string) "",
           Title: (string) "",
           Default: (interface {}) <nil>,
           Maximum: (*float64)(<nil>),
           ExclusiveMaximum: (bool) false,
           Minimum: (*float64)(<nil>),
           ExclusiveMinimum: (bool) false,
           MaxLength: (*int64)(<nil>),
           MinLength: (*int64)(<nil>),
           Pattern: (string) "",
           MaxItems: (*int64)(<nil>),
           MinItems: (*int64)(<nil>),
           UniqueItems: (bool) false,
           MultipleOf: (*float64)(<nil>),
           Enum: ([]interface {}) <nil>,
           MaxProperties: (*int64)(<nil>),
           MinProperties: (*int64)(<nil>),
           Required: ([]string) <nil>,
           Items: (*spec.SchemaOrArray)(<nil>),
           AllOf: ([]spec.Schema) <nil>,
           OneOf: ([]spec.Schema) <nil>,
           AnyOf: ([]spec.Schema) <nil>,
           Not: (*spec.Schema)(<nil>),
           Properties: (map[string]spec.Schema) <nil>,
           AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
           PatternProperties: (map[string]spec.Schema) <nil>,
           Dependencies: (spec.Dependencies) <nil>,
           AdditionalItems: (*spec.SchemaOrBool)(<nil>),
           Definitions: (spec.Definitions) <nil>
          },
          SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
           Discriminator: (string) "",
           ReadOnly: (bool) false,
           XML: (*spec.XMLObject)(<nil>),
           ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
           Example: (interface {}) <nil>
          },
          ExtraProps: (map[string]interface {}) <nil>
         })
        }),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=10) "otherArray": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) <nil>,
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(0xc0006d70c0)({
         Allows: (bool) true,
         Schema: (*spec.Schema)(0xc0003c1d40)({
          VendorExtensible: (spec.VendorExtensible) {
           Extensions: (spec.Extensions) <nil>
          },
          SchemaProps: (spec.SchemaProps) {
           ID: (string) "",
           Ref: (spec.Ref) ,
           Schema: (spec.SchemaURL) "",
           Description: (string) "",
           Type: (spec.StringOrArray) (len=1 cap=1) {
            (string) (len=5) "array"
           },
           Format: (string) "",
           Title: (string) "",
           Default: (interface {}) <nil>,
           Maximum: (*float64)(<nil>),
           ExclusiveMaximum: (bool) false,
           Minimum: (*float64)(<nil>),
           ExclusiveMinimum: (bool) false,
           MaxLength: (*int64)(<nil>),
           MinLength: (*int64)(<nil>),
           Pattern: (string) "",
           MaxItems: (*int64)(<nil>),
           MinItems: (*int64)(<nil>),
           UniqueItems: (bool) false,
           MultipleOf: (*float64)(<nil>),
           Enum: ([]interface {}) <nil>,
           MaxProperties: (*int64)(<nil>),
           MinProperties: (*int64)(<nil>),
           Required: ([]string) <nil>,
           Items: (*spec.SchemaOrArray)(0xc0006fea40)({
            Schema: (*spec.Schema)(0xc0003b8240)({
             VendorExtensible: (spec.VendorExtensible) {
              Extensions: (spec.Extensions) <nil>
             },
             SchemaProps: (spec.SchemaProps) {
              ID: (string) "",
              Ref: (spec.Ref) ,
              Schema: (spec.SchemaURL) "",
              Description: (string) "",
              Type: (spec.StringOrArray) (len=1 cap=1) {
               (string) (len=6) "string"
              },
              Format: (string) "",
              Title: (string) "",
              Default: (interface {}) <nil>,
              Maximum: (*float64)(<nil>),
              ExclusiveMaximum: (bool) false,
              Minimum: (*float64)(<nil>),
              ExclusiveMinimum: (bool) false,
              MaxLength: (*int64)(<nil>),
              MinLength: (*int64)(<nil>),
              Pattern: (string) "",
              MaxItems: (*int64)(<nil>),
              MinItems: (*int64)(<nil>),
              UniqueItems: (bool) false,
              MultipleOf: (*float64)(<nil>),
              Enum: ([]interface {}) <nil>,
              MaxProperties: (*int64)(<nil>),
              MinProperties: (*int64)(<nil>),
              Required: ([]string) <nil>,
              Items: (*spec.SchemaOrArray)(<nil>),
              AllOf: ([]spec.Schema) <nil>,
              OneOf: ([]spec.Schema) <nil>,
              AnyOf: ([]spec.Schema) <nil>,
              Not: (*spec.Schema)(<nil>),
              Properties: (map[string]spec.Schema) <nil>,
              AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
              PatternProperties: (map[string]spec.Schema) <nil>,
              Dependencies: (spec.Dependencies) <nil>,
              AdditionalItems: (*spec.SchemaOrBool)(<nil>),
              Definitions: (spec.Definitions) <nil>
             },
             SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
              Discriminator: (string) "",
              ReadOnly: (bool) false,
              XML: (*spec.XMLObject)(<nil>),
              ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
              Example: (interface {}) <nil>
             },
             ExtraProps: (map[string]interface {}) <nil>
            }),
            Schemas: ([]spec.Schema) <nil>
           }),
           AllOf: ([]spec.Schema) <nil>,
           OneOf: ([]spec.Schema) <nil>,
           AnyOf: ([]spec.Schema) <nil>,
           Not: (*spec.Schema)(<nil>),
           Properties: (map[string]spec.Schema) <nil>,
           AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
           PatternProperties: (map[string]spec.Schema) <nil>,
           Dependencies: (spec.Dependencies) <nil>,
           AdditionalItems: (*spec.SchemaOrBool)(<nil>),
           Definitions: (spec.Definitions) <nil>
          },
          SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
           Discriminator: (string) "",
           ReadOnly: (bool) false,
           XML: (*spec.XMLObject)(<nil>),
           ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
           Example: (interface {}) <nil>
          },
          ExtraProps: (map[string]interface {}) <nil>
         })
        }),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=2) "id": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=7) "integer"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=4) "name": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=6) "author": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) (len=8) "mongo-id",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      }
     },
     AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
     PatternProperties: (map[string]spec.Schema) <nil>,
     Dependencies: (spec.Dependencies) <nil>,
     AdditionalItems: (*spec.SchemaOrBool)(<nil>),
     Definitions: (spec.Definitions) <nil>
    },
    SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
     Discriminator: (string) "",
     ReadOnly: (bool) false,
     XML: (*spec.XMLObject)(<nil>),
     ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
     Example: (interface {}) <nil>
    },
    ExtraProps: (map[string]interface {}) <nil>
   },
   (string) (len=6) "Author": (spec.Schema) {
    VendorExtensible: (spec.VendorExtensible) {
     Extensions: (spec.Extensions) <nil>
    },
    SchemaProps: (spec.SchemaProps) {
     ID: (string) "",
     Ref: (spec.Ref) ,
     Schema: (spec.SchemaURL) "",
     Description: (string) "",
     Type: (spec.StringOrArray) (len=1 cap=1) {
      (string) (len=6) "object"
     },
     Format: (string) "",
     Title: (string) "",
     Default: (interface {}) <nil>,
     Maximum: (*float64)(<nil>),
     ExclusiveMaximum: (bool) false,
     Minimum: (*float64)(<nil>),
     ExclusiveMinimum: (bool) false,
     MaxLength: (*int64)(<nil>),
     MinLength: (*int64)(<nil>),
     Pattern: (string) "",
     MaxItems: (*int64)(<nil>),
     MinItems: (*int64)(<nil>),
     UniqueItems: (bool) false,
     MultipleOf: (*float64)(<nil>),
     Enum: ([]interface {}) <nil>,
     MaxProperties: (*int64)(<nil>),
     MinProperties: (*int64)(<nil>),
     Required: ([]string) <nil>,
     Items: (*spec.SchemaOrArray)(<nil>),
     AllOf: ([]spec.Schema) <nil>,
     OneOf: ([]spec.Schema) <nil>,
     AnyOf: ([]spec.Schema) <nil>,
     Not: (*spec.Schema)(<nil>),
     Properties: (map[string]spec.Schema) (len=2) {
      (string) (len=2) "id": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=4) "name": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      }
     },
     AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
     PatternProperties: (map[string]spec.Schema) <nil>,
     Dependencies: (spec.Dependencies) <nil>,
     AdditionalItems: (*spec.SchemaOrBool)(<nil>),
     Definitions: (spec.Definitions) <nil>
    },
    SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
     Discriminator: (string) "",
     ReadOnly: (bool) false,
     XML: (*spec.XMLObject)(<nil>),
     ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
     Example: (interface {}) <nil>
    },
    ExtraProps: (map[string]interface {}) <nil>
   },
   (string) (len=9) "AuthorSet": (spec.Schema) {
    VendorExtensible: (spec.VendorExtensible) {
     Extensions: (spec.Extensions) <nil>
    },
    SchemaProps: (spec.SchemaProps) {
     ID: (string) "",
     Ref: (spec.Ref) ,
     Schema: (spec.SchemaURL) "",
     Description: (string) "",
     Type: (spec.StringOrArray) (len=1 cap=1) {
      (string) (len=6) "object"
     },
     Format: (string) "",
     Title: (string) "",
     Default: (interface {}) <nil>,
     Maximum: (*float64)(<nil>),
     ExclusiveMaximum: (bool) false,
     Minimum: (*float64)(<nil>),
     ExclusiveMinimum: (bool) false,
     MaxLength: (*int64)(<nil>),
     MinLength: (*int64)(<nil>),
     Pattern: (string) "",
     MaxItems: (*int64)(<nil>),
     MinItems: (*int64)(<nil>),
     UniqueItems: (bool) false,
     MultipleOf: (*float64)(<nil>),
     Enum: ([]interface {}) <nil>,
     MaxProperties: (*int64)(<nil>),
     MinProperties: (*int64)(<nil>),
     Required: ([]string) <nil>,
     Items: (*spec.SchemaOrArray)(<nil>),
     AllOf: ([]spec.Schema) <nil>,
     OneOf: ([]spec.Schema) <nil>,
     AnyOf: ([]spec.Schema) <nil>,
     Not: (*spec.Schema)(<nil>),
     Properties: (map[string]spec.Schema) (len=2) {
      (string) (len=10) "randomProp": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=7) "integer"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=7) "results": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) #/definitions/AuthorArray,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) <nil>,
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      }
     },
     AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
     PatternProperties: (map[string]spec.Schema) <nil>,
     Dependencies: (spec.Dependencies) <nil>,
     AdditionalItems: (*spec.SchemaOrBool)(<nil>),
     Definitions: (spec.Definitions) <nil>
    },
    SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
     Discriminator: (string) "",
     ReadOnly: (bool) false,
     XML: (*spec.XMLObject)(<nil>),
     ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
     Example: (interface {}) <nil>
    },
    ExtraProps: (map[string]interface {}) <nil>
   },
   (string) (len=10) "BadRequest": (spec.Schema) {
    VendorExtensible: (spec.VendorExtensible) {
     Extensions: (spec.Extensions) <nil>
    },
    SchemaProps: (spec.SchemaProps) {
     ID: (string) "",
     Ref: (spec.Ref) ,
     Schema: (spec.SchemaURL) "",
     Description: (string) "",
     Type: (spec.StringOrArray) (len=1 cap=1) {
      (string) (len=6) "object"
     },
     Format: (string) "",
     Title: (string) "",
     Default: (interface {}) <nil>,
     Maximum: (*float64)(<nil>),
     ExclusiveMaximum: (bool) false,
     Minimum: (*float64)(<nil>),
     ExclusiveMinimum: (bool) false,
     MaxLength: (*int64)(<nil>),
     MinLength: (*int64)(<nil>),
     Pattern: (string) "",
     MaxItems: (*int64)(<nil>),
     MinItems: (*int64)(<nil>),
     UniqueItems: (bool) false,
     MultipleOf: (*float64)(<nil>),
     Enum: ([]interface {}) <nil>,
     MaxProperties: (*int64)(<nil>),
     MinProperties: (*int64)(<nil>),
     Required: ([]string) <nil>,
     Items: (*spec.SchemaOrArray)(<nil>),
     AllOf: ([]spec.Schema) <nil>,
     OneOf: ([]spec.Schema) <nil>,
     AnyOf: ([]spec.Schema) <nil>,
     Not: (*spec.Schema)(<nil>),
     Properties: (map[string]spec.Schema) (len=1) {
      (string) (len=7) "message": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      }
     },
     AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
     PatternProperties: (map[string]spec.Schema) <nil>,
     Dependencies: (spec.Dependencies) <nil>,
     AdditionalItems: (*spec.SchemaOrBool)(<nil>),
     Definitions: (spec.Definitions) <nil>
    },
    SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
     Discriminator: (string) "",
     ReadOnly: (bool) false,
     XML: (*spec.XMLObject)(<nil>),
     ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
     Example: (interface {}) <nil>
    },
    ExtraProps: (map[string]interface {}) <nil>
   },
   (string) (len=13) "InternalError": (spec.Schema) {
    VendorExtensible: (spec.VendorExtensible) {
     Extensions: (spec.Extensions) <nil>
    },
    SchemaProps: (spec.SchemaProps) {
     ID: (string) "",
     Ref: (spec.Ref) ,
     Schema: (spec.SchemaURL) "",
     Description: (string) "",
     Type: (spec.StringOrArray) (len=1 cap=1) {
      (string) (len=6) "object"
     },
     Format: (string) "",
     Title: (string) "",
     Default: (interface {}) <nil>,
     Maximum: (*float64)(<nil>),
     ExclusiveMaximum: (bool) false,
     Minimum: (*float64)(<nil>),
     ExclusiveMinimum: (bool) false,
     MaxLength: (*int64)(<nil>),
     MinLength: (*int64)(<nil>),
     Pattern: (string) "",
     MaxItems: (*int64)(<nil>),
     MinItems: (*int64)(<nil>),
     UniqueItems: (bool) false,
     MultipleOf: (*float64)(<nil>),
     Enum: ([]interface {}) <nil>,
     MaxProperties: (*int64)(<nil>),
     MinProperties: (*int64)(<nil>),
     Required: ([]string) <nil>,
     Items: (*spec.SchemaOrArray)(<nil>),
     AllOf: ([]spec.Schema) <nil>,
     OneOf: ([]spec.Schema) <nil>,
     AnyOf: ([]spec.Schema) <nil>,
     Not: (*spec.Schema)(<nil>),
     Properties: (map[string]spec.Schema) (len=1) {
      (string) (len=7) "message": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      }
     },
     AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
     PatternProperties: (map[string]spec.Schema) <nil>,
     Dependencies: (spec.Dependencies) <nil>,
     AdditionalItems: (*spec.SchemaOrBool)(<nil>),
     Definitions: (spec.Definitions) <nil>
    },
    SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
     Discriminator: (string) "",
     ReadOnly: (bool) false,
     XML: (*spec.XMLObject)(<nil>),
     ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
     Example: (interface {}) <nil>
    },
    ExtraProps: (map[string]interface {}) <nil>
   },
   (string) (len=11) "Unathorized": (spec.Schema) {
    VendorExtensible: (spec.VendorExtensible) {
     Extensions: (spec.Extensions) <nil>
    },
    SchemaProps: (spec.SchemaProps) {
     ID: (string) "",
     Ref: (spec.Ref) ,
     Schema: (spec.SchemaURL) "",
     Description: (string) "",
     Type: (spec.StringOrArray) (len=1 cap=1) {
      (string) (len=6) "object"
     },
     Format: (string) "",
     Title: (string) "",
     Default: (interface {}) <nil>,
     Maximum: (*float64)(<nil>),
     ExclusiveMaximum: (bool) false,
     Minimum: (*float64)(<nil>),
     ExclusiveMinimum: (bool) false,
     MaxLength: (*int64)(<nil>),
     MinLength: (*int64)(<nil>),
     Pattern: (string) "",
     MaxItems: (*int64)(<nil>),
     MinItems: (*int64)(<nil>),
     UniqueItems: (bool) false,
     MultipleOf: (*float64)(<nil>),
     Enum: ([]interface {}) <nil>,
     MaxProperties: (*int64)(<nil>),
     MinProperties: (*int64)(<nil>),
     Required: ([]string) <nil>,
     Items: (*spec.SchemaOrArray)(<nil>),
     AllOf: ([]spec.Schema) <nil>,
     OneOf: ([]spec.Schema) <nil>,
     AnyOf: ([]spec.Schema) <nil>,
     Not: (*spec.Schema)(<nil>),
     Properties: (map[string]spec.Schema) (len=1) {
      (string) (len=7) "message": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      }
     },
     AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
     PatternProperties: (map[string]spec.Schema) <nil>,
     Dependencies: (spec.Dependencies) <nil>,
     AdditionalItems: (*spec.SchemaOrBool)(<nil>),
     Definitions: (spec.Definitions) <nil>
    },
    SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
     Discriminator: (string) "",
     ReadOnly: (bool) false,
     XML: (*spec.XMLObject)(<nil>),
     ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
     Example: (interface {}) <nil>
    },
    ExtraProps: (map[string]interface {}) <nil>
   }
  },
  Parameters: (map[string]spec.Parameter) <nil>,
  Responses: (map[string]spec.Response) (len=2) {
   (string) (len=10) "BadRequest": (spec.Response) {
    Refable: (spec.Refable) {
     Ref: (spec.Ref) 
    },
    ResponseProps: (spec.ResponseProps) {
     Description: (string) (len=11) "Bad Request",
     Schema: (*spec.Schema)(0xc000439b00)({
      VendorExtensible: (spec.VendorExtensible) {
       Extensions: (spec.Extensions) <nil>
      },
      SchemaProps: (spec.SchemaProps) {
       ID: (string) "",
       Ref: (spec.Ref) #/definitions/BadRequest,
       Schema: (spec.SchemaURL) "",
       Description: (string) "",
       Type: (spec.StringOrArray) <nil>,
       Format: (string) "",
       Title: (string) "",
       Default: (interface {}) <nil>,
       Maximum: (*float64)(<nil>),
       ExclusiveMaximum: (bool) false,
       Minimum: (*float64)(<nil>),
       ExclusiveMinimum: (bool) false,
       MaxLength: (*int64)(<nil>),
       MinLength: (*int64)(<nil>),
       Pattern: (string) "",
       MaxItems: (*int64)(<nil>),
       MinItems: (*int64)(<nil>),
       UniqueItems: (bool) false,
       MultipleOf: (*float64)(<nil>),
       Enum: ([]interface {}) <nil>,
       MaxProperties: (*int64)(<nil>),
       MinProperties: (*int64)(<nil>),
       Required: ([]string) <nil>,
       Items: (*spec.SchemaOrArray)(<nil>),
       AllOf: ([]spec.Schema) <nil>,
       OneOf: ([]spec.Schema) <nil>,
       AnyOf: ([]spec.Schema) <nil>,
       Not: (*spec.Schema)(<nil>),
       Properties: (map[string]spec.Schema) <nil>,
       AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
       PatternProperties: (map[string]spec.Schema) <nil>,
       Dependencies: (spec.Dependencies) <nil>,
       AdditionalItems: (*spec.SchemaOrBool)(<nil>),
       Definitions: (spec.Definitions) <nil>
      },
      SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
       Discriminator: (string) "",
       ReadOnly: (bool) false,
       XML: (*spec.XMLObject)(<nil>),
       ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
       Example: (interface {}) <nil>
      },
      ExtraProps: (map[string]interface {}) <nil>
     }),
     Headers: (map[string]spec.Header) <nil>,
     Examples: (map[string]interface {}) <nil>
    },
    VendorExtensible: (spec.VendorExtensible) {
     Extensions: (spec.Extensions) <nil>
    }
   },
   (string) (len=13) "InternalError": (spec.Response) {
    Refable: (spec.Refable) {
     Ref: (spec.Ref) 
    },
    ResponseProps: (spec.ResponseProps) {
     Description: (string) (len=14) "Internal Error",
     Schema: (*spec.Schema)(0xc0004b2240)({
      VendorExtensible: (spec.VendorExtensible) {
       Extensions: (spec.Extensions) <nil>
      },
      SchemaProps: (spec.SchemaProps) {
       ID: (string) "",
       Ref: (spec.Ref) #/definitions/InternalError,
       Schema: (spec.SchemaURL) "",
       Description: (string) "",
       Type: (spec.StringOrArray) <nil>,
       Format: (string) "",
       Title: (string) "",
       Default: (interface {}) <nil>,
       Maximum: (*float64)(<nil>),
       ExclusiveMaximum: (bool) false,
       Minimum: (*float64)(<nil>),
       ExclusiveMinimum: (bool) false,
       MaxLength: (*int64)(<nil>),
       MinLength: (*int64)(<nil>),
       Pattern: (string) "",
       MaxItems: (*int64)(<nil>),
       MinItems: (*int64)(<nil>),
       UniqueItems: (bool) false,
       MultipleOf: (*float64)(<nil>),
       Enum: ([]interface {}) <nil>,
       MaxProperties: (*int64)(<nil>),
       MinProperties: (*int64)(<nil>),
       Required: ([]string) <nil>,
       Items: (*spec.SchemaOrArray)(<nil>),
       AllOf: ([]spec.Schema) <nil>,
       OneOf: ([]spec.Schema) <nil>,
       AnyOf: ([]spec.Schema) <nil>,
       Not: (*spec.Schema)(<nil>),
       Properties: (map[string]spec.Schema) <nil>,
       AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
       PatternProperties: (map[string]spec.Schema) <nil>,
       Dependencies: (spec.Dependencies) <nil>,
       AdditionalItems: (*spec.SchemaOrBool)(<nil>),
       Definitions: (spec.Definitions) <nil>
      },
      SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
       Discriminator: (string) "",
       ReadOnly: (bool) false,
       XML: (*spec.XMLObject)(<nil>),
       ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
       Example: (interface {}) <nil>
      },
      ExtraProps: (map[string]interface {}) <nil>
     }),
     Headers: (map[string]spec.Header) <nil>,
     Examples: (map[string]interface {}) <nil>
    },
    VendorExtensible: (spec.VendorExtensible) {
     Extensions: (spec.Extensions) <nil>
    }
   }
  },
  SecurityDefinitions: (spec.SecurityDefinitions) <nil>,
  Security: ([]map[string][]string) <nil>,
  Tags: ([]spec.Tag) <nil>,
  ExternalDocs: (*spec.ExternalDocumentation)(<nil>)
 }
}
cd /Users/adamvictor/go/src/github.com/Clever/wag/samples/gen-js && jsdoc2md index.js types.js > ./README.md
go generate github.com/Clever/wag/samples/gen-go...
./bin/wag -file samples/deprecated.yml -go-package github.com/Clever/wag/samples/gen-go-deprecated -js-path /Users/adamvictor/go/src/github.com/Clever/wag/samples/gen-js-deprecated
(spec.Swagger) {
 VendorExtensible: (spec.VendorExtensible) {
  Extensions: (spec.Extensions) <nil>
 },
 SwaggerProps: (spec.SwaggerProps) {
  ID: (string) "",
  Consumes: ([]string) (len=1 cap=4) {
   (string) (len=16) "application/json"
  },
  Produces: ([]string) (len=1 cap=4) {
   (string) (len=16) "application/json"
  },
  Schemes: ([]string) (len=1 cap=4) {
   (string) (len=4) "http"
  },
  Swagger: (string) (len=3) "2.0",
  Info: (*spec.Info)(0xc000839260)({
   VendorExtensible: (spec.VendorExtensible) {
    Extensions: (spec.Extensions) (len=1) {
     (string) (len=13) "x-npm-package": (string) (len=12) "swagger-test"
    }
   },
   InfoProps: (spec.InfoProps) {
    Description: (string) (len=23) "Testing Swagger Codegen",
    Title: (string) (len=12) "swagger-test",
    TermsOfService: (string) "",
    Contact: (*spec.ContactInfo)(<nil>),
    License: (*spec.License)(<nil>),
    Version: (string) (len=5) "0.1.0"
   }
  }),
  Host: (string) "",
  BasePath: (string) (len=3) "/v1",
  Paths: (*spec.Paths)(0xc000844510)({
   VendorExtensible: (spec.VendorExtensible) {
    Extensions: (spec.Extensions) <nil>
   },
   Paths: (map[string]spec.PathItem) (len=1) {
    (string) (len=7) "/health": (spec.PathItem) {
     Refable: (spec.Refable) {
      Ref: (spec.Ref) 
     },
     VendorExtensible: (spec.VendorExtensible) {
      Extensions: (spec.Extensions) <nil>
     },
     PathItemProps: (spec.PathItemProps) {
      Get: (*spec.Operation)(0xc0000fc460)({
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       OperationProps: (spec.OperationProps) {
        Description: (string) "",
        Consumes: ([]string) <nil>,
        Produces: ([]string) <nil>,
        Schemes: ([]string) <nil>,
        Tags: ([]string) <nil>,
        Summary: (string) "",
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        ID: (string) (len=6) "health",
        Deprecated: (bool) true,
        Security: ([]map[string][]string) <nil>,
        Parameters: ([]spec.Parameter) (len=1 cap=4) {
         (spec.Parameter) {
          Refable: (spec.Refable) {
           Ref: (spec.Ref) 
          },
          CommonValidations: (spec.CommonValidations) {
           Maximum: (*float64)(<nil>),
           ExclusiveMaximum: (bool) false,
           Minimum: (*float64)(<nil>),
           ExclusiveMinimum: (bool) false,
           MaxLength: (*int64)(<nil>),
           MinLength: (*int64)(<nil>),
           Pattern: (string) "",
           MaxItems: (*int64)(<nil>),
           MinItems: (*int64)(<nil>),
           UniqueItems: (bool) false,
           MultipleOf: (*float64)(<nil>),
           Enum: ([]interface {}) <nil>
          },
          SimpleSchema: (spec.SimpleSchema) {
           Type: (string) (len=7) "integer",
           Format: (string) "",
           Items: (*spec.Items)(<nil>),
           CollectionFormat: (string) "",
           Default: (interface {}) <nil>,
           Example: (interface {}) <nil>
          },
          VendorExtensible: (spec.VendorExtensible) {
           Extensions: (spec.Extensions) <nil>
          },
          ParamProps: (spec.ParamProps) {
           Description: (string) "",
           Name: (string) (len=7) "section",
           In: (string) (len=5) "query",
           Required: (bool) true,
           Schema: (*spec.Schema)(<nil>),
           AllowEmptyValue: (bool) false
          }
         }
        },
        Responses: (*spec.Responses)(0xc0008464a0)({
         VendorExtensible: (spec.VendorExtensible) {
          Extensions: (spec.Extensions) <nil>
         },
         ResponsesProps: (spec.ResponsesProps) {
          Default: (*spec.Response)(<nil>),
          StatusCodeResponses: (map[int]spec.Response) (len=2) {
           (int) 200: (spec.Response) {
            Refable: (spec.Refable) {
             Ref: (spec.Ref) 
            },
            ResponseProps: (spec.ResponseProps) {
             Description: (string) (len=11) "OK response",
             Schema: (*spec.Schema)(<nil>),
             Headers: (map[string]spec.Header) <nil>,
             Examples: (map[string]interface {}) <nil>
            },
            VendorExtensible: (spec.VendorExtensible) {
             Extensions: (spec.Extensions) <nil>
            }
           },
           (int) 404: (spec.Response) {
            Refable: (spec.Refable) {
             Ref: (spec.Ref) 
            },
            ResponseProps: (spec.ResponseProps) {
             Description: (string) (len=11) "OK response",
             Schema: (*spec.Schema)(0xc0004046c0)({
              VendorExtensible: (spec.VendorExtensible) {
               Extensions: (spec.Extensions) <nil>
              },
              SchemaProps: (spec.SchemaProps) {
               ID: (string) "",
               Ref: (spec.Ref) #/definitions/NotFound,
               Schema: (spec.SchemaURL) "",
               Description: (string) "",
               Type: (spec.StringOrArray) <nil>,
               Format: (string) "",
               Title: (string) "",
               Default: (interface {}) <nil>,
               Maximum: (*float64)(<nil>),
               ExclusiveMaximum: (bool) false,
               Minimum: (*float64)(<nil>),
               ExclusiveMinimum: (bool) false,
               MaxLength: (*int64)(<nil>),
               MinLength: (*int64)(<nil>),
               Pattern: (string) "",
               MaxItems: (*int64)(<nil>),
               MinItems: (*int64)(<nil>),
               UniqueItems: (bool) false,
               MultipleOf: (*float64)(<nil>),
               Enum: ([]interface {}) <nil>,
               MaxProperties: (*int64)(<nil>),
               MinProperties: (*int64)(<nil>),
               Required: ([]string) <nil>,
               Items: (*spec.SchemaOrArray)(<nil>),
               AllOf: ([]spec.Schema) <nil>,
               OneOf: ([]spec.Schema) <nil>,
               AnyOf: ([]spec.Schema) <nil>,
               Not: (*spec.Schema)(<nil>),
               Properties: (map[string]spec.Schema) <nil>,
               AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
               PatternProperties: (map[string]spec.Schema) <nil>,
               Dependencies: (spec.Dependencies) <nil>,
               AdditionalItems: (*spec.SchemaOrBool)(<nil>),
               Definitions: (spec.Definitions) <nil>
              },
              SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
               Discriminator: (string) "",
               ReadOnly: (bool) false,
               XML: (*spec.XMLObject)(<nil>),
               ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
               Example: (interface {}) <nil>
              },
              ExtraProps: (map[string]interface {}) <nil>
             }),
             Headers: (map[string]spec.Header) <nil>,
             Examples: (map[string]interface {}) <nil>
            },
            VendorExtensible: (spec.VendorExtensible) {
             Extensions: (spec.Extensions) <nil>
            }
           }
          }
         }
        })
       }
      }),
      Put: (*spec.Operation)(<nil>),
      Post: (*spec.Operation)(<nil>),
      Delete: (*spec.Operation)(<nil>),
      Options: (*spec.Operation)(<nil>),
      Head: (*spec.Operation)(<nil>),
      Patch: (*spec.Operation)(<nil>),
      Parameters: ([]spec.Parameter) <nil>
     }
    }
   }
  }),
  Definitions: (spec.Definitions) (len=3) {
   (string) (len=10) "BadRequest": (spec.Schema) {
    VendorExtensible: (spec.VendorExtensible) {
     Extensions: (spec.Extensions) <nil>
    },
    SchemaProps: (spec.SchemaProps) {
     ID: (string) "",
     Ref: (spec.Ref) ,
     Schema: (spec.SchemaURL) "",
     Description: (string) "",
     Type: (spec.StringOrArray) (len=1 cap=1) {
      (string) (len=6) "object"
     },
     Format: (string) "",
     Title: (string) "",
     Default: (interface {}) <nil>,
     Maximum: (*float64)(<nil>),
     ExclusiveMaximum: (bool) false,
     Minimum: (*float64)(<nil>),
     ExclusiveMinimum: (bool) false,
     MaxLength: (*int64)(<nil>),
     MinLength: (*int64)(<nil>),
     Pattern: (string) "",
     MaxItems: (*int64)(<nil>),
     MinItems: (*int64)(<nil>),
     UniqueItems: (bool) false,
     MultipleOf: (*float64)(<nil>),
     Enum: ([]interface {}) <nil>,
     MaxProperties: (*int64)(<nil>),
     MinProperties: (*int64)(<nil>),
     Required: ([]string) <nil>,
     Items: (*spec.SchemaOrArray)(<nil>),
     AllOf: ([]spec.Schema) <nil>,
     OneOf: ([]spec.Schema) <nil>,
     AnyOf: ([]spec.Schema) <nil>,
     Not: (*spec.Schema)(<nil>),
     Properties: (map[string]spec.Schema) (len=1) {
      (string) (len=7) "message": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      }
     },
     AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
     PatternProperties: (map[string]spec.Schema) <nil>,
     Dependencies: (spec.Dependencies) <nil>,
     AdditionalItems: (*spec.SchemaOrBool)(<nil>),
     Definitions: (spec.Definitions) <nil>
    },
    SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
     Discriminator: (string) "",
     ReadOnly: (bool) false,
     XML: (*spec.XMLObject)(<nil>),
     ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
     Example: (interface {}) <nil>
    },
    ExtraProps: (map[string]interface {}) <nil>
   },
   (string) (len=13) "InternalError": (spec.Schema) {
    VendorExtensible: (spec.VendorExtensible) {
     Extensions: (spec.Extensions) <nil>
    },
    SchemaProps: (spec.SchemaProps) {
     ID: (string) "",
     Ref: (spec.Ref) ,
     Schema: (spec.SchemaURL) "",
     Description: (string) "",
     Type: (spec.StringOrArray) (len=1 cap=1) {
      (string) (len=6) "object"
     },
     Format: (string) "",
     Title: (string) "",
     Default: (interface {}) <nil>,
     Maximum: (*float64)(<nil>),
     ExclusiveMaximum: (bool) false,
     Minimum: (*float64)(<nil>),
     ExclusiveMinimum: (bool) false,
     MaxLength: (*int64)(<nil>),
     MinLength: (*int64)(<nil>),
     Pattern: (string) "",
     MaxItems: (*int64)(<nil>),
     MinItems: (*int64)(<nil>),
     UniqueItems: (bool) false,
     MultipleOf: (*float64)(<nil>),
     Enum: ([]interface {}) <nil>,
     MaxProperties: (*int64)(<nil>),
     MinProperties: (*int64)(<nil>),
     Required: ([]string) <nil>,
     Items: (*spec.SchemaOrArray)(<nil>),
     AllOf: ([]spec.Schema) <nil>,
     OneOf: ([]spec.Schema) <nil>,
     AnyOf: ([]spec.Schema) <nil>,
     Not: (*spec.Schema)(<nil>),
     Properties: (map[string]spec.Schema) (len=1) {
      (string) (len=7) "message": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      }
     },
     AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
     PatternProperties: (map[string]spec.Schema) <nil>,
     Dependencies: (spec.Dependencies) <nil>,
     AdditionalItems: (*spec.SchemaOrBool)(<nil>),
     Definitions: (spec.Definitions) <nil>
    },
    SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
     Discriminator: (string) "",
     ReadOnly: (bool) false,
     XML: (*spec.XMLObject)(<nil>),
     ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
     Example: (interface {}) <nil>
    },
    ExtraProps: (map[string]interface {}) <nil>
   },
   (string) (len=8) "NotFound": (spec.Schema) {
    VendorExtensible: (spec.VendorExtensible) {
     Extensions: (spec.Extensions) <nil>
    },
    SchemaProps: (spec.SchemaProps) {
     ID: (string) "",
     Ref: (spec.Ref) ,
     Schema: (spec.SchemaURL) "",
     Description: (string) "",
     Type: (spec.StringOrArray) (len=1 cap=1) {
      (string) (len=6) "object"
     },
     Format: (string) "",
     Title: (string) "",
     Default: (interface {}) <nil>,
     Maximum: (*float64)(<nil>),
     ExclusiveMaximum: (bool) false,
     Minimum: (*float64)(<nil>),
     ExclusiveMinimum: (bool) false,
     MaxLength: (*int64)(<nil>),
     MinLength: (*int64)(<nil>),
     Pattern: (string) "",
     MaxItems: (*int64)(<nil>),
     MinItems: (*int64)(<nil>),
     UniqueItems: (bool) false,
     MultipleOf: (*float64)(<nil>),
     Enum: ([]interface {}) <nil>,
     MaxProperties: (*int64)(<nil>),
     MinProperties: (*int64)(<nil>),
     Required: ([]string) <nil>,
     Items: (*spec.SchemaOrArray)(<nil>),
     AllOf: ([]spec.Schema) <nil>,
     OneOf: ([]spec.Schema) <nil>,
     AnyOf: ([]spec.Schema) <nil>,
     Not: (*spec.Schema)(<nil>),
     Properties: (map[string]spec.Schema) (len=1) {
      (string) (len=7) "message": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      }
     },
     AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
     PatternProperties: (map[string]spec.Schema) <nil>,
     Dependencies: (spec.Dependencies) <nil>,
     AdditionalItems: (*spec.SchemaOrBool)(<nil>),
     Definitions: (spec.Definitions) <nil>
    },
    SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
     Discriminator: (string) "",
     ReadOnly: (bool) false,
     XML: (*spec.XMLObject)(<nil>),
     ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
     Example: (interface {}) <nil>
    },
    ExtraProps: (map[string]interface {}) <nil>
   }
  },
  Parameters: (map[string]spec.Parameter) <nil>,
  Responses: (map[string]spec.Response) (len=2) {
   (string) (len=10) "BadRequest": (spec.Response) {
    Refable: (spec.Refable) {
     Ref: (spec.Ref) 
    },
    ResponseProps: (spec.ResponseProps) {
     Description: (string) (len=11) "Bad Request",
     Schema: (*spec.Schema)(0xc0004186c0)({
      VendorExtensible: (spec.VendorExtensible) {
       Extensions: (spec.Extensions) <nil>
      },
      SchemaProps: (spec.SchemaProps) {
       ID: (string) "",
       Ref: (spec.Ref) #/definitions/BadRequest,
       Schema: (spec.SchemaURL) "",
       Description: (string) "",
       Type: (spec.StringOrArray) <nil>,
       Format: (string) "",
       Title: (string) "",
       Default: (interface {}) <nil>,
       Maximum: (*float64)(<nil>),
       ExclusiveMaximum: (bool) false,
       Minimum: (*float64)(<nil>),
       ExclusiveMinimum: (bool) false,
       MaxLength: (*int64)(<nil>),
       MinLength: (*int64)(<nil>),
       Pattern: (string) "",
       MaxItems: (*int64)(<nil>),
       MinItems: (*int64)(<nil>),
       UniqueItems: (bool) false,
       MultipleOf: (*float64)(<nil>),
       Enum: ([]interface {}) <nil>,
       MaxProperties: (*int64)(<nil>),
       MinProperties: (*int64)(<nil>),
       Required: ([]string) <nil>,
       Items: (*spec.SchemaOrArray)(<nil>),
       AllOf: ([]spec.Schema) <nil>,
       OneOf: ([]spec.Schema) <nil>,
       AnyOf: ([]spec.Schema) <nil>,
       Not: (*spec.Schema)(<nil>),
       Properties: (map[string]spec.Schema) <nil>,
       AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
       PatternProperties: (map[string]spec.Schema) <nil>,
       Dependencies: (spec.Dependencies) <nil>,
       AdditionalItems: (*spec.SchemaOrBool)(<nil>),
       Definitions: (spec.Definitions) <nil>
      },
      SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
       Discriminator: (string) "",
       ReadOnly: (bool) false,
       XML: (*spec.XMLObject)(<nil>),
       ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
       Example: (interface {}) <nil>
      },
      ExtraProps: (map[string]interface {}) <nil>
     }),
     Headers: (map[string]spec.Header) <nil>,
     Examples: (map[string]interface {}) <nil>
    },
    VendorExtensible: (spec.VendorExtensible) {
     Extensions: (spec.Extensions) <nil>
    }
   },
   (string) (len=13) "InternalError": (spec.Response) {
    Refable: (spec.Refable) {
     Ref: (spec.Ref) 
    },
    ResponseProps: (spec.ResponseProps) {
     Description: (string) (len=14) "Internal Error",
     Schema: (*spec.Schema)(0xc000418fc0)({
      VendorExtensible: (spec.VendorExtensible) {
       Extensions: (spec.Extensions) <nil>
      },
      SchemaProps: (spec.SchemaProps) {
       ID: (string) "",
       Ref: (spec.Ref) #/definitions/InternalError,
       Schema: (spec.SchemaURL) "",
       Description: (string) "",
       Type: (spec.StringOrArray) <nil>,
       Format: (string) "",
       Title: (string) "",
       Default: (interface {}) <nil>,
       Maximum: (*float64)(<nil>),
       ExclusiveMaximum: (bool) false,
       Minimum: (*float64)(<nil>),
       ExclusiveMinimum: (bool) false,
       MaxLength: (*int64)(<nil>),
       MinLength: (*int64)(<nil>),
       Pattern: (string) "",
       MaxItems: (*int64)(<nil>),
       MinItems: (*int64)(<nil>),
       UniqueItems: (bool) false,
       MultipleOf: (*float64)(<nil>),
       Enum: ([]interface {}) <nil>,
       MaxProperties: (*int64)(<nil>),
       MinProperties: (*int64)(<nil>),
       Required: ([]string) <nil>,
       Items: (*spec.SchemaOrArray)(<nil>),
       AllOf: ([]spec.Schema) <nil>,
       OneOf: ([]spec.Schema) <nil>,
       AnyOf: ([]spec.Schema) <nil>,
       Not: (*spec.Schema)(<nil>),
       Properties: (map[string]spec.Schema) <nil>,
       AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
       PatternProperties: (map[string]spec.Schema) <nil>,
       Dependencies: (spec.Dependencies) <nil>,
       AdditionalItems: (*spec.SchemaOrBool)(<nil>),
       Definitions: (spec.Definitions) <nil>
      },
      SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
       Discriminator: (string) "",
       ReadOnly: (bool) false,
       XML: (*spec.XMLObject)(<nil>),
       ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
       Example: (interface {}) <nil>
      },
      ExtraProps: (map[string]interface {}) <nil>
     }),
     Headers: (map[string]spec.Header) <nil>,
     Examples: (map[string]interface {}) <nil>
    },
    VendorExtensible: (spec.VendorExtensible) {
     Extensions: (spec.Extensions) <nil>
    }
   }
  },
  SecurityDefinitions: (spec.SecurityDefinitions) <nil>,
  Security: ([]map[string][]string) <nil>,
  Tags: ([]spec.Tag) <nil>,
  ExternalDocs: (*spec.ExternalDocumentation)(<nil>)
 }
}
cd /Users/adamvictor/go/src/github.com/Clever/wag/samples/gen-js-deprecated && jsdoc2md index.js types.js > ./README.md
go generate github.com/Clever/wag/samples/gen-go-deprecated...
./bin/wag -file samples/errors.yml -go-package github.com/Clever/wag/samples/gen-go-errors -js-path /Users/adamvictor/go/src/github.com/Clever/wag/samples/gen-js-errors
(spec.Swagger) {
 VendorExtensible: (spec.VendorExtensible) {
  Extensions: (spec.Extensions) <nil>
 },
 SwaggerProps: (spec.SwaggerProps) {
  ID: (string) "",
  Consumes: ([]string) (len=1 cap=4) {
   (string) (len=16) "application/json"
  },
  Produces: ([]string) (len=1 cap=4) {
   (string) (len=16) "application/json"
  },
  Schemes: ([]string) (len=1 cap=4) {
   (string) (len=4) "http"
  },
  Swagger: (string) (len=3) "2.0",
  Info: (*spec.Info)(0xc0001fbc80)({
   VendorExtensible: (spec.VendorExtensible) {
    Extensions: (spec.Extensions) (len=1) {
     (string) (len=13) "x-npm-package": (string) (len=12) "swagger-test"
    }
   },
   InfoProps: (spec.InfoProps) {
    Description: (string) (len=23) "Testing Swagger Codegen",
    Title: (string) (len=12) "swagger-test",
    TermsOfService: (string) "",
    Contact: (*spec.ContactInfo)(<nil>),
    License: (*spec.License)(<nil>),
    Version: (string) (len=5) "0.1.0"
   }
  }),
  Host: (string) "",
  BasePath: (string) (len=3) "/v1",
  Paths: (*spec.Paths)(0xc0002e3260)({
   VendorExtensible: (spec.VendorExtensible) {
    Extensions: (spec.Extensions) <nil>
   },
   Paths: (map[string]spec.PathItem) (len=1) {
    (string) (len=11) "/books/{id}": (spec.PathItem) {
     Refable: (spec.Refable) {
      Ref: (spec.Ref) 
     },
     VendorExtensible: (spec.VendorExtensible) {
      Extensions: (spec.Extensions) <nil>
     },
     PathItemProps: (spec.PathItemProps) {
      Get: (*spec.Operation)(0xc0000e21c0)({
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       OperationProps: (spec.OperationProps) {
        Description: (string) "",
        Consumes: ([]string) <nil>,
        Produces: ([]string) <nil>,
        Schemes: ([]string) <nil>,
        Tags: ([]string) <nil>,
        Summary: (string) "",
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        ID: (string) (len=7) "getBook",
        Deprecated: (bool) false,
        Security: ([]map[string][]string) <nil>,
        Parameters: ([]spec.Parameter) (len=1 cap=4) {
         (spec.Parameter) {
          Refable: (spec.Refable) {
           Ref: (spec.Ref) 
          },
          CommonValidations: (spec.CommonValidations) {
           Maximum: (*float64)(0xc0000299d8)(4000),
           ExclusiveMaximum: (bool) false,
           Minimum: (*float64)(<nil>),
           ExclusiveMinimum: (bool) false,
           MaxLength: (*int64)(<nil>),
           MinLength: (*int64)(<nil>),
           Pattern: (string) "",
           MaxItems: (*int64)(<nil>),
           MinItems: (*int64)(<nil>),
           UniqueItems: (bool) false,
           MultipleOf: (*float64)(<nil>),
           Enum: ([]interface {}) <nil>
          },
          SimpleSchema: (spec.SimpleSchema) {
           Type: (string) (len=7) "integer",
           Format: (string) "",
           Items: (*spec.Items)(<nil>),
           CollectionFormat: (string) "",
           Default: (interface {}) <nil>,
           Example: (interface {}) <nil>
          },
          VendorExtensible: (spec.VendorExtensible) {
           Extensions: (spec.Extensions) <nil>
          },
          ParamProps: (spec.ParamProps) {
           Description: (string) "",
           Name: (string) (len=2) "id",
           In: (string) (len=4) "path",
           Required: (bool) true,
           Schema: (*spec.Schema)(<nil>),
           AllowEmptyValue: (bool) false
          }
         }
        },
        Responses: (*spec.Responses)(0xc0003c6840)({
         VendorExtensible: (spec.VendorExtensible) {
          Extensions: (spec.Extensions) <nil>
         },
         ResponsesProps: (spec.ResponsesProps) {
          Default: (*spec.Response)(<nil>),
          StatusCodeResponses: (map[int]spec.Response) (len=4) {
           (int) 200: (spec.Response) {
            Refable: (spec.Refable) {
             Ref: (spec.Ref) 
            },
            ResponseProps: (spec.ResponseProps) {
             Description: (string) (len=11) "OK response",
             Schema: (*spec.Schema)(<nil>),
             Headers: (map[string]spec.Header) <nil>,
             Examples: (map[string]interface {}) <nil>
            },
            VendorExtensible: (spec.VendorExtensible) {
             Extensions: (spec.Extensions) <nil>
            }
           },
           (int) 400: (spec.Response) {
            Refable: (spec.Refable) {
             Ref: (spec.Ref) 
            },
            ResponseProps: (spec.ResponseProps) {
             Description: (string) (len=14) "Extended error",
             Schema: (*spec.Schema)(0xc0004ca240)({
              VendorExtensible: (spec.VendorExtensible) {
               Extensions: (spec.Extensions) <nil>
              },
              SchemaProps: (spec.SchemaProps) {
               ID: (string) "",
               Ref: (spec.Ref) #/definitions/ExtendedError,
               Schema: (spec.SchemaURL) "",
               Description: (string) "",
               Type: (spec.StringOrArray) <nil>,
               Format: (string) "",
               Title: (string) "",
               Default: (interface {}) <nil>,
               Maximum: (*float64)(<nil>),
               ExclusiveMaximum: (bool) false,
               Minimum: (*float64)(<nil>),
               ExclusiveMinimum: (bool) false,
               MaxLength: (*int64)(<nil>),
               MinLength: (*int64)(<nil>),
               Pattern: (string) "",
               MaxItems: (*int64)(<nil>),
               MinItems: (*int64)(<nil>),
               UniqueItems: (bool) false,
               MultipleOf: (*float64)(<nil>),
               Enum: ([]interface {}) <nil>,
               MaxProperties: (*int64)(<nil>),
               MinProperties: (*int64)(<nil>),
               Required: ([]string) <nil>,
               Items: (*spec.SchemaOrArray)(<nil>),
               AllOf: ([]spec.Schema) <nil>,
               OneOf: ([]spec.Schema) <nil>,
               AnyOf: ([]spec.Schema) <nil>,
               Not: (*spec.Schema)(<nil>),
               Properties: (map[string]spec.Schema) <nil>,
               AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
               PatternProperties: (map[string]spec.Schema) <nil>,
               Dependencies: (spec.Dependencies) <nil>,
               AdditionalItems: (*spec.SchemaOrBool)(<nil>),
               Definitions: (spec.Definitions) <nil>
              },
              SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
               Discriminator: (string) "",
               ReadOnly: (bool) false,
               XML: (*spec.XMLObject)(<nil>),
               ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
               Example: (interface {}) <nil>
              },
              ExtraProps: (map[string]interface {}) <nil>
             }),
             Headers: (map[string]spec.Header) <nil>,
             Examples: (map[string]interface {}) <nil>
            },
            VendorExtensible: (spec.VendorExtensible) {
             Extensions: (spec.Extensions) <nil>
            }
           },
           (int) 404: (spec.Response) {
            Refable: (spec.Refable) {
             Ref: (spec.Ref) #/responses/NotFound
            },
            ResponseProps: (spec.ResponseProps) {
             Description: (string) "",
             Schema: (*spec.Schema)(<nil>),
             Headers: (map[string]spec.Header) <nil>,
             Examples: (map[string]interface {}) <nil>
            },
            VendorExtensible: (spec.VendorExtensible) {
             Extensions: (spec.Extensions) <nil>
            }
           },
           (int) 500: (spec.Response) {
            Refable: (spec.Refable) {
             Ref: (spec.Ref) #/responses/InternalError
            },
            ResponseProps: (spec.ResponseProps) {
             Description: (string) "",
             Schema: (*spec.Schema)(<nil>),
             Headers: (map[string]spec.Header) <nil>,
             Examples: (map[string]interface {}) <nil>
            },
            VendorExtensible: (spec.VendorExtensible) {
             Extensions: (spec.Extensions) <nil>
            }
           }
          }
         }
        })
       }
      }),
      Put: (*spec.Operation)(<nil>),
      Post: (*spec.Operation)(<nil>),
      Delete: (*spec.Operation)(<nil>),
      Options: (*spec.Operation)(<nil>),
      Head: (*spec.Operation)(<nil>),
      Patch: (*spec.Operation)(<nil>),
      Parameters: ([]spec.Parameter) <nil>
     }
    }
   }
  }),
  Definitions: (spec.Definitions) (len=4) {
   (string) (len=13) "InternalError": (spec.Schema) {
    VendorExtensible: (spec.VendorExtensible) {
     Extensions: (spec.Extensions) <nil>
    },
    SchemaProps: (spec.SchemaProps) {
     ID: (string) "",
     Ref: (spec.Ref) ,
     Schema: (spec.SchemaURL) "",
     Description: (string) "",
     Type: (spec.StringOrArray) (len=1 cap=1) {
      (string) (len=6) "object"
     },
     Format: (string) "",
     Title: (string) "",
     Default: (interface {}) <nil>,
     Maximum: (*float64)(<nil>),
     ExclusiveMaximum: (bool) false,
     Minimum: (*float64)(<nil>),
     ExclusiveMinimum: (bool) false,
     MaxLength: (*int64)(<nil>),
     MinLength: (*int64)(<nil>),
     Pattern: (string) "",
     MaxItems: (*int64)(<nil>),
     MinItems: (*int64)(<nil>),
     UniqueItems: (bool) false,
     MultipleOf: (*float64)(<nil>),
     Enum: ([]interface {}) <nil>,
     MaxProperties: (*int64)(<nil>),
     MinProperties: (*int64)(<nil>),
     Required: ([]string) <nil>,
     Items: (*spec.SchemaOrArray)(<nil>),
     AllOf: ([]spec.Schema) <nil>,
     OneOf: ([]spec.Schema) <nil>,
     AnyOf: ([]spec.Schema) <nil>,
     Not: (*spec.Schema)(<nil>),
     Properties: (map[string]spec.Schema) (len=2) {
      (string) (len=7) "message": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=4) "code": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=7) "integer"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      }
     },
     AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
     PatternProperties: (map[string]spec.Schema) <nil>,
     Dependencies: (spec.Dependencies) <nil>,
     AdditionalItems: (*spec.SchemaOrBool)(<nil>),
     Definitions: (spec.Definitions) <nil>
    },
    SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
     Discriminator: (string) "",
     ReadOnly: (bool) false,
     XML: (*spec.XMLObject)(<nil>),
     ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
     Example: (interface {}) <nil>
    },
    ExtraProps: (map[string]interface {}) <nil>
   },
   (string) (len=13) "ExtendedError": (spec.Schema) {
    VendorExtensible: (spec.VendorExtensible) {
     Extensions: (spec.Extensions) <nil>
    },
    SchemaProps: (spec.SchemaProps) {
     ID: (string) "",
     Ref: (spec.Ref) ,
     Schema: (spec.SchemaURL) "",
     Description: (string) "",
     Type: (spec.StringOrArray) (len=1 cap=1) {
      (string) (len=6) "object"
     },
     Format: (string) "",
     Title: (string) "",
     Default: (interface {}) <nil>,
     Maximum: (*float64)(<nil>),
     ExclusiveMaximum: (bool) false,
     Minimum: (*float64)(<nil>),
     ExclusiveMinimum: (bool) false,
     MaxLength: (*int64)(<nil>),
     MinLength: (*int64)(<nil>),
     Pattern: (string) "",
     MaxItems: (*int64)(<nil>),
     MinItems: (*int64)(<nil>),
     UniqueItems: (bool) false,
     MultipleOf: (*float64)(<nil>),
     Enum: ([]interface {}) <nil>,
     MaxProperties: (*int64)(<nil>),
     MinProperties: (*int64)(<nil>),
     Required: ([]string) <nil>,
     Items: (*spec.SchemaOrArray)(<nil>),
     AllOf: ([]spec.Schema) <nil>,
     OneOf: ([]spec.Schema) <nil>,
     AnyOf: ([]spec.Schema) <nil>,
     Not: (*spec.Schema)(<nil>),
     Properties: (map[string]spec.Schema) (len=2) {
      (string) (len=7) "message": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=4) "code": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=7) "integer"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      }
     },
     AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
     PatternProperties: (map[string]spec.Schema) <nil>,
     Dependencies: (spec.Dependencies) <nil>,
     AdditionalItems: (*spec.SchemaOrBool)(<nil>),
     Definitions: (spec.Definitions) <nil>
    },
    SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
     Discriminator: (string) "",
     ReadOnly: (bool) false,
     XML: (*spec.XMLObject)(<nil>),
     ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
     Example: (interface {}) <nil>
    },
    ExtraProps: (map[string]interface {}) <nil>
   },
   (string) (len=8) "NotFound": (spec.Schema) {
    VendorExtensible: (spec.VendorExtensible) {
     Extensions: (spec.Extensions) <nil>
    },
    SchemaProps: (spec.SchemaProps) {
     ID: (string) "",
     Ref: (spec.Ref) ,
     Schema: (spec.SchemaURL) "",
     Description: (string) "",
     Type: (spec.StringOrArray) (len=1 cap=1) {
      (string) (len=6) "object"
     },
     Format: (string) "",
     Title: (string) "",
     Default: (interface {}) <nil>,
     Maximum: (*float64)(<nil>),
     ExclusiveMaximum: (bool) false,
     Minimum: (*float64)(<nil>),
     ExclusiveMinimum: (bool) false,
     MaxLength: (*int64)(<nil>),
     MinLength: (*int64)(<nil>),
     Pattern: (string) "",
     MaxItems: (*int64)(<nil>),
     MinItems: (*int64)(<nil>),
     UniqueItems: (bool) false,
     MultipleOf: (*float64)(<nil>),
     Enum: ([]interface {}) <nil>,
     MaxProperties: (*int64)(<nil>),
     MinProperties: (*int64)(<nil>),
     Required: ([]string) <nil>,
     Items: (*spec.SchemaOrArray)(<nil>),
     AllOf: ([]spec.Schema) <nil>,
     OneOf: ([]spec.Schema) <nil>,
     AnyOf: ([]spec.Schema) <nil>,
     Not: (*spec.Schema)(<nil>),
     Properties: (map[string]spec.Schema) (len=1) {
      (string) (len=7) "message": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      }
     },
     AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
     PatternProperties: (map[string]spec.Schema) <nil>,
     Dependencies: (spec.Dependencies) <nil>,
     AdditionalItems: (*spec.SchemaOrBool)(<nil>),
     Definitions: (spec.Definitions) <nil>
    },
    SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
     Discriminator: (string) "",
     ReadOnly: (bool) false,
     XML: (*spec.XMLObject)(<nil>),
     ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
     Example: (interface {}) <nil>
    },
    ExtraProps: (map[string]interface {}) <nil>
   },
   (string) (len=10) "BadRequest": (spec.Schema) {
    VendorExtensible: (spec.VendorExtensible) {
     Extensions: (spec.Extensions) <nil>
    },
    SchemaProps: (spec.SchemaProps) {
     ID: (string) "",
     Ref: (spec.Ref) ,
     Schema: (spec.SchemaURL) "",
     Description: (string) "",
     Type: (spec.StringOrArray) (len=1 cap=1) {
      (string) (len=6) "object"
     },
     Format: (string) "",
     Title: (string) "",
     Default: (interface {}) <nil>,
     Maximum: (*float64)(<nil>),
     ExclusiveMaximum: (bool) false,
     Minimum: (*float64)(<nil>),
     ExclusiveMinimum: (bool) false,
     MaxLength: (*int64)(<nil>),
     MinLength: (*int64)(<nil>),
     Pattern: (string) "",
     MaxItems: (*int64)(<nil>),
     MinItems: (*int64)(<nil>),
     UniqueItems: (bool) false,
     MultipleOf: (*float64)(<nil>),
     Enum: ([]interface {}) <nil>,
     MaxProperties: (*int64)(<nil>),
     MinProperties: (*int64)(<nil>),
     Required: ([]string) <nil>,
     Items: (*spec.SchemaOrArray)(<nil>),
     AllOf: ([]spec.Schema) <nil>,
     OneOf: ([]spec.Schema) <nil>,
     AnyOf: ([]spec.Schema) <nil>,
     Not: (*spec.Schema)(<nil>),
     Properties: (map[string]spec.Schema) (len=1) {
      (string) (len=7) "message": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      }
     },
     AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
     PatternProperties: (map[string]spec.Schema) <nil>,
     Dependencies: (spec.Dependencies) <nil>,
     AdditionalItems: (*spec.SchemaOrBool)(<nil>),
     Definitions: (spec.Definitions) <nil>
    },
    SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
     Discriminator: (string) "",
     ReadOnly: (bool) false,
     XML: (*spec.XMLObject)(<nil>),
     ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
     Example: (interface {}) <nil>
    },
    ExtraProps: (map[string]interface {}) <nil>
   }
  },
  Parameters: (map[string]spec.Parameter) <nil>,
  Responses: (map[string]spec.Response) (len=3) {
   (string) (len=10) "BadRequest": (spec.Response) {
    Refable: (spec.Refable) {
     Ref: (spec.Ref) 
    },
    ResponseProps: (spec.ResponseProps) {
     Description: (string) (len=11) "Bad Request",
     Schema: (*spec.Schema)(0xc000445200)({
      VendorExtensible: (spec.VendorExtensible) {
       Extensions: (spec.Extensions) <nil>
      },
      SchemaProps: (spec.SchemaProps) {
       ID: (string) "",
       Ref: (spec.Ref) #/definitions/BadRequest,
       Schema: (spec.SchemaURL) "",
       Description: (string) "",
       Type: (spec.StringOrArray) <nil>,
       Format: (string) "",
       Title: (string) "",
       Default: (interface {}) <nil>,
       Maximum: (*float64)(<nil>),
       ExclusiveMaximum: (bool) false,
       Minimum: (*float64)(<nil>),
       ExclusiveMinimum: (bool) false,
       MaxLength: (*int64)(<nil>),
       MinLength: (*int64)(<nil>),
       Pattern: (string) "",
       MaxItems: (*int64)(<nil>),
       MinItems: (*int64)(<nil>),
       UniqueItems: (bool) false,
       MultipleOf: (*float64)(<nil>),
       Enum: ([]interface {}) <nil>,
       MaxProperties: (*int64)(<nil>),
       MinProperties: (*int64)(<nil>),
       Required: ([]string) <nil>,
       Items: (*spec.SchemaOrArray)(<nil>),
       AllOf: ([]spec.Schema) <nil>,
       OneOf: ([]spec.Schema) <nil>,
       AnyOf: ([]spec.Schema) <nil>,
       Not: (*spec.Schema)(<nil>),
       Properties: (map[string]spec.Schema) <nil>,
       AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
       PatternProperties: (map[string]spec.Schema) <nil>,
       Dependencies: (spec.Dependencies) <nil>,
       AdditionalItems: (*spec.SchemaOrBool)(<nil>),
       Definitions: (spec.Definitions) <nil>
      },
      SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
       Discriminator: (string) "",
       ReadOnly: (bool) false,
       XML: (*spec.XMLObject)(<nil>),
       ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
       Example: (interface {}) <nil>
      },
      ExtraProps: (map[string]interface {}) <nil>
     }),
     Headers: (map[string]spec.Header) <nil>,
     Examples: (map[string]interface {}) <nil>
    },
    VendorExtensible: (spec.VendorExtensible) {
     Extensions: (spec.Extensions) <nil>
    }
   },
   (string) (len=13) "InternalError": (spec.Response) {
    Refable: (spec.Refable) {
     Ref: (spec.Ref) 
    },
    ResponseProps: (spec.ResponseProps) {
     Description: (string) (len=14) "Internal Error",
     Schema: (*spec.Schema)(0xc000445b00)({
      VendorExtensible: (spec.VendorExtensible) {
       Extensions: (spec.Extensions) <nil>
      },
      SchemaProps: (spec.SchemaProps) {
       ID: (string) "",
       Ref: (spec.Ref) #/definitions/InternalError,
       Schema: (spec.SchemaURL) "",
       Description: (string) "",
       Type: (spec.StringOrArray) <nil>,
       Format: (string) "",
       Title: (string) "",
       Default: (interface {}) <nil>,
       Maximum: (*float64)(<nil>),
       ExclusiveMaximum: (bool) false,
       Minimum: (*float64)(<nil>),
       ExclusiveMinimum: (bool) false,
       MaxLength: (*int64)(<nil>),
       MinLength: (*int64)(<nil>),
       Pattern: (string) "",
       MaxItems: (*int64)(<nil>),
       MinItems: (*int64)(<nil>),
       UniqueItems: (bool) false,
       MultipleOf: (*float64)(<nil>),
       Enum: ([]interface {}) <nil>,
       MaxProperties: (*int64)(<nil>),
       MinProperties: (*int64)(<nil>),
       Required: ([]string) <nil>,
       Items: (*spec.SchemaOrArray)(<nil>),
       AllOf: ([]spec.Schema) <nil>,
       OneOf: ([]spec.Schema) <nil>,
       AnyOf: ([]spec.Schema) <nil>,
       Not: (*spec.Schema)(<nil>),
       Properties: (map[string]spec.Schema) <nil>,
       AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
       PatternProperties: (map[string]spec.Schema) <nil>,
       Dependencies: (spec.Dependencies) <nil>,
       AdditionalItems: (*spec.SchemaOrBool)(<nil>),
       Definitions: (spec.Definitions) <nil>
      },
      SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
       Discriminator: (string) "",
       ReadOnly: (bool) false,
       XML: (*spec.XMLObject)(<nil>),
       ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
       Example: (interface {}) <nil>
      },
      ExtraProps: (map[string]interface {}) <nil>
     }),
     Headers: (map[string]spec.Header) <nil>,
     Examples: (map[string]interface {}) <nil>
    },
    VendorExtensible: (spec.VendorExtensible) {
     Extensions: (spec.Extensions) <nil>
    }
   },
   (string) (len=8) "NotFound": (spec.Response) {
    Refable: (spec.Refable) {
     Ref: (spec.Ref) 
    },
    ResponseProps: (spec.ResponseProps) {
     Description: (string) (len=9) "Not found",
     Schema: (*spec.Schema)(0xc000450480)({
      VendorExtensible: (spec.VendorExtensible) {
       Extensions: (spec.Extensions) <nil>
      },
      SchemaProps: (spec.SchemaProps) {
       ID: (string) "",
       Ref: (spec.Ref) #/definitions/NotFound,
       Schema: (spec.SchemaURL) "",
       Description: (string) "",
       Type: (spec.StringOrArray) <nil>,
       Format: (string) "",
       Title: (string) "",
       Default: (interface {}) <nil>,
       Maximum: (*float64)(<nil>),
       ExclusiveMaximum: (bool) false,
       Minimum: (*float64)(<nil>),
       ExclusiveMinimum: (bool) false,
       MaxLength: (*int64)(<nil>),
       MinLength: (*int64)(<nil>),
       Pattern: (string) "",
       MaxItems: (*int64)(<nil>),
       MinItems: (*int64)(<nil>),
       UniqueItems: (bool) false,
       MultipleOf: (*float64)(<nil>),
       Enum: ([]interface {}) <nil>,
       MaxProperties: (*int64)(<nil>),
       MinProperties: (*int64)(<nil>),
       Required: ([]string) <nil>,
       Items: (*spec.SchemaOrArray)(<nil>),
       AllOf: ([]spec.Schema) <nil>,
       OneOf: ([]spec.Schema) <nil>,
       AnyOf: ([]spec.Schema) <nil>,
       Not: (*spec.Schema)(<nil>),
       Properties: (map[string]spec.Schema) <nil>,
       AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
       PatternProperties: (map[string]spec.Schema) <nil>,
       Dependencies: (spec.Dependencies) <nil>,
       AdditionalItems: (*spec.SchemaOrBool)(<nil>),
       Definitions: (spec.Definitions) <nil>
      },
      SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
       Discriminator: (string) "",
       ReadOnly: (bool) false,
       XML: (*spec.XMLObject)(<nil>),
       ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
       Example: (interface {}) <nil>
      },
      ExtraProps: (map[string]interface {}) <nil>
     }),
     Headers: (map[string]spec.Header) <nil>,
     Examples: (map[string]interface {}) <nil>
    },
    VendorExtensible: (spec.VendorExtensible) {
     Extensions: (spec.Extensions) <nil>
    }
   }
  },
  SecurityDefinitions: (spec.SecurityDefinitions) <nil>,
  Security: ([]map[string][]string) <nil>,
  Tags: ([]spec.Tag) <nil>,
  ExternalDocs: (*spec.ExternalDocumentation)(<nil>)
 }
}
cd /Users/adamvictor/go/src/github.com/Clever/wag/samples/gen-js-errors && jsdoc2md index.js types.js > ./README.md
go generate github.com/Clever/wag/samples/gen-go-errors...
./bin/wag -file samples/nils.yml -go-package github.com/Clever/wag/samples/gen-go-nils -js-path /Users/adamvictor/go/src/github.com/Clever/wag/samples/gen-js-nils
(spec.Swagger) {
 VendorExtensible: (spec.VendorExtensible) {
  Extensions: (spec.Extensions) <nil>
 },
 SwaggerProps: (spec.SwaggerProps) {
  ID: (string) "",
  Consumes: ([]string) (len=1 cap=4) {
   (string) (len=16) "application/json"
  },
  Produces: ([]string) (len=1 cap=4) {
   (string) (len=16) "application/json"
  },
  Schemes: ([]string) (len=1 cap=4) {
   (string) (len=4) "http"
  },
  Swagger: (string) (len=3) "2.0",
  Info: (*spec.Info)(0xc0003fbc80)({
   VendorExtensible: (spec.VendorExtensible) {
    Extensions: (spec.Extensions) (len=1) {
     (string) (len=13) "x-npm-package": (string) (len=8) "nil-test"
    }
   },
   InfoProps: (spec.InfoProps) {
    Description: (string) (len=23) "Testing Swagger Codegen",
    Title: (string) (len=8) "nil-test",
    TermsOfService: (string) "",
    Contact: (*spec.ContactInfo)(<nil>),
    License: (*spec.License)(<nil>),
    Version: (string) (len=5) "0.1.0"
   }
  }),
  Host: (string) "",
  BasePath: (string) (len=3) "/v1",
  Paths: (*spec.Paths)(0xc0005400a0)({
   VendorExtensible: (spec.VendorExtensible) {
    Extensions: (spec.Extensions) <nil>
   },
   Paths: (map[string]spec.PathItem) (len=1) {
    (string) (len=11) "/check/{id}": (spec.PathItem) {
     Refable: (spec.Refable) {
      Ref: (spec.Ref) 
     },
     VendorExtensible: (spec.VendorExtensible) {
      Extensions: (spec.Extensions) <nil>
     },
     PathItemProps: (spec.PathItemProps) {
      Get: (*spec.Operation)(<nil>),
      Put: (*spec.Operation)(<nil>),
      Post: (*spec.Operation)(0xc0004d0000)({
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       OperationProps: (spec.OperationProps) {
        Description: (string) (len=15) "Nil check tests",
        Consumes: ([]string) <nil>,
        Produces: ([]string) <nil>,
        Schemes: ([]string) <nil>,
        Tags: ([]string) <nil>,
        Summary: (string) "",
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        ID: (string) (len=8) "nilCheck",
        Deprecated: (bool) false,
        Security: ([]map[string][]string) <nil>,
        Parameters: ([]spec.Parameter) (len=5 cap=6) {
         (spec.Parameter) {
          Refable: (spec.Refable) {
           Ref: (spec.Ref) 
          },
          CommonValidations: (spec.CommonValidations) {
           Maximum: (*float64)(<nil>),
           ExclusiveMaximum: (bool) false,
           Minimum: (*float64)(<nil>),
           ExclusiveMinimum: (bool) false,
           MaxLength: (*int64)(<nil>),
           MinLength: (*int64)(<nil>),
           Pattern: (string) "",
           MaxItems: (*int64)(<nil>),
           MinItems: (*int64)(<nil>),
           UniqueItems: (bool) false,
           MultipleOf: (*float64)(<nil>),
           Enum: ([]interface {}) <nil>
          },
          SimpleSchema: (spec.SimpleSchema) {
           Type: (string) (len=6) "string",
           Format: (string) "",
           Items: (*spec.Items)(<nil>),
           CollectionFormat: (string) "",
           Default: (interface {}) <nil>,
           Example: (interface {}) <nil>
          },
          VendorExtensible: (spec.VendorExtensible) {
           Extensions: (spec.Extensions) <nil>
          },
          ParamProps: (spec.ParamProps) {
           Description: (string) "",
           Name: (string) (len=2) "id",
           In: (string) (len=4) "path",
           Required: (bool) true,
           Schema: (*spec.Schema)(<nil>),
           AllowEmptyValue: (bool) false
          }
         },
         (spec.Parameter) {
          Refable: (spec.Refable) {
           Ref: (spec.Ref) 
          },
          CommonValidations: (spec.CommonValidations) {
           Maximum: (*float64)(<nil>),
           ExclusiveMaximum: (bool) false,
           Minimum: (*float64)(<nil>),
           ExclusiveMinimum: (bool) false,
           MaxLength: (*int64)(<nil>),
           MinLength: (*int64)(<nil>),
           Pattern: (string) "",
           MaxItems: (*int64)(<nil>),
           MinItems: (*int64)(<nil>),
           UniqueItems: (bool) false,
           MultipleOf: (*float64)(<nil>),
           Enum: ([]interface {}) <nil>
          },
          SimpleSchema: (spec.SimpleSchema) {
           Type: (string) (len=6) "string",
           Format: (string) "",
           Items: (*spec.Items)(<nil>),
           CollectionFormat: (string) "",
           Default: (interface {}) <nil>,
           Example: (interface {}) <nil>
          },
          VendorExtensible: (spec.VendorExtensible) {
           Extensions: (spec.Extensions) <nil>
          },
          ParamProps: (spec.ParamProps) {
           Description: (string) "",
           Name: (string) (len=5) "query",
           In: (string) (len=5) "query",
           Required: (bool) false,
           Schema: (*spec.Schema)(<nil>),
           AllowEmptyValue: (bool) false
          }
         },
         (spec.Parameter) {
          Refable: (spec.Refable) {
           Ref: (spec.Ref) 
          },
          CommonValidations: (spec.CommonValidations) {
           Maximum: (*float64)(<nil>),
           ExclusiveMaximum: (bool) false,
           Minimum: (*float64)(<nil>),
           ExclusiveMinimum: (bool) false,
           MaxLength: (*int64)(<nil>),
           MinLength: (*int64)(<nil>),
           Pattern: (string) "",
           MaxItems: (*int64)(<nil>),
           MinItems: (*int64)(<nil>),
           UniqueItems: (bool) false,
           MultipleOf: (*float64)(<nil>),
           Enum: ([]interface {}) <nil>
          },
          SimpleSchema: (spec.SimpleSchema) {
           Type: (string) (len=6) "string",
           Format: (string) "",
           Items: (*spec.Items)(<nil>),
           CollectionFormat: (string) "",
           Default: (interface {}) <nil>,
           Example: (interface {}) <nil>
          },
          VendorExtensible: (spec.VendorExtensible) {
           Extensions: (spec.Extensions) <nil>
          },
          ParamProps: (spec.ParamProps) {
           Description: (string) "",
           Name: (string) (len=6) "header",
           In: (string) (len=6) "header",
           Required: (bool) false,
           Schema: (*spec.Schema)(<nil>),
           AllowEmptyValue: (bool) false
          }
         },
         (spec.Parameter) {
          Refable: (spec.Refable) {
           Ref: (spec.Ref) 
          },
          CommonValidations: (spec.CommonValidations) {
           Maximum: (*float64)(<nil>),
           ExclusiveMaximum: (bool) false,
           Minimum: (*float64)(<nil>),
           ExclusiveMinimum: (bool) false,
           MaxLength: (*int64)(<nil>),
           MinLength: (*int64)(<nil>),
           Pattern: (string) "",
           MaxItems: (*int64)(<nil>),
           MinItems: (*int64)(<nil>),
           UniqueItems: (bool) false,
           MultipleOf: (*float64)(<nil>),
           Enum: ([]interface {}) <nil>
          },
          SimpleSchema: (spec.SimpleSchema) {
           Type: (string) (len=5) "array",
           Format: (string) "",
           Items: (*spec.Items)(0xc000729900)({
            Refable: (spec.Refable) {
             Ref: (spec.Ref) 
            },
            CommonValidations: (spec.CommonValidations) {
             Maximum: (*float64)(<nil>),
             ExclusiveMaximum: (bool) false,
             Minimum: (*float64)(<nil>),
             ExclusiveMinimum: (bool) false,
             MaxLength: (*int64)(<nil>),
             MinLength: (*int64)(<nil>),
             Pattern: (string) "",
             MaxItems: (*int64)(<nil>),
             MinItems: (*int64)(<nil>),
             UniqueItems: (bool) false,
             MultipleOf: (*float64)(<nil>),
             Enum: ([]interface {}) <nil>
            },
            SimpleSchema: (spec.SimpleSchema) {
             Type: (string) (len=6) "string",
             Format: (string) "",
             Items: (*spec.Items)(<nil>),
             CollectionFormat: (string) "",
             Default: (interface {}) <nil>,
             Example: (interface {}) <nil>
            },
            VendorExtensible: (spec.VendorExtensible) {
             Extensions: (spec.Extensions) <nil>
            }
           }),
           CollectionFormat: (string) "",
           Default: (interface {}) <nil>,
           Example: (interface {}) <nil>
          },
          VendorExtensible: (spec.VendorExtensible) {
           Extensions: (spec.Extensions) <nil>
          },
          ParamProps: (spec.ParamProps) {
           Description: (string) "",
           Name: (string) (len=5) "array",
           In: (string) (len=5) "query",
           Required: (bool) false,
           Schema: (*spec.Schema)(<nil>),
           AllowEmptyValue: (bool) false
          }
         },
         (spec.Parameter) {
          Refable: (spec.Refable) {
           Ref: (spec.Ref) 
          },
          CommonValidations: (spec.CommonValidations) {
           Maximum: (*float64)(<nil>),
           ExclusiveMaximum: (bool) false,
           Minimum: (*float64)(<nil>),
           ExclusiveMinimum: (bool) false,
           MaxLength: (*int64)(<nil>),
           MinLength: (*int64)(<nil>),
           Pattern: (string) "",
           MaxItems: (*int64)(<nil>),
           MinItems: (*int64)(<nil>),
           UniqueItems: (bool) false,
           MultipleOf: (*float64)(<nil>),
           Enum: ([]interface {}) <nil>
          },
          SimpleSchema: (spec.SimpleSchema) {
           Type: (string) "",
           Format: (string) "",
           Items: (*spec.Items)(<nil>),
           CollectionFormat: (string) "",
           Default: (interface {}) <nil>,
           Example: (interface {}) <nil>
          },
          VendorExtensible: (spec.VendorExtensible) {
           Extensions: (spec.Extensions) <nil>
          },
          ParamProps: (spec.ParamProps) {
           Description: (string) "",
           Name: (string) (len=4) "body",
           In: (string) (len=4) "body",
           Required: (bool) false,
           Schema: (*spec.Schema)(0xc000406240)({
            VendorExtensible: (spec.VendorExtensible) {
             Extensions: (spec.Extensions) <nil>
            },
            SchemaProps: (spec.SchemaProps) {
             ID: (string) "",
             Ref: (spec.Ref) #/definitions/NilFields,
             Schema: (spec.SchemaURL) "",
             Description: (string) "",
             Type: (spec.StringOrArray) <nil>,
             Format: (string) "",
             Title: (string) "",
             Default: (interface {}) <nil>,
             Maximum: (*float64)(<nil>),
             ExclusiveMaximum: (bool) false,
             Minimum: (*float64)(<nil>),
             ExclusiveMinimum: (bool) false,
             MaxLength: (*int64)(<nil>),
             MinLength: (*int64)(<nil>),
             Pattern: (string) "",
             MaxItems: (*int64)(<nil>),
             MinItems: (*int64)(<nil>),
             UniqueItems: (bool) false,
             MultipleOf: (*float64)(<nil>),
             Enum: ([]interface {}) <nil>,
             MaxProperties: (*int64)(<nil>),
             MinProperties: (*int64)(<nil>),
             Required: ([]string) <nil>,
             Items: (*spec.SchemaOrArray)(<nil>),
             AllOf: ([]spec.Schema) <nil>,
             OneOf: ([]spec.Schema) <nil>,
             AnyOf: ([]spec.Schema) <nil>,
             Not: (*spec.Schema)(<nil>),
             Properties: (map[string]spec.Schema) <nil>,
             AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
             PatternProperties: (map[string]spec.Schema) <nil>,
             Dependencies: (spec.Dependencies) <nil>,
             AdditionalItems: (*spec.SchemaOrBool)(<nil>),
             Definitions: (spec.Definitions) <nil>
            },
            SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
             Discriminator: (string) "",
             ReadOnly: (bool) false,
             XML: (*spec.XMLObject)(<nil>),
             ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
             Example: (interface {}) <nil>
            },
            ExtraProps: (map[string]interface {}) <nil>
           }),
           AllowEmptyValue: (bool) false
          }
         }
        },
        Responses: (*spec.Responses)(0xc000293980)({
         VendorExtensible: (spec.VendorExtensible) {
          Extensions: (spec.Extensions) <nil>
         },
         ResponsesProps: (spec.ResponsesProps) {
          Default: (*spec.Response)(<nil>),
          StatusCodeResponses: (map[int]spec.Response) (len=1) {
           (int) 200: (spec.Response) {
            Refable: (spec.Refable) {
             Ref: (spec.Ref) 
            },
            ResponseProps: (spec.ResponseProps) {
             Description: (string) (len=7) "Success",
             Schema: (*spec.Schema)(<nil>),
             Headers: (map[string]spec.Header) <nil>,
             Examples: (map[string]interface {}) <nil>
            },
            VendorExtensible: (spec.VendorExtensible) {
             Extensions: (spec.Extensions) <nil>
            }
           }
          }
         }
        })
       }
      }),
      Delete: (*spec.Operation)(<nil>),
      Options: (*spec.Operation)(<nil>),
      Head: (*spec.Operation)(<nil>),
      Patch: (*spec.Operation)(<nil>),
      Parameters: ([]spec.Parameter) <nil>
     }
    }
   }
  }),
  Definitions: (spec.Definitions) (len=3) {
   (string) (len=9) "NilFields": (spec.Schema) {
    VendorExtensible: (spec.VendorExtensible) {
     Extensions: (spec.Extensions) <nil>
    },
    SchemaProps: (spec.SchemaProps) {
     ID: (string) "",
     Ref: (spec.Ref) ,
     Schema: (spec.SchemaURL) "",
     Description: (string) "",
     Type: (spec.StringOrArray) (len=1 cap=1) {
      (string) (len=6) "object"
     },
     Format: (string) "",
     Title: (string) "",
     Default: (interface {}) <nil>,
     Maximum: (*float64)(<nil>),
     ExclusiveMaximum: (bool) false,
     Minimum: (*float64)(<nil>),
     ExclusiveMinimum: (bool) false,
     MaxLength: (*int64)(<nil>),
     MinLength: (*int64)(<nil>),
     Pattern: (string) "",
     MaxItems: (*int64)(<nil>),
     MinItems: (*int64)(<nil>),
     UniqueItems: (bool) false,
     MultipleOf: (*float64)(<nil>),
     Enum: ([]interface {}) <nil>,
     MaxProperties: (*int64)(<nil>),
     MinProperties: (*int64)(<nil>),
     Required: ([]string) <nil>,
     Items: (*spec.SchemaOrArray)(<nil>),
     AllOf: ([]spec.Schema) <nil>,
     OneOf: ([]spec.Schema) <nil>,
     AnyOf: ([]spec.Schema) <nil>,
     Not: (*spec.Schema)(<nil>),
     Properties: (map[string]spec.Schema) (len=2) {
      (string) (len=2) "id": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=8) "optional": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) (len=1) {
         (string) (len=10) "x-nullable": (bool) true
        }
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      }
     },
     AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
     PatternProperties: (map[string]spec.Schema) <nil>,
     Dependencies: (spec.Dependencies) <nil>,
     AdditionalItems: (*spec.SchemaOrBool)(<nil>),
     Definitions: (spec.Definitions) <nil>
    },
    SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
     Discriminator: (string) "",
     ReadOnly: (bool) false,
     XML: (*spec.XMLObject)(<nil>),
     ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
     Example: (interface {}) <nil>
    },
    ExtraProps: (map[string]interface {}) <nil>
   },
   (string) (len=10) "BadRequest": (spec.Schema) {
    VendorExtensible: (spec.VendorExtensible) {
     Extensions: (spec.Extensions) <nil>
    },
    SchemaProps: (spec.SchemaProps) {
     ID: (string) "",
     Ref: (spec.Ref) ,
     Schema: (spec.SchemaURL) "",
     Description: (string) "",
     Type: (spec.StringOrArray) (len=1 cap=1) {
      (string) (len=6) "object"
     },
     Format: (string) "",
     Title: (string) "",
     Default: (interface {}) <nil>,
     Maximum: (*float64)(<nil>),
     ExclusiveMaximum: (bool) false,
     Minimum: (*float64)(<nil>),
     ExclusiveMinimum: (bool) false,
     MaxLength: (*int64)(<nil>),
     MinLength: (*int64)(<nil>),
     Pattern: (string) "",
     MaxItems: (*int64)(<nil>),
     MinItems: (*int64)(<nil>),
     UniqueItems: (bool) false,
     MultipleOf: (*float64)(<nil>),
     Enum: ([]interface {}) <nil>,
     MaxProperties: (*int64)(<nil>),
     MinProperties: (*int64)(<nil>),
     Required: ([]string) <nil>,
     Items: (*spec.SchemaOrArray)(<nil>),
     AllOf: ([]spec.Schema) <nil>,
     OneOf: ([]spec.Schema) <nil>,
     AnyOf: ([]spec.Schema) <nil>,
     Not: (*spec.Schema)(<nil>),
     Properties: (map[string]spec.Schema) (len=1) {
      (string) (len=7) "message": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      }
     },
     AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
     PatternProperties: (map[string]spec.Schema) <nil>,
     Dependencies: (spec.Dependencies) <nil>,
     AdditionalItems: (*spec.SchemaOrBool)(<nil>),
     Definitions: (spec.Definitions) <nil>
    },
    SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
     Discriminator: (string) "",
     ReadOnly: (bool) false,
     XML: (*spec.XMLObject)(<nil>),
     ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
     Example: (interface {}) <nil>
    },
    ExtraProps: (map[string]interface {}) <nil>
   },
   (string) (len=13) "InternalError": (spec.Schema) {
    VendorExtensible: (spec.VendorExtensible) {
     Extensions: (spec.Extensions) <nil>
    },
    SchemaProps: (spec.SchemaProps) {
     ID: (string) "",
     Ref: (spec.Ref) ,
     Schema: (spec.SchemaURL) "",
     Description: (string) "",
     Type: (spec.StringOrArray) (len=1 cap=1) {
      (string) (len=6) "object"
     },
     Format: (string) "",
     Title: (string) "",
     Default: (interface {}) <nil>,
     Maximum: (*float64)(<nil>),
     ExclusiveMaximum: (bool) false,
     Minimum: (*float64)(<nil>),
     ExclusiveMinimum: (bool) false,
     MaxLength: (*int64)(<nil>),
     MinLength: (*int64)(<nil>),
     Pattern: (string) "",
     MaxItems: (*int64)(<nil>),
     MinItems: (*int64)(<nil>),
     UniqueItems: (bool) false,
     MultipleOf: (*float64)(<nil>),
     Enum: ([]interface {}) <nil>,
     MaxProperties: (*int64)(<nil>),
     MinProperties: (*int64)(<nil>),
     Required: ([]string) <nil>,
     Items: (*spec.SchemaOrArray)(<nil>),
     AllOf: ([]spec.Schema) <nil>,
     OneOf: ([]spec.Schema) <nil>,
     AnyOf: ([]spec.Schema) <nil>,
     Not: (*spec.Schema)(<nil>),
     Properties: (map[string]spec.Schema) (len=1) {
      (string) (len=7) "message": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      }
     },
     AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
     PatternProperties: (map[string]spec.Schema) <nil>,
     Dependencies: (spec.Dependencies) <nil>,
     AdditionalItems: (*spec.SchemaOrBool)(<nil>),
     Definitions: (spec.Definitions) <nil>
    },
    SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
     Discriminator: (string) "",
     ReadOnly: (bool) false,
     XML: (*spec.XMLObject)(<nil>),
     ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
     Example: (interface {}) <nil>
    },
    ExtraProps: (map[string]interface {}) <nil>
   }
  },
  Parameters: (map[string]spec.Parameter) <nil>,
  Responses: (map[string]spec.Response) (len=2) {
   (string) (len=10) "BadRequest": (spec.Response) {
    Refable: (spec.Refable) {
     Ref: (spec.Ref) 
    },
    ResponseProps: (spec.ResponseProps) {
     Description: (string) (len=11) "Bad Request",
     Schema: (*spec.Schema)(0xc00049fd40)({
      VendorExtensible: (spec.VendorExtensible) {
       Extensions: (spec.Extensions) <nil>
      },
      SchemaProps: (spec.SchemaProps) {
       ID: (string) "",
       Ref: (spec.Ref) #/definitions/BadRequest,
       Schema: (spec.SchemaURL) "",
       Description: (string) "",
       Type: (spec.StringOrArray) <nil>,
       Format: (string) "",
       Title: (string) "",
       Default: (interface {}) <nil>,
       Maximum: (*float64)(<nil>),
       ExclusiveMaximum: (bool) false,
       Minimum: (*float64)(<nil>),
       ExclusiveMinimum: (bool) false,
       MaxLength: (*int64)(<nil>),
       MinLength: (*int64)(<nil>),
       Pattern: (string) "",
       MaxItems: (*int64)(<nil>),
       MinItems: (*int64)(<nil>),
       UniqueItems: (bool) false,
       MultipleOf: (*float64)(<nil>),
       Enum: ([]interface {}) <nil>,
       MaxProperties: (*int64)(<nil>),
       MinProperties: (*int64)(<nil>),
       Required: ([]string) <nil>,
       Items: (*spec.SchemaOrArray)(<nil>),
       AllOf: ([]spec.Schema) <nil>,
       OneOf: ([]spec.Schema) <nil>,
       AnyOf: ([]spec.Schema) <nil>,
       Not: (*spec.Schema)(<nil>),
       Properties: (map[string]spec.Schema) <nil>,
       AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
       PatternProperties: (map[string]spec.Schema) <nil>,
       Dependencies: (spec.Dependencies) <nil>,
       AdditionalItems: (*spec.SchemaOrBool)(<nil>),
       Definitions: (spec.Definitions) <nil>
      },
      SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
       Discriminator: (string) "",
       ReadOnly: (bool) false,
       XML: (*spec.XMLObject)(<nil>),
       ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
       Example: (interface {}) <nil>
      },
      ExtraProps: (map[string]interface {}) <nil>
     }),
     Headers: (map[string]spec.Header) <nil>,
     Examples: (map[string]interface {}) <nil>
    },
    VendorExtensible: (spec.VendorExtensible) {
     Extensions: (spec.Extensions) <nil>
    }
   },
   (string) (len=13) "InternalError": (spec.Response) {
    Refable: (spec.Refable) {
     Ref: (spec.Ref) 
    },
    ResponseProps: (spec.ResponseProps) {
     Description: (string) (len=14) "Internal Error",
     Schema: (*spec.Schema)(0xc0004326c0)({
      VendorExtensible: (spec.VendorExtensible) {
       Extensions: (spec.Extensions) <nil>
      },
      SchemaProps: (spec.SchemaProps) {
       ID: (string) "",
       Ref: (spec.Ref) #/definitions/InternalError,
       Schema: (spec.SchemaURL) "",
       Description: (string) "",
       Type: (spec.StringOrArray) <nil>,
       Format: (string) "",
       Title: (string) "",
       Default: (interface {}) <nil>,
       Maximum: (*float64)(<nil>),
       ExclusiveMaximum: (bool) false,
       Minimum: (*float64)(<nil>),
       ExclusiveMinimum: (bool) false,
       MaxLength: (*int64)(<nil>),
       MinLength: (*int64)(<nil>),
       Pattern: (string) "",
       MaxItems: (*int64)(<nil>),
       MinItems: (*int64)(<nil>),
       UniqueItems: (bool) false,
       MultipleOf: (*float64)(<nil>),
       Enum: ([]interface {}) <nil>,
       MaxProperties: (*int64)(<nil>),
       MinProperties: (*int64)(<nil>),
       Required: ([]string) <nil>,
       Items: (*spec.SchemaOrArray)(<nil>),
       AllOf: ([]spec.Schema) <nil>,
       OneOf: ([]spec.Schema) <nil>,
       AnyOf: ([]spec.Schema) <nil>,
       Not: (*spec.Schema)(<nil>),
       Properties: (map[string]spec.Schema) <nil>,
       AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
       PatternProperties: (map[string]spec.Schema) <nil>,
       Dependencies: (spec.Dependencies) <nil>,
       AdditionalItems: (*spec.SchemaOrBool)(<nil>),
       Definitions: (spec.Definitions) <nil>
      },
      SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
       Discriminator: (string) "",
       ReadOnly: (bool) false,
       XML: (*spec.XMLObject)(<nil>),
       ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
       Example: (interface {}) <nil>
      },
      ExtraProps: (map[string]interface {}) <nil>
     }),
     Headers: (map[string]spec.Header) <nil>,
     Examples: (map[string]interface {}) <nil>
    },
    VendorExtensible: (spec.VendorExtensible) {
     Extensions: (spec.Extensions) <nil>
    }
   }
  },
  SecurityDefinitions: (spec.SecurityDefinitions) <nil>,
  Security: ([]map[string][]string) <nil>,
  Tags: ([]spec.Tag) <nil>,
  ExternalDocs: (*spec.ExternalDocumentation)(<nil>)
 }
}
cd /Users/adamvictor/go/src/github.com/Clever/wag/samples/gen-js-nils && jsdoc2md index.js types.js > ./README.md
go generate github.com/Clever/wag/samples/gen-go-nils...
./bin/wag -file samples/blog.yml -go-package github.com/Clever/wag/samples/gen-go-blog -js-path /Users/adamvictor/go/src/github.com/Clever/wag/samples/gen-js-blog
(spec.Swagger) {
 VendorExtensible: (spec.VendorExtensible) {
  Extensions: (spec.Extensions) <nil>
 },
 SwaggerProps: (spec.SwaggerProps) {
  ID: (string) "",
  Consumes: ([]string) (len=1 cap=4) {
   (string) (len=16) "application/json"
  },
  Produces: ([]string) (len=1 cap=4) {
   (string) (len=16) "application/json"
  },
  Schemes: ([]string) (len=1 cap=4) {
   (string) (len=4) "http"
  },
  Swagger: (string) (len=3) "2.0",
  Info: (*spec.Info)(0xc0002b7f80)({
   VendorExtensible: (spec.VendorExtensible) {
    Extensions: (spec.Extensions) (len=1) {
     (string) (len=13) "x-npm-package": (string) (len=12) "blog-example"
    }
   },
   InfoProps: (spec.InfoProps) {
    Description: (string) (len=16) "Example for Blog",
    Title: (string) (len=4) "blog",
    TermsOfService: (string) "",
    Contact: (*spec.ContactInfo)(<nil>),
    License: (*spec.License)(<nil>),
    Version: (string) (len=5) "0.1.0"
   }
  }),
  Host: (string) "",
  BasePath: (string) "",
  Paths: (*spec.Paths)(0xc0007c4780)({
   VendorExtensible: (spec.VendorExtensible) {
    Extensions: (spec.Extensions) <nil>
   },
   Paths: (map[string]spec.PathItem) (len=1) {
    (string) (len=31) "/students/{student_id}/sections": (spec.PathItem) {
     Refable: (spec.Refable) {
      Ref: (spec.Ref) 
     },
     VendorExtensible: (spec.VendorExtensible) {
      Extensions: (spec.Extensions) <nil>
     },
     PathItemProps: (spec.PathItemProps) {
      Get: (*spec.Operation)(0xc0000e01c0)({
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       OperationProps: (spec.OperationProps) {
        Description: (string) (len=43) "Gets the sections for the specified student",
        Consumes: ([]string) <nil>,
        Produces: ([]string) <nil>,
        Schemes: ([]string) <nil>,
        Tags: ([]string) <nil>,
        Summary: (string) "",
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        ID: (string) (len=21) "getSectionsForStudent",
        Deprecated: (bool) false,
        Security: ([]map[string][]string) <nil>,
        Parameters: ([]spec.Parameter) (len=1 cap=4) {
         (spec.Parameter) {
          Refable: (spec.Refable) {
           Ref: (spec.Ref) 
          },
          CommonValidations: (spec.CommonValidations) {
           Maximum: (*float64)(<nil>),
           ExclusiveMaximum: (bool) false,
           Minimum: (*float64)(<nil>),
           ExclusiveMinimum: (bool) false,
           MaxLength: (*int64)(<nil>),
           MinLength: (*int64)(<nil>),
           Pattern: (string) "",
           MaxItems: (*int64)(<nil>),
           MinItems: (*int64)(<nil>),
           UniqueItems: (bool) false,
           MultipleOf: (*float64)(<nil>),
           Enum: ([]interface {}) <nil>
          },
          SimpleSchema: (spec.SimpleSchema) {
           Type: (string) (len=6) "string",
           Format: (string) "",
           Items: (*spec.Items)(<nil>),
           CollectionFormat: (string) "",
           Default: (interface {}) <nil>,
           Example: (interface {}) <nil>
          },
          VendorExtensible: (spec.VendorExtensible) {
           Extensions: (spec.Extensions) <nil>
          },
          ParamProps: (spec.ParamProps) {
           Description: (string) "",
           Name: (string) (len=10) "student_id",
           In: (string) (len=4) "path",
           Required: (bool) true,
           Schema: (*spec.Schema)(<nil>),
           AllowEmptyValue: (bool) false
          }
         }
        },
        Responses: (*spec.Responses)(0xc0004cd740)({
         VendorExtensible: (spec.VendorExtensible) {
          Extensions: (spec.Extensions) <nil>
         },
         ResponsesProps: (spec.ResponsesProps) {
          Default: (*spec.Response)(<nil>),
          StatusCodeResponses: (map[int]spec.Response) (len=1) {
           (int) 200: (spec.Response) {
            Refable: (spec.Refable) {
             Ref: (spec.Ref) 
            },
            ResponseProps: (spec.ResponseProps) {
             Description: (string) (len=7) "Success",
             Schema: (*spec.Schema)(0xc000424000)({
              VendorExtensible: (spec.VendorExtensible) {
               Extensions: (spec.Extensions) <nil>
              },
              SchemaProps: (spec.SchemaProps) {
               ID: (string) "",
               Ref: (spec.Ref) ,
               Schema: (spec.SchemaURL) "",
               Description: (string) "",
               Type: (spec.StringOrArray) (len=1 cap=1) {
                (string) (len=5) "array"
               },
               Format: (string) "",
               Title: (string) "",
               Default: (interface {}) <nil>,
               Maximum: (*float64)(<nil>),
               ExclusiveMaximum: (bool) false,
               Minimum: (*float64)(<nil>),
               ExclusiveMinimum: (bool) false,
               MaxLength: (*int64)(<nil>),
               MinLength: (*int64)(<nil>),
               Pattern: (string) "",
               MaxItems: (*int64)(<nil>),
               MinItems: (*int64)(<nil>),
               UniqueItems: (bool) false,
               MultipleOf: (*float64)(<nil>),
               Enum: ([]interface {}) <nil>,
               MaxProperties: (*int64)(<nil>),
               MinProperties: (*int64)(<nil>),
               Required: ([]string) <nil>,
               Items: (*spec.SchemaOrArray)(0xc0004cd940)({
                Schema: (*spec.Schema)(0xc000424b40)({
                 VendorExtensible: (spec.VendorExtensible) {
                  Extensions: (spec.Extensions) <nil>
                 },
                 SchemaProps: (spec.SchemaProps) {
                  ID: (string) "",
                  Ref: (spec.Ref) #/definitions/Section,
                  Schema: (spec.SchemaURL) "",
                  Description: (string) "",
                  Type: (spec.StringOrArray) <nil>,
                  Format: (string) "",
                  Title: (string) "",
                  Default: (interface {}) <nil>,
                  Maximum: (*float64)(<nil>),
                  ExclusiveMaximum: (bool) false,
                  Minimum: (*float64)(<nil>),
                  ExclusiveMinimum: (bool) false,
                  MaxLength: (*int64)(<nil>),
                  MinLength: (*int64)(<nil>),
                  Pattern: (string) "",
                  MaxItems: (*int64)(<nil>),
                  MinItems: (*int64)(<nil>),
                  UniqueItems: (bool) false,
                  MultipleOf: (*float64)(<nil>),
                  Enum: ([]interface {}) <nil>,
                  MaxProperties: (*int64)(<nil>),
                  MinProperties: (*int64)(<nil>),
                  Required: ([]string) <nil>,
                  Items: (*spec.SchemaOrArray)(<nil>),
                  AllOf: ([]spec.Schema) <nil>,
                  OneOf: ([]spec.Schema) <nil>,
                  AnyOf: ([]spec.Schema) <nil>,
                  Not: (*spec.Schema)(<nil>),
                  Properties: (map[string]spec.Schema) <nil>,
                  AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
                  PatternProperties: (map[string]spec.Schema) <nil>,
                  Dependencies: (spec.Dependencies) <nil>,
                  AdditionalItems: (*spec.SchemaOrBool)(<nil>),
                  Definitions: (spec.Definitions) <nil>
                 },
                 SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
                  Discriminator: (string) "",
                  ReadOnly: (bool) false,
                  XML: (*spec.XMLObject)(<nil>),
                  ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
                  Example: (interface {}) <nil>
                 },
                 ExtraProps: (map[string]interface {}) <nil>
                }),
                Schemas: ([]spec.Schema) <nil>
               }),
               AllOf: ([]spec.Schema) <nil>,
               OneOf: ([]spec.Schema) <nil>,
               AnyOf: ([]spec.Schema) <nil>,
               Not: (*spec.Schema)(<nil>),
               Properties: (map[string]spec.Schema) <nil>,
               AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
               PatternProperties: (map[string]spec.Schema) <nil>,
               Dependencies: (spec.Dependencies) <nil>,
               AdditionalItems: (*spec.SchemaOrBool)(<nil>),
               Definitions: (spec.Definitions) <nil>
              },
              SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
               Discriminator: (string) "",
               ReadOnly: (bool) false,
               XML: (*spec.XMLObject)(<nil>),
               ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
               Example: (interface {}) <nil>
              },
              ExtraProps: (map[string]interface {}) <nil>
             }),
             Headers: (map[string]spec.Header) <nil>,
             Examples: (map[string]interface {}) <nil>
            },
            VendorExtensible: (spec.VendorExtensible) {
             Extensions: (spec.Extensions) <nil>
            }
           }
          }
         }
        })
       }
      }),
      Put: (*spec.Operation)(<nil>),
      Post: (*spec.Operation)(<nil>),
      Delete: (*spec.Operation)(<nil>),
      Options: (*spec.Operation)(<nil>),
      Head: (*spec.Operation)(<nil>),
      Patch: (*spec.Operation)(<nil>),
      Parameters: ([]spec.Parameter) <nil>
     }
    }
   }
  }),
  Definitions: (spec.Definitions) (len=3) {
   (string) (len=7) "Section": (spec.Schema) {
    VendorExtensible: (spec.VendorExtensible) {
     Extensions: (spec.Extensions) <nil>
    },
    SchemaProps: (spec.SchemaProps) {
     ID: (string) "",
     Ref: (spec.Ref) ,
     Schema: (spec.SchemaURL) "",
     Description: (string) "",
     Type: (spec.StringOrArray) (len=1 cap=1) {
      (string) (len=6) "object"
     },
     Format: (string) "",
     Title: (string) "",
     Default: (interface {}) <nil>,
     Maximum: (*float64)(<nil>),
     ExclusiveMaximum: (bool) false,
     Minimum: (*float64)(<nil>),
     ExclusiveMinimum: (bool) false,
     MaxLength: (*int64)(<nil>),
     MinLength: (*int64)(<nil>),
     Pattern: (string) "",
     MaxItems: (*int64)(<nil>),
     MinItems: (*int64)(<nil>),
     UniqueItems: (bool) false,
     MultipleOf: (*float64)(<nil>),
     Enum: ([]interface {}) <nil>,
     MaxProperties: (*int64)(<nil>),
     MinProperties: (*int64)(<nil>),
     Required: ([]string) <nil>,
     Items: (*spec.SchemaOrArray)(<nil>),
     AllOf: ([]spec.Schema) <nil>,
     OneOf: ([]spec.Schema) <nil>,
     AnyOf: ([]spec.Schema) <nil>,
     Not: (*spec.Schema)(<nil>),
     Properties: (map[string]spec.Schema) (len=3) {
      (string) (len=2) "id": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=4) "name": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=6) "period": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      }
     },
     AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
     PatternProperties: (map[string]spec.Schema) <nil>,
     Dependencies: (spec.Dependencies) <nil>,
     AdditionalItems: (*spec.SchemaOrBool)(<nil>),
     Definitions: (spec.Definitions) <nil>
    },
    SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
     Discriminator: (string) "",
     ReadOnly: (bool) false,
     XML: (*spec.XMLObject)(<nil>),
     ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
     Example: (interface {}) <nil>
    },
    ExtraProps: (map[string]interface {}) <nil>
   },
   (string) (len=10) "BadRequest": (spec.Schema) {
    VendorExtensible: (spec.VendorExtensible) {
     Extensions: (spec.Extensions) <nil>
    },
    SchemaProps: (spec.SchemaProps) {
     ID: (string) "",
     Ref: (spec.Ref) ,
     Schema: (spec.SchemaURL) "",
     Description: (string) "",
     Type: (spec.StringOrArray) (len=1 cap=1) {
      (string) (len=6) "object"
     },
     Format: (string) "",
     Title: (string) "",
     Default: (interface {}) <nil>,
     Maximum: (*float64)(<nil>),
     ExclusiveMaximum: (bool) false,
     Minimum: (*float64)(<nil>),
     ExclusiveMinimum: (bool) false,
     MaxLength: (*int64)(<nil>),
     MinLength: (*int64)(<nil>),
     Pattern: (string) "",
     MaxItems: (*int64)(<nil>),
     MinItems: (*int64)(<nil>),
     UniqueItems: (bool) false,
     MultipleOf: (*float64)(<nil>),
     Enum: ([]interface {}) <nil>,
     MaxProperties: (*int64)(<nil>),
     MinProperties: (*int64)(<nil>),
     Required: ([]string) <nil>,
     Items: (*spec.SchemaOrArray)(<nil>),
     AllOf: ([]spec.Schema) <nil>,
     OneOf: ([]spec.Schema) <nil>,
     AnyOf: ([]spec.Schema) <nil>,
     Not: (*spec.Schema)(<nil>),
     Properties: (map[string]spec.Schema) (len=1) {
      (string) (len=7) "message": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      }
     },
     AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
     PatternProperties: (map[string]spec.Schema) <nil>,
     Dependencies: (spec.Dependencies) <nil>,
     AdditionalItems: (*spec.SchemaOrBool)(<nil>),
     Definitions: (spec.Definitions) <nil>
    },
    SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
     Discriminator: (string) "",
     ReadOnly: (bool) false,
     XML: (*spec.XMLObject)(<nil>),
     ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
     Example: (interface {}) <nil>
    },
    ExtraProps: (map[string]interface {}) <nil>
   },
   (string) (len=13) "InternalError": (spec.Schema) {
    VendorExtensible: (spec.VendorExtensible) {
     Extensions: (spec.Extensions) <nil>
    },
    SchemaProps: (spec.SchemaProps) {
     ID: (string) "",
     Ref: (spec.Ref) ,
     Schema: (spec.SchemaURL) "",
     Description: (string) "",
     Type: (spec.StringOrArray) (len=1 cap=1) {
      (string) (len=6) "object"
     },
     Format: (string) "",
     Title: (string) "",
     Default: (interface {}) <nil>,
     Maximum: (*float64)(<nil>),
     ExclusiveMaximum: (bool) false,
     Minimum: (*float64)(<nil>),
     ExclusiveMinimum: (bool) false,
     MaxLength: (*int64)(<nil>),
     MinLength: (*int64)(<nil>),
     Pattern: (string) "",
     MaxItems: (*int64)(<nil>),
     MinItems: (*int64)(<nil>),
     UniqueItems: (bool) false,
     MultipleOf: (*float64)(<nil>),
     Enum: ([]interface {}) <nil>,
     MaxProperties: (*int64)(<nil>),
     MinProperties: (*int64)(<nil>),
     Required: ([]string) <nil>,
     Items: (*spec.SchemaOrArray)(<nil>),
     AllOf: ([]spec.Schema) <nil>,
     OneOf: ([]spec.Schema) <nil>,
     AnyOf: ([]spec.Schema) <nil>,
     Not: (*spec.Schema)(<nil>),
     Properties: (map[string]spec.Schema) (len=1) {
      (string) (len=7) "message": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      }
     },
     AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
     PatternProperties: (map[string]spec.Schema) <nil>,
     Dependencies: (spec.Dependencies) <nil>,
     AdditionalItems: (*spec.SchemaOrBool)(<nil>),
     Definitions: (spec.Definitions) <nil>
    },
    SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
     Discriminator: (string) "",
     ReadOnly: (bool) false,
     XML: (*spec.XMLObject)(<nil>),
     ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
     Example: (interface {}) <nil>
    },
    ExtraProps: (map[string]interface {}) <nil>
   }
  },
  Parameters: (map[string]spec.Parameter) <nil>,
  Responses: (map[string]spec.Response) (len=2) {
   (string) (len=10) "BadRequest": (spec.Response) {
    Refable: (spec.Refable) {
     Ref: (spec.Ref) 
    },
    ResponseProps: (spec.ResponseProps) {
     Description: (string) (len=11) "Bad Request",
     Schema: (*spec.Schema)(0xc0004a8240)({
      VendorExtensible: (spec.VendorExtensible) {
       Extensions: (spec.Extensions) <nil>
      },
      SchemaProps: (spec.SchemaProps) {
       ID: (string) "",
       Ref: (spec.Ref) #/definitions/BadRequest,
       Schema: (spec.SchemaURL) "",
       Description: (string) "",
       Type: (spec.StringOrArray) <nil>,
       Format: (string) "",
       Title: (string) "",
       Default: (interface {}) <nil>,
       Maximum: (*float64)(<nil>),
       ExclusiveMaximum: (bool) false,
       Minimum: (*float64)(<nil>),
       ExclusiveMinimum: (bool) false,
       MaxLength: (*int64)(<nil>),
       MinLength: (*int64)(<nil>),
       Pattern: (string) "",
       MaxItems: (*int64)(<nil>),
       MinItems: (*int64)(<nil>),
       UniqueItems: (bool) false,
       MultipleOf: (*float64)(<nil>),
       Enum: ([]interface {}) <nil>,
       MaxProperties: (*int64)(<nil>),
       MinProperties: (*int64)(<nil>),
       Required: ([]string) <nil>,
       Items: (*spec.SchemaOrArray)(<nil>),
       AllOf: ([]spec.Schema) <nil>,
       OneOf: ([]spec.Schema) <nil>,
       AnyOf: ([]spec.Schema) <nil>,
       Not: (*spec.Schema)(<nil>),
       Properties: (map[string]spec.Schema) <nil>,
       AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
       PatternProperties: (map[string]spec.Schema) <nil>,
       Dependencies: (spec.Dependencies) <nil>,
       AdditionalItems: (*spec.SchemaOrBool)(<nil>),
       Definitions: (spec.Definitions) <nil>
      },
      SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
       Discriminator: (string) "",
       ReadOnly: (bool) false,
       XML: (*spec.XMLObject)(<nil>),
       ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
       Example: (interface {}) <nil>
      },
      ExtraProps: (map[string]interface {}) <nil>
     }),
     Headers: (map[string]spec.Header) <nil>,
     Examples: (map[string]interface {}) <nil>
    },
    VendorExtensible: (spec.VendorExtensible) {
     Extensions: (spec.Extensions) <nil>
    }
   },
   (string) (len=13) "InternalError": (spec.Response) {
    Refable: (spec.Refable) {
     Ref: (spec.Ref) 
    },
    ResponseProps: (spec.ResponseProps) {
     Description: (string) (len=14) "Internal Error",
     Schema: (*spec.Schema)(0xc0004a86c0)({
      VendorExtensible: (spec.VendorExtensible) {
       Extensions: (spec.Extensions) <nil>
      },
      SchemaProps: (spec.SchemaProps) {
       ID: (string) "",
       Ref: (spec.Ref) #/definitions/InternalError,
       Schema: (spec.SchemaURL) "",
       Description: (string) "",
       Type: (spec.StringOrArray) <nil>,
       Format: (string) "",
       Title: (string) "",
       Default: (interface {}) <nil>,
       Maximum: (*float64)(<nil>),
       ExclusiveMaximum: (bool) false,
       Minimum: (*float64)(<nil>),
       ExclusiveMinimum: (bool) false,
       MaxLength: (*int64)(<nil>),
       MinLength: (*int64)(<nil>),
       Pattern: (string) "",
       MaxItems: (*int64)(<nil>),
       MinItems: (*int64)(<nil>),
       UniqueItems: (bool) false,
       MultipleOf: (*float64)(<nil>),
       Enum: ([]interface {}) <nil>,
       MaxProperties: (*int64)(<nil>),
       MinProperties: (*int64)(<nil>),
       Required: ([]string) <nil>,
       Items: (*spec.SchemaOrArray)(<nil>),
       AllOf: ([]spec.Schema) <nil>,
       OneOf: ([]spec.Schema) <nil>,
       AnyOf: ([]spec.Schema) <nil>,
       Not: (*spec.Schema)(<nil>),
       Properties: (map[string]spec.Schema) <nil>,
       AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
       PatternProperties: (map[string]spec.Schema) <nil>,
       Dependencies: (spec.Dependencies) <nil>,
       AdditionalItems: (*spec.SchemaOrBool)(<nil>),
       Definitions: (spec.Definitions) <nil>
      },
      SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
       Discriminator: (string) "",
       ReadOnly: (bool) false,
       XML: (*spec.XMLObject)(<nil>),
       ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
       Example: (interface {}) <nil>
      },
      ExtraProps: (map[string]interface {}) <nil>
     }),
     Headers: (map[string]spec.Header) <nil>,
     Examples: (map[string]interface {}) <nil>
    },
    VendorExtensible: (spec.VendorExtensible) {
     Extensions: (spec.Extensions) <nil>
    }
   }
  },
  SecurityDefinitions: (spec.SecurityDefinitions) <nil>,
  Security: ([]map[string][]string) <nil>,
  Tags: ([]spec.Tag) <nil>,
  ExternalDocs: (*spec.ExternalDocumentation)(<nil>)
 }
}
cd /Users/adamvictor/go/src/github.com/Clever/wag/samples/gen-js-blog && jsdoc2md index.js types.js > ./README.md
go generate github.com/Clever/wag/samples/gen-go-nils...
./bin/wag -file samples/db.yml -go-package github.com/Clever/wag/samples/gen-go-db -js-path /Users/adamvictor/go/src/github.com/Clever/wag/samples/gen-js-db
(spec.Swagger) {
 VendorExtensible: (spec.VendorExtensible) {
  Extensions: (spec.Extensions) <nil>
 },
 SwaggerProps: (spec.SwaggerProps) {
  ID: (string) "",
  Consumes: ([]string) (len=1 cap=4) {
   (string) (len=16) "application/json"
  },
  Produces: ([]string) (len=1 cap=4) {
   (string) (len=16) "application/json"
  },
  Schemes: ([]string) (len=1 cap=4) {
   (string) (len=4) "http"
  },
  Swagger: (string) (len=3) "2.0",
  Info: (*spec.Info)(0xc000737920)({
   VendorExtensible: (spec.VendorExtensible) {
    Extensions: (spec.Extensions) (len=1) {
     (string) (len=13) "x-npm-package": (string) (len=12) "swagger-test"
    }
   },
   InfoProps: (spec.InfoProps) {
    Description: (string) (len=23) "Testing Swagger Codegen",
    Title: (string) (len=12) "swagger-test",
    TermsOfService: (string) "",
    Contact: (*spec.ContactInfo)(<nil>),
    License: (*spec.License)(<nil>),
    Version: (string) (len=5) "0.1.0"
   }
  }),
  Host: (string) "",
  BasePath: (string) (len=3) "/v1",
  Paths: (*spec.Paths)(0xc0001d1830)({
   VendorExtensible: (spec.VendorExtensible) {
    Extensions: (spec.Extensions) <nil>
   },
   Paths: (map[string]spec.PathItem) (len=1) {
    (string) (len=13) "/health/check": (spec.PathItem) {
     Refable: (spec.Refable) {
      Ref: (spec.Ref) 
     },
     VendorExtensible: (spec.VendorExtensible) {
      Extensions: (spec.Extensions) <nil>
     },
     PathItemProps: (spec.PathItemProps) {
      Get: (*spec.Operation)(0xc0000fe1c0)({
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       OperationProps: (spec.OperationProps) {
        Description: (string) "",
        Consumes: ([]string) <nil>,
        Produces: ([]string) <nil>,
        Schemes: ([]string) <nil>,
        Tags: ([]string) (len=1 cap=4) {
         (string) (len=5) "Infra"
        },
        Summary: (string) "",
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        ID: (string) (len=11) "healthCheck",
        Deprecated: (bool) false,
        Security: ([]map[string][]string) <nil>,
        Parameters: ([]spec.Parameter) <nil>,
        Responses: (*spec.Responses)(0xc0001ffa80)({
         VendorExtensible: (spec.VendorExtensible) {
          Extensions: (spec.Extensions) <nil>
         },
         ResponsesProps: (spec.ResponsesProps) {
          Default: (*spec.Response)(<nil>),
          StatusCodeResponses: (map[int]spec.Response) (len=1) {
           (int) 200: (spec.Response) {
            Refable: (spec.Refable) {
             Ref: (spec.Ref) 
            },
            ResponseProps: (spec.ResponseProps) {
             Description: (string) (len=11) "OK response",
             Schema: (*spec.Schema)(<nil>),
             Headers: (map[string]spec.Header) <nil>,
             Examples: (map[string]interface {}) <nil>
            },
            VendorExtensible: (spec.VendorExtensible) {
             Extensions: (spec.Extensions) <nil>
            }
           }
          }
         }
        })
       }
      }),
      Put: (*spec.Operation)(<nil>),
      Post: (*spec.Operation)(<nil>),
      Delete: (*spec.Operation)(<nil>),
      Options: (*spec.Operation)(<nil>),
      Head: (*spec.Operation)(<nil>),
      Patch: (*spec.Operation)(<nil>),
      Parameters: ([]spec.Parameter) <nil>
     }
    }
   }
  }),
  Definitions: (spec.Definitions) (len=20) {
   (string) (len=26) "ThingWithDateTimeComposite": (spec.Schema) {
    VendorExtensible: (spec.VendorExtensible) {
     Extensions: (spec.Extensions) (len=1) {
      (string) (len=4) "x-db": (map[string]interface {}) (len=4) {
       (string) (len=15) "AllowOverwrites": (bool) true,
       (string) (len=21) "AllowPrimaryIndexScan": (bool) false,
       (string) (len=19) "CompositeAttributes": ([]interface {}) (len=2 cap=2) {
        (map[string]interface {}) (len=3) {
         (string) (len=13) "AttributeName": (string) (len=6) "typeID",
         (string) (len=10) "Properties": ([]interface {}) (len=2 cap=2) {
          (string) (len=4) "type",
          (string) (len=2) "id"
         },
         (string) (len=9) "Separator": (string) (len=1) "|"
        },
        (map[string]interface {}) (len=3) {
         (string) (len=13) "AttributeName": (string) (len=15) "createdResource",
         (string) (len=10) "Properties": ([]interface {}) (len=2 cap=2) {
          (string) (len=7) "created",
          (string) (len=8) "resource"
         },
         (string) (len=9) "Separator": (string) (len=1) "|"
        }
       },
       (string) (len=8) "DynamoDB": (map[string]interface {}) (len=1) {
        (string) (len=9) "KeySchema": ([]interface {}) (len=2 cap=2) {
         (map[string]interface {}) (len=2) {
          (string) (len=13) "AttributeName": (string) (len=6) "typeID",
          (string) (len=7) "KeyType": (string) (len=4) "HASH"
         },
         (map[string]interface {}) (len=2) {
          (string) (len=13) "AttributeName": (string) (len=15) "createdResource",
          (string) (len=7) "KeyType": (string) (len=5) "RANGE"
         }
        }
       }
      }
     }
    },
    SchemaProps: (spec.SchemaProps) {
     ID: (string) "",
     Ref: (spec.Ref) ,
     Schema: (spec.SchemaURL) "",
     Description: (string) "",
     Type: (spec.StringOrArray) (len=1 cap=1) {
      (string) (len=6) "object"
     },
     Format: (string) "",
     Title: (string) "",
     Default: (interface {}) <nil>,
     Maximum: (*float64)(<nil>),
     ExclusiveMaximum: (bool) false,
     Minimum: (*float64)(<nil>),
     ExclusiveMinimum: (bool) false,
     MaxLength: (*int64)(<nil>),
     MinLength: (*int64)(<nil>),
     Pattern: (string) "",
     MaxItems: (*int64)(<nil>),
     MinItems: (*int64)(<nil>),
     UniqueItems: (bool) false,
     MultipleOf: (*float64)(<nil>),
     Enum: ([]interface {}) <nil>,
     MaxProperties: (*int64)(<nil>),
     MinProperties: (*int64)(<nil>),
     Required: ([]string) <nil>,
     Items: (*spec.SchemaOrArray)(<nil>),
     AllOf: ([]spec.Schema) <nil>,
     OneOf: ([]spec.Schema) <nil>,
     AnyOf: ([]spec.Schema) <nil>,
     Not: (*spec.Schema)(<nil>),
     Properties: (map[string]spec.Schema) (len=4) {
      (string) (len=7) "created": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) (len=9) "date-time",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=8) "resource": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=4) "type": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=2) "id": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      }
     },
     AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
     PatternProperties: (map[string]spec.Schema) <nil>,
     Dependencies: (spec.Dependencies) <nil>,
     AdditionalItems: (*spec.SchemaOrBool)(<nil>),
     Definitions: (spec.Definitions) <nil>
    },
    SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
     Discriminator: (string) "",
     ReadOnly: (bool) false,
     XML: (*spec.XMLObject)(<nil>),
     ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
     Example: (interface {}) <nil>
    },
    ExtraProps: (map[string]interface {}) <nil>
   },
   (string) (len=21) "ThingWithMatchingKeys": (spec.Schema) {
    VendorExtensible: (spec.VendorExtensible) {
     Extensions: (spec.Extensions) (len=1) {
      (string) (len=4) "x-db": (map[string]interface {}) (len=4) {
       (string) (len=8) "DynamoDB": (map[string]interface {}) (len=2) {
        (string) (len=9) "KeySchema": ([]interface {}) (len=2 cap=2) {
         (map[string]interface {}) (len=2) {
          (string) (len=13) "AttributeName": (string) (len=4) "bear",
          (string) (len=7) "KeyType": (string) (len=4) "HASH"
         },
         (map[string]interface {}) (len=2) {
          (string) (len=13) "AttributeName": (string) (len=11) "assocTypeID",
          (string) (len=7) "KeyType": (string) (len=5) "RANGE"
         }
        },
        (string) (len=22) "GlobalSecondaryIndexes": ([]interface {}) (len=1 cap=1) {
         (map[string]interface {}) (len=3) {
          (string) (len=9) "IndexName": (string) (len=7) "byAssoc",
          (string) (len=10) "Projection": (map[string]interface {}) (len=1) {
           (string) (len=14) "ProjectionType": (string) (len=3) "ALL"
          },
          (string) (len=9) "KeySchema": ([]interface {}) (len=2 cap=2) {
           (map[string]interface {}) (len=2) {
            (string) (len=13) "AttributeName": (string) (len=11) "assocTypeID",
            (string) (len=7) "KeyType": (string) (len=4) "HASH"
           },
           (map[string]interface {}) (len=2) {
            (string) (len=13) "AttributeName": (string) (len=11) "createdBear",
            (string) (len=7) "KeyType": (string) (len=5) "RANGE"
           }
          }
         }
        }
       },
       (string) (len=15) "AllowOverwrites": (bool) true,
       (string) (len=21) "AllowPrimaryIndexScan": (bool) false,
       (string) (len=19) "CompositeAttributes": ([]interface {}) (len=2 cap=2) {
        (map[string]interface {}) (len=3) {
         (string) (len=13) "AttributeName": (string) (len=11) "assocTypeID",
         (string) (len=10) "Properties": ([]interface {}) (len=2 cap=2) {
          (string) (len=9) "assocType",
          (string) (len=7) "assocID"
         },
         (string) (len=9) "Separator": (string) (len=1) "^"
        },
        (map[string]interface {}) (len=3) {
         (string) (len=9) "Separator": (string) (len=1) "^",
         (string) (len=13) "AttributeName": (string) (len=11) "createdBear",
         (string) (len=10) "Properties": ([]interface {}) (len=2 cap=2) {
          (string) (len=7) "created",
          (string) (len=4) "bear"
         }
        }
       }
      }
     }
    },
    SchemaProps: (spec.SchemaProps) {
     ID: (string) "",
     Ref: (spec.Ref) ,
     Schema: (spec.SchemaURL) "",
     Description: (string) "",
     Type: (spec.StringOrArray) (len=1 cap=1) {
      (string) (len=6) "object"
     },
     Format: (string) "",
     Title: (string) "",
     Default: (interface {}) <nil>,
     Maximum: (*float64)(<nil>),
     ExclusiveMaximum: (bool) false,
     Minimum: (*float64)(<nil>),
     ExclusiveMinimum: (bool) false,
     MaxLength: (*int64)(<nil>),
     MinLength: (*int64)(<nil>),
     Pattern: (string) "",
     MaxItems: (*int64)(<nil>),
     MinItems: (*int64)(<nil>),
     UniqueItems: (bool) false,
     MultipleOf: (*float64)(<nil>),
     Enum: ([]interface {}) <nil>,
     MaxProperties: (*int64)(<nil>),
     MinProperties: (*int64)(<nil>),
     Required: ([]string) <nil>,
     Items: (*spec.SchemaOrArray)(<nil>),
     AllOf: ([]spec.Schema) <nil>,
     OneOf: ([]spec.Schema) <nil>,
     AnyOf: ([]spec.Schema) <nil>,
     Not: (*spec.Schema)(<nil>),
     Properties: (map[string]spec.Schema) (len=4) {
      (string) (len=9) "assocType": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=7) "assocID": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=7) "created": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) (len=9) "date-time",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=4) "bear": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      }
     },
     AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
     PatternProperties: (map[string]spec.Schema) <nil>,
     Dependencies: (spec.Dependencies) <nil>,
     AdditionalItems: (*spec.SchemaOrBool)(<nil>),
     Definitions: (spec.Definitions) <nil>
    },
    SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
     Discriminator: (string) "",
     ReadOnly: (bool) false,
     XML: (*spec.XMLObject)(<nil>),
     ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
     Example: (interface {}) <nil>
    },
    ExtraProps: (map[string]interface {}) <nil>
   },
   (string) (len=5) "Event": (spec.Schema) {
    VendorExtensible: (spec.VendorExtensible) {
     Extensions: (spec.Extensions) (len=1) {
      (string) (len=4) "x-db": (map[string]interface {}) (len=2) {
       (string) (len=15) "AllowOverwrites": (bool) true,
       (string) (len=8) "DynamoDB": (map[string]interface {}) (len=4) {
        (string) (len=22) "GlobalSecondaryIndexes": ([]interface {}) (len=1 cap=1) {
         (map[string]interface {}) (len=3) {
          (string) (len=9) "IndexName": (string) (len=4) "bySK",
          (string) (len=10) "Projection": (map[string]interface {}) (len=1) {
           (string) (len=14) "ProjectionType": (string) (len=3) "ALL"
          },
          (string) (len=9) "KeySchema": ([]interface {}) (len=2 cap=2) {
           (map[string]interface {}) (len=2) {
            (string) (len=13) "AttributeName": (string) (len=2) "sk",
            (string) (len=7) "KeyType": (string) (len=4) "HASH"
           },
           (map[string]interface {}) (len=2) {
            (string) (len=13) "AttributeName": (string) (len=4) "data",
            (string) (len=7) "KeyType": (string) (len=5) "RANGE"
           }
          }
         }
        },
        (string) (len=23) "TimeToLiveSpecification": (map[string]interface {}) (len=2) {
         (string) (len=13) "AttributeName": (string) (len=3) "ttl",
         (string) (len=7) "Enabled": (bool) true
        },
        (string) (len=20) "AttributeDefinitions": ([]interface {}) (len=3 cap=4) {
         (map[string]interface {}) (len=2) {
          (string) (len=13) "AttributeName": (string) (len=2) "pk",
          (string) (len=13) "AttributeType": (string) (len=1) "S"
         },
         (map[string]interface {}) (len=2) {
          (string) (len=13) "AttributeType": (string) (len=1) "S",
          (string) (len=13) "AttributeName": (string) (len=2) "sk"
         },
         (map[string]interface {}) (len=2) {
          (string) (len=13) "AttributeName": (string) (len=4) "data",
          (string) (len=13) "AttributeType": (string) (len=1) "B"
         }
        },
        (string) (len=9) "KeySchema": ([]interface {}) (len=2 cap=2) {
         (map[string]interface {}) (len=2) {
          (string) (len=13) "AttributeName": (string) (len=2) "pk",
          (string) (len=7) "KeyType": (string) (len=4) "HASH"
         },
         (map[string]interface {}) (len=2) {
          (string) (len=13) "AttributeName": (string) (len=2) "sk",
          (string) (len=7) "KeyType": (string) (len=5) "RANGE"
         }
        }
       }
      }
     }
    },
    SchemaProps: (spec.SchemaProps) {
     ID: (string) "",
     Ref: (spec.Ref) ,
     Schema: (spec.SchemaURL) "",
     Description: (string) "",
     Type: (spec.StringOrArray) (len=1 cap=1) {
      (string) (len=6) "object"
     },
     Format: (string) "",
     Title: (string) "",
     Default: (interface {}) <nil>,
     Maximum: (*float64)(<nil>),
     ExclusiveMaximum: (bool) false,
     Minimum: (*float64)(<nil>),
     ExclusiveMinimum: (bool) false,
     MaxLength: (*int64)(<nil>),
     MinLength: (*int64)(<nil>),
     Pattern: (string) "",
     MaxItems: (*int64)(<nil>),
     MinItems: (*int64)(<nil>),
     UniqueItems: (bool) false,
     MultipleOf: (*float64)(<nil>),
     Enum: ([]interface {}) <nil>,
     MaxProperties: (*int64)(<nil>),
     MinProperties: (*int64)(<nil>),
     Required: ([]string) <nil>,
     Items: (*spec.SchemaOrArray)(<nil>),
     AllOf: ([]spec.Schema) <nil>,
     OneOf: ([]spec.Schema) <nil>,
     AnyOf: ([]spec.Schema) <nil>,
     Not: (*spec.Schema)(<nil>),
     Properties: (map[string]spec.Schema) (len=4) {
      (string) (len=2) "sk": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=4) "data": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) (len=4) "byte",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=3) "ttl": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=7) "integer"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=2) "pk": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      }
     },
     AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
     PatternProperties: (map[string]spec.Schema) <nil>,
     Dependencies: (spec.Dependencies) <nil>,
     AdditionalItems: (*spec.SchemaOrBool)(<nil>),
     Definitions: (spec.Definitions) <nil>
    },
    SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
     Discriminator: (string) "",
     ReadOnly: (bool) false,
     XML: (*spec.XMLObject)(<nil>),
     ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
     Example: (interface {}) <nil>
    },
    ExtraProps: (map[string]interface {}) <nil>
   },
   (string) (len=18) "ThingWithDateRange": (spec.Schema) {
    VendorExtensible: (spec.VendorExtensible) {
     Extensions: (spec.Extensions) (len=1) {
      (string) (len=4) "x-db": (map[string]interface {}) (len=2) {
       (string) (len=15) "AllowOverwrites": (bool) true,
       (string) (len=8) "DynamoDB": (map[string]interface {}) (len=1) {
        (string) (len=9) "KeySchema": ([]interface {}) (len=2 cap=2) {
         (map[string]interface {}) (len=2) {
          (string) (len=13) "AttributeName": (string) (len=4) "name",
          (string) (len=7) "KeyType": (string) (len=4) "HASH"
         },
         (map[string]interface {}) (len=2) {
          (string) (len=13) "AttributeName": (string) (len=4) "date",
          (string) (len=7) "KeyType": (string) (len=5) "RANGE"
         }
        }
       }
      }
     }
    },
    SchemaProps: (spec.SchemaProps) {
     ID: (string) "",
     Ref: (spec.Ref) ,
     Schema: (spec.SchemaURL) "",
     Description: (string) "",
     Type: (spec.StringOrArray) (len=1 cap=1) {
      (string) (len=6) "object"
     },
     Format: (string) "",
     Title: (string) "",
     Default: (interface {}) <nil>,
     Maximum: (*float64)(<nil>),
     ExclusiveMaximum: (bool) false,
     Minimum: (*float64)(<nil>),
     ExclusiveMinimum: (bool) false,
     MaxLength: (*int64)(<nil>),
     MinLength: (*int64)(<nil>),
     Pattern: (string) "",
     MaxItems: (*int64)(<nil>),
     MinItems: (*int64)(<nil>),
     UniqueItems: (bool) false,
     MultipleOf: (*float64)(<nil>),
     Enum: ([]interface {}) <nil>,
     MaxProperties: (*int64)(<nil>),
     MinProperties: (*int64)(<nil>),
     Required: ([]string) <nil>,
     Items: (*spec.SchemaOrArray)(<nil>),
     AllOf: ([]spec.Schema) <nil>,
     OneOf: ([]spec.Schema) <nil>,
     AnyOf: ([]spec.Schema) <nil>,
     Not: (*spec.Schema)(<nil>),
     Properties: (map[string]spec.Schema) (len=2) {
      (string) (len=4) "name": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=4) "date": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) (len=9) "date-time",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      }
     },
     AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
     PatternProperties: (map[string]spec.Schema) <nil>,
     Dependencies: (spec.Dependencies) <nil>,
     AdditionalItems: (*spec.SchemaOrBool)(<nil>),
     Definitions: (spec.Definitions) <nil>
    },
    SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
     Discriminator: (string) "",
     ReadOnly: (bool) false,
     XML: (*spec.XMLObject)(<nil>),
     ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
     Example: (interface {}) <nil>
    },
    ExtraProps: (map[string]interface {}) <nil>
   },
   (string) (len=47) "ThingWithRequiredCompositePropertiesAndKeysOnly": (spec.Schema) {
    VendorExtensible: (spec.VendorExtensible) {
     Extensions: (spec.Extensions) (len=1) {
      (string) (len=4) "x-db": (map[string]interface {}) (len=3) {
       (string) (len=15) "AllowOverwrites": (bool) true,
       (string) (len=19) "CompositeAttributes": ([]interface {}) (len=1 cap=1) {
        (map[string]interface {}) (len=3) {
         (string) (len=10) "Properties": ([]interface {}) (len=2 cap=2) {
          (string) (len=11) "propertyOne",
          (string) (len=11) "propertyTwo"
         },
         (string) (len=9) "Separator": (string) (len=1) "_",
         (string) (len=13) "AttributeName": (string) (len=17) "propertyOneAndTwo"
        }
       },
       (string) (len=8) "DynamoDB": (map[string]interface {}) (len=2) {
        (string) (len=9) "KeySchema": ([]interface {}) (len=1 cap=1) {
         (map[string]interface {}) (len=2) {
          (string) (len=13) "AttributeName": (string) (len=13) "propertyThree",
          (string) (len=7) "KeyType": (string) (len=4) "HASH"
         }
        },
        (string) (len=22) "GlobalSecondaryIndexes": ([]interface {}) (len=1 cap=1) {
         (map[string]interface {}) (len=3) {
          (string) (len=9) "IndexName": (string) (len=31) "propertyOneAndTwo_PropertyThree",
          (string) (len=9) "KeySchema": ([]interface {}) (len=2 cap=2) {
           (map[string]interface {}) (len=2) {
            (string) (len=7) "KeyType": (string) (len=4) "HASH",
            (string) (len=13) "AttributeName": (string) (len=17) "propertyOneAndTwo"
           },
           (map[string]interface {}) (len=2) {
            (string) (len=13) "AttributeName": (string) (len=13) "propertyThree",
            (string) (len=7) "KeyType": (string) (len=5) "RANGE"
           }
          },
          (string) (len=10) "Projection": (map[string]interface {}) (len=1) {
           (string) (len=14) "ProjectionType": (string) (len=9) "KEYS_ONLY"
          }
         }
        }
       }
      }
     }
    },
    SchemaProps: (spec.SchemaProps) {
     ID: (string) "",
     Ref: (spec.Ref) ,
     Schema: (spec.SchemaURL) "",
     Description: (string) "",
     Type: (spec.StringOrArray) (len=1 cap=1) {
      (string) (len=6) "object"
     },
     Format: (string) "",
     Title: (string) "",
     Default: (interface {}) <nil>,
     Maximum: (*float64)(<nil>),
     ExclusiveMaximum: (bool) false,
     Minimum: (*float64)(<nil>),
     ExclusiveMinimum: (bool) false,
     MaxLength: (*int64)(<nil>),
     MinLength: (*int64)(<nil>),
     Pattern: (string) "",
     MaxItems: (*int64)(<nil>),
     MinItems: (*int64)(<nil>),
     UniqueItems: (bool) false,
     MultipleOf: (*float64)(<nil>),
     Enum: ([]interface {}) <nil>,
     MaxProperties: (*int64)(<nil>),
     MinProperties: (*int64)(<nil>),
     Required: ([]string) (len=3 cap=4) {
      (string) (len=11) "propertyOne",
      (string) (len=11) "propertyTwo",
      (string) (len=13) "propertyThree"
     },
     Items: (*spec.SchemaOrArray)(<nil>),
     AllOf: ([]spec.Schema) <nil>,
     OneOf: ([]spec.Schema) <nil>,
     AnyOf: ([]spec.Schema) <nil>,
     Not: (*spec.Schema)(<nil>),
     Properties: (map[string]spec.Schema) (len=3) {
      (string) (len=11) "propertyTwo": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=13) "propertyThree": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=11) "propertyOne": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      }
     },
     AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
     PatternProperties: (map[string]spec.Schema) <nil>,
     Dependencies: (spec.Dependencies) <nil>,
     AdditionalItems: (*spec.SchemaOrBool)(<nil>),
     Definitions: (spec.Definitions) <nil>
    },
    SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
     Discriminator: (string) "",
     ReadOnly: (bool) false,
     XML: (*spec.XMLObject)(<nil>),
     ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
     Example: (interface {}) <nil>
    },
    ExtraProps: (map[string]interface {}) <nil>
   },
   (string) (len=5) "Thing": (spec.Schema) {
    VendorExtensible: (spec.VendorExtensible) {
     Extensions: (spec.Extensions) (len=1) {
      (string) (len=4) "x-db": (map[string]interface {}) (len=4) {
       (string) (len=15) "AllowOverwrites": (bool) false,
       (string) (len=21) "AllowPrimaryIndexScan": (bool) true,
       (string) (len=23) "AllowSecondaryIndexScan": ([]interface {}) (len=1 cap=1) {
        (string) (len=14) "name-createdAt"
       },
       (string) (len=8) "DynamoDB": (map[string]interface {}) (len=2) {
        (string) (len=22) "GlobalSecondaryIndexes": ([]interface {}) (len=2 cap=2) {
         (map[string]interface {}) (len=3) {
          (string) (len=9) "IndexName": (string) (len=7) "thingID",
          (string) (len=10) "Projection": (map[string]interface {}) (len=1) {
           (string) (len=14) "ProjectionType": (string) (len=3) "ALL"
          },
          (string) (len=9) "KeySchema": ([]interface {}) (len=1 cap=1) {
           (map[string]interface {}) (len=2) {
            (string) (len=13) "AttributeName": (string) (len=2) "id",
            (string) (len=7) "KeyType": (string) (len=4) "HASH"
           }
          }
         },
         (map[string]interface {}) (len=3) {
          (string) (len=9) "IndexName": (string) (len=14) "name-createdAt",
          (string) (len=10) "Projection": (map[string]interface {}) (len=1) {
           (string) (len=14) "ProjectionType": (string) (len=3) "ALL"
          },
          (string) (len=9) "KeySchema": ([]interface {}) (len=2 cap=2) {
           (map[string]interface {}) (len=2) {
            (string) (len=13) "AttributeName": (string) (len=4) "name",
            (string) (len=7) "KeyType": (string) (len=4) "HASH"
           },
           (map[string]interface {}) (len=2) {
            (string) (len=13) "AttributeName": (string) (len=9) "createdAt",
            (string) (len=7) "KeyType": (string) (len=5) "RANGE"
           }
          }
         }
        },
        (string) (len=9) "KeySchema": ([]interface {}) (len=2 cap=2) {
         (map[string]interface {}) (len=2) {
          (string) (len=7) "KeyType": (string) (len=4) "HASH",
          (string) (len=13) "AttributeName": (string) (len=4) "name"
         },
         (map[string]interface {}) (len=2) {
          (string) (len=13) "AttributeName": (string) (len=7) "version",
          (string) (len=7) "KeyType": (string) (len=5) "RANGE"
         }
        }
       }
      }
     }
    },
    SchemaProps: (spec.SchemaProps) {
     ID: (string) "",
     Ref: (spec.Ref) ,
     Schema: (spec.SchemaURL) "",
     Description: (string) "",
     Type: (spec.StringOrArray) (len=1 cap=1) {
      (string) (len=6) "object"
     },
     Format: (string) "",
     Title: (string) "",
     Default: (interface {}) <nil>,
     Maximum: (*float64)(<nil>),
     ExclusiveMaximum: (bool) false,
     Minimum: (*float64)(<nil>),
     ExclusiveMinimum: (bool) false,
     MaxLength: (*int64)(<nil>),
     MinLength: (*int64)(<nil>),
     Pattern: (string) "",
     MaxItems: (*int64)(<nil>),
     MinItems: (*int64)(<nil>),
     UniqueItems: (bool) false,
     MultipleOf: (*float64)(<nil>),
     Enum: ([]interface {}) <nil>,
     MaxProperties: (*int64)(<nil>),
     MinProperties: (*int64)(<nil>),
     Required: ([]string) <nil>,
     Items: (*spec.SchemaOrArray)(<nil>),
     AllOf: ([]spec.Schema) <nil>,
     OneOf: ([]spec.Schema) <nil>,
     AnyOf: ([]spec.Schema) <nil>,
     Not: (*spec.Schema)(<nil>),
     Properties: (map[string]spec.Schema) (len=6) {
      (string) (len=2) "id": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=4) "name": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=7) "version": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=7) "integer"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=9) "createdAt": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) (len=9) "date-time",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=8) "category": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) #/definitions/Category,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) <nil>,
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=12) "nestedObject": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) #/definitions/Object,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) <nil>,
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      }
     },
     AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
     PatternProperties: (map[string]spec.Schema) <nil>,
     Dependencies: (spec.Dependencies) <nil>,
     AdditionalItems: (*spec.SchemaOrBool)(<nil>),
     Definitions: (spec.Definitions) <nil>
    },
    SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
     Discriminator: (string) "",
     ReadOnly: (bool) false,
     XML: (*spec.XMLObject)(<nil>),
     ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
     Example: (interface {}) <nil>
    },
    ExtraProps: (map[string]interface {}) <nil>
   },
   (string) (len=11) "SimpleThing": (spec.Schema) {
    VendorExtensible: (spec.VendorExtensible) {
     Extensions: (spec.Extensions) (len=1) {
      (string) (len=4) "x-db": (map[string]interface {}) (len=2) {
       (string) (len=15) "AllowOverwrites": (bool) false,
       (string) (len=8) "DynamoDB": (map[string]interface {}) (len=1) {
        (string) (len=9) "KeySchema": ([]interface {}) (len=1 cap=1) {
         (map[string]interface {}) (len=2) {
          (string) (len=13) "AttributeName": (string) (len=4) "name",
          (string) (len=7) "KeyType": (string) (len=4) "HASH"
         }
        }
       }
      }
     }
    },
    SchemaProps: (spec.SchemaProps) {
     ID: (string) "",
     Ref: (spec.Ref) ,
     Schema: (spec.SchemaURL) "",
     Description: (string) "",
     Type: (spec.StringOrArray) (len=1 cap=1) {
      (string) (len=6) "object"
     },
     Format: (string) "",
     Title: (string) "",
     Default: (interface {}) <nil>,
     Maximum: (*float64)(<nil>),
     ExclusiveMaximum: (bool) false,
     Minimum: (*float64)(<nil>),
     ExclusiveMinimum: (bool) false,
     MaxLength: (*int64)(<nil>),
     MinLength: (*int64)(<nil>),
     Pattern: (string) "",
     MaxItems: (*int64)(<nil>),
     MinItems: (*int64)(<nil>),
     UniqueItems: (bool) false,
     MultipleOf: (*float64)(<nil>),
     Enum: ([]interface {}) <nil>,
     MaxProperties: (*int64)(<nil>),
     MinProperties: (*int64)(<nil>),
     Required: ([]string) <nil>,
     Items: (*spec.SchemaOrArray)(<nil>),
     AllOf: ([]spec.Schema) <nil>,
     OneOf: ([]spec.Schema) <nil>,
     AnyOf: ([]spec.Schema) <nil>,
     Not: (*spec.Schema)(<nil>),
     Properties: (map[string]spec.Schema) (len=2) {
      (string) (len=2) "id": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=4) "name": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      }
     },
     AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
     PatternProperties: (map[string]spec.Schema) <nil>,
     Dependencies: (spec.Dependencies) <nil>,
     AdditionalItems: (*spec.SchemaOrBool)(<nil>),
     Definitions: (spec.Definitions) <nil>
    },
    SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
     Discriminator: (string) "",
     ReadOnly: (bool) false,
     XML: (*spec.XMLObject)(<nil>),
     ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
     Example: (interface {}) <nil>
    },
    ExtraProps: (map[string]interface {}) <nil>
   },
   (string) (len=24) "ThingWithRequiredFields2": (spec.Schema) {
    VendorExtensible: (spec.VendorExtensible) {
     Extensions: (spec.Extensions) (len=1) {
      (string) (len=4) "x-db": (map[string]interface {}) (len=2) {
       (string) (len=15) "AllowOverwrites": (bool) false,
       (string) (len=8) "DynamoDB": (map[string]interface {}) (len=1) {
        (string) (len=9) "KeySchema": ([]interface {}) (len=2 cap=2) {
         (map[string]interface {}) (len=2) {
          (string) (len=13) "AttributeName": (string) (len=4) "name",
          (string) (len=7) "KeyType": (string) (len=4) "HASH"
         },
         (map[string]interface {}) (len=2) {
          (string) (len=13) "AttributeName": (string) (len=2) "id",
          (string) (len=7) "KeyType": (string) (len=5) "RANGE"
         }
        }
       }
      }
     }
    },
    SchemaProps: (spec.SchemaProps) {
     ID: (string) "",
     Ref: (spec.Ref) ,
     Schema: (spec.SchemaURL) "",
     Description: (string) "",
     Type: (spec.StringOrArray) (len=1 cap=1) {
      (string) (len=6) "object"
     },
     Format: (string) "",
     Title: (string) "",
     Default: (interface {}) <nil>,
     Maximum: (*float64)(<nil>),
     ExclusiveMaximum: (bool) false,
     Minimum: (*float64)(<nil>),
     ExclusiveMinimum: (bool) false,
     MaxLength: (*int64)(<nil>),
     MinLength: (*int64)(<nil>),
     Pattern: (string) "",
     MaxItems: (*int64)(<nil>),
     MinItems: (*int64)(<nil>),
     UniqueItems: (bool) false,
     MultipleOf: (*float64)(<nil>),
     Enum: ([]interface {}) <nil>,
     MaxProperties: (*int64)(<nil>),
     MinProperties: (*int64)(<nil>),
     Required: ([]string) (len=2 cap=4) {
      (string) (len=2) "id",
      (string) (len=4) "name"
     },
     Items: (*spec.SchemaOrArray)(<nil>),
     AllOf: ([]spec.Schema) <nil>,
     OneOf: ([]spec.Schema) <nil>,
     AnyOf: ([]spec.Schema) <nil>,
     Not: (*spec.Schema)(<nil>),
     Properties: (map[string]spec.Schema) (len=2) {
      (string) (len=2) "id": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=4) "name": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      }
     },
     AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
     PatternProperties: (map[string]spec.Schema) <nil>,
     Dependencies: (spec.Dependencies) <nil>,
     AdditionalItems: (*spec.SchemaOrBool)(<nil>),
     Definitions: (spec.Definitions) <nil>
    },
    SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
     Discriminator: (string) "",
     ReadOnly: (bool) false,
     XML: (*spec.XMLObject)(<nil>),
     ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
     Example: (interface {}) <nil>
    },
    ExtraProps: (map[string]interface {}) <nil>
   },
   (string) (len=35) "NoRangeThingWithCompositeAttributes": (spec.Schema) {
    VendorExtensible: (spec.VendorExtensible) {
     Extensions: (spec.Extensions) (len=1) {
      (string) (len=4) "x-db": (map[string]interface {}) (len=3) {
       (string) (len=15) "AllowOverwrites": (bool) false,
       (string) (len=19) "CompositeAttributes": ([]interface {}) (len=2 cap=2) {
        (map[string]interface {}) (len=3) {
         (string) (len=13) "AttributeName": (string) (len=11) "name_branch",
         (string) (len=10) "Properties": ([]interface {}) (len=2 cap=2) {
          (string) (len=4) "name",
          (string) (len=6) "branch"
         },
         (string) (len=9) "Separator": (string) (len=1) "@"
        },
        (map[string]interface {}) (len=3) {
         (string) (len=9) "Separator": (string) (len=1) ":",
         (string) (len=13) "AttributeName": (string) (len=12) "name_version",
         (string) (len=10) "Properties": ([]interface {}) (len=2 cap=2) {
          (string) (len=4) "name",
          (string) (len=7) "version"
         }
        }
       },
       (string) (len=8) "DynamoDB": (map[string]interface {}) (len=2) {
        (string) (len=9) "KeySchema": ([]interface {}) (len=1 cap=1) {
         (map[string]interface {}) (len=2) {
          (string) (len=13) "AttributeName": (string) (len=11) "name_branch",
          (string) (len=7) "KeyType": (string) (len=4) "HASH"
         }
        },
        (string) (len=22) "GlobalSecondaryIndexes": ([]interface {}) (len=1 cap=1) {
         (map[string]interface {}) (len=3) {
          (string) (len=9) "IndexName": (string) (len=11) "nameVersion",
          (string) (len=10) "Projection": (map[string]interface {}) (len=1) {
           (string) (len=14) "ProjectionType": (string) (len=3) "ALL"
          },
          (string) (len=9) "KeySchema": ([]interface {}) (len=2 cap=2) {
           (map[string]interface {}) (len=2) {
            (string) (len=13) "AttributeName": (string) (len=12) "name_version",
            (string) (len=7) "KeyType": (string) (len=4) "HASH"
           },
           (map[string]interface {}) (len=2) {
            (string) (len=13) "AttributeName": (string) (len=4) "date",
            (string) (len=7) "KeyType": (string) (len=5) "RANGE"
           }
          }
         }
        }
       }
      }
     }
    },
    SchemaProps: (spec.SchemaProps) {
     ID: (string) "",
     Ref: (spec.Ref) ,
     Schema: (spec.SchemaURL) "",
     Description: (string) "",
     Type: (spec.StringOrArray) (len=1 cap=1) {
      (string) (len=6) "object"
     },
     Format: (string) "",
     Title: (string) "",
     Default: (interface {}) <nil>,
     Maximum: (*float64)(<nil>),
     ExclusiveMaximum: (bool) false,
     Minimum: (*float64)(<nil>),
     ExclusiveMinimum: (bool) false,
     MaxLength: (*int64)(<nil>),
     MinLength: (*int64)(<nil>),
     Pattern: (string) "",
     MaxItems: (*int64)(<nil>),
     MinItems: (*int64)(<nil>),
     UniqueItems: (bool) false,
     MultipleOf: (*float64)(<nil>),
     Enum: ([]interface {}) <nil>,
     MaxProperties: (*int64)(<nil>),
     MinProperties: (*int64)(<nil>),
     Required: ([]string) (len=3 cap=4) {
      (string) (len=4) "name",
      (string) (len=6) "branch",
      (string) (len=4) "date"
     },
     Items: (*spec.SchemaOrArray)(<nil>),
     AllOf: ([]spec.Schema) <nil>,
     OneOf: ([]spec.Schema) <nil>,
     AnyOf: ([]spec.Schema) <nil>,
     Not: (*spec.Schema)(<nil>),
     Properties: (map[string]spec.Schema) (len=4) {
      (string) (len=6) "branch": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=7) "version": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=7) "integer"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=4) "date": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) (len=9) "date-time",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=4) "name": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      }
     },
     AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
     PatternProperties: (map[string]spec.Schema) <nil>,
     Dependencies: (spec.Dependencies) <nil>,
     AdditionalItems: (*spec.SchemaOrBool)(<nil>),
     Definitions: (spec.Definitions) <nil>
    },
    SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
     Discriminator: (string) "",
     ReadOnly: (bool) false,
     XML: (*spec.XMLObject)(<nil>),
     ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
     Example: (interface {}) <nil>
    },
    ExtraProps: (map[string]interface {}) <nil>
   },
   (string) (len=10) "BadRequest": (spec.Schema) {
    VendorExtensible: (spec.VendorExtensible) {
     Extensions: (spec.Extensions) <nil>
    },
    SchemaProps: (spec.SchemaProps) {
     ID: (string) "",
     Ref: (spec.Ref) ,
     Schema: (spec.SchemaURL) "",
     Description: (string) "",
     Type: (spec.StringOrArray) (len=1 cap=1) {
      (string) (len=6) "object"
     },
     Format: (string) "",
     Title: (string) "",
     Default: (interface {}) <nil>,
     Maximum: (*float64)(<nil>),
     ExclusiveMaximum: (bool) false,
     Minimum: (*float64)(<nil>),
     ExclusiveMinimum: (bool) false,
     MaxLength: (*int64)(<nil>),
     MinLength: (*int64)(<nil>),
     Pattern: (string) "",
     MaxItems: (*int64)(<nil>),
     MinItems: (*int64)(<nil>),
     UniqueItems: (bool) false,
     MultipleOf: (*float64)(<nil>),
     Enum: ([]interface {}) <nil>,
     MaxProperties: (*int64)(<nil>),
     MinProperties: (*int64)(<nil>),
     Required: ([]string) <nil>,
     Items: (*spec.SchemaOrArray)(<nil>),
     AllOf: ([]spec.Schema) <nil>,
     OneOf: ([]spec.Schema) <nil>,
     AnyOf: ([]spec.Schema) <nil>,
     Not: (*spec.Schema)(<nil>),
     Properties: (map[string]spec.Schema) (len=1) {
      (string) (len=7) "message": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      }
     },
     AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
     PatternProperties: (map[string]spec.Schema) <nil>,
     Dependencies: (spec.Dependencies) <nil>,
     AdditionalItems: (*spec.SchemaOrBool)(<nil>),
     Definitions: (spec.Definitions) <nil>
    },
    SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
     Discriminator: (string) "",
     ReadOnly: (bool) false,
     XML: (*spec.XMLObject)(<nil>),
     ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
     Example: (interface {}) <nil>
    },
    ExtraProps: (map[string]interface {}) <nil>
   },
   (string) (len=6) "Object": (spec.Schema) {
    VendorExtensible: (spec.VendorExtensible) {
     Extensions: (spec.Extensions) <nil>
    },
    SchemaProps: (spec.SchemaProps) {
     ID: (string) "",
     Ref: (spec.Ref) ,
     Schema: (spec.SchemaURL) "",
     Description: (string) "",
     Type: (spec.StringOrArray) (len=1 cap=1) {
      (string) (len=6) "object"
     },
     Format: (string) "",
     Title: (string) "",
     Default: (interface {}) <nil>,
     Maximum: (*float64)(<nil>),
     ExclusiveMaximum: (bool) false,
     Minimum: (*float64)(<nil>),
     ExclusiveMinimum: (bool) false,
     MaxLength: (*int64)(<nil>),
     MinLength: (*int64)(<nil>),
     Pattern: (string) "",
     MaxItems: (*int64)(<nil>),
     MinItems: (*int64)(<nil>),
     UniqueItems: (bool) false,
     MultipleOf: (*float64)(<nil>),
     Enum: ([]interface {}) <nil>,
     MaxProperties: (*int64)(<nil>),
     MinProperties: (*int64)(<nil>),
     Required: ([]string) <nil>,
     Items: (*spec.SchemaOrArray)(<nil>),
     AllOf: ([]spec.Schema) <nil>,
     OneOf: ([]spec.Schema) <nil>,
     AnyOf: ([]spec.Schema) <nil>,
     Not: (*spec.Schema)(<nil>),
     Properties: (map[string]spec.Schema) (len=2) {
      (string) (len=3) "foo": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=3) "bar": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      }
     },
     AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
     PatternProperties: (map[string]spec.Schema) <nil>,
     Dependencies: (spec.Dependencies) <nil>,
     AdditionalItems: (*spec.SchemaOrBool)(<nil>),
     Definitions: (spec.Definitions) <nil>
    },
    SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
     Discriminator: (string) "",
     ReadOnly: (bool) false,
     XML: (*spec.XMLObject)(<nil>),
     ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
     Example: (interface {}) <nil>
    },
    ExtraProps: (map[string]interface {}) <nil>
   },
   (string) (len=23) "ThingWithRequiredFields": (spec.Schema) {
    VendorExtensible: (spec.VendorExtensible) {
     Extensions: (spec.Extensions) (len=1) {
      (string) (len=4) "x-db": (map[string]interface {}) (len=2) {
       (string) (len=15) "AllowOverwrites": (bool) false,
       (string) (len=8) "DynamoDB": (map[string]interface {}) (len=1) {
        (string) (len=9) "KeySchema": ([]interface {}) (len=1 cap=1) {
         (map[string]interface {}) (len=2) {
          (string) (len=13) "AttributeName": (string) (len=4) "name",
          (string) (len=7) "KeyType": (string) (len=4) "HASH"
         }
        }
       }
      }
     }
    },
    SchemaProps: (spec.SchemaProps) {
     ID: (string) "",
     Ref: (spec.Ref) ,
     Schema: (spec.SchemaURL) "",
     Description: (string) "",
     Type: (spec.StringOrArray) (len=1 cap=1) {
      (string) (len=6) "object"
     },
     Format: (string) "",
     Title: (string) "",
     Default: (interface {}) <nil>,
     Maximum: (*float64)(<nil>),
     ExclusiveMaximum: (bool) false,
     Minimum: (*float64)(<nil>),
     ExclusiveMinimum: (bool) false,
     MaxLength: (*int64)(<nil>),
     MinLength: (*int64)(<nil>),
     Pattern: (string) "",
     MaxItems: (*int64)(<nil>),
     MinItems: (*int64)(<nil>),
     UniqueItems: (bool) false,
     MultipleOf: (*float64)(<nil>),
     Enum: ([]interface {}) <nil>,
     MaxProperties: (*int64)(<nil>),
     MinProperties: (*int64)(<nil>),
     Required: ([]string) (len=2 cap=4) {
      (string) (len=2) "id",
      (string) (len=4) "name"
     },
     Items: (*spec.SchemaOrArray)(<nil>),
     AllOf: ([]spec.Schema) <nil>,
     OneOf: ([]spec.Schema) <nil>,
     AnyOf: ([]spec.Schema) <nil>,
     Not: (*spec.Schema)(<nil>),
     Properties: (map[string]spec.Schema) (len=2) {
      (string) (len=2) "id": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=4) "name": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      }
     },
     AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
     PatternProperties: (map[string]spec.Schema) <nil>,
     Dependencies: (spec.Dependencies) <nil>,
     AdditionalItems: (*spec.SchemaOrBool)(<nil>),
     Definitions: (spec.Definitions) <nil>
    },
    SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
     Discriminator: (string) "",
     ReadOnly: (bool) false,
     XML: (*spec.XMLObject)(<nil>),
     ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
     Example: (interface {}) <nil>
    },
    ExtraProps: (map[string]interface {}) <nil>
   },
   (string) (len=28) "ThingWithCompositeAttributes": (spec.Schema) {
    VendorExtensible: (spec.VendorExtensible) {
     Extensions: (spec.Extensions) (len=1) {
      (string) (len=4) "x-db": (map[string]interface {}) (len=3) {
       (string) (len=15) "AllowOverwrites": (bool) false,
       (string) (len=19) "CompositeAttributes": ([]interface {}) (len=2 cap=2) {
        (map[string]interface {}) (len=3) {
         (string) (len=13) "AttributeName": (string) (len=11) "name_branch",
         (string) (len=10) "Properties": ([]interface {}) (len=2 cap=2) {
          (string) (len=4) "name",
          (string) (len=6) "branch"
         },
         (string) (len=9) "Separator": (string) (len=1) "@"
        },
        (map[string]interface {}) (len=3) {
         (string) (len=9) "Separator": (string) (len=1) ":",
         (string) (len=13) "AttributeName": (string) (len=12) "name_version",
         (string) (len=10) "Properties": ([]interface {}) (len=2 cap=2) {
          (string) (len=4) "name",
          (string) (len=7) "version"
         }
        }
       },
       (string) (len=8) "DynamoDB": (map[string]interface {}) (len=2) {
        (string) (len=9) "KeySchema": ([]interface {}) (len=2 cap=2) {
         (map[string]interface {}) (len=2) {
          (string) (len=13) "AttributeName": (string) (len=11) "name_branch",
          (string) (len=7) "KeyType": (string) (len=4) "HASH"
         },
         (map[string]interface {}) (len=2) {
          (string) (len=13) "AttributeName": (string) (len=4) "date",
          (string) (len=7) "KeyType": (string) (len=5) "RANGE"
         }
        },
        (string) (len=22) "GlobalSecondaryIndexes": ([]interface {}) (len=1 cap=1) {
         (map[string]interface {}) (len=3) {
          (string) (len=10) "Projection": (map[string]interface {}) (len=1) {
           (string) (len=14) "ProjectionType": (string) (len=3) "ALL"
          },
          (string) (len=9) "KeySchema": ([]interface {}) (len=2 cap=2) {
           (map[string]interface {}) (len=2) {
            (string) (len=13) "AttributeName": (string) (len=12) "name_version",
            (string) (len=7) "KeyType": (string) (len=4) "HASH"
           },
           (map[string]interface {}) (len=2) {
            (string) (len=7) "KeyType": (string) (len=5) "RANGE",
            (string) (len=13) "AttributeName": (string) (len=4) "date"
           }
          },
          (string) (len=9) "IndexName": (string) (len=11) "nameVersion"
         }
        }
       }
      }
     }
    },
    SchemaProps: (spec.SchemaProps) {
     ID: (string) "",
     Ref: (spec.Ref) ,
     Schema: (spec.SchemaURL) "",
     Description: (string) "",
     Type: (spec.StringOrArray) (len=1 cap=1) {
      (string) (len=6) "object"
     },
     Format: (string) "",
     Title: (string) "",
     Default: (interface {}) <nil>,
     Maximum: (*float64)(<nil>),
     ExclusiveMaximum: (bool) false,
     Minimum: (*float64)(<nil>),
     ExclusiveMinimum: (bool) false,
     MaxLength: (*int64)(<nil>),
     MinLength: (*int64)(<nil>),
     Pattern: (string) "",
     MaxItems: (*int64)(<nil>),
     MinItems: (*int64)(<nil>),
     UniqueItems: (bool) false,
     MultipleOf: (*float64)(<nil>),
     Enum: ([]interface {}) <nil>,
     MaxProperties: (*int64)(<nil>),
     MinProperties: (*int64)(<nil>),
     Required: ([]string) (len=3 cap=4) {
      (string) (len=4) "name",
      (string) (len=6) "branch",
      (string) (len=4) "date"
     },
     Items: (*spec.SchemaOrArray)(<nil>),
     AllOf: ([]spec.Schema) <nil>,
     OneOf: ([]spec.Schema) <nil>,
     AnyOf: ([]spec.Schema) <nil>,
     Not: (*spec.Schema)(<nil>),
     Properties: (map[string]spec.Schema) (len=4) {
      (string) (len=4) "name": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=6) "branch": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=7) "version": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=7) "integer"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=4) "date": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) (len=9) "date-time",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      }
     },
     AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
     PatternProperties: (map[string]spec.Schema) <nil>,
     Dependencies: (spec.Dependencies) <nil>,
     AdditionalItems: (*spec.SchemaOrBool)(<nil>),
     Definitions: (spec.Definitions) <nil>
    },
    SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
     Discriminator: (string) "",
     ReadOnly: (bool) false,
     XML: (*spec.XMLObject)(<nil>),
     ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
     Example: (interface {}) <nil>
    },
    ExtraProps: (map[string]interface {}) <nil>
   },
   (string) (len=18) "TeacherSharingRule": (spec.Schema) {
    VendorExtensible: (spec.VendorExtensible) {
     Extensions: (spec.Extensions) (len=1) {
      (string) (len=4) "x-db": (map[string]interface {}) (len=3) {
       (string) (len=15) "AllowOverwrites": (bool) true,
       (string) (len=19) "CompositeAttributes": ([]interface {}) (len=2 cap=2) {
        (map[string]interface {}) (len=3) {
         (string) (len=9) "Separator": (string) (len=1) "_",
         (string) (len=13) "AttributeName": (string) (len=10) "school_app",
         (string) (len=10) "Properties": ([]interface {}) (len=2 cap=2) {
          (string) (len=6) "school",
          (string) (len=3) "app"
         }
        },
        (map[string]interface {}) (len=3) {
         (string) (len=13) "AttributeName": (string) (len=18) "school_teacher_app",
         (string) (len=10) "Properties": ([]interface {}) (len=3 cap=4) {
          (string) (len=6) "school",
          (string) (len=7) "teacher",
          (string) (len=3) "app"
         },
         (string) (len=9) "Separator": (string) (len=1) "_"
        }
       },
       (string) (len=8) "DynamoDB": (map[string]interface {}) (len=2) {
        (string) (len=9) "KeySchema": ([]interface {}) (len=2 cap=2) {
         (map[string]interface {}) (len=2) {
          (string) (len=13) "AttributeName": (string) (len=7) "teacher",
          (string) (len=7) "KeyType": (string) (len=4) "HASH"
         },
         (map[string]interface {}) (len=2) {
          (string) (len=13) "AttributeName": (string) (len=10) "school_app",
          (string) (len=7) "KeyType": (string) (len=5) "RANGE"
         }
        },
        (string) (len=22) "GlobalSecondaryIndexes": ([]interface {}) (len=1 cap=1) {
         (map[string]interface {}) (len=3) {
          (string) (len=9) "IndexName": (string) (len=27) "district_school_teacher_app",
          (string) (len=10) "Projection": (map[string]interface {}) (len=1) {
           (string) (len=14) "ProjectionType": (string) (len=9) "KEYS_ONLY"
          },
          (string) (len=9) "KeySchema": ([]interface {}) (len=2 cap=2) {
           (map[string]interface {}) (len=2) {
            (string) (len=13) "AttributeName": (string) (len=8) "district",
            (string) (len=7) "KeyType": (string) (len=4) "HASH"
           },
           (map[string]interface {}) (len=2) {
            (string) (len=13) "AttributeName": (string) (len=18) "school_teacher_app",
            (string) (len=7) "KeyType": (string) (len=5) "RANGE"
           }
          }
         }
        }
       }
      }
     }
    },
    SchemaProps: (spec.SchemaProps) {
     ID: (string) "",
     Ref: (spec.Ref) ,
     Schema: (spec.SchemaURL) "",
     Description: (string) "",
     Type: (spec.StringOrArray) (len=1 cap=1) {
      (string) (len=6) "object"
     },
     Format: (string) "",
     Title: (string) "",
     Default: (interface {}) <nil>,
     Maximum: (*float64)(<nil>),
     ExclusiveMaximum: (bool) false,
     Minimum: (*float64)(<nil>),
     ExclusiveMinimum: (bool) false,
     MaxLength: (*int64)(<nil>),
     MinLength: (*int64)(<nil>),
     Pattern: (string) "",
     MaxItems: (*int64)(<nil>),
     MinItems: (*int64)(<nil>),
     UniqueItems: (bool) false,
     MultipleOf: (*float64)(<nil>),
     Enum: ([]interface {}) <nil>,
     MaxProperties: (*int64)(<nil>),
     MinProperties: (*int64)(<nil>),
     Required: ([]string) <nil>,
     Items: (*spec.SchemaOrArray)(<nil>),
     AllOf: ([]spec.Schema) <nil>,
     OneOf: ([]spec.Schema) <nil>,
     AnyOf: ([]spec.Schema) <nil>,
     Not: (*spec.Schema)(<nil>),
     Properties: (map[string]spec.Schema) (len=6) {
      (string) (len=2) "id": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=8) "district": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=6) "school": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=7) "teacher": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=3) "app": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=8) "sections": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=5) "array"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(0xc0007387c0)({
         Schema: (*spec.Schema)(0xc000322d80)({
          VendorExtensible: (spec.VendorExtensible) {
           Extensions: (spec.Extensions) <nil>
          },
          SchemaProps: (spec.SchemaProps) {
           ID: (string) "",
           Ref: (spec.Ref) ,
           Schema: (spec.SchemaURL) "",
           Description: (string) "",
           Type: (spec.StringOrArray) (len=1 cap=1) {
            (string) (len=6) "string"
           },
           Format: (string) "",
           Title: (string) "",
           Default: (interface {}) <nil>,
           Maximum: (*float64)(<nil>),
           ExclusiveMaximum: (bool) false,
           Minimum: (*float64)(<nil>),
           ExclusiveMinimum: (bool) false,
           MaxLength: (*int64)(<nil>),
           MinLength: (*int64)(<nil>),
           Pattern: (string) "",
           MaxItems: (*int64)(<nil>),
           MinItems: (*int64)(<nil>),
           UniqueItems: (bool) false,
           MultipleOf: (*float64)(<nil>),
           Enum: ([]interface {}) <nil>,
           MaxProperties: (*int64)(<nil>),
           MinProperties: (*int64)(<nil>),
           Required: ([]string) <nil>,
           Items: (*spec.SchemaOrArray)(<nil>),
           AllOf: ([]spec.Schema) <nil>,
           OneOf: ([]spec.Schema) <nil>,
           AnyOf: ([]spec.Schema) <nil>,
           Not: (*spec.Schema)(<nil>),
           Properties: (map[string]spec.Schema) <nil>,
           AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
           PatternProperties: (map[string]spec.Schema) <nil>,
           Dependencies: (spec.Dependencies) <nil>,
           AdditionalItems: (*spec.SchemaOrBool)(<nil>),
           Definitions: (spec.Definitions) <nil>
          },
          SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
           Discriminator: (string) "",
           ReadOnly: (bool) false,
           XML: (*spec.XMLObject)(<nil>),
           ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
           Example: (interface {}) <nil>
          },
          ExtraProps: (map[string]interface {}) <nil>
         }),
         Schemas: ([]spec.Schema) <nil>
        }),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      }
     },
     AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
     PatternProperties: (map[string]spec.Schema) <nil>,
     Dependencies: (spec.Dependencies) <nil>,
     AdditionalItems: (*spec.SchemaOrBool)(<nil>),
     Definitions: (spec.Definitions) <nil>
    },
    SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
     Discriminator: (string) "",
     ReadOnly: (bool) false,
     XML: (*spec.XMLObject)(<nil>),
     ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
     Example: (interface {}) <nil>
    },
    ExtraProps: (map[string]interface {}) <nil>
   },
   (string) (len=32) "ThingWithCompositeEnumAttributes": (spec.Schema) {
    VendorExtensible: (spec.VendorExtensible) {
     Extensions: (spec.Extensions) (len=1) {
      (string) (len=4) "x-db": (map[string]interface {}) (len=3) {
       (string) (len=15) "AllowOverwrites": (bool) false,
       (string) (len=19) "CompositeAttributes": ([]interface {}) (len=1 cap=1) {
        (map[string]interface {}) (len=3) {
         (string) (len=13) "AttributeName": (string) (len=11) "name_branch",
         (string) (len=10) "Properties": ([]interface {}) (len=2 cap=2) {
          (string) (len=4) "name",
          (string) (len=8) "branchID"
         },
         (string) (len=9) "Separator": (string) (len=1) "@"
        }
       },
       (string) (len=8) "DynamoDB": (map[string]interface {}) (len=1) {
        (string) (len=9) "KeySchema": ([]interface {}) (len=2 cap=2) {
         (map[string]interface {}) (len=2) {
          (string) (len=13) "AttributeName": (string) (len=11) "name_branch",
          (string) (len=7) "KeyType": (string) (len=4) "HASH"
         },
         (map[string]interface {}) (len=2) {
          (string) (len=13) "AttributeName": (string) (len=4) "date",
          (string) (len=7) "KeyType": (string) (len=5) "RANGE"
         }
        }
       }
      }
     }
    },
    SchemaProps: (spec.SchemaProps) {
     ID: (string) "",
     Ref: (spec.Ref) ,
     Schema: (spec.SchemaURL) "",
     Description: (string) "",
     Type: (spec.StringOrArray) (len=1 cap=1) {
      (string) (len=6) "object"
     },
     Format: (string) "",
     Title: (string) "",
     Default: (interface {}) <nil>,
     Maximum: (*float64)(<nil>),
     ExclusiveMaximum: (bool) false,
     Minimum: (*float64)(<nil>),
     ExclusiveMinimum: (bool) false,
     MaxLength: (*int64)(<nil>),
     MinLength: (*int64)(<nil>),
     Pattern: (string) "",
     MaxItems: (*int64)(<nil>),
     MinItems: (*int64)(<nil>),
     UniqueItems: (bool) false,
     MultipleOf: (*float64)(<nil>),
     Enum: ([]interface {}) <nil>,
     MaxProperties: (*int64)(<nil>),
     MinProperties: (*int64)(<nil>),
     Required: ([]string) (len=3 cap=4) {
      (string) (len=4) "name",
      (string) (len=8) "branchID",
      (string) (len=4) "date"
     },
     Items: (*spec.SchemaOrArray)(<nil>),
     AllOf: ([]spec.Schema) <nil>,
     OneOf: ([]spec.Schema) <nil>,
     AnyOf: ([]spec.Schema) <nil>,
     Not: (*spec.Schema)(<nil>),
     Properties: (map[string]spec.Schema) (len=3) {
      (string) (len=4) "name": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=8) "branchID": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) #/definitions/Branch,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) <nil>,
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=4) "date": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) (len=9) "date-time",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      }
     },
     AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
     PatternProperties: (map[string]spec.Schema) <nil>,
     Dependencies: (spec.Dependencies) <nil>,
     AdditionalItems: (*spec.SchemaOrBool)(<nil>),
     Definitions: (spec.Definitions) <nil>
    },
    SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
     Discriminator: (string) "",
     ReadOnly: (bool) false,
     XML: (*spec.XMLObject)(<nil>),
     ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
     Example: (interface {}) <nil>
    },
    ExtraProps: (map[string]interface {}) <nil>
   },
   (string) (len=6) "Branch": (spec.Schema) {
    VendorExtensible: (spec.VendorExtensible) {
     Extensions: (spec.Extensions) <nil>
    },
    SchemaProps: (spec.SchemaProps) {
     ID: (string) "",
     Ref: (spec.Ref) ,
     Schema: (spec.SchemaURL) "",
     Description: (string) "",
     Type: (spec.StringOrArray) (len=1 cap=1) {
      (string) (len=6) "string"
     },
     Format: (string) "",
     Title: (string) "",
     Default: (interface {}) <nil>,
     Maximum: (*float64)(<nil>),
     ExclusiveMaximum: (bool) false,
     Minimum: (*float64)(<nil>),
     ExclusiveMinimum: (bool) false,
     MaxLength: (*int64)(<nil>),
     MinLength: (*int64)(<nil>),
     Pattern: (string) "",
     MaxItems: (*int64)(<nil>),
     MinItems: (*int64)(<nil>),
     UniqueItems: (bool) false,
     MultipleOf: (*float64)(<nil>),
     Enum: ([]interface {}) (len=3 cap=4) {
      (string) (len=6) "master",
      (string) (len=10) "DEV_BRANCH",
      (string) (len=4) "test"
     },
     MaxProperties: (*int64)(<nil>),
     MinProperties: (*int64)(<nil>),
     Required: ([]string) <nil>,
     Items: (*spec.SchemaOrArray)(<nil>),
     AllOf: ([]spec.Schema) <nil>,
     OneOf: ([]spec.Schema) <nil>,
     AnyOf: ([]spec.Schema) <nil>,
     Not: (*spec.Schema)(<nil>),
     Properties: (map[string]spec.Schema) <nil>,
     AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
     PatternProperties: (map[string]spec.Schema) <nil>,
     Dependencies: (spec.Dependencies) <nil>,
     AdditionalItems: (*spec.SchemaOrBool)(<nil>),
     Definitions: (spec.Definitions) <nil>
    },
    SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
     Discriminator: (string) "",
     ReadOnly: (bool) false,
     XML: (*spec.XMLObject)(<nil>),
     ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
     Example: (interface {}) <nil>
    },
    ExtraProps: (map[string]interface {}) <nil>
   },
   (string) (len=10) "Deployment": (spec.Schema) {
    VendorExtensible: (spec.VendorExtensible) {
     Extensions: (spec.Extensions) (len=1) {
      (string) (len=4) "x-db": (map[string]interface {}) (len=3) {
       (string) (len=15) "AllowOverwrites": (bool) true,
       (string) (len=19) "CompositeAttributes": ([]interface {}) (len=1 cap=1) {
        (map[string]interface {}) (len=3) {
         (string) (len=13) "AttributeName": (string) (len=6) "envApp",
         (string) (len=10) "Properties": ([]interface {}) (len=2 cap=2) {
          (string) (len=11) "environment",
          (string) (len=11) "application"
         },
         (string) (len=9) "Separator": (string) (len=2) "--"
        }
       },
       (string) (len=8) "DynamoDB": (map[string]interface {}) (len=2) {
        (string) (len=9) "KeySchema": ([]interface {}) (len=2 cap=2) {
         (map[string]interface {}) (len=2) {
          (string) (len=13) "AttributeName": (string) (len=6) "envApp",
          (string) (len=7) "KeyType": (string) (len=4) "HASH"
         },
         (map[string]interface {}) (len=2) {
          (string) (len=13) "AttributeName": (string) (len=7) "version",
          (string) (len=7) "KeyType": (string) (len=5) "RANGE"
         }
        },
        (string) (len=22) "GlobalSecondaryIndexes": ([]interface {}) (len=3 cap=4) {
         (map[string]interface {}) (len=3) {
          (string) (len=9) "IndexName": (string) (len=6) "byDate",
          (string) (len=10) "Projection": (map[string]interface {}) (len=1) {
           (string) (len=14) "ProjectionType": (string) (len=3) "ALL"
          },
          (string) (len=9) "KeySchema": ([]interface {}) (len=2 cap=2) {
           (map[string]interface {}) (len=2) {
            (string) (len=7) "KeyType": (string) (len=4) "HASH",
            (string) (len=13) "AttributeName": (string) (len=6) "envApp"
           },
           (map[string]interface {}) (len=2) {
            (string) (len=13) "AttributeName": (string) (len=4) "date",
            (string) (len=7) "KeyType": (string) (len=5) "RANGE"
           }
          }
         },
         (map[string]interface {}) (len=3) {
          (string) (len=9) "IndexName": (string) (len=13) "byEnvironment",
          (string) (len=10) "Projection": (map[string]interface {}) (len=1) {
           (string) (len=14) "ProjectionType": (string) (len=3) "ALL"
          },
          (string) (len=9) "KeySchema": ([]interface {}) (len=2 cap=2) {
           (map[string]interface {}) (len=2) {
            (string) (len=13) "AttributeName": (string) (len=11) "environment",
            (string) (len=7) "KeyType": (string) (len=4) "HASH"
           },
           (map[string]interface {}) (len=2) {
            (string) (len=13) "AttributeName": (string) (len=4) "date",
            (string) (len=7) "KeyType": (string) (len=5) "RANGE"
           }
          }
         },
         (map[string]interface {}) (len=3) {
          (string) (len=9) "IndexName": (string) (len=9) "byVersion",
          (string) (len=10) "Projection": (map[string]interface {}) (len=1) {
           (string) (len=14) "ProjectionType": (string) (len=3) "ALL"
          },
          (string) (len=9) "KeySchema": ([]interface {}) (len=1 cap=1) {
           (map[string]interface {}) (len=2) {
            (string) (len=13) "AttributeName": (string) (len=7) "version",
            (string) (len=7) "KeyType": (string) (len=4) "HASH"
           }
          }
         }
        }
       }
      }
     }
    },
    SchemaProps: (spec.SchemaProps) {
     ID: (string) "",
     Ref: (spec.Ref) ,
     Schema: (spec.SchemaURL) "",
     Description: (string) "",
     Type: (spec.StringOrArray) (len=1 cap=1) {
      (string) (len=6) "object"
     },
     Format: (string) "",
     Title: (string) "",
     Default: (interface {}) <nil>,
     Maximum: (*float64)(<nil>),
     ExclusiveMaximum: (bool) false,
     Minimum: (*float64)(<nil>),
     ExclusiveMinimum: (bool) false,
     MaxLength: (*int64)(<nil>),
     MinLength: (*int64)(<nil>),
     Pattern: (string) "",
     MaxItems: (*int64)(<nil>),
     MinItems: (*int64)(<nil>),
     UniqueItems: (bool) false,
     MultipleOf: (*float64)(<nil>),
     Enum: ([]interface {}) <nil>,
     MaxProperties: (*int64)(<nil>),
     MinProperties: (*int64)(<nil>),
     Required: ([]string) <nil>,
     Items: (*spec.SchemaOrArray)(<nil>),
     AllOf: ([]spec.Schema) <nil>,
     OneOf: ([]spec.Schema) <nil>,
     AnyOf: ([]spec.Schema) <nil>,
     Not: (*spec.Schema)(<nil>),
     Properties: (map[string]spec.Schema) (len=4) {
      (string) (len=11) "application": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=4) "date": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) (len=9) "date-time",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=11) "environment": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) (len=15) "^[a-zA-Z0-9-]+$",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=7) "version": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      }
     },
     AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
     PatternProperties: (map[string]spec.Schema) <nil>,
     Dependencies: (spec.Dependencies) <nil>,
     AdditionalItems: (*spec.SchemaOrBool)(<nil>),
     Definitions: (spec.Definitions) <nil>
    },
    SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
     Discriminator: (string) "",
     ReadOnly: (bool) false,
     XML: (*spec.XMLObject)(<nil>),
     ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
     Example: (interface {}) <nil>
    },
    ExtraProps: (map[string]interface {}) <nil>
   },
   (string) (len=13) "InternalError": (spec.Schema) {
    VendorExtensible: (spec.VendorExtensible) {
     Extensions: (spec.Extensions) <nil>
    },
    SchemaProps: (spec.SchemaProps) {
     ID: (string) "",
     Ref: (spec.Ref) ,
     Schema: (spec.SchemaURL) "",
     Description: (string) "",
     Type: (spec.StringOrArray) (len=1 cap=1) {
      (string) (len=6) "object"
     },
     Format: (string) "",
     Title: (string) "",
     Default: (interface {}) <nil>,
     Maximum: (*float64)(<nil>),
     ExclusiveMaximum: (bool) false,
     Minimum: (*float64)(<nil>),
     ExclusiveMinimum: (bool) false,
     MaxLength: (*int64)(<nil>),
     MinLength: (*int64)(<nil>),
     Pattern: (string) "",
     MaxItems: (*int64)(<nil>),
     MinItems: (*int64)(<nil>),
     UniqueItems: (bool) false,
     MultipleOf: (*float64)(<nil>),
     Enum: ([]interface {}) <nil>,
     MaxProperties: (*int64)(<nil>),
     MinProperties: (*int64)(<nil>),
     Required: ([]string) <nil>,
     Items: (*spec.SchemaOrArray)(<nil>),
     AllOf: ([]spec.Schema) <nil>,
     OneOf: ([]spec.Schema) <nil>,
     AnyOf: ([]spec.Schema) <nil>,
     Not: (*spec.Schema)(<nil>),
     Properties: (map[string]spec.Schema) (len=1) {
      (string) (len=7) "message": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      }
     },
     AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
     PatternProperties: (map[string]spec.Schema) <nil>,
     Dependencies: (spec.Dependencies) <nil>,
     AdditionalItems: (*spec.SchemaOrBool)(<nil>),
     Definitions: (spec.Definitions) <nil>
    },
    SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
     Discriminator: (string) "",
     ReadOnly: (bool) false,
     XML: (*spec.XMLObject)(<nil>),
     ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
     Example: (interface {}) <nil>
    },
    ExtraProps: (map[string]interface {}) <nil>
   },
   (string) (len=8) "Category": (spec.Schema) {
    VendorExtensible: (spec.VendorExtensible) {
     Extensions: (spec.Extensions) <nil>
    },
    SchemaProps: (spec.SchemaProps) {
     ID: (string) "",
     Ref: (spec.Ref) ,
     Schema: (spec.SchemaURL) "",
     Description: (string) "",
     Type: (spec.StringOrArray) (len=1 cap=1) {
      (string) (len=6) "string"
     },
     Format: (string) "",
     Title: (string) "",
     Default: (interface {}) <nil>,
     Maximum: (*float64)(<nil>),
     ExclusiveMaximum: (bool) false,
     Minimum: (*float64)(<nil>),
     ExclusiveMinimum: (bool) false,
     MaxLength: (*int64)(<nil>),
     MinLength: (*int64)(<nil>),
     Pattern: (string) "",
     MaxItems: (*int64)(<nil>),
     MinItems: (*int64)(<nil>),
     UniqueItems: (bool) false,
     MultipleOf: (*float64)(<nil>),
     Enum: ([]interface {}) (len=2 cap=4) {
      (string) (len=1) "a",
      (string) (len=1) "b"
     },
     MaxProperties: (*int64)(<nil>),
     MinProperties: (*int64)(<nil>),
     Required: ([]string) <nil>,
     Items: (*spec.SchemaOrArray)(<nil>),
     AllOf: ([]spec.Schema) <nil>,
     OneOf: ([]spec.Schema) <nil>,
     AnyOf: ([]spec.Schema) <nil>,
     Not: (*spec.Schema)(<nil>),
     Properties: (map[string]spec.Schema) <nil>,
     AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
     PatternProperties: (map[string]spec.Schema) <nil>,
     Dependencies: (spec.Dependencies) <nil>,
     AdditionalItems: (*spec.SchemaOrBool)(<nil>),
     Definitions: (spec.Definitions) <nil>
    },
    SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
     Discriminator: (string) "",
     ReadOnly: (bool) false,
     XML: (*spec.XMLObject)(<nil>),
     ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
     Example: (interface {}) <nil>
    },
    ExtraProps: (map[string]interface {}) <nil>
   },
   (string) (len=20) "ThingWithUnderscores": (spec.Schema) {
    VendorExtensible: (spec.VendorExtensible) {
     Extensions: (spec.Extensions) (len=1) {
      (string) (len=4) "x-db": (map[string]interface {}) (len=2) {
       (string) (len=15) "AllowOverwrites": (bool) true,
       (string) (len=8) "DynamoDB": (map[string]interface {}) (len=1) {
        (string) (len=9) "KeySchema": ([]interface {}) (len=1 cap=1) {
         (map[string]interface {}) (len=2) {
          (string) (len=7) "KeyType": (string) (len=4) "HASH",
          (string) (len=13) "AttributeName": (string) (len=6) "id_app"
         }
        }
       }
      }
     }
    },
    SchemaProps: (spec.SchemaProps) {
     ID: (string) "",
     Ref: (spec.Ref) ,
     Schema: (spec.SchemaURL) "",
     Description: (string) "",
     Type: (spec.StringOrArray) (len=1 cap=1) {
      (string) (len=6) "object"
     },
     Format: (string) "",
     Title: (string) "",
     Default: (interface {}) <nil>,
     Maximum: (*float64)(<nil>),
     ExclusiveMaximum: (bool) false,
     Minimum: (*float64)(<nil>),
     ExclusiveMinimum: (bool) false,
     MaxLength: (*int64)(<nil>),
     MinLength: (*int64)(<nil>),
     Pattern: (string) "",
     MaxItems: (*int64)(<nil>),
     MinItems: (*int64)(<nil>),
     UniqueItems: (bool) false,
     MultipleOf: (*float64)(<nil>),
     Enum: ([]interface {}) <nil>,
     MaxProperties: (*int64)(<nil>),
     MinProperties: (*int64)(<nil>),
     Required: ([]string) <nil>,
     Items: (*spec.SchemaOrArray)(<nil>),
     AllOf: ([]spec.Schema) <nil>,
     OneOf: ([]spec.Schema) <nil>,
     AnyOf: ([]spec.Schema) <nil>,
     Not: (*spec.Schema)(<nil>),
     Properties: (map[string]spec.Schema) (len=1) {
      (string) (len=6) "id_app": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      }
     },
     AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
     PatternProperties: (map[string]spec.Schema) <nil>,
     Dependencies: (spec.Dependencies) <nil>,
     AdditionalItems: (*spec.SchemaOrBool)(<nil>),
     Definitions: (spec.Definitions) <nil>
    },
    SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
     Discriminator: (string) "",
     ReadOnly: (bool) false,
     XML: (*spec.XMLObject)(<nil>),
     ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
     Example: (interface {}) <nil>
    },
    ExtraProps: (map[string]interface {}) <nil>
   }
  },
  Parameters: (map[string]spec.Parameter) <nil>,
  Responses: (map[string]spec.Response) (len=2) {
   (string) (len=10) "BadRequest": (spec.Response) {
    Refable: (spec.Refable) {
     Ref: (spec.Ref) 
    },
    ResponseProps: (spec.ResponseProps) {
     Description: (string) (len=11) "Bad Request",
     Schema: (*spec.Schema)(0xc0004ac6c0)({
      VendorExtensible: (spec.VendorExtensible) {
       Extensions: (spec.Extensions) <nil>
      },
      SchemaProps: (spec.SchemaProps) {
       ID: (string) "",
       Ref: (spec.Ref) #/definitions/BadRequest,
       Schema: (spec.SchemaURL) "",
       Description: (string) "",
       Type: (spec.StringOrArray) <nil>,
       Format: (string) "",
       Title: (string) "",
       Default: (interface {}) <nil>,
       Maximum: (*float64)(<nil>),
       ExclusiveMaximum: (bool) false,
       Minimum: (*float64)(<nil>),
       ExclusiveMinimum: (bool) false,
       MaxLength: (*int64)(<nil>),
       MinLength: (*int64)(<nil>),
       Pattern: (string) "",
       MaxItems: (*int64)(<nil>),
       MinItems: (*int64)(<nil>),
       UniqueItems: (bool) false,
       MultipleOf: (*float64)(<nil>),
       Enum: ([]interface {}) <nil>,
       MaxProperties: (*int64)(<nil>),
       MinProperties: (*int64)(<nil>),
       Required: ([]string) <nil>,
       Items: (*spec.SchemaOrArray)(<nil>),
       AllOf: ([]spec.Schema) <nil>,
       OneOf: ([]spec.Schema) <nil>,
       AnyOf: ([]spec.Schema) <nil>,
       Not: (*spec.Schema)(<nil>),
       Properties: (map[string]spec.Schema) <nil>,
       AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
       PatternProperties: (map[string]spec.Schema) <nil>,
       Dependencies: (spec.Dependencies) <nil>,
       AdditionalItems: (*spec.SchemaOrBool)(<nil>),
       Definitions: (spec.Definitions) <nil>
      },
      SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
       Discriminator: (string) "",
       ReadOnly: (bool) false,
       XML: (*spec.XMLObject)(<nil>),
       ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
       Example: (interface {}) <nil>
      },
      ExtraProps: (map[string]interface {}) <nil>
     }),
     Headers: (map[string]spec.Header) <nil>,
     Examples: (map[string]interface {}) <nil>
    },
    VendorExtensible: (spec.VendorExtensible) {
     Extensions: (spec.Extensions) <nil>
    }
   },
   (string) (len=13) "InternalError": (spec.Response) {
    Refable: (spec.Refable) {
     Ref: (spec.Ref) 
    },
    ResponseProps: (spec.ResponseProps) {
     Description: (string) (len=14) "Internal Error",
     Schema: (*spec.Schema)(0xc0004acb40)({
      VendorExtensible: (spec.VendorExtensible) {
       Extensions: (spec.Extensions) <nil>
      },
      SchemaProps: (spec.SchemaProps) {
       ID: (string) "",
       Ref: (spec.Ref) #/definitions/InternalError,
       Schema: (spec.SchemaURL) "",
       Description: (string) "",
       Type: (spec.StringOrArray) <nil>,
       Format: (string) "",
       Title: (string) "",
       Default: (interface {}) <nil>,
       Maximum: (*float64)(<nil>),
       ExclusiveMaximum: (bool) false,
       Minimum: (*float64)(<nil>),
       ExclusiveMinimum: (bool) false,
       MaxLength: (*int64)(<nil>),
       MinLength: (*int64)(<nil>),
       Pattern: (string) "",
       MaxItems: (*int64)(<nil>),
       MinItems: (*int64)(<nil>),
       UniqueItems: (bool) false,
       MultipleOf: (*float64)(<nil>),
       Enum: ([]interface {}) <nil>,
       MaxProperties: (*int64)(<nil>),
       MinProperties: (*int64)(<nil>),
       Required: ([]string) <nil>,
       Items: (*spec.SchemaOrArray)(<nil>),
       AllOf: ([]spec.Schema) <nil>,
       OneOf: ([]spec.Schema) <nil>,
       AnyOf: ([]spec.Schema) <nil>,
       Not: (*spec.Schema)(<nil>),
       Properties: (map[string]spec.Schema) <nil>,
       AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
       PatternProperties: (map[string]spec.Schema) <nil>,
       Dependencies: (spec.Dependencies) <nil>,
       AdditionalItems: (*spec.SchemaOrBool)(<nil>),
       Definitions: (spec.Definitions) <nil>
      },
      SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
       Discriminator: (string) "",
       ReadOnly: (bool) false,
       XML: (*spec.XMLObject)(<nil>),
       ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
       Example: (interface {}) <nil>
      },
      ExtraProps: (map[string]interface {}) <nil>
     }),
     Headers: (map[string]spec.Header) <nil>,
     Examples: (map[string]interface {}) <nil>
    },
    VendorExtensible: (spec.VendorExtensible) {
     Extensions: (spec.Extensions) <nil>
    }
   }
  },
  SecurityDefinitions: (spec.SecurityDefinitions) <nil>,
  Security: ([]map[string][]string) <nil>,
  Tags: ([]spec.Tag) <nil>,
  ExternalDocs: (*spec.ExternalDocumentation)(<nil>)
 }
}
cd /Users/adamvictor/go/src/github.com/Clever/wag/samples/gen-js-db && jsdoc2md index.js types.js > ./README.md
go generate github.com/Clever/wag/samples/gen-go-db...
./bin/wag -file samples/app-service.yml -go-package github.com/Clever/wag/samples/gen-go-app-service -js-path /Users/adamvictor/go/src/github.com/Clever/wag/samples/gen-js-app-service
(spec.Swagger) {
 VendorExtensible: (spec.VendorExtensible) {
  Extensions: (spec.Extensions) <nil>
 },
 SwaggerProps: (spec.SwaggerProps) {
  ID: (string) "",
  Consumes: ([]string) <nil>,
  Produces: ([]string) (len=1 cap=4) {
   (string) (len=16) "application/json"
  },
  Schemes: ([]string) (len=1 cap=4) {
   (string) (len=4) "http"
  },
  Swagger: (string) (len=3) "2.0",
  Info: (*spec.Info)(0xc000834720)({
   VendorExtensible: (spec.VendorExtensible) {
    Extensions: (spec.Extensions) (len=1) {
     (string) (len=13) "x-npm-package": (string) (len=19) "@clever/app-service"
    }
   },
   InfoProps: (spec.InfoProps) {
    Description: (string) (len=43) "Manages applications and application admins",
    Title: (string) (len=11) "app-service",
    TermsOfService: (string) "",
    Contact: (*spec.ContactInfo)(<nil>),
    License: (*spec.License)(<nil>),
    Version: (string) (len=7) "12.15.1"
   }
  }),
  Host: (string) "",
  BasePath: (string) "",
  Paths: (*spec.Paths)(0xc00082ed60)({
   VendorExtensible: (spec.VendorExtensible) {
    Extensions: (spec.Extensions) <nil>
   },
   Paths: (map[string]spec.PathItem) (len=41) {
    (string) (len=10) "/v1/admins": (spec.PathItem) {
     Refable: (spec.Refable) {
      Ref: (spec.Ref) 
     },
     VendorExtensible: (spec.VendorExtensible) {
      Extensions: (spec.Extensions) <nil>
     },
     PathItemProps: (spec.PathItemProps) {
      Get: (*spec.Operation)(0xc0000e1a40)({
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       OperationProps: (spec.OperationProps) {
        Description: (string) "",
        Consumes: ([]string) <nil>,
        Produces: ([]string) <nil>,
        Schemes: ([]string) <nil>,
        Tags: ([]string) <nil>,
        Summary: (string) (len=15) "Gets app admins",
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        ID: (string) (len=9) "getAdmins",
        Deprecated: (bool) false,
        Security: ([]map[string][]string) <nil>,
        Parameters: ([]spec.Parameter) (len=2 cap=4) {
         (spec.Parameter) {
          Refable: (spec.Refable) {
           Ref: (spec.Ref) 
          },
          CommonValidations: (spec.CommonValidations) {
           Maximum: (*float64)(<nil>),
           ExclusiveMaximum: (bool) false,
           Minimum: (*float64)(<nil>),
           ExclusiveMinimum: (bool) false,
           MaxLength: (*int64)(<nil>),
           MinLength: (*int64)(<nil>),
           Pattern: (string) "",
           MaxItems: (*int64)(<nil>),
           MinItems: (*int64)(<nil>),
           UniqueItems: (bool) false,
           MultipleOf: (*float64)(<nil>),
           Enum: ([]interface {}) <nil>
          },
          SimpleSchema: (spec.SimpleSchema) {
           Type: (string) (len=6) "string",
           Format: (string) "",
           Items: (*spec.Items)(<nil>),
           CollectionFormat: (string) "",
           Default: (interface {}) <nil>,
           Example: (interface {}) <nil>
          },
          VendorExtensible: (spec.VendorExtensible) {
           Extensions: (spec.Extensions) <nil>
          },
          ParamProps: (spec.ParamProps) {
           Description: (string) "",
           Name: (string) (len=5) "email",
           In: (string) (len=5) "query",
           Required: (bool) false,
           Schema: (*spec.Schema)(<nil>),
           AllowEmptyValue: (bool) false
          }
         },
         (spec.Parameter) {
          Refable: (spec.Refable) {
           Ref: (spec.Ref) 
          },
          CommonValidations: (spec.CommonValidations) {
           Maximum: (*float64)(<nil>),
           ExclusiveMaximum: (bool) false,
           Minimum: (*float64)(<nil>),
           ExclusiveMinimum: (bool) false,
           MaxLength: (*int64)(<nil>),
           MinLength: (*int64)(<nil>),
           Pattern: (string) "",
           MaxItems: (*int64)(<nil>),
           MinItems: (*int64)(<nil>),
           UniqueItems: (bool) false,
           MultipleOf: (*float64)(<nil>),
           Enum: ([]interface {}) <nil>
          },
          SimpleSchema: (spec.SimpleSchema) {
           Type: (string) (len=6) "string",
           Format: (string) "",
           Items: (*spec.Items)(<nil>),
           CollectionFormat: (string) "",
           Default: (interface {}) <nil>,
           Example: (interface {}) <nil>
          },
          VendorExtensible: (spec.VendorExtensible) {
           Extensions: (spec.Extensions) <nil>
          },
          ParamProps: (spec.ParamProps) {
           Description: (string) "",
           Name: (string) (len=8) "password",
           In: (string) (len=5) "query",
           Required: (bool) false,
           Schema: (*spec.Schema)(<nil>),
           AllowEmptyValue: (bool) false
          }
         }
        },
        Responses: (*spec.Responses)(0xc00018a700)({
         VendorExtensible: (spec.VendorExtensible) {
          Extensions: (spec.Extensions) <nil>
         },
         ResponsesProps: (spec.ResponsesProps) {
          Default: (*spec.Response)(<nil>),
          StatusCodeResponses: (map[int]spec.Response) (len=1) {
           (int) 200: (spec.Response) {
            Refable: (spec.Refable) {
             Ref: (spec.Ref) 
            },
            ResponseProps: (spec.ResponseProps) {
             Description: (string) (len=53) "Array of app admins that satisfy the input parameters",
             Schema: (*spec.Schema)(0xc000370900)({
              VendorExtensible: (spec.VendorExtensible) {
               Extensions: (spec.Extensions) <nil>
              },
              SchemaProps: (spec.SchemaProps) {
               ID: (string) "",
               Ref: (spec.Ref) ,
               Schema: (spec.SchemaURL) "",
               Description: (string) "",
               Type: (spec.StringOrArray) (len=1 cap=1) {
                (string) (len=5) "array"
               },
               Format: (string) "",
               Title: (string) "",
               Default: (interface {}) <nil>,
               Maximum: (*float64)(<nil>),
               ExclusiveMaximum: (bool) false,
               Minimum: (*float64)(<nil>),
               ExclusiveMinimum: (bool) false,
               MaxLength: (*int64)(<nil>),
               MinLength: (*int64)(<nil>),
               Pattern: (string) "",
               MaxItems: (*int64)(<nil>),
               MinItems: (*int64)(<nil>),
               UniqueItems: (bool) false,
               MultipleOf: (*float64)(<nil>),
               Enum: ([]interface {}) <nil>,
               MaxProperties: (*int64)(<nil>),
               MinProperties: (*int64)(<nil>),
               Required: ([]string) <nil>,
               Items: (*spec.SchemaOrArray)(0xc00018a720)({
                Schema: (*spec.Schema)(0xc000371440)({
                 VendorExtensible: (spec.VendorExtensible) {
                  Extensions: (spec.Extensions) <nil>
                 },
                 SchemaProps: (spec.SchemaProps) {
                  ID: (string) "",
                  Ref: (spec.Ref) #/definitions/Admin,
                  Schema: (spec.SchemaURL) "",
                  Description: (string) "",
                  Type: (spec.StringOrArray) <nil>,
                  Format: (string) "",
                  Title: (string) "",
                  Default: (interface {}) <nil>,
                  Maximum: (*float64)(<nil>),
                  ExclusiveMaximum: (bool) false,
                  Minimum: (*float64)(<nil>),
                  ExclusiveMinimum: (bool) false,
                  MaxLength: (*int64)(<nil>),
                  MinLength: (*int64)(<nil>),
                  Pattern: (string) "",
                  MaxItems: (*int64)(<nil>),
                  MinItems: (*int64)(<nil>),
                  UniqueItems: (bool) false,
                  MultipleOf: (*float64)(<nil>),
                  Enum: ([]interface {}) <nil>,
                  MaxProperties: (*int64)(<nil>),
                  MinProperties: (*int64)(<nil>),
                  Required: ([]string) <nil>,
                  Items: (*spec.SchemaOrArray)(<nil>),
                  AllOf: ([]spec.Schema) <nil>,
                  OneOf: ([]spec.Schema) <nil>,
                  AnyOf: ([]spec.Schema) <nil>,
                  Not: (*spec.Schema)(<nil>),
                  Properties: (map[string]spec.Schema) <nil>,
                  AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
                  PatternProperties: (map[string]spec.Schema) <nil>,
                  Dependencies: (spec.Dependencies) <nil>,
                  AdditionalItems: (*spec.SchemaOrBool)(<nil>),
                  Definitions: (spec.Definitions) <nil>
                 },
                 SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
                  Discriminator: (string) "",
                  ReadOnly: (bool) false,
                  XML: (*spec.XMLObject)(<nil>),
                  ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
                  Example: (interface {}) <nil>
                 },
                 ExtraProps: (map[string]interface {}) <nil>
                }),
                Schemas: ([]spec.Schema) <nil>
               }),
               AllOf: ([]spec.Schema) <nil>,
               OneOf: ([]spec.Schema) <nil>,
               AnyOf: ([]spec.Schema) <nil>,
               Not: (*spec.Schema)(<nil>),
               Properties: (map[string]spec.Schema) <nil>,
               AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
               PatternProperties: (map[string]spec.Schema) <nil>,
               Dependencies: (spec.Dependencies) <nil>,
               AdditionalItems: (*spec.SchemaOrBool)(<nil>),
               Definitions: (spec.Definitions) <nil>
              },
              SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
               Discriminator: (string) "",
               ReadOnly: (bool) false,
               XML: (*spec.XMLObject)(<nil>),
               ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
               Example: (interface {}) <nil>
              },
              ExtraProps: (map[string]interface {}) <nil>
             }),
             Headers: (map[string]spec.Header) <nil>,
             Examples: (map[string]interface {}) <nil>
            },
            VendorExtensible: (spec.VendorExtensible) {
             Extensions: (spec.Extensions) <nil>
            }
           }
          }
         }
        })
       }
      }),
      Put: (*spec.Operation)(<nil>),
      Post: (*spec.Operation)(<nil>),
      Delete: (*spec.Operation)(<nil>),
      Options: (*spec.Operation)(<nil>),
      Head: (*spec.Operation)(<nil>),
      Patch: (*spec.Operation)(<nil>),
      Parameters: ([]spec.Parameter) <nil>
     }
    },
    (string) (len=20) "/v1/libraryResources": (spec.PathItem) {
     Refable: (spec.Refable) {
      Ref: (spec.Ref) 
     },
     VendorExtensible: (spec.VendorExtensible) {
      Extensions: (spec.Extensions) <nil>
     },
     PathItemProps: (spec.PathItemProps) {
      Get: (*spec.Operation)(0xc0000e1c00)({
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       OperationProps: (spec.OperationProps) {
        Description: (string) "",
        Consumes: ([]string) <nil>,
        Produces: ([]string) <nil>,
        Schemes: ([]string) <nil>,
        Tags: ([]string) <nil>,
        Summary: (string) (len=29) "Returns all library resources",
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        ID: (string) (len=22) "getAllLibraryResources",
        Deprecated: (bool) false,
        Security: ([]map[string][]string) <nil>,
        Parameters: ([]spec.Parameter) (len=3 cap=4) {
         (spec.Parameter) {
          Refable: (spec.Refable) {
           Ref: (spec.Ref) 
          },
          CommonValidations: (spec.CommonValidations) {
           Maximum: (*float64)(<nil>),
           ExclusiveMaximum: (bool) false,
           Minimum: (*float64)(<nil>),
           ExclusiveMinimum: (bool) false,
           MaxLength: (*int64)(<nil>),
           MinLength: (*int64)(<nil>),
           Pattern: (string) "",
           MaxItems: (*int64)(<nil>),
           MinItems: (*int64)(<nil>),
           UniqueItems: (bool) false,
           MultipleOf: (*float64)(<nil>),
           Enum: ([]interface {}) <nil>
          },
          SimpleSchema: (spec.SimpleSchema) {
           Type: (string) (len=6) "string",
           Format: (string) "",
           Items: (*spec.Items)(<nil>),
           CollectionFormat: (string) "",
           Default: (interface {}) <nil>,
           Example: (interface {}) <nil>
          },
          VendorExtensible: (spec.VendorExtensible) {
           Extensions: (spec.Extensions) <nil>
          },
          ParamProps: (spec.ParamProps) {
           Description: (string) "",
           Name: (string) (len=8) "category",
           In: (string) (len=5) "query",
           Required: (bool) false,
           Schema: (*spec.Schema)(<nil>),
           AllowEmptyValue: (bool) false
          }
         },
         (spec.Parameter) {
          Refable: (spec.Refable) {
           Ref: (spec.Ref) 
          },
          CommonValidations: (spec.CommonValidations) {
           Maximum: (*float64)(<nil>),
           ExclusiveMaximum: (bool) false,
           Minimum: (*float64)(<nil>),
           ExclusiveMinimum: (bool) false,
           MaxLength: (*int64)(<nil>),
           MinLength: (*int64)(<nil>),
           Pattern: (string) "",
           MaxItems: (*int64)(<nil>),
           MinItems: (*int64)(<nil>),
           UniqueItems: (bool) false,
           MultipleOf: (*float64)(<nil>),
           Enum: ([]interface {}) <nil>
          },
          SimpleSchema: (spec.SimpleSchema) {
           Type: (string) (len=7) "boolean",
           Format: (string) "",
           Items: (*spec.Items)(<nil>),
           CollectionFormat: (string) "",
           Default: (interface {}) <nil>,
           Example: (interface {}) <nil>
          },
          VendorExtensible: (spec.VendorExtensible) {
           Extensions: (spec.Extensions) <nil>
          },
          ParamProps: (spec.ParamProps) {
           Description: (string) "",
           Name: (string) (len=14) "includeDevApps",
           In: (string) (len=5) "query",
           Required: (bool) false,
           Schema: (*spec.Schema)(<nil>),
           AllowEmptyValue: (bool) false
          }
         },
         (spec.Parameter) {
          Refable: (spec.Refable) {
           Ref: (spec.Ref) 
          },
          CommonValidations: (spec.CommonValidations) {
           Maximum: (*float64)(<nil>),
           ExclusiveMaximum: (bool) false,
           Minimum: (*float64)(<nil>),
           ExclusiveMinimum: (bool) false,
           MaxLength: (*int64)(<nil>),
           MinLength: (*int64)(<nil>),
           Pattern: (string) "",
           MaxItems: (*int64)(<nil>),
           MinItems: (*int64)(<nil>),
           UniqueItems: (bool) false,
           MultipleOf: (*float64)(<nil>),
           Enum: ([]interface {}) <nil>
          },
          SimpleSchema: (spec.SimpleSchema) {
           Type: (string) (len=7) "boolean",
           Format: (string) "",
           Items: (*spec.Items)(<nil>),
           CollectionFormat: (string) "",
           Default: (interface {}) <nil>,
           Example: (interface {}) <nil>
          },
          VendorExtensible: (spec.VendorExtensible) {
           Extensions: (spec.Extensions) <nil>
          },
          ParamProps: (spec.ParamProps) {
           Description: (string) "",
           Name: (string) (len=12) "includeLinks",
           In: (string) (len=5) "query",
           Required: (bool) false,
           Schema: (*spec.Schema)(<nil>),
           AllowEmptyValue: (bool) false
          }
         }
        },
        Responses: (*spec.Responses)(0xc000a5a360)({
         VendorExtensible: (spec.VendorExtensible) {
          Extensions: (spec.Extensions) <nil>
         },
         ResponsesProps: (spec.ResponsesProps) {
          Default: (*spec.Response)(<nil>),
          StatusCodeResponses: (map[int]spec.Response) (len=1) {
           (int) 200: (spec.Response) {
            Refable: (spec.Refable) {
             Ref: (spec.Ref) 
            },
            ResponseProps: (spec.ResponseProps) {
             Description: (string) (len=21) "All library resources",
             Schema: (*spec.Schema)(0xc000362fc0)({
              VendorExtensible: (spec.VendorExtensible) {
               Extensions: (spec.Extensions) <nil>
              },
              SchemaProps: (spec.SchemaProps) {
               ID: (string) "",
               Ref: (spec.Ref) #/definitions/LibraryResources,
               Schema: (spec.SchemaURL) "",
               Description: (string) "",
               Type: (spec.StringOrArray) <nil>,
               Format: (string) "",
               Title: (string) "",
               Default: (interface {}) <nil>,
               Maximum: (*float64)(<nil>),
               ExclusiveMaximum: (bool) false,
               Minimum: (*float64)(<nil>),
               ExclusiveMinimum: (bool) false,
               MaxLength: (*int64)(<nil>),
               MinLength: (*int64)(<nil>),
               Pattern: (string) "",
               MaxItems: (*int64)(<nil>),
               MinItems: (*int64)(<nil>),
               UniqueItems: (bool) false,
               MultipleOf: (*float64)(<nil>),
               Enum: ([]interface {}) <nil>,
               MaxProperties: (*int64)(<nil>),
               MinProperties: (*int64)(<nil>),
               Required: ([]string) <nil>,
               Items: (*spec.SchemaOrArray)(<nil>),
               AllOf: ([]spec.Schema) <nil>,
               OneOf: ([]spec.Schema) <nil>,
               AnyOf: ([]spec.Schema) <nil>,
               Not: (*spec.Schema)(<nil>),
               Properties: (map[string]spec.Schema) <nil>,
               AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
               PatternProperties: (map[string]spec.Schema) <nil>,
               Dependencies: (spec.Dependencies) <nil>,
               AdditionalItems: (*spec.SchemaOrBool)(<nil>),
               Definitions: (spec.Definitions) <nil>
              },
              SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
               Discriminator: (string) "",
               ReadOnly: (bool) false,
               XML: (*spec.XMLObject)(<nil>),
               ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
               Example: (interface {}) <nil>
              },
              ExtraProps: (map[string]interface {}) <nil>
             }),
             Headers: (map[string]spec.Header) <nil>,
             Examples: (map[string]interface {}) <nil>
            },
            VendorExtensible: (spec.VendorExtensible) {
             Extensions: (spec.Extensions) <nil>
            }
           }
          }
         }
        })
       }
      }),
      Put: (*spec.Operation)(<nil>),
      Post: (*spec.Operation)(<nil>),
      Delete: (*spec.Operation)(<nil>),
      Options: (*spec.Operation)(<nil>),
      Head: (*spec.Operation)(<nil>),
      Patch: (*spec.Operation)(<nil>),
      Parameters: ([]spec.Parameter) <nil>
     }
    },
    (string) (len=31) "/v1/apps/{appID}/business_token": (spec.PathItem) {
     Refable: (spec.Refable) {
      Ref: (spec.Ref) 
     },
     VendorExtensible: (spec.VendorExtensible) {
      Extensions: (spec.Extensions) <nil>
     },
     PathItemProps: (spec.PathItemProps) {
      Get: (*spec.Operation)(<nil>),
      Put: (*spec.Operation)(<nil>),
      Post: (*spec.Operation)(0xc0003aea80)({
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       OperationProps: (spec.OperationProps) {
        Description: (string) "",
        Consumes: ([]string) <nil>,
        Produces: ([]string) <nil>,
        Schemes: ([]string) <nil>,
        Tags: ([]string) <nil>,
        Summary: (string) (len=85) "Generate a new business token and immediately revoke the previous one (if it exists).",
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        ID: (string) (len=24) "generateNewBusinessToken",
        Deprecated: (bool) false,
        Security: ([]map[string][]string) <nil>,
        Parameters: ([]spec.Parameter) (len=1 cap=4) {
         (spec.Parameter) {
          Refable: (spec.Refable) {
           Ref: (spec.Ref) 
          },
          CommonValidations: (spec.CommonValidations) {
           Maximum: (*float64)(<nil>),
           ExclusiveMaximum: (bool) false,
           Minimum: (*float64)(<nil>),
           ExclusiveMinimum: (bool) false,
           MaxLength: (*int64)(<nil>),
           MinLength: (*int64)(<nil>),
           Pattern: (string) "",
           MaxItems: (*int64)(<nil>),
           MinItems: (*int64)(<nil>),
           UniqueItems: (bool) false,
           MultipleOf: (*float64)(<nil>),
           Enum: ([]interface {}) <nil>
          },
          SimpleSchema: (spec.SimpleSchema) {
           Type: (string) (len=6) "string",
           Format: (string) "",
           Items: (*spec.Items)(<nil>),
           CollectionFormat: (string) "",
           Default: (interface {}) <nil>,
           Example: (interface {}) <nil>
          },
          VendorExtensible: (spec.VendorExtensible) {
           Extensions: (spec.Extensions) <nil>
          },
          ParamProps: (spec.ParamProps) {
           Description: (string) "",
           Name: (string) (len=5) "appID",
           In: (string) (len=4) "path",
           Required: (bool) true,
           Schema: (*spec.Schema)(<nil>),
           AllowEmptyValue: (bool) false
          }
         }
        },
        Responses: (*spec.Responses)(0xc0003c7e00)({
         VendorExtensible: (spec.VendorExtensible) {
          Extensions: (spec.Extensions) <nil>
         },
         ResponsesProps: (spec.ResponsesProps) {
          Default: (*spec.Response)(<nil>),
          StatusCodeResponses: (map[int]spec.Response) (len=2) {
           (int) 200: (spec.Response) {
            Refable: (spec.Refable) {
             Ref: (spec.Ref) 
            },
            ResponseProps: (spec.ResponseProps) {
             Description: (string) (len=25) "Client secret information",
             Schema: (*spec.Schema)(0xc000349b00)({
              VendorExtensible: (spec.VendorExtensible) {
               Extensions: (spec.Extensions) <nil>
              },
              SchemaProps: (spec.SchemaProps) {
               ID: (string) "",
               Ref: (spec.Ref) #/definitions/SecretConfig,
               Schema: (spec.SchemaURL) "",
               Description: (string) "",
               Type: (spec.StringOrArray) <nil>,
               Format: (string) "",
               Title: (string) "",
               Default: (interface {}) <nil>,
               Maximum: (*float64)(<nil>),
               ExclusiveMaximum: (bool) false,
               Minimum: (*float64)(<nil>),
               ExclusiveMinimum: (bool) false,
               MaxLength: (*int64)(<nil>),
               MinLength: (*int64)(<nil>),
               Pattern: (string) "",
               MaxItems: (*int64)(<nil>),
               MinItems: (*int64)(<nil>),
               UniqueItems: (bool) false,
               MultipleOf: (*float64)(<nil>),
               Enum: ([]interface {}) <nil>,
               MaxProperties: (*int64)(<nil>),
               MinProperties: (*int64)(<nil>),
               Required: ([]string) <nil>,
               Items: (*spec.SchemaOrArray)(<nil>),
               AllOf: ([]spec.Schema) <nil>,
               OneOf: ([]spec.Schema) <nil>,
               AnyOf: ([]spec.Schema) <nil>,
               Not: (*spec.Schema)(<nil>),
               Properties: (map[string]spec.Schema) <nil>,
               AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
               PatternProperties: (map[string]spec.Schema) <nil>,
               Dependencies: (spec.Dependencies) <nil>,
               AdditionalItems: (*spec.SchemaOrBool)(<nil>),
               Definitions: (spec.Definitions) <nil>
              },
              SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
               Discriminator: (string) "",
               ReadOnly: (bool) false,
               XML: (*spec.XMLObject)(<nil>),
               ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
               Example: (interface {}) <nil>
              },
              ExtraProps: (map[string]interface {}) <nil>
             }),
             Headers: (map[string]spec.Header) <nil>,
             Examples: (map[string]interface {}) <nil>
            },
            VendorExtensible: (spec.VendorExtensible) {
             Extensions: (spec.Extensions) <nil>
            }
           },
           (int) 404: (spec.Response) {
            Refable: (spec.Refable) {
             Ref: (spec.Ref) #/responses/NotFound
            },
            ResponseProps: (spec.ResponseProps) {
             Description: (string) "",
             Schema: (*spec.Schema)(<nil>),
             Headers: (map[string]spec.Header) <nil>,
             Examples: (map[string]interface {}) <nil>
            },
            VendorExtensible: (spec.VendorExtensible) {
             Extensions: (spec.Extensions) <nil>
            }
           }
          }
         }
        })
       }
      }),
      Delete: (*spec.Operation)(<nil>),
      Options: (*spec.Operation)(<nil>),
      Head: (*spec.Operation)(<nil>),
      Patch: (*spec.Operation)(<nil>),
      Parameters: ([]spec.Parameter) <nil>
     }
    },
    (string) (len=25) "/v2/admins/{adminID}/apps": (spec.PathItem) {
     Refable: (spec.Refable) {
      Ref: (spec.Ref) 
     },
     VendorExtensible: (spec.VendorExtensible) {
      Extensions: (spec.Extensions) <nil>
     },
     PathItemProps: (spec.PathItemProps) {
      Get: (*spec.Operation)(0xc0000e0700)({
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       OperationProps: (spec.OperationProps) {
        Description: (string) "",
        Consumes: ([]string) <nil>,
        Produces: ([]string) <nil>,
        Schemes: ([]string) <nil>,
        Tags: ([]string) <nil>,
        Summary: (string) (len=32) "Apps an admin is associated with",
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        ID: (string) (len=15) "getAppsForAdmin",
        Deprecated: (bool) false,
        Security: ([]map[string][]string) <nil>,
        Parameters: ([]spec.Parameter) (len=1 cap=4) {
         (spec.Parameter) {
          Refable: (spec.Refable) {
           Ref: (spec.Ref) 
          },
          CommonValidations: (spec.CommonValidations) {
           Maximum: (*float64)(<nil>),
           ExclusiveMaximum: (bool) false,
           Minimum: (*float64)(<nil>),
           ExclusiveMinimum: (bool) false,
           MaxLength: (*int64)(<nil>),
           MinLength: (*int64)(<nil>),
           Pattern: (string) "",
           MaxItems: (*int64)(<nil>),
           MinItems: (*int64)(<nil>),
           UniqueItems: (bool) false,
           MultipleOf: (*float64)(<nil>),
           Enum: ([]interface {}) <nil>
          },
          SimpleSchema: (spec.SimpleSchema) {
           Type: (string) (len=6) "string",
           Format: (string) "",
           Items: (*spec.Items)(<nil>),
           CollectionFormat: (string) "",
           Default: (interface {}) <nil>,
           Example: (interface {}) <nil>
          },
          VendorExtensible: (spec.VendorExtensible) {
           Extensions: (spec.Extensions) <nil>
          },
          ParamProps: (spec.ParamProps) {
           Description: (string) "",
           Name: (string) (len=7) "adminID",
           In: (string) (len=4) "path",
           Required: (bool) true,
           Schema: (*spec.Schema)(<nil>),
           AllowEmptyValue: (bool) false
          }
         }
        },
        Responses: (*spec.Responses)(0xc000793ee0)({
         VendorExtensible: (spec.VendorExtensible) {
          Extensions: (spec.Extensions) <nil>
         },
         ResponsesProps: (spec.ResponsesProps) {
          Default: (*spec.Response)(<nil>),
          StatusCodeResponses: (map[int]spec.Response) (len=2) {
           (int) 200: (spec.Response) {
            Refable: (spec.Refable) {
             Ref: (spec.Ref) 
            },
            ResponseProps: (spec.ResponseProps) {
             Description: (string) (len=4) "Apps",
             Schema: (*spec.Schema)(0xc0003edd40)({
              VendorExtensible: (spec.VendorExtensible) {
               Extensions: (spec.Extensions) <nil>
              },
              SchemaProps: (spec.SchemaProps) {
               ID: (string) "",
               Ref: (spec.Ref) ,
               Schema: (spec.SchemaURL) "",
               Description: (string) "",
               Type: (spec.StringOrArray) (len=1 cap=1) {
                (string) (len=5) "array"
               },
               Format: (string) "",
               Title: (string) "",
               Default: (interface {}) <nil>,
               Maximum: (*float64)(<nil>),
               ExclusiveMaximum: (bool) false,
               Minimum: (*float64)(<nil>),
               ExclusiveMinimum: (bool) false,
               MaxLength: (*int64)(<nil>),
               MinLength: (*int64)(<nil>),
               Pattern: (string) "",
               MaxItems: (*int64)(<nil>),
               MinItems: (*int64)(<nil>),
               UniqueItems: (bool) false,
               MultipleOf: (*float64)(<nil>),
               Enum: ([]interface {}) <nil>,
               MaxProperties: (*int64)(<nil>),
               MinProperties: (*int64)(<nil>),
               Required: ([]string) <nil>,
               Items: (*spec.SchemaOrArray)(0xc000793f00)({
                Schema: (*spec.Schema)(0xc0003e46c0)({
                 VendorExtensible: (spec.VendorExtensible) {
                  Extensions: (spec.Extensions) <nil>
                 },
                 SchemaProps: (spec.SchemaProps) {
                  ID: (string) "",
                  Ref: (spec.Ref) #/definitions/AppForAdminResponse,
                  Schema: (spec.SchemaURL) "",
                  Description: (string) "",
                  Type: (spec.StringOrArray) <nil>,
                  Format: (string) "",
                  Title: (string) "",
                  Default: (interface {}) <nil>,
                  Maximum: (*float64)(<nil>),
                  ExclusiveMaximum: (bool) false,
                  Minimum: (*float64)(<nil>),
                  ExclusiveMinimum: (bool) false,
                  MaxLength: (*int64)(<nil>),
                  MinLength: (*int64)(<nil>),
                  Pattern: (string) "",
                  MaxItems: (*int64)(<nil>),
                  MinItems: (*int64)(<nil>),
                  UniqueItems: (bool) false,
                  MultipleOf: (*float64)(<nil>),
                  Enum: ([]interface {}) <nil>,
                  MaxProperties: (*int64)(<nil>),
                  MinProperties: (*int64)(<nil>),
                  Required: ([]string) <nil>,
                  Items: (*spec.SchemaOrArray)(<nil>),
                  AllOf: ([]spec.Schema) <nil>,
                  OneOf: ([]spec.Schema) <nil>,
                  AnyOf: ([]spec.Schema) <nil>,
                  Not: (*spec.Schema)(<nil>),
                  Properties: (map[string]spec.Schema) <nil>,
                  AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
                  PatternProperties: (map[string]spec.Schema) <nil>,
                  Dependencies: (spec.Dependencies) <nil>,
                  AdditionalItems: (*spec.SchemaOrBool)(<nil>),
                  Definitions: (spec.Definitions) <nil>
                 },
                 SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
                  Discriminator: (string) "",
                  ReadOnly: (bool) false,
                  XML: (*spec.XMLObject)(<nil>),
                  ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
                  Example: (interface {}) <nil>
                 },
                 ExtraProps: (map[string]interface {}) <nil>
                }),
                Schemas: ([]spec.Schema) <nil>
               }),
               AllOf: ([]spec.Schema) <nil>,
               OneOf: ([]spec.Schema) <nil>,
               AnyOf: ([]spec.Schema) <nil>,
               Not: (*spec.Schema)(<nil>),
               Properties: (map[string]spec.Schema) <nil>,
               AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
               PatternProperties: (map[string]spec.Schema) <nil>,
               Dependencies: (spec.Dependencies) <nil>,
               AdditionalItems: (*spec.SchemaOrBool)(<nil>),
               Definitions: (spec.Definitions) <nil>
              },
              SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
               Discriminator: (string) "",
               ReadOnly: (bool) false,
               XML: (*spec.XMLObject)(<nil>),
               ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
               Example: (interface {}) <nil>
              },
              ExtraProps: (map[string]interface {}) <nil>
             }),
             Headers: (map[string]spec.Header) <nil>,
             Examples: (map[string]interface {}) <nil>
            },
            VendorExtensible: (spec.VendorExtensible) {
             Extensions: (spec.Extensions) <nil>
            }
           },
           (int) 404: (spec.Response) {
            Refable: (spec.Refable) {
             Ref: (spec.Ref) #/responses/NotFound
            },
            ResponseProps: (spec.ResponseProps) {
             Description: (string) "",
             Schema: (*spec.Schema)(<nil>),
             Headers: (map[string]spec.Header) <nil>,
             Examples: (map[string]interface {}) <nil>
            },
            VendorExtensible: (spec.VendorExtensible) {
             Extensions: (spec.Extensions) <nil>
            }
           }
          }
         }
        })
       }
      }),
      Put: (*spec.Operation)(<nil>),
      Post: (*spec.Operation)(<nil>),
      Delete: (*spec.Operation)(<nil>),
      Options: (*spec.Operation)(<nil>),
      Head: (*spec.Operation)(<nil>),
      Patch: (*spec.Operation)(<nil>),
      Parameters: ([]spec.Parameter) <nil>
     }
    },
    (string) (len=14) "/v1/knownhosts": (spec.PathItem) {
     Refable: (spec.Refable) {
      Ref: (spec.Ref) 
     },
     VendorExtensible: (spec.VendorExtensible) {
      Extensions: (spec.Extensions) <nil>
     },
     PathItemProps: (spec.PathItemProps) {
      Get: (*spec.Operation)(0xc0000e07e0)({
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       OperationProps: (spec.OperationProps) {
        Description: (string) "",
        Consumes: ([]string) <nil>,
        Produces: ([]string) <nil>,
        Schemes: ([]string) <nil>,
        Tags: ([]string) <nil>,
        Summary: (string) (len=34) "Get a list of known hosts for apps",
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        ID: (string) (len=13) "getKnownHosts",
        Deprecated: (bool) false,
        Security: ([]map[string][]string) <nil>,
        Parameters: ([]spec.Parameter) <nil>,
        Responses: (*spec.Responses)(0xc0007fe2e0)({
         VendorExtensible: (spec.VendorExtensible) {
          Extensions: (spec.Extensions) <nil>
         },
         ResponsesProps: (spec.ResponsesProps) {
          Default: (*spec.Response)(<nil>),
          StatusCodeResponses: (map[int]spec.Response) (len=1) {
           (int) 200: (spec.Response) {
            Refable: (spec.Refable) {
             Ref: (spec.Ref) 
            },
            ResponseProps: (spec.ResponseProps) {
             Description: (string) (len=19) "List of known hosts",
             Schema: (*spec.Schema)(0xc0003e5440)({
              VendorExtensible: (spec.VendorExtensible) {
               Extensions: (spec.Extensions) <nil>
              },
              SchemaProps: (spec.SchemaProps) {
               ID: (string) "",
               Ref: (spec.Ref) ,
               Schema: (spec.SchemaURL) "",
               Description: (string) "",
               Type: (spec.StringOrArray) (len=1 cap=1) {
                (string) (len=5) "array"
               },
               Format: (string) "",
               Title: (string) "",
               Default: (interface {}) <nil>,
               Maximum: (*float64)(<nil>),
               ExclusiveMaximum: (bool) false,
               Minimum: (*float64)(<nil>),
               ExclusiveMinimum: (bool) false,
               MaxLength: (*int64)(<nil>),
               MinLength: (*int64)(<nil>),
               Pattern: (string) "",
               MaxItems: (*int64)(<nil>),
               MinItems: (*int64)(<nil>),
               UniqueItems: (bool) false,
               MultipleOf: (*float64)(<nil>),
               Enum: ([]interface {}) <nil>,
               MaxProperties: (*int64)(<nil>),
               MinProperties: (*int64)(<nil>),
               Required: ([]string) <nil>,
               Items: (*spec.SchemaOrArray)(0xc0007fe300)({
                Schema: (*spec.Schema)(0xc0003be240)({
                 VendorExtensible: (spec.VendorExtensible) {
                  Extensions: (spec.Extensions) <nil>
                 },
                 SchemaProps: (spec.SchemaProps) {
                  ID: (string) "",
                  Ref: (spec.Ref) #/definitions/KnownHost,
                  Schema: (spec.SchemaURL) "",
                  Description: (string) "",
                  Type: (spec.StringOrArray) <nil>,
                  Format: (string) "",
                  Title: (string) "",
                  Default: (interface {}) <nil>,
                  Maximum: (*float64)(<nil>),
                  ExclusiveMaximum: (bool) false,
                  Minimum: (*float64)(<nil>),
                  ExclusiveMinimum: (bool) false,
                  MaxLength: (*int64)(<nil>),
                  MinLength: (*int64)(<nil>),
                  Pattern: (string) "",
                  MaxItems: (*int64)(<nil>),
                  MinItems: (*int64)(<nil>),
                  UniqueItems: (bool) false,
                  MultipleOf: (*float64)(<nil>),
                  Enum: ([]interface {}) <nil>,
                  MaxProperties: (*int64)(<nil>),
                  MinProperties: (*int64)(<nil>),
                  Required: ([]string) <nil>,
                  Items: (*spec.SchemaOrArray)(<nil>),
                  AllOf: ([]spec.Schema) <nil>,
                  OneOf: ([]spec.Schema) <nil>,
                  AnyOf: ([]spec.Schema) <nil>,
                  Not: (*spec.Schema)(<nil>),
                  Properties: (map[string]spec.Schema) <nil>,
                  AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
                  PatternProperties: (map[string]spec.Schema) <nil>,
                  Dependencies: (spec.Dependencies) <nil>,
                  AdditionalItems: (*spec.SchemaOrBool)(<nil>),
                  Definitions: (spec.Definitions) <nil>
                 },
                 SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
                  Discriminator: (string) "",
                  ReadOnly: (bool) false,
                  XML: (*spec.XMLObject)(<nil>),
                  ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
                  Example: (interface {}) <nil>
                 },
                 ExtraProps: (map[string]interface {}) <nil>
                }),
                Schemas: ([]spec.Schema) <nil>
               }),
               AllOf: ([]spec.Schema) <nil>,
               OneOf: ([]spec.Schema) <nil>,
               AnyOf: ([]spec.Schema) <nil>,
               Not: (*spec.Schema)(<nil>),
               Properties: (map[string]spec.Schema) <nil>,
               AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
               PatternProperties: (map[string]spec.Schema) <nil>,
               Dependencies: (spec.Dependencies) <nil>,
               AdditionalItems: (*spec.SchemaOrBool)(<nil>),
               Definitions: (spec.Definitions) <nil>
              },
              SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
               Discriminator: (string) "",
               ReadOnly: (bool) false,
               XML: (*spec.XMLObject)(<nil>),
               ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
               Example: (interface {}) <nil>
              },
              ExtraProps: (map[string]interface {}) <nil>
             }),
             Headers: (map[string]spec.Header) <nil>,
             Examples: (map[string]interface {}) <nil>
            },
            VendorExtensible: (spec.VendorExtensible) {
             Extensions: (spec.Extensions) <nil>
            }
           }
          }
         }
        })
       }
      }),
      Put: (*spec.Operation)(<nil>),
      Post: (*spec.Operation)(<nil>),
      Delete: (*spec.Operation)(<nil>),
      Options: (*spec.Operation)(<nil>),
      Head: (*spec.Operation)(<nil>),
      Patch: (*spec.Operation)(<nil>),
      Parameters: ([]spec.Parameter) <nil>
     }
    },
    (string) (len=27) "/v1/apps/{appID}/customStep": (spec.PathItem) {
     Refable: (spec.Refable) {
      Ref: (spec.Ref) 
     },
     VendorExtensible: (spec.VendorExtensible) {
      Extensions: (spec.Extensions) <nil>
     },
     PathItemProps: (spec.PathItemProps) {
      Get: (*spec.Operation)(0xc0003ae540)({
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       OperationProps: (spec.OperationProps) {
        Description: (string) "",
        Consumes: ([]string) <nil>,
        Produces: ([]string) <nil>,
        Schemes: ([]string) <nil>,
        Tags: ([]string) <nil>,
        Summary: (string) (len=34) "Returns an app-specific setup step",
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        ID: (string) (len=12) "getSetupStep",
        Deprecated: (bool) false,
        Security: ([]map[string][]string) <nil>,
        Parameters: ([]spec.Parameter) (len=1 cap=4) {
         (spec.Parameter) {
          Refable: (spec.Refable) {
           Ref: (spec.Ref) 
          },
          CommonValidations: (spec.CommonValidations) {
           Maximum: (*float64)(<nil>),
           ExclusiveMaximum: (bool) false,
           Minimum: (*float64)(<nil>),
           ExclusiveMinimum: (bool) false,
           MaxLength: (*int64)(<nil>),
           MinLength: (*int64)(<nil>),
           Pattern: (string) "",
           MaxItems: (*int64)(<nil>),
           MinItems: (*int64)(<nil>),
           UniqueItems: (bool) false,
           MultipleOf: (*float64)(<nil>),
           Enum: ([]interface {}) <nil>
          },
          SimpleSchema: (spec.SimpleSchema) {
           Type: (string) (len=6) "string",
           Format: (string) "",
           Items: (*spec.Items)(<nil>),
           CollectionFormat: (string) "",
           Default: (interface {}) <nil>,
           Example: (interface {}) <nil>
          },
          VendorExtensible: (spec.VendorExtensible) {
           Extensions: (spec.Extensions) <nil>
          },
          ParamProps: (spec.ParamProps) {
           Description: (string) "",
           Name: (string) (len=5) "appID",
           In: (string) (len=4) "path",
           Required: (bool) true,
           Schema: (*spec.Schema)(<nil>),
           AllowEmptyValue: (bool) false
          }
         }
        },
        Responses: (*spec.Responses)(0xc0006bb040)({
         VendorExtensible: (spec.VendorExtensible) {
          Extensions: (spec.Extensions) <nil>
         },
         ResponsesProps: (spec.ResponsesProps) {
          Default: (*spec.Response)(<nil>),
          StatusCodeResponses: (map[int]spec.Response) (len=2) {
           (int) 404: (spec.Response) {
            Refable: (spec.Refable) {
             Ref: (spec.Ref) #/responses/NotFound
            },
            ResponseProps: (spec.ResponseProps) {
             Description: (string) "",
             Schema: (*spec.Schema)(<nil>),
             Headers: (map[string]spec.Header) <nil>,
             Examples: (map[string]interface {}) <nil>
            },
            VendorExtensible: (spec.VendorExtensible) {
             Extensions: (spec.Extensions) <nil>
            }
           },
           (int) 200: (spec.Response) {
            Refable: (spec.Refable) {
             Ref: (spec.Ref) 
            },
            ResponseProps: (spec.ResponseProps) {
             Description: (string) (len=17) "Setup Step object",
             Schema: (*spec.Schema)(0xc00034cfc0)({
              VendorExtensible: (spec.VendorExtensible) {
               Extensions: (spec.Extensions) <nil>
              },
              SchemaProps: (spec.SchemaProps) {
               ID: (string) "",
               Ref: (spec.Ref) #/definitions/SetupStep,
               Schema: (spec.SchemaURL) "",
               Description: (string) "",
               Type: (spec.StringOrArray) <nil>,
               Format: (string) "",
               Title: (string) "",
               Default: (interface {}) <nil>,
               Maximum: (*float64)(<nil>),
               ExclusiveMaximum: (bool) false,
               Minimum: (*float64)(<nil>),
               ExclusiveMinimum: (bool) false,
               MaxLength: (*int64)(<nil>),
               MinLength: (*int64)(<nil>),
               Pattern: (string) "",
               MaxItems: (*int64)(<nil>),
               MinItems: (*int64)(<nil>),
               UniqueItems: (bool) false,
               MultipleOf: (*float64)(<nil>),
               Enum: ([]interface {}) <nil>,
               MaxProperties: (*int64)(<nil>),
               MinProperties: (*int64)(<nil>),
               Required: ([]string) <nil>,
               Items: (*spec.SchemaOrArray)(<nil>),
               AllOf: ([]spec.Schema) <nil>,
               OneOf: ([]spec.Schema) <nil>,
               AnyOf: ([]spec.Schema) <nil>,
               Not: (*spec.Schema)(<nil>),
               Properties: (map[string]spec.Schema) <nil>,
               AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
               PatternProperties: (map[string]spec.Schema) <nil>,
               Dependencies: (spec.Dependencies) <nil>,
               AdditionalItems: (*spec.SchemaOrBool)(<nil>),
               Definitions: (spec.Definitions) <nil>
              },
              SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
               Discriminator: (string) "",
               ReadOnly: (bool) false,
               XML: (*spec.XMLObject)(<nil>),
               ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
               Example: (interface {}) <nil>
              },
              ExtraProps: (map[string]interface {}) <nil>
             }),
             Headers: (map[string]spec.Header) <nil>,
             Examples: (map[string]interface {}) <nil>
            },
            VendorExtensible: (spec.VendorExtensible) {
             Extensions: (spec.Extensions) <nil>
            }
           }
          }
         }
        })
       }
      }),
      Put: (*spec.Operation)(<nil>),
      Post: (*spec.Operation)(<nil>),
      Delete: (*spec.Operation)(<nil>),
      Options: (*spec.Operation)(<nil>),
      Head: (*spec.Operation)(<nil>),
      Patch: (*spec.Operation)(0xc0003ae460)({
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       OperationProps: (spec.OperationProps) {
        Description: (string) "",
        Consumes: ([]string) <nil>,
        Produces: ([]string) <nil>,
        Schemes: ([]string) <nil>,
        Tags: ([]string) <nil>,
        Summary: (string) (len=31) "Creates a new custom setup step",
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        ID: (string) (len=15) "createSetupStep",
        Deprecated: (bool) false,
        Security: ([]map[string][]string) <nil>,
        Parameters: ([]spec.Parameter) (len=2 cap=4) {
         (spec.Parameter) {
          Refable: (spec.Refable) {
           Ref: (spec.Ref) 
          },
          CommonValidations: (spec.CommonValidations) {
           Maximum: (*float64)(<nil>),
           ExclusiveMaximum: (bool) false,
           Minimum: (*float64)(<nil>),
           ExclusiveMinimum: (bool) false,
           MaxLength: (*int64)(<nil>),
           MinLength: (*int64)(<nil>),
           Pattern: (string) "",
           MaxItems: (*int64)(<nil>),
           MinItems: (*int64)(<nil>),
           UniqueItems: (bool) false,
           MultipleOf: (*float64)(<nil>),
           Enum: ([]interface {}) <nil>
          },
          SimpleSchema: (spec.SimpleSchema) {
           Type: (string) (len=6) "string",
           Format: (string) "",
           Items: (*spec.Items)(<nil>),
           CollectionFormat: (string) "",
           Default: (interface {}) <nil>,
           Example: (interface {}) <nil>
          },
          VendorExtensible: (spec.VendorExtensible) {
           Extensions: (spec.Extensions) <nil>
          },
          ParamProps: (spec.ParamProps) {
           Description: (string) "",
           Name: (string) (len=5) "appID",
           In: (string) (len=4) "path",
           Required: (bool) true,
           Schema: (*spec.Schema)(<nil>),
           AllowEmptyValue: (bool) false
          }
         },
         (spec.Parameter) {
          Refable: (spec.Refable) {
           Ref: (spec.Ref) 
          },
          CommonValidations: (spec.CommonValidations) {
           Maximum: (*float64)(<nil>),
           ExclusiveMaximum: (bool) false,
           Minimum: (*float64)(<nil>),
           ExclusiveMinimum: (bool) false,
           MaxLength: (*int64)(<nil>),
           MinLength: (*int64)(<nil>),
           Pattern: (string) "",
           MaxItems: (*int64)(<nil>),
           MinItems: (*int64)(<nil>),
           UniqueItems: (bool) false,
           MultipleOf: (*float64)(<nil>),
           Enum: ([]interface {}) <nil>
          },
          SimpleSchema: (spec.SimpleSchema) {
           Type: (string) "",
           Format: (string) "",
           Items: (*spec.Items)(<nil>),
           CollectionFormat: (string) "",
           Default: (interface {}) <nil>,
           Example: (interface {}) <nil>
          },
          VendorExtensible: (spec.VendorExtensible) {
           Extensions: (spec.Extensions) <nil>
          },
          ParamProps: (spec.ParamProps) {
           Description: (string) "",
           Name: (string) (len=10) "setup_step",
           In: (string) (len=4) "body",
           Required: (bool) false,
           Schema: (*spec.Schema)(0xc00034c480)({
            VendorExtensible: (spec.VendorExtensible) {
             Extensions: (spec.Extensions) <nil>
            },
            SchemaProps: (spec.SchemaProps) {
             ID: (string) "",
             Ref: (spec.Ref) #/definitions/SetupStep,
             Schema: (spec.SchemaURL) "",
             Description: (string) "",
             Type: (spec.StringOrArray) <nil>,
             Format: (string) "",
             Title: (string) "",
             Default: (interface {}) <nil>,
             Maximum: (*float64)(<nil>),
             ExclusiveMaximum: (bool) false,
             Minimum: (*float64)(<nil>),
             ExclusiveMinimum: (bool) false,
             MaxLength: (*int64)(<nil>),
             MinLength: (*int64)(<nil>),
             Pattern: (string) "",
             MaxItems: (*int64)(<nil>),
             MinItems: (*int64)(<nil>),
             UniqueItems: (bool) false,
             MultipleOf: (*float64)(<nil>),
             Enum: ([]interface {}) <nil>,
             MaxProperties: (*int64)(<nil>),
             MinProperties: (*int64)(<nil>),
             Required: ([]string) <nil>,
             Items: (*spec.SchemaOrArray)(<nil>),
             AllOf: ([]spec.Schema) <nil>,
             OneOf: ([]spec.Schema) <nil>,
             AnyOf: ([]spec.Schema) <nil>,
             Not: (*spec.Schema)(<nil>),
             Properties: (map[string]spec.Schema) <nil>,
             AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
             PatternProperties: (map[string]spec.Schema) <nil>,
             Dependencies: (spec.Dependencies) <nil>,
             AdditionalItems: (*spec.SchemaOrBool)(<nil>),
             Definitions: (spec.Definitions) <nil>
            },
            SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
             Discriminator: (string) "",
             ReadOnly: (bool) false,
             XML: (*spec.XMLObject)(<nil>),
             ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
             Example: (interface {}) <nil>
            },
            ExtraProps: (map[string]interface {}) <nil>
           }),
           AllowEmptyValue: (bool) false
          }
         }
        },
        Responses: (*spec.Responses)(0xc0006baa20)({
         VendorExtensible: (spec.VendorExtensible) {
          Extensions: (spec.Extensions) <nil>
         },
         ResponsesProps: (spec.ResponsesProps) {
          Default: (*spec.Response)(<nil>),
          StatusCodeResponses: (map[int]spec.Response) (len=2) {
           (int) 404: (spec.Response) {
            Refable: (spec.Refable) {
             Ref: (spec.Ref) #/responses/NotFound
            },
            ResponseProps: (spec.ResponseProps) {
             Description: (string) "",
             Schema: (*spec.Schema)(<nil>),
             Headers: (map[string]spec.Header) <nil>,
             Examples: (map[string]interface {}) <nil>
            },
            VendorExtensible: (spec.VendorExtensible) {
             Extensions: (spec.Extensions) <nil>
            }
           },
           (int) 200: (spec.Response) {
            Refable: (spec.Refable) {
             Ref: (spec.Ref) 
            },
            ResponseProps: (spec.ResponseProps) {
             Description: (string) (len=36) "App custom step successfully created",
             Schema: (*spec.Schema)(<nil>),
             Headers: (map[string]spec.Header) <nil>,
             Examples: (map[string]interface {}) <nil>
            },
            VendorExtensible: (spec.VendorExtensible) {
             Extensions: (spec.Extensions) <nil>
            }
           }
          }
         }
        })
       }
      }),
      Parameters: ([]spec.Parameter) <nil>
     }
    },
    (string) (len=28) "/v1/apps/{appID}/update_icon": (spec.PathItem) {
     Refable: (spec.Refable) {
      Ref: (spec.Ref) 
     },
     VendorExtensible: (spec.VendorExtensible) {
      Extensions: (spec.Extensions) <nil>
     },
     PathItemProps: (spec.PathItemProps) {
      Get: (*spec.Operation)(<nil>),
      Put: (*spec.Operation)(<nil>),
      Post: (*spec.Operation)(0xc0003aeb60)({
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       OperationProps: (spec.OperationProps) {
        Description: (string) "",
        Consumes: ([]string) <nil>,
        Produces: ([]string) <nil>,
        Schemes: ([]string) <nil>,
        Tags: ([]string) <nil>,
        Summary: (string) (len=11) "Update icon",
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        ID: (string) (len=13) "updateAppIcon",
        Deprecated: (bool) false,
        Security: ([]map[string][]string) <nil>,
        Parameters: ([]spec.Parameter) (len=2 cap=4) {
         (spec.Parameter) {
          Refable: (spec.Refable) {
           Ref: (spec.Ref) 
          },
          CommonValidations: (spec.CommonValidations) {
           Maximum: (*float64)(<nil>),
           ExclusiveMaximum: (bool) false,
           Minimum: (*float64)(<nil>),
           ExclusiveMinimum: (bool) false,
           MaxLength: (*int64)(<nil>),
           MinLength: (*int64)(<nil>),
           Pattern: (string) "",
           MaxItems: (*int64)(<nil>),
           MinItems: (*int64)(<nil>),
           UniqueItems: (bool) false,
           MultipleOf: (*float64)(<nil>),
           Enum: ([]interface {}) <nil>
          },
          SimpleSchema: (spec.SimpleSchema) {
           Type: (string) (len=6) "string",
           Format: (string) (len=8) "mongo-id",
           Items: (*spec.Items)(<nil>),
           CollectionFormat: (string) "",
           Default: (interface {}) <nil>,
           Example: (interface {}) <nil>
          },
          VendorExtensible: (spec.VendorExtensible) {
           Extensions: (spec.Extensions) <nil>
          },
          ParamProps: (spec.ParamProps) {
           Description: (string) "",
           Name: (string) (len=5) "appID",
           In: (string) (len=4) "path",
           Required: (bool) true,
           Schema: (*spec.Schema)(<nil>),
           AllowEmptyValue: (bool) false
          }
         },
         (spec.Parameter) {
          Refable: (spec.Refable) {
           Ref: (spec.Ref) 
          },
          CommonValidations: (spec.CommonValidations) {
           Maximum: (*float64)(<nil>),
           ExclusiveMaximum: (bool) false,
           Minimum: (*float64)(<nil>),
           ExclusiveMinimum: (bool) false,
           MaxLength: (*int64)(<nil>),
           MinLength: (*int64)(<nil>),
           Pattern: (string) "",
           MaxItems: (*int64)(<nil>),
           MinItems: (*int64)(<nil>),
           UniqueItems: (bool) false,
           MultipleOf: (*float64)(<nil>),
           Enum: ([]interface {}) <nil>
          },
          SimpleSchema: (spec.SimpleSchema) {
           Type: (string) "",
           Format: (string) "",
           Items: (*spec.Items)(<nil>),
           CollectionFormat: (string) "",
           Default: (interface {}) <nil>,
           Example: (interface {}) <nil>
          },
          VendorExtensible: (spec.VendorExtensible) {
           Extensions: (spec.Extensions) <nil>
          },
          ParamProps: (spec.ParamProps) {
           Description: (string) "",
           Name: (string) (len=3) "app",
           In: (string) (len=4) "body",
           Required: (bool) true,
           Schema: (*spec.Schema)(0xc000340240)({
            VendorExtensible: (spec.VendorExtensible) {
             Extensions: (spec.Extensions) <nil>
            },
            SchemaProps: (spec.SchemaProps) {
             ID: (string) "",
             Ref: (spec.Ref) #/definitions/UpdateAppIconRequest,
             Schema: (spec.SchemaURL) "",
             Description: (string) "",
             Type: (spec.StringOrArray) <nil>,
             Format: (string) "",
             Title: (string) "",
             Default: (interface {}) <nil>,
             Maximum: (*float64)(<nil>),
             ExclusiveMaximum: (bool) false,
             Minimum: (*float64)(<nil>),
             ExclusiveMinimum: (bool) false,
             MaxLength: (*int64)(<nil>),
             MinLength: (*int64)(<nil>),
             Pattern: (string) "",
             MaxItems: (*int64)(<nil>),
             MinItems: (*int64)(<nil>),
             UniqueItems: (bool) false,
             MultipleOf: (*float64)(<nil>),
             Enum: ([]interface {}) <nil>,
             MaxProperties: (*int64)(<nil>),
             MinProperties: (*int64)(<nil>),
             Required: ([]string) <nil>,
             Items: (*spec.SchemaOrArray)(<nil>),
             AllOf: ([]spec.Schema) <nil>,
             OneOf: ([]spec.Schema) <nil>,
             AnyOf: ([]spec.Schema) <nil>,
             Not: (*spec.Schema)(<nil>),
             Properties: (map[string]spec.Schema) <nil>,
             AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
             PatternProperties: (map[string]spec.Schema) <nil>,
             Dependencies: (spec.Dependencies) <nil>,
             AdditionalItems: (*spec.SchemaOrBool)(<nil>),
             Definitions: (spec.Definitions) <nil>
            },
            SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
             Discriminator: (string) "",
             ReadOnly: (bool) false,
             XML: (*spec.XMLObject)(<nil>),
             ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
             Example: (interface {}) <nil>
            },
            ExtraProps: (map[string]interface {}) <nil>
           }),
           AllowEmptyValue: (bool) false
          }
         }
        },
        Responses: (*spec.Responses)(0xc0009cd6e0)({
         VendorExtensible: (spec.VendorExtensible) {
          Extensions: (spec.Extensions) <nil>
         },
         ResponsesProps: (spec.ResponsesProps) {
          Default: (*spec.Response)(<nil>),
          StatusCodeResponses: (map[int]spec.Response) (len=3) {
           (int) 200: (spec.Response) {
            Refable: (spec.Refable) {
             Ref: (spec.Ref) 
            },
            ResponseProps: (spec.ResponseProps) {
             Description: (string) (len=16) "icon was updated",
             Schema: (*spec.Schema)(0xc000340480)({
              VendorExtensible: (spec.VendorExtensible) {
               Extensions: (spec.Extensions) <nil>
              },
              SchemaProps: (spec.SchemaProps) {
               ID: (string) "",
               Ref: (spec.Ref) #/definitions/Image,
               Schema: (spec.SchemaURL) "",
               Description: (string) "",
               Type: (spec.StringOrArray) <nil>,
               Format: (string) "",
               Title: (string) "",
               Default: (interface {}) <nil>,
               Maximum: (*float64)(<nil>),
               ExclusiveMaximum: (bool) false,
               Minimum: (*float64)(<nil>),
               ExclusiveMinimum: (bool) false,
               MaxLength: (*int64)(<nil>),
               MinLength: (*int64)(<nil>),
               Pattern: (string) "",
               MaxItems: (*int64)(<nil>),
               MinItems: (*int64)(<nil>),
               UniqueItems: (bool) false,
               MultipleOf: (*float64)(<nil>),
               Enum: ([]interface {}) <nil>,
               MaxProperties: (*int64)(<nil>),
               MinProperties: (*int64)(<nil>),
               Required: ([]string) <nil>,
               Items: (*spec.SchemaOrArray)(<nil>),
               AllOf: ([]spec.Schema) <nil>,
               OneOf: ([]spec.Schema) <nil>,
               AnyOf: ([]spec.Schema) <nil>,
               Not: (*spec.Schema)(<nil>),
               Properties: (map[string]spec.Schema) <nil>,
               AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
               PatternProperties: (map[string]spec.Schema) <nil>,
               Dependencies: (spec.Dependencies) <nil>,
               AdditionalItems: (*spec.SchemaOrBool)(<nil>),
               Definitions: (spec.Definitions) <nil>
              },
              SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
               Discriminator: (string) "",
               ReadOnly: (bool) false,
               XML: (*spec.XMLObject)(<nil>),
               ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
               Example: (interface {}) <nil>
              },
              ExtraProps: (map[string]interface {}) <nil>
             }),
             Headers: (map[string]spec.Header) <nil>,
             Examples: (map[string]interface {}) <nil>
            },
            VendorExtensible: (spec.VendorExtensible) {
             Extensions: (spec.Extensions) <nil>
            }
           },
           (int) 404: (spec.Response) {
            Refable: (spec.Refable) {
             Ref: (spec.Ref) #/responses/NotFound
            },
            ResponseProps: (spec.ResponseProps) {
             Description: (string) "",
             Schema: (*spec.Schema)(<nil>),
             Headers: (map[string]spec.Header) <nil>,
             Examples: (map[string]interface {}) <nil>
            },
            VendorExtensible: (spec.VendorExtensible) {
             Extensions: (spec.Extensions) <nil>
            }
           },
           (int) 422: (spec.Response) {
            Refable: (spec.Refable) {
             Ref: (spec.Ref) 
            },
            ResponseProps: (spec.ResponseProps) {
             Description: (string) (len=51) "Unable to update app icon with the given parameters",
             Schema: (*spec.Schema)(0xc000340d80)({
              VendorExtensible: (spec.VendorExtensible) {
               Extensions: (spec.Extensions) <nil>
              },
              SchemaProps: (spec.SchemaProps) {
               ID: (string) "",
               Ref: (spec.Ref) #/definitions/UnprocessableEntity,
               Schema: (spec.SchemaURL) "",
               Description: (string) "",
               Type: (spec.StringOrArray) <nil>,
               Format: (string) "",
               Title: (string) "",
               Default: (interface {}) <nil>,
               Maximum: (*float64)(<nil>),
               ExclusiveMaximum: (bool) false,
               Minimum: (*float64)(<nil>),
               ExclusiveMinimum: (bool) false,
               MaxLength: (*int64)(<nil>),
               MinLength: (*int64)(<nil>),
               Pattern: (string) "",
               MaxItems: (*int64)(<nil>),
               MinItems: (*int64)(<nil>),
               UniqueItems: (bool) false,
               MultipleOf: (*float64)(<nil>),
               Enum: ([]interface {}) <nil>,
               MaxProperties: (*int64)(<nil>),
               MinProperties: (*int64)(<nil>),
               Required: ([]string) <nil>,
               Items: (*spec.SchemaOrArray)(<nil>),
               AllOf: ([]spec.Schema) <nil>,
               OneOf: ([]spec.Schema) <nil>,
               AnyOf: ([]spec.Schema) <nil>,
               Not: (*spec.Schema)(<nil>),
               Properties: (map[string]spec.Schema) <nil>,
               AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
               PatternProperties: (map[string]spec.Schema) <nil>,
               Dependencies: (spec.Dependencies) <nil>,
               AdditionalItems: (*spec.SchemaOrBool)(<nil>),
               Definitions: (spec.Definitions) <nil>
              },
              SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
               Discriminator: (string) "",
               ReadOnly: (bool) false,
               XML: (*spec.XMLObject)(<nil>),
               ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
               Example: (interface {}) <nil>
              },
              ExtraProps: (map[string]interface {}) <nil>
             }),
             Headers: (map[string]spec.Header) <nil>,
             Examples: (map[string]interface {}) <nil>
            },
            VendorExtensible: (spec.VendorExtensible) {
             Extensions: (spec.Extensions) <nil>
            }
           }
          }
         }
        })
       }
      }),
      Delete: (*spec.Operation)(<nil>),
      Options: (*spec.Operation)(<nil>),
      Head: (*spec.Operation)(<nil>),
      Patch: (*spec.Operation)(<nil>),
      Parameters: ([]spec.Parameter) <nil>
     }
    },
    (string) (len=50) "/v1/apps/{appID}/admins/{adminID}/guides/{guideID}": (spec.PathItem) {
     Refable: (spec.Refable) {
      Ref: (spec.Ref) 
     },
     VendorExtensible: (spec.VendorExtensible) {
      Extensions: (spec.Extensions) <nil>
     },
     PathItemProps: (spec.PathItemProps) {
      Get: (*spec.Operation)(0xc0003af880)({
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       OperationProps: (spec.OperationProps) {
        Description: (string) "",
        Consumes: ([]string) <nil>,
        Produces: ([]string) <nil>,
        Schemes: ([]string) <nil>,
        Tags: ([]string) <nil>,
        Summary: (string) (len=35) "Get a guide for an admin for an app",
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        ID: (string) (len=14) "getGuideConfig",
        Deprecated: (bool) false,
        Security: ([]map[string][]string) <nil>,
        Parameters: ([]spec.Parameter) (len=3 cap=4) {
         (spec.Parameter) {
          Refable: (spec.Refable) {
           Ref: (spec.Ref) 
          },
          CommonValidations: (spec.CommonValidations) {
           Maximum: (*float64)(<nil>),
           ExclusiveMaximum: (bool) false,
           Minimum: (*float64)(<nil>),
           ExclusiveMinimum: (bool) false,
           MaxLength: (*int64)(<nil>),
           MinLength: (*int64)(<nil>),
           Pattern: (string) "",
           MaxItems: (*int64)(<nil>),
           MinItems: (*int64)(<nil>),
           UniqueItems: (bool) false,
           MultipleOf: (*float64)(<nil>),
           Enum: ([]interface {}) <nil>
          },
          SimpleSchema: (spec.SimpleSchema) {
           Type: (string) (len=6) "string",
           Format: (string) (len=8) "mongo-id",
           Items: (*spec.Items)(<nil>),
           CollectionFormat: (string) "",
           Default: (interface {}) <nil>,
           Example: (interface {}) <nil>
          },
          VendorExtensible: (spec.VendorExtensible) {
           Extensions: (spec.Extensions) <nil>
          },
          ParamProps: (spec.ParamProps) {
           Description: (string) "",
           Name: (string) (len=5) "appID",
           In: (string) (len=4) "path",
           Required: (bool) true,
           Schema: (*spec.Schema)(<nil>),
           AllowEmptyValue: (bool) false
          }
         },
         (spec.Parameter) {
          Refable: (spec.Refable) {
           Ref: (spec.Ref) 
          },
          CommonValidations: (spec.CommonValidations) {
           Maximum: (*float64)(<nil>),
           ExclusiveMaximum: (bool) false,
           Minimum: (*float64)(<nil>),
           ExclusiveMinimum: (bool) false,
           MaxLength: (*int64)(<nil>),
           MinLength: (*int64)(<nil>),
           Pattern: (string) "",
           MaxItems: (*int64)(<nil>),
           MinItems: (*int64)(<nil>),
           UniqueItems: (bool) false,
           MultipleOf: (*float64)(<nil>),
           Enum: ([]interface {}) <nil>
          },
          SimpleSchema: (spec.SimpleSchema) {
           Type: (string) (len=6) "string",
           Format: (string) (len=8) "mongo-id",
           Items: (*spec.Items)(<nil>),
           CollectionFormat: (string) "",
           Default: (interface {}) <nil>,
           Example: (interface {}) <nil>
          },
          VendorExtensible: (spec.VendorExtensible) {
           Extensions: (spec.Extensions) <nil>
          },
          ParamProps: (spec.ParamProps) {
           Description: (string) "",
           Name: (string) (len=7) "adminID",
           In: (string) (len=4) "path",
           Required: (bool) true,
           Schema: (*spec.Schema)(<nil>),
           AllowEmptyValue: (bool) false
          }
         },
         (spec.Parameter) {
          Refable: (spec.Refable) {
           Ref: (spec.Ref) 
          },
          CommonValidations: (spec.CommonValidations) {
           Maximum: (*float64)(<nil>),
           ExclusiveMaximum: (bool) false,
           Minimum: (*float64)(<nil>),
           ExclusiveMinimum: (bool) false,
           MaxLength: (*int64)(<nil>),
           MinLength: (*int64)(<nil>),
           Pattern: (string) "",
           MaxItems: (*int64)(<nil>),
           MinItems: (*int64)(<nil>),
           UniqueItems: (bool) false,
           MultipleOf: (*float64)(<nil>),
           Enum: ([]interface {}) <nil>
          },
          SimpleSchema: (spec.SimpleSchema) {
           Type: (string) (len=6) "string",
           Format: (string) "",
           Items: (*spec.Items)(<nil>),
           CollectionFormat: (string) "",
           Default: (interface {}) <nil>,
           Example: (interface {}) <nil>
          },
          VendorExtensible: (spec.VendorExtensible) {
           Extensions: (spec.Extensions) <nil>
          },
          ParamProps: (spec.ParamProps) {
           Description: (string) "",
           Name: (string) (len=7) "guideID",
           In: (string) (len=4) "path",
           Required: (bool) true,
           Schema: (*spec.Schema)(<nil>),
           AllowEmptyValue: (bool) false
          }
         }
        },
        Responses: (*spec.Responses)(0xc0008e4520)({
         VendorExtensible: (spec.VendorExtensible) {
          Extensions: (spec.Extensions) <nil>
         },
         ResponsesProps: (spec.ResponsesProps) {
          Default: (*spec.Response)(<nil>),
          StatusCodeResponses: (map[int]spec.Response) (len=3) {
           (int) 404: (spec.Response) {
            Refable: (spec.Refable) {
             Ref: (spec.Ref) #/responses/NotFound
            },
            ResponseProps: (spec.ResponseProps) {
             Description: (string) "",
             Schema: (*spec.Schema)(<nil>),
             Headers: (map[string]spec.Header) <nil>,
             Examples: (map[string]interface {}) <nil>
            },
            VendorExtensible: (spec.VendorExtensible) {
             Extensions: (spec.Extensions) <nil>
            }
           },
           (int) 200: (spec.Response) {
            Refable: (spec.Refable) {
             Ref: (spec.Ref) 
            },
            ResponseProps: (spec.ResponseProps) {
             Description: (string) (len=52) "The guide config for the given admin, app, and guide",
             Schema: (*spec.Schema)(0xc000301d40)({
              VendorExtensible: (spec.VendorExtensible) {
               Extensions: (spec.Extensions) <nil>
              },
              SchemaProps: (spec.SchemaProps) {
               ID: (string) "",
               Ref: (spec.Ref) #/definitions/GuideConfig,
               Schema: (spec.SchemaURL) "",
               Description: (string) "",
               Type: (spec.StringOrArray) <nil>,
               Format: (string) "",
               Title: (string) "",
               Default: (interface {}) <nil>,
               Maximum: (*float64)(<nil>),
               ExclusiveMaximum: (bool) false,
               Minimum: (*float64)(<nil>),
               ExclusiveMinimum: (bool) false,
               MaxLength: (*int64)(<nil>),
               MinLength: (*int64)(<nil>),
               Pattern: (string) "",
               MaxItems: (*int64)(<nil>),
               MinItems: (*int64)(<nil>),
               UniqueItems: (bool) false,
               MultipleOf: (*float64)(<nil>),
               Enum: ([]interface {}) <nil>,
               MaxProperties: (*int64)(<nil>),
               MinProperties: (*int64)(<nil>),
               Required: ([]string) <nil>,
               Items: (*spec.SchemaOrArray)(<nil>),
               AllOf: ([]spec.Schema) <nil>,
               OneOf: ([]spec.Schema) <nil>,
               AnyOf: ([]spec.Schema) <nil>,
               Not: (*spec.Schema)(<nil>),
               Properties: (map[string]spec.Schema) <nil>,
               AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
               PatternProperties: (map[string]spec.Schema) <nil>,
               Dependencies: (spec.Dependencies) <nil>,
               AdditionalItems: (*spec.SchemaOrBool)(<nil>),
               Definitions: (spec.Definitions) <nil>
              },
              SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
               Discriminator: (string) "",
               ReadOnly: (bool) false,
               XML: (*spec.XMLObject)(<nil>),
               ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
               Example: (interface {}) <nil>
              },
              ExtraProps: (map[string]interface {}) <nil>
             }),
             Headers: (map[string]spec.Header) <nil>,
             Examples: (map[string]interface {}) <nil>
            },
            VendorExtensible: (spec.VendorExtensible) {
             Extensions: (spec.Extensions) <nil>
            }
           },
           (int) 403: (spec.Response) {
            Refable: (spec.Refable) {
             Ref: (spec.Ref) #/responses/Forbidden
            },
            ResponseProps: (spec.ResponseProps) {
             Description: (string) "",
             Schema: (*spec.Schema)(<nil>),
             Headers: (map[string]spec.Header) <nil>,
             Examples: (map[string]interface {}) <nil>
            },
            VendorExtensible: (spec.VendorExtensible) {
             Extensions: (spec.Extensions) <nil>
            }
           }
          }
         }
        })
       }
      }),
      Put: (*spec.Operation)(0xc0003af7a0)({
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       OperationProps: (spec.OperationProps) {
        Description: (string) "",
        Consumes: ([]string) <nil>,
        Produces: ([]string) <nil>,
        Schemes: ([]string) <nil>,
        Tags: ([]string) <nil>,
        Summary: (string) (len=35) "Add a guide for an admin for an app",
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        ID: (string) (len=14) "setGuideConfig",
        Deprecated: (bool) false,
        Security: ([]map[string][]string) <nil>,
        Parameters: ([]spec.Parameter) (len=4 cap=4) {
         (spec.Parameter) {
          Refable: (spec.Refable) {
           Ref: (spec.Ref) 
          },
          CommonValidations: (spec.CommonValidations) {
           Maximum: (*float64)(<nil>),
           ExclusiveMaximum: (bool) false,
           Minimum: (*float64)(<nil>),
           ExclusiveMinimum: (bool) false,
           MaxLength: (*int64)(<nil>),
           MinLength: (*int64)(<nil>),
           Pattern: (string) "",
           MaxItems: (*int64)(<nil>),
           MinItems: (*int64)(<nil>),
           UniqueItems: (bool) false,
           MultipleOf: (*float64)(<nil>),
           Enum: ([]interface {}) <nil>
          },
          SimpleSchema: (spec.SimpleSchema) {
           Type: (string) (len=6) "string",
           Format: (string) (len=8) "mongo-id",
           Items: (*spec.Items)(<nil>),
           CollectionFormat: (string) "",
           Default: (interface {}) <nil>,
           Example: (interface {}) <nil>
          },
          VendorExtensible: (spec.VendorExtensible) {
           Extensions: (spec.Extensions) <nil>
          },
          ParamProps: (spec.ParamProps) {
           Description: (string) "",
           Name: (string) (len=5) "appID",
           In: (string) (len=4) "path",
           Required: (bool) true,
           Schema: (*spec.Schema)(<nil>),
           AllowEmptyValue: (bool) false
          }
         },
         (spec.Parameter) {
          Refable: (spec.Refable) {
           Ref: (spec.Ref) 
          },
          CommonValidations: (spec.CommonValidations) {
           Maximum: (*float64)(<nil>),
           ExclusiveMaximum: (bool) false,
           Minimum: (*float64)(<nil>),
           ExclusiveMinimum: (bool) false,
           MaxLength: (*int64)(<nil>),
           MinLength: (*int64)(<nil>),
           Pattern: (string) "",
           MaxItems: (*int64)(<nil>),
           MinItems: (*int64)(<nil>),
           UniqueItems: (bool) false,
           MultipleOf: (*float64)(<nil>),
           Enum: ([]interface {}) <nil>
          },
          SimpleSchema: (spec.SimpleSchema) {
           Type: (string) (len=6) "string",
           Format: (string) (len=8) "mongo-id",
           Items: (*spec.Items)(<nil>),
           CollectionFormat: (string) "",
           Default: (interface {}) <nil>,
           Example: (interface {}) <nil>
          },
          VendorExtensible: (spec.VendorExtensible) {
           Extensions: (spec.Extensions) <nil>
          },
          ParamProps: (spec.ParamProps) {
           Description: (string) "",
           Name: (string) (len=7) "adminID",
           In: (string) (len=4) "path",
           Required: (bool) true,
           Schema: (*spec.Schema)(<nil>),
           AllowEmptyValue: (bool) false
          }
         },
         (spec.Parameter) {
          Refable: (spec.Refable) {
           Ref: (spec.Ref) 
          },
          CommonValidations: (spec.CommonValidations) {
           Maximum: (*float64)(<nil>),
           ExclusiveMaximum: (bool) false,
           Minimum: (*float64)(<nil>),
           ExclusiveMinimum: (bool) false,
           MaxLength: (*int64)(<nil>),
           MinLength: (*int64)(<nil>),
           Pattern: (string) "",
           MaxItems: (*int64)(<nil>),
           MinItems: (*int64)(<nil>),
           UniqueItems: (bool) false,
           MultipleOf: (*float64)(<nil>),
           Enum: ([]interface {}) <nil>
          },
          SimpleSchema: (spec.SimpleSchema) {
           Type: (string) (len=6) "string",
           Format: (string) "",
           Items: (*spec.Items)(<nil>),
           CollectionFormat: (string) "",
           Default: (interface {}) <nil>,
           Example: (interface {}) <nil>
          },
          VendorExtensible: (spec.VendorExtensible) {
           Extensions: (spec.Extensions) <nil>
          },
          ParamProps: (spec.ParamProps) {
           Description: (string) "",
           Name: (string) (len=7) "guideID",
           In: (string) (len=4) "path",
           Required: (bool) true,
           Schema: (*spec.Schema)(<nil>),
           AllowEmptyValue: (bool) false
          }
         },
         (spec.Parameter) {
          Refable: (spec.Refable) {
           Ref: (spec.Ref) 
          },
          CommonValidations: (spec.CommonValidations) {
           Maximum: (*float64)(<nil>),
           ExclusiveMaximum: (bool) false,
           Minimum: (*float64)(<nil>),
           ExclusiveMinimum: (bool) false,
           MaxLength: (*int64)(<nil>),
           MinLength: (*int64)(<nil>),
           Pattern: (string) "",
           MaxItems: (*int64)(<nil>),
           MinItems: (*int64)(<nil>),
           UniqueItems: (bool) false,
           MultipleOf: (*float64)(<nil>),
           Enum: ([]interface {}) <nil>
          },
          SimpleSchema: (spec.SimpleSchema) {
           Type: (string) "",
           Format: (string) "",
           Items: (*spec.Items)(<nil>),
           CollectionFormat: (string) "",
           Default: (interface {}) <nil>,
           Example: (interface {}) <nil>
          },
          VendorExtensible: (spec.VendorExtensible) {
           Extensions: (spec.Extensions) <nil>
          },
          ParamProps: (spec.ParamProps) {
           Description: (string) "",
           Name: (string) (len=11) "guideConfig",
           In: (string) (len=4) "body",
           Required: (bool) true,
           Schema: (*spec.Schema)(0xc000300d80)({
            VendorExtensible: (spec.VendorExtensible) {
             Extensions: (spec.Extensions) <nil>
            },
            SchemaProps: (spec.SchemaProps) {
             ID: (string) "",
             Ref: (spec.Ref) #/definitions/GuideConfig,
             Schema: (spec.SchemaURL) "",
             Description: (string) "",
             Type: (spec.StringOrArray) <nil>,
             Format: (string) "",
             Title: (string) "",
             Default: (interface {}) <nil>,
             Maximum: (*float64)(<nil>),
             ExclusiveMaximum: (bool) false,
             Minimum: (*float64)(<nil>),
             ExclusiveMinimum: (bool) false,
             MaxLength: (*int64)(<nil>),
             MinLength: (*int64)(<nil>),
             Pattern: (string) "",
             MaxItems: (*int64)(<nil>),
             MinItems: (*int64)(<nil>),
             UniqueItems: (bool) false,
             MultipleOf: (*float64)(<nil>),
             Enum: ([]interface {}) <nil>,
             MaxProperties: (*int64)(<nil>),
             MinProperties: (*int64)(<nil>),
             Required: ([]string) <nil>,
             Items: (*spec.SchemaOrArray)(<nil>),
             AllOf: ([]spec.Schema) <nil>,
             OneOf: ([]spec.Schema) <nil>,
             AnyOf: ([]spec.Schema) <nil>,
             Not: (*spec.Schema)(<nil>),
             Properties: (map[string]spec.Schema) <nil>,
             AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
             PatternProperties: (map[string]spec.Schema) <nil>,
             Dependencies: (spec.Dependencies) <nil>,
             AdditionalItems: (*spec.SchemaOrBool)(<nil>),
             Definitions: (spec.Definitions) <nil>
            },
            SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
             Discriminator: (string) "",
             ReadOnly: (bool) false,
             XML: (*spec.XMLObject)(<nil>),
             ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
             Example: (interface {}) <nil>
            },
            ExtraProps: (map[string]interface {}) <nil>
           }),
           AllowEmptyValue: (bool) false
          }
         }
        },
        Responses: (*spec.Responses)(0xc0008a1e40)({
         VendorExtensible: (spec.VendorExtensible) {
          Extensions: (spec.Extensions) <nil>
         },
         ResponsesProps: (spec.ResponsesProps) {
          Default: (*spec.Response)(<nil>),
          StatusCodeResponses: (map[int]spec.Response) (len=3) {
           (int) 200: (spec.Response) {
            Refable: (spec.Refable) {
             Ref: (spec.Ref) 
            },
            ResponseProps: (spec.ResponseProps) {
             Description: (string) (len=54) "The guide config for the updated admin, app, and guide",
             Schema: (*spec.Schema)(0xc000301680)({
              VendorExtensible: (spec.VendorExtensible) {
               Extensions: (spec.Extensions) <nil>
              },
              SchemaProps: (spec.SchemaProps) {
               ID: (string) "",
               Ref: (spec.Ref) #/definitions/GuideConfig,
               Schema: (spec.SchemaURL) "",
               Description: (string) "",
               Type: (spec.StringOrArray) <nil>,
               Format: (string) "",
               Title: (string) "",
               Default: (interface {}) <nil>,
               Maximum: (*float64)(<nil>),
               ExclusiveMaximum: (bool) false,
               Minimum: (*float64)(<nil>),
               ExclusiveMinimum: (bool) false,
               MaxLength: (*int64)(<nil>),
               MinLength: (*int64)(<nil>),
               Pattern: (string) "",
               MaxItems: (*int64)(<nil>),
               MinItems: (*int64)(<nil>),
               UniqueItems: (bool) false,
               MultipleOf: (*float64)(<nil>),
               Enum: ([]interface {}) <nil>,
               MaxProperties: (*int64)(<nil>),
               MinProperties: (*int64)(<nil>),
               Required: ([]string) <nil>,
               Items: (*spec.SchemaOrArray)(<nil>),
               AllOf: ([]spec.Schema) <nil>,
               OneOf: ([]spec.Schema) <nil>,
               AnyOf: ([]spec.Schema) <nil>,
               Not: (*spec.Schema)(<nil>),
               Properties: (map[string]spec.Schema) <nil>,
               AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
               PatternProperties: (map[string]spec.Schema) <nil>,
               Dependencies: (spec.Dependencies) <nil>,
               AdditionalItems: (*spec.SchemaOrBool)(<nil>),
               Definitions: (spec.Definitions) <nil>
              },
              SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
               Discriminator: (string) "",
               ReadOnly: (bool) false,
               XML: (*spec.XMLObject)(<nil>),
               ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
               Example: (interface {}) <nil>
              },
              ExtraProps: (map[string]interface {}) <nil>
             }),
             Headers: (map[string]spec.Header) <nil>,
             Examples: (map[string]interface {}) <nil>
            },
            VendorExtensible: (spec.VendorExtensible) {
             Extensions: (spec.Extensions) <nil>
            }
           },
           (int) 403: (spec.Response) {
            Refable: (spec.Refable) {
             Ref: (spec.Ref) #/responses/Forbidden
            },
            ResponseProps: (spec.ResponseProps) {
             Description: (string) "",
             Schema: (*spec.Schema)(<nil>),
             Headers: (map[string]spec.Header) <nil>,
             Examples: (map[string]interface {}) <nil>
            },
            VendorExtensible: (spec.VendorExtensible) {
             Extensions: (spec.Extensions) <nil>
            }
           },
           (int) 404: (spec.Response) {
            Refable: (spec.Refable) {
             Ref: (spec.Ref) #/responses/NotFound
            },
            ResponseProps: (spec.ResponseProps) {
             Description: (string) "",
             Schema: (*spec.Schema)(<nil>),
             Headers: (map[string]spec.Header) <nil>,
             Examples: (map[string]interface {}) <nil>
            },
            VendorExtensible: (spec.VendorExtensible) {
             Extensions: (spec.Extensions) <nil>
            }
           }
          }
         }
        })
       }
      }),
      Post: (*spec.Operation)(<nil>),
      Delete: (*spec.Operation)(<nil>),
      Options: (*spec.Operation)(<nil>),
      Head: (*spec.Operation)(<nil>),
      Patch: (*spec.Operation)(<nil>),
      Parameters: ([]spec.Parameter) <nil>
     }
    },
    (string) (len=24) "/v1/apps/{appID}/secrets": (spec.PathItem) {
     Refable: (spec.Refable) {
      Ref: (spec.Ref) 
     },
     VendorExtensible: (spec.VendorExtensible) {
      Extensions: (spec.Extensions) <nil>
     },
     PathItemProps: (spec.PathItemProps) {
      Get: (*spec.Operation)(0xc0000e1880)({
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       OperationProps: (spec.OperationProps) {
        Description: (string) "",
        Consumes: ([]string) <nil>,
        Produces: ([]string) <nil>,
        Schemes: ([]string) <nil>,
        Tags: ([]string) <nil>,
        Summary: (string) (len=22) "Get secret information",
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        ID: (string) (len=10) "getSecrets",
        Deprecated: (bool) false,
        Security: ([]map[string][]string) <nil>,
        Parameters: ([]spec.Parameter) (len=1 cap=4) {
         (spec.Parameter) {
          Refable: (spec.Refable) {
           Ref: (spec.Ref) 
          },
          CommonValidations: (spec.CommonValidations) {
           Maximum: (*float64)(<nil>),
           ExclusiveMaximum: (bool) false,
           Minimum: (*float64)(<nil>),
           ExclusiveMinimum: (bool) false,
           MaxLength: (*int64)(<nil>),
           MinLength: (*int64)(<nil>),
           Pattern: (string) "",
           MaxItems: (*int64)(<nil>),
           MinItems: (*int64)(<nil>),
           UniqueItems: (bool) false,
           MultipleOf: (*float64)(<nil>),
           Enum: ([]interface {}) <nil>
          },
          SimpleSchema: (spec.SimpleSchema) {
           Type: (string) (len=6) "string",
           Format: (string) "",
           Items: (*spec.Items)(<nil>),
           CollectionFormat: (string) "",
           Default: (interface {}) <nil>,
           Example: (interface {}) <nil>
          },
          VendorExtensible: (spec.VendorExtensible) {
           Extensions: (spec.Extensions) <nil>
          },
          ParamProps: (spec.ParamProps) {
           Description: (string) "",
           Name: (string) (len=5) "appID",
           In: (string) (len=4) "path",
           Required: (bool) true,
           Schema: (*spec.Schema)(<nil>),
           AllowEmptyValue: (bool) false
          }
         }
        },
        Responses: (*spec.Responses)(0xc0002c9b80)({
         VendorExtensible: (spec.VendorExtensible) {
          Extensions: (spec.Extensions) <nil>
         },
         ResponsesProps: (spec.ResponsesProps) {
          Default: (*spec.Response)(<nil>),
          StatusCodeResponses: (map[int]spec.Response) (len=2) {
           (int) 200: (spec.Response) {
            Refable: (spec.Refable) {
             Ref: (spec.Ref) 
            },
            ResponseProps: (spec.ResponseProps) {
             Description: (string) (len=25) "Client secret information",
             Schema: (*spec.Schema)(0xc00037f8c0)({
              VendorExtensible: (spec.VendorExtensible) {
               Extensions: (spec.Extensions) <nil>
              },
              SchemaProps: (spec.SchemaProps) {
               ID: (string) "",
               Ref: (spec.Ref) #/definitions/SecretConfig,
               Schema: (spec.SchemaURL) "",
               Description: (string) "",
               Type: (spec.StringOrArray) <nil>,
               Format: (string) "",
               Title: (string) "",
               Default: (interface {}) <nil>,
               Maximum: (*float64)(<nil>),
               ExclusiveMaximum: (bool) false,
               Minimum: (*float64)(<nil>),
               ExclusiveMinimum: (bool) false,
               MaxLength: (*int64)(<nil>),
               MinLength: (*int64)(<nil>),
               Pattern: (string) "",
               MaxItems: (*int64)(<nil>),
               MinItems: (*int64)(<nil>),
               UniqueItems: (bool) false,
               MultipleOf: (*float64)(<nil>),
               Enum: ([]interface {}) <nil>,
               MaxProperties: (*int64)(<nil>),
               MinProperties: (*int64)(<nil>),
               Required: ([]string) <nil>,
               Items: (*spec.SchemaOrArray)(<nil>),
               AllOf: ([]spec.Schema) <nil>,
               OneOf: ([]spec.Schema) <nil>,
               AnyOf: ([]spec.Schema) <nil>,
               Not: (*spec.Schema)(<nil>),
               Properties: (map[string]spec.Schema) <nil>,
               AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
               PatternProperties: (map[string]spec.Schema) <nil>,
               Dependencies: (spec.Dependencies) <nil>,
               AdditionalItems: (*spec.SchemaOrBool)(<nil>),
               Definitions: (spec.Definitions) <nil>
              },
              SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
               Discriminator: (string) "",
               ReadOnly: (bool) false,
               XML: (*spec.XMLObject)(<nil>),
               ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
               Example: (interface {}) <nil>
              },
              ExtraProps: (map[string]interface {}) <nil>
             }),
             Headers: (map[string]spec.Header) <nil>,
             Examples: (map[string]interface {}) <nil>
            },
            VendorExtensible: (spec.VendorExtensible) {
             Extensions: (spec.Extensions) <nil>
            }
           },
           (int) 404: (spec.Response) {
            Refable: (spec.Refable) {
             Ref: (spec.Ref) #/responses/NotFound
            },
            ResponseProps: (spec.ResponseProps) {
             Description: (string) "",
             Schema: (*spec.Schema)(<nil>),
             Headers: (map[string]spec.Header) <nil>,
             Examples: (map[string]interface {}) <nil>
            },
            VendorExtensible: (spec.VendorExtensible) {
             Extensions: (spec.Extensions) <nil>
            }
           }
          }
         }
        })
       }
      }),
      Put: (*spec.Operation)(0xc0000e16c0)({
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       OperationProps: (spec.OperationProps) {
        Description: (string) "",
        Consumes: ([]string) <nil>,
        Produces: ([]string) <nil>,
        Schemes: ([]string) <nil>,
        Tags: ([]string) <nil>,
        Summary: (string) (len=29) "Hard resets the client secret",
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        ID: (string) (len=17) "resetClientSecret",
        Deprecated: (bool) false,
        Security: ([]map[string][]string) <nil>,
        Parameters: ([]spec.Parameter) (len=1 cap=4) {
         (spec.Parameter) {
          Refable: (spec.Refable) {
           Ref: (spec.Ref) 
          },
          CommonValidations: (spec.CommonValidations) {
           Maximum: (*float64)(<nil>),
           ExclusiveMaximum: (bool) false,
           Minimum: (*float64)(<nil>),
           ExclusiveMinimum: (bool) false,
           MaxLength: (*int64)(<nil>),
           MinLength: (*int64)(<nil>),
           Pattern: (string) "",
           MaxItems: (*int64)(<nil>),
           MinItems: (*int64)(<nil>),
           UniqueItems: (bool) false,
           MultipleOf: (*float64)(<nil>),
           Enum: ([]interface {}) <nil>
          },
          SimpleSchema: (spec.SimpleSchema) {
           Type: (string) (len=6) "string",
           Format: (string) "",
           Items: (*spec.Items)(<nil>),
           CollectionFormat: (string) "",
           Default: (interface {}) <nil>,
           Example: (interface {}) <nil>
          },
          VendorExtensible: (spec.VendorExtensible) {
           Extensions: (spec.Extensions) <nil>
          },
          ParamProps: (spec.ParamProps) {
           Description: (string) "",
           Name: (string) (len=5) "appID",
           In: (string) (len=4) "path",
           Required: (bool) true,
           Schema: (*spec.Schema)(<nil>),
           AllowEmptyValue: (bool) false
          }
         }
        },
        Responses: (*spec.Responses)(0xc000271d20)({
         VendorExtensible: (spec.VendorExtensible) {
          Extensions: (spec.Extensions) <nil>
         },
         ResponsesProps: (spec.ResponsesProps) {
          Default: (*spec.Response)(<nil>),
          StatusCodeResponses: (map[int]spec.Response) (len=2) {
           (int) 404: (spec.Response) {
            Refable: (spec.Refable) {
             Ref: (spec.Ref) #/responses/NotFound
            },
            ResponseProps: (spec.ResponseProps) {
             Description: (string) "",
             Schema: (*spec.Schema)(<nil>),
             Headers: (map[string]spec.Header) <nil>,
             Examples: (map[string]interface {}) <nil>
            },
            VendorExtensible: (spec.VendorExtensible) {
             Extensions: (spec.Extensions) <nil>
            }
           },
           (int) 200: (spec.Response) {
            Refable: (spec.Refable) {
             Ref: (spec.Ref) 
            },
            ResponseProps: (spec.ResponseProps) {
             Description: (string) (len=25) "Client secret information",
             Schema: (*spec.Schema)(0xc00037e240)({
              VendorExtensible: (spec.VendorExtensible) {
               Extensions: (spec.Extensions) <nil>
              },
              SchemaProps: (spec.SchemaProps) {
               ID: (string) "",
               Ref: (spec.Ref) #/definitions/SecretConfig,
               Schema: (spec.SchemaURL) "",
               Description: (string) "",
               Type: (spec.StringOrArray) <nil>,
               Format: (string) "",
               Title: (string) "",
               Default: (interface {}) <nil>,
               Maximum: (*float64)(<nil>),
               ExclusiveMaximum: (bool) false,
               Minimum: (*float64)(<nil>),
               ExclusiveMinimum: (bool) false,
               MaxLength: (*int64)(<nil>),
               MinLength: (*int64)(<nil>),
               Pattern: (string) "",
               MaxItems: (*int64)(<nil>),
               MinItems: (*int64)(<nil>),
               UniqueItems: (bool) false,
               MultipleOf: (*float64)(<nil>),
               Enum: ([]interface {}) <nil>,
               MaxProperties: (*int64)(<nil>),
               MinProperties: (*int64)(<nil>),
               Required: ([]string) <nil>,
               Items: (*spec.SchemaOrArray)(<nil>),
               AllOf: ([]spec.Schema) <nil>,
               OneOf: ([]spec.Schema) <nil>,
               AnyOf: ([]spec.Schema) <nil>,
               Not: (*spec.Schema)(<nil>),
               Properties: (map[string]spec.Schema) <nil>,
               AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
               PatternProperties: (map[string]spec.Schema) <nil>,
               Dependencies: (spec.Dependencies) <nil>,
               AdditionalItems: (*spec.SchemaOrBool)(<nil>),
               Definitions: (spec.Definitions) <nil>
              },
              SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
               Discriminator: (string) "",
               ReadOnly: (bool) false,
               XML: (*spec.XMLObject)(<nil>),
               ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
               Example: (interface {}) <nil>
              },
              ExtraProps: (map[string]interface {}) <nil>
             }),
             Headers: (map[string]spec.Header) <nil>,
             Examples: (map[string]interface {}) <nil>
            },
            VendorExtensible: (spec.VendorExtensible) {
             Extensions: (spec.Extensions) <nil>
            }
           }
          }
         }
        })
       }
      }),
      Post: (*spec.Operation)(0xc0000e15e0)({
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       OperationProps: (spec.OperationProps) {
        Description: (string) "",
        Consumes: ([]string) <nil>,
        Produces: ([]string) <nil>,
        Schemes: ([]string) <nil>,
        Tags: ([]string) <nil>,
        Summary: (string) (len=149) "Generate a new client secret. This creates a new client secret, but retains the previous secret so that clients can migrate their code to the secret.",
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        ID: (string) (len=23) "generateNewClientSecret",
        Deprecated: (bool) false,
        Security: ([]map[string][]string) <nil>,
        Parameters: ([]spec.Parameter) (len=1 cap=4) {
         (spec.Parameter) {
          Refable: (spec.Refable) {
           Ref: (spec.Ref) 
          },
          CommonValidations: (spec.CommonValidations) {
           Maximum: (*float64)(<nil>),
           ExclusiveMaximum: (bool) false,
           Minimum: (*float64)(<nil>),
           ExclusiveMinimum: (bool) false,
           MaxLength: (*int64)(<nil>),
           MinLength: (*int64)(<nil>),
           Pattern: (string) "",
           MaxItems: (*int64)(<nil>),
           MinItems: (*int64)(<nil>),
           UniqueItems: (bool) false,
           MultipleOf: (*float64)(<nil>),
           Enum: ([]interface {}) <nil>
          },
          SimpleSchema: (spec.SimpleSchema) {
           Type: (string) (len=6) "string",
           Format: (string) "",
           Items: (*spec.Items)(<nil>),
           CollectionFormat: (string) "",
           Default: (interface {}) <nil>,
           Example: (interface {}) <nil>
          },
          VendorExtensible: (spec.VendorExtensible) {
           Extensions: (spec.Extensions) <nil>
          },
          ParamProps: (spec.ParamProps) {
           Description: (string) "",
           Name: (string) (len=5) "appID",
           In: (string) (len=4) "path",
           Required: (bool) true,
           Schema: (*spec.Schema)(<nil>),
           AllowEmptyValue: (bool) false
          }
         }
        },
        Responses: (*spec.Responses)(0xc000270880)({
         VendorExtensible: (spec.VendorExtensible) {
          Extensions: (spec.Extensions) <nil>
         },
         ResponsesProps: (spec.ResponsesProps) {
          Default: (*spec.Response)(<nil>),
          StatusCodeResponses: (map[int]spec.Response) (len=2) {
           (int) 404: (spec.Response) {
            Refable: (spec.Refable) {
             Ref: (spec.Ref) #/responses/NotFound
            },
            ResponseProps: (spec.ResponseProps) {
             Description: (string) "",
             Schema: (*spec.Schema)(<nil>),
             Headers: (map[string]spec.Header) <nil>,
             Examples: (map[string]interface {}) <nil>
            },
            VendorExtensible: (spec.VendorExtensible) {
             Extensions: (spec.Extensions) <nil>
            }
           },
           (int) 200: (spec.Response) {
            Refable: (spec.Refable) {
             Ref: (spec.Ref) 
            },
            ResponseProps: (spec.ResponseProps) {
             Description: (string) (len=25) "Client secret information",
             Schema: (*spec.Schema)(0xc0003858c0)({
              VendorExtensible: (spec.VendorExtensible) {
               Extensions: (spec.Extensions) <nil>
              },
              SchemaProps: (spec.SchemaProps) {
               ID: (string) "",
               Ref: (spec.Ref) #/definitions/SecretConfig,
               Schema: (spec.SchemaURL) "",
               Description: (string) "",
               Type: (spec.StringOrArray) <nil>,
               Format: (string) "",
               Title: (string) "",
               Default: (interface {}) <nil>,
               Maximum: (*float64)(<nil>),
               ExclusiveMaximum: (bool) false,
               Minimum: (*float64)(<nil>),
               ExclusiveMinimum: (bool) false,
               MaxLength: (*int64)(<nil>),
               MinLength: (*int64)(<nil>),
               Pattern: (string) "",
               MaxItems: (*int64)(<nil>),
               MinItems: (*int64)(<nil>),
               UniqueItems: (bool) false,
               MultipleOf: (*float64)(<nil>),
               Enum: ([]interface {}) <nil>,
               MaxProperties: (*int64)(<nil>),
               MinProperties: (*int64)(<nil>),
               Required: ([]string) <nil>,
               Items: (*spec.SchemaOrArray)(<nil>),
               AllOf: ([]spec.Schema) <nil>,
               OneOf: ([]spec.Schema) <nil>,
               AnyOf: ([]spec.Schema) <nil>,
               Not: (*spec.Schema)(<nil>),
               Properties: (map[string]spec.Schema) <nil>,
               AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
               PatternProperties: (map[string]spec.Schema) <nil>,
               Dependencies: (spec.Dependencies) <nil>,
               AdditionalItems: (*spec.SchemaOrBool)(<nil>),
               Definitions: (spec.Definitions) <nil>
              },
              SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
               Discriminator: (string) "",
               ReadOnly: (bool) false,
               XML: (*spec.XMLObject)(<nil>),
               ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
               Example: (interface {}) <nil>
              },
              ExtraProps: (map[string]interface {}) <nil>
             }),
             Headers: (map[string]spec.Header) <nil>,
             Examples: (map[string]interface {}) <nil>
            },
            VendorExtensible: (spec.VendorExtensible) {
             Extensions: (spec.Extensions) <nil>
            }
           }
          }
         }
        })
       }
      }),
      Delete: (*spec.Operation)(<nil>),
      Options: (*spec.Operation)(<nil>),
      Head: (*spec.Operation)(<nil>),
      Patch: (*spec.Operation)(0xc0000e17a0)({
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       OperationProps: (spec.OperationProps) {
        Description: (string) "",
        Consumes: ([]string) <nil>,
        Produces: ([]string) <nil>,
        Schemes: ([]string) <nil>,
        Tags: ([]string) <nil>,
        Summary: (string) (len=29) "Revokes the old client secret",
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        ID: (string) (len=21) "revokeOldClientSecret",
        Deprecated: (bool) false,
        Security: ([]map[string][]string) <nil>,
        Parameters: ([]spec.Parameter) (len=1 cap=4) {
         (spec.Parameter) {
          Refable: (spec.Refable) {
           Ref: (spec.Ref) 
          },
          CommonValidations: (spec.CommonValidations) {
           Maximum: (*float64)(<nil>),
           ExclusiveMaximum: (bool) false,
           Minimum: (*float64)(<nil>),
           ExclusiveMinimum: (bool) false,
           MaxLength: (*int64)(<nil>),
           MinLength: (*int64)(<nil>),
           Pattern: (string) "",
           MaxItems: (*int64)(<nil>),
           MinItems: (*int64)(<nil>),
           UniqueItems: (bool) false,
           MultipleOf: (*float64)(<nil>),
           Enum: ([]interface {}) <nil>
          },
          SimpleSchema: (spec.SimpleSchema) {
           Type: (string) (len=6) "string",
           Format: (string) "",
           Items: (*spec.Items)(<nil>),
           CollectionFormat: (string) "",
           Default: (interface {}) <nil>,
           Example: (interface {}) <nil>
          },
          VendorExtensible: (spec.VendorExtensible) {
           Extensions: (spec.Extensions) <nil>
          },
          ParamProps: (spec.ParamProps) {
           Description: (string) "",
           Name: (string) (len=5) "appID",
           In: (string) (len=4) "path",
           Required: (bool) true,
           Schema: (*spec.Schema)(<nil>),
           AllowEmptyValue: (bool) false
          }
         }
        },
        Responses: (*spec.Responses)(0xc0002c8b00)({
         VendorExtensible: (spec.VendorExtensible) {
          Extensions: (spec.Extensions) <nil>
         },
         ResponsesProps: (spec.ResponsesProps) {
          Default: (*spec.Response)(<nil>),
          StatusCodeResponses: (map[int]spec.Response) (len=2) {
           (int) 200: (spec.Response) {
            Refable: (spec.Refable) {
             Ref: (spec.Ref) 
            },
            ResponseProps: (spec.ResponseProps) {
             Description: (string) (len=25) "Client secret information",
             Schema: (*spec.Schema)(0xc00037efc0)({
              VendorExtensible: (spec.VendorExtensible) {
               Extensions: (spec.Extensions) <nil>
              },
              SchemaProps: (spec.SchemaProps) {
               ID: (string) "",
               Ref: (spec.Ref) #/definitions/SecretConfig,
               Schema: (spec.SchemaURL) "",
               Description: (string) "",
               Type: (spec.StringOrArray) <nil>,
               Format: (string) "",
               Title: (string) "",
               Default: (interface {}) <nil>,
               Maximum: (*float64)(<nil>),
               ExclusiveMaximum: (bool) false,
               Minimum: (*float64)(<nil>),
               ExclusiveMinimum: (bool) false,
               MaxLength: (*int64)(<nil>),
               MinLength: (*int64)(<nil>),
               Pattern: (string) "",
               MaxItems: (*int64)(<nil>),
               MinItems: (*int64)(<nil>),
               UniqueItems: (bool) false,
               MultipleOf: (*float64)(<nil>),
               Enum: ([]interface {}) <nil>,
               MaxProperties: (*int64)(<nil>),
               MinProperties: (*int64)(<nil>),
               Required: ([]string) <nil>,
               Items: (*spec.SchemaOrArray)(<nil>),
               AllOf: ([]spec.Schema) <nil>,
               OneOf: ([]spec.Schema) <nil>,
               AnyOf: ([]spec.Schema) <nil>,
               Not: (*spec.Schema)(<nil>),
               Properties: (map[string]spec.Schema) <nil>,
               AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
               PatternProperties: (map[string]spec.Schema) <nil>,
               Dependencies: (spec.Dependencies) <nil>,
               AdditionalItems: (*spec.SchemaOrBool)(<nil>),
               Definitions: (spec.Definitions) <nil>
              },
              SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
               Discriminator: (string) "",
               ReadOnly: (bool) false,
               XML: (*spec.XMLObject)(<nil>),
               ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
               Example: (interface {}) <nil>
              },
              ExtraProps: (map[string]interface {}) <nil>
             }),
             Headers: (map[string]spec.Header) <nil>,
             Examples: (map[string]interface {}) <nil>
            },
            VendorExtensible: (spec.VendorExtensible) {
             Extensions: (spec.Extensions) <nil>
            }
           },
           (int) 404: (spec.Response) {
            Refable: (spec.Refable) {
             Ref: (spec.Ref) #/responses/NotFound
            },
            ResponseProps: (spec.ResponseProps) {
             Description: (string) "",
             Schema: (*spec.Schema)(<nil>),
             Headers: (map[string]spec.Header) <nil>,
             Examples: (map[string]interface {}) <nil>
            },
            VendorExtensible: (spec.VendorExtensible) {
             Extensions: (spec.Extensions) <nil>
            }
           }
          }
         }
        })
       }
      }),
      Parameters: ([]spec.Parameter) <nil>
     }
    },
    (string) (len=25) "/v1/apps/{appID}/managers": (spec.PathItem) {
     Refable: (spec.Refable) {
      Ref: (spec.Ref) 
     },
     VendorExtensible: (spec.VendorExtensible) {
      Extensions: (spec.Extensions) <nil>
     },
     PathItemProps: (spec.PathItemProps) {
      Get: (*spec.Operation)(0xc0000e1960)({
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       OperationProps: (spec.OperationProps) {
        Description: (string) "",
        Consumes: ([]string) <nil>,
        Produces: ([]string) <nil>,
        Schemes: ([]string) <nil>,
        Tags: ([]string) <nil>,
        Summary: (string) (len=37) "Get account and relationship managers",
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        ID: (string) (len=11) "getManagers",
        Deprecated: (bool) false,
        Security: ([]map[string][]string) <nil>,
        Parameters: ([]spec.Parameter) (len=1 cap=4) {
         (spec.Parameter) {
          Refable: (spec.Refable) {
           Ref: (spec.Ref) 
          },
          CommonValidations: (spec.CommonValidations) {
           Maximum: (*float64)(<nil>),
           ExclusiveMaximum: (bool) false,
           Minimum: (*float64)(<nil>),
           ExclusiveMinimum: (bool) false,
           MaxLength: (*int64)(<nil>),
           MinLength: (*int64)(<nil>),
           Pattern: (string) "",
           MaxItems: (*int64)(<nil>),
           MinItems: (*int64)(<nil>),
           UniqueItems: (bool) false,
           MultipleOf: (*float64)(<nil>),
           Enum: ([]interface {}) <nil>
          },
          SimpleSchema: (spec.SimpleSchema) {
           Type: (string) (len=6) "string",
           Format: (string) "",
           Items: (*spec.Items)(<nil>),
           CollectionFormat: (string) "",
           Default: (interface {}) <nil>,
           Example: (interface {}) <nil>
          },
          VendorExtensible: (spec.VendorExtensible) {
           Extensions: (spec.Extensions) <nil>
          },
          ParamProps: (spec.ParamProps) {
           Description: (string) "",
           Name: (string) (len=5) "appID",
           In: (string) (len=4) "path",
           Required: (bool) true,
           Schema: (*spec.Schema)(<nil>),
           AllowEmptyValue: (bool) false
          }
         }
        },
        Responses: (*spec.Responses)(0xc000325420)({
         VendorExtensible: (spec.VendorExtensible) {
          Extensions: (spec.Extensions) <nil>
         },
         ResponsesProps: (spec.ResponsesProps) {
          Default: (*spec.Response)(<nil>),
          StatusCodeResponses: (map[int]spec.Response) (len=2) {
           (int) 200: (spec.Response) {
            Refable: (spec.Refable) {
             Ref: (spec.Ref) 
            },
            ResponseProps: (spec.ResponseProps) {
             Description: (string) (len=8) "Managers",
             Schema: (*spec.Schema)(0xc000370000)({
              VendorExtensible: (spec.VendorExtensible) {
               Extensions: (spec.Extensions) <nil>
              },
              SchemaProps: (spec.SchemaProps) {
               ID: (string) "",
               Ref: (spec.Ref) #/definitions/Managers,
               Schema: (spec.SchemaURL) "",
               Description: (string) "",
               Type: (spec.StringOrArray) <nil>,
               Format: (string) "",
               Title: (string) "",
               Default: (interface {}) <nil>,
               Maximum: (*float64)(<nil>),
               ExclusiveMaximum: (bool) false,
               Minimum: (*float64)(<nil>),
               ExclusiveMinimum: (bool) false,
               MaxLength: (*int64)(<nil>),
               MinLength: (*int64)(<nil>),
               Pattern: (string) "",
               MaxItems: (*int64)(<nil>),
               MinItems: (*int64)(<nil>),
               UniqueItems: (bool) false,
               MultipleOf: (*float64)(<nil>),
               Enum: ([]interface {}) <nil>,
               MaxProperties: (*int64)(<nil>),
               MinProperties: (*int64)(<nil>),
               Required: ([]string) <nil>,
               Items: (*spec.SchemaOrArray)(<nil>),
               AllOf: ([]spec.Schema) <nil>,
               OneOf: ([]spec.Schema) <nil>,
               AnyOf: ([]spec.Schema) <nil>,
               Not: (*spec.Schema)(<nil>),
               Properties: (map[string]spec.Schema) <nil>,
               AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
               PatternProperties: (map[string]spec.Schema) <nil>,
               Dependencies: (spec.Dependencies) <nil>,
               AdditionalItems: (*spec.SchemaOrBool)(<nil>),
               Definitions: (spec.Definitions) <nil>
              },
              SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
               Discriminator: (string) "",
               ReadOnly: (bool) false,
               XML: (*spec.XMLObject)(<nil>),
               ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
               Example: (interface {}) <nil>
              },
              ExtraProps: (map[string]interface {}) <nil>
             }),
             Headers: (map[string]spec.Header) <nil>,
             Examples: (map[string]interface {}) <nil>
            },
            VendorExtensible: (spec.VendorExtensible) {
             Extensions: (spec.Extensions) <nil>
            }
           },
           (int) 404: (spec.Response) {
            Refable: (spec.Refable) {
             Ref: (spec.Ref) #/responses/NotFound
            },
            ResponseProps: (spec.ResponseProps) {
             Description: (string) "",
             Schema: (*spec.Schema)(<nil>),
             Headers: (map[string]spec.Header) <nil>,
             Examples: (map[string]interface {}) <nil>
            },
            VendorExtensible: (spec.VendorExtensible) {
             Extensions: (spec.Extensions) <nil>
            }
           }
          }
         }
        })
       }
      }),
      Put: (*spec.Operation)(<nil>),
      Post: (*spec.Operation)(<nil>),
      Delete: (*spec.Operation)(<nil>),
      Options: (*spec.Operation)(<nil>),
      Head: (*spec.Operation)(<nil>),
      Patch: (*spec.Operation)(<nil>),
      Parameters: ([]spec.Parameter) <nil>
     }
    },
    (string) (len=25) "/v1/appUniverse/usageUrls": (spec.PathItem) {
     Refable: (spec.Refable) {
      Ref: (spec.Ref) 
     },
     VendorExtensible: (spec.VendorExtensible) {
      Extensions: (spec.Extensions) <nil>
     },
     PathItemProps: (spec.PathItemProps) {
      Get: (*spec.Operation)(0xc0003afdc0)({
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       OperationProps: (spec.OperationProps) {
        Description: (string) "",
        Consumes: ([]string) <nil>,
        Produces: ([]string) <nil>,
        Schemes: ([]string) <nil>,
        Tags: ([]string) <nil>,
        Summary: (string) (len=22) "Returns all usage urls",
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        ID: (string) (len=15) "getAllUsageUrls",
        Deprecated: (bool) false,
        Security: ([]map[string][]string) <nil>,
        Parameters: ([]spec.Parameter) <nil>,
        Responses: (*spec.Responses)(0xc000928440)({
         VendorExtensible: (spec.VendorExtensible) {
          Extensions: (spec.Extensions) <nil>
         },
         ResponsesProps: (spec.ResponsesProps) {
          Default: (*spec.Response)(<nil>),
          StatusCodeResponses: (map[int]spec.Response) (len=2) {
           (int) 404: (spec.Response) {
            Refable: (spec.Refable) {
             Ref: (spec.Ref) #/responses/NotFound
            },
            ResponseProps: (spec.ResponseProps) {
             Description: (string) "",
             Schema: (*spec.Schema)(<nil>),
             Headers: (map[string]spec.Header) <nil>,
             Examples: (map[string]interface {}) <nil>
            },
            VendorExtensible: (spec.VendorExtensible) {
             Extensions: (spec.Extensions) <nil>
            }
           },
           (int) 200: (spec.Response) {
            Refable: (spec.Refable) {
             Ref: (spec.Ref) 
            },
            ResponseProps: (spec.ResponseProps) {
             Description: (string) (len=14) "All usage urls",
             Schema: (*spec.Schema)(0xc0002e6fc0)({
              VendorExtensible: (spec.VendorExtensible) {
               Extensions: (spec.Extensions) <nil>
              },
              SchemaProps: (spec.SchemaProps) {
               ID: (string) "",
               Ref: (spec.Ref) #/definitions/UsageUrls,
               Schema: (spec.SchemaURL) "",
               Description: (string) "",
               Type: (spec.StringOrArray) <nil>,
               Format: (string) "",
               Title: (string) "",
               Default: (interface {}) <nil>,
               Maximum: (*float64)(<nil>),
               ExclusiveMaximum: (bool) false,
               Minimum: (*float64)(<nil>),
               ExclusiveMinimum: (bool) false,
               MaxLength: (*int64)(<nil>),
               MinLength: (*int64)(<nil>),
               Pattern: (string) "",
               MaxItems: (*int64)(<nil>),
               MinItems: (*int64)(<nil>),
               UniqueItems: (bool) false,
               MultipleOf: (*float64)(<nil>),
               Enum: ([]interface {}) <nil>,
               MaxProperties: (*int64)(<nil>),
               MinProperties: (*int64)(<nil>),
               Required: ([]string) <nil>,
               Items: (*spec.SchemaOrArray)(<nil>),
               AllOf: ([]spec.Schema) <nil>,
               OneOf: ([]spec.Schema) <nil>,
               AnyOf: ([]spec.Schema) <nil>,
               Not: (*spec.Schema)(<nil>),
               Properties: (map[string]spec.Schema) <nil>,
               AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
               PatternProperties: (map[string]spec.Schema) <nil>,
               Dependencies: (spec.Dependencies) <nil>,
               AdditionalItems: (*spec.SchemaOrBool)(<nil>),
               Definitions: (spec.Definitions) <nil>
              },
              SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
               Discriminator: (string) "",
               ReadOnly: (bool) false,
               XML: (*spec.XMLObject)(<nil>),
               ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
               Example: (interface {}) <nil>
              },
              ExtraProps: (map[string]interface {}) <nil>
             }),
             Headers: (map[string]spec.Header) <nil>,
             Examples: (map[string]interface {}) <nil>
            },
            VendorExtensible: (spec.VendorExtensible) {
             Extensions: (spec.Extensions) <nil>
            }
           }
          }
         }
        })
       }
      }),
      Put: (*spec.Operation)(<nil>),
      Post: (*spec.Operation)(<nil>),
      Delete: (*spec.Operation)(<nil>),
      Options: (*spec.Operation)(<nil>),
      Head: (*spec.Operation)(<nil>),
      Patch: (*spec.Operation)(<nil>),
      Parameters: ([]spec.Parameter) <nil>
     }
    },
    (string) (len=38) "/v1/admins/{adminID}/confirmation_code": (spec.PathItem) {
     Refable: (spec.Refable) {
      Ref: (spec.Ref) 
     },
     VendorExtensible: (spec.VendorExtensible) {
      Extensions: (spec.Extensions) <nil>
     },
     PathItemProps: (spec.PathItemProps) {
      Get: (*spec.Operation)(<nil>),
      Put: (*spec.Operation)(0xc0000e0a80)({
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       OperationProps: (spec.OperationProps) {
        Description: (string) "",
        Consumes: ([]string) <nil>,
        Produces: ([]string) <nil>,
        Schemes: ([]string) <nil>,
        Tags: ([]string) <nil>,
        Summary: (string) (len=24) "Create verification code",
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        ID: (string) (len=22) "createVerificationCode",
        Deprecated: (bool) false,
        Security: ([]map[string][]string) <nil>,
        Parameters: ([]spec.Parameter) (len=2 cap=4) {
         (spec.Parameter) {
          Refable: (spec.Refable) {
           Ref: (spec.Ref) 
          },
          CommonValidations: (spec.CommonValidations) {
           Maximum: (*float64)(<nil>),
           ExclusiveMaximum: (bool) false,
           Minimum: (*float64)(<nil>),
           ExclusiveMinimum: (bool) false,
           MaxLength: (*int64)(<nil>),
           MinLength: (*int64)(<nil>),
           Pattern: (string) "",
           MaxItems: (*int64)(<nil>),
           MinItems: (*int64)(<nil>),
           UniqueItems: (bool) false,
           MultipleOf: (*float64)(<nil>),
           Enum: ([]interface {}) <nil>
          },
          SimpleSchema: (spec.SimpleSchema) {
           Type: (string) (len=7) "integer",
           Format: (string) (len=5) "int32",
           Items: (*spec.Items)(<nil>),
           CollectionFormat: (string) "",
           Default: (interface {}) <nil>,
           Example: (interface {}) <nil>
          },
          VendorExtensible: (spec.VendorExtensible) {
           Extensions: (spec.Extensions) <nil>
          },
          ParamProps: (spec.ParamProps) {
           Description: (string) "",
           Name: (string) (len=8) "duration",
           In: (string) (len=5) "query",
           Required: (bool) true,
           Schema: (*spec.Schema)(<nil>),
           AllowEmptyValue: (bool) false
          }
         },
         (spec.Parameter) {
          Refable: (spec.Refable) {
           Ref: (spec.Ref) 
          },
          CommonValidations: (spec.CommonValidations) {
           Maximum: (*float64)(<nil>),
           ExclusiveMaximum: (bool) false,
           Minimum: (*float64)(<nil>),
           ExclusiveMinimum: (bool) false,
           MaxLength: (*int64)(<nil>),
           MinLength: (*int64)(<nil>),
           Pattern: (string) "",
           MaxItems: (*int64)(<nil>),
           MinItems: (*int64)(<nil>),
           UniqueItems: (bool) false,
           MultipleOf: (*float64)(<nil>),
           Enum: ([]interface {}) <nil>
          },
          SimpleSchema: (spec.SimpleSchema) {
           Type: (string) (len=6) "string",
           Format: (string) "",
           Items: (*spec.Items)(<nil>),
           CollectionFormat: (string) "",
           Default: (interface {}) <nil>,
           Example: (interface {}) <nil>
          },
          VendorExtensible: (spec.VendorExtensible) {
           Extensions: (spec.Extensions) <nil>
          },
          ParamProps: (spec.ParamProps) {
           Description: (string) "",
           Name: (string) (len=7) "adminID",
           In: (string) (len=4) "path",
           Required: (bool) true,
           Schema: (*spec.Schema)(<nil>),
           AllowEmptyValue: (bool) false
          }
         }
        },
        Responses: (*spec.Responses)(0xc000820740)({
         VendorExtensible: (spec.VendorExtensible) {
          Extensions: (spec.Extensions) <nil>
         },
         ResponsesProps: (spec.ResponsesProps) {
          Default: (*spec.Response)(<nil>),
          StatusCodeResponses: (map[int]spec.Response) (len=2) {
           (int) 200: (spec.Response) {
            Refable: (spec.Refable) {
             Ref: (spec.Ref) 
            },
            ResponseProps: (spec.ResponseProps) {
             Description: (string) (len=11) "OK response",
             Schema: (*spec.Schema)(0xc0003bf680)({
              VendorExtensible: (spec.VendorExtensible) {
               Extensions: (spec.Extensions) <nil>
              },
              SchemaProps: (spec.SchemaProps) {
               ID: (string) "",
               Ref: (spec.Ref) #/definitions/VerificationCodeResponse,
               Schema: (spec.SchemaURL) "",
               Description: (string) "",
               Type: (spec.StringOrArray) <nil>,
               Format: (string) "",
               Title: (string) "",
               Default: (interface {}) <nil>,
               Maximum: (*float64)(<nil>),
               ExclusiveMaximum: (bool) false,
               Minimum: (*float64)(<nil>),
               ExclusiveMinimum: (bool) false,
               MaxLength: (*int64)(<nil>),
               MinLength: (*int64)(<nil>),
               Pattern: (string) "",
               MaxItems: (*int64)(<nil>),
               MinItems: (*int64)(<nil>),
               UniqueItems: (bool) false,
               MultipleOf: (*float64)(<nil>),
               Enum: ([]interface {}) <nil>,
               MaxProperties: (*int64)(<nil>),
               MinProperties: (*int64)(<nil>),
               Required: ([]string) <nil>,
               Items: (*spec.SchemaOrArray)(<nil>),
               AllOf: ([]spec.Schema) <nil>,
               OneOf: ([]spec.Schema) <nil>,
               AnyOf: ([]spec.Schema) <nil>,
               Not: (*spec.Schema)(<nil>),
               Properties: (map[string]spec.Schema) <nil>,
               AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
               PatternProperties: (map[string]spec.Schema) <nil>,
               Dependencies: (spec.Dependencies) <nil>,
               AdditionalItems: (*spec.SchemaOrBool)(<nil>),
               Definitions: (spec.Definitions) <nil>
              },
              SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
               Discriminator: (string) "",
               ReadOnly: (bool) false,
               XML: (*spec.XMLObject)(<nil>),
               ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
               Example: (interface {}) <nil>
              },
              ExtraProps: (map[string]interface {}) <nil>
             }),
             Headers: (map[string]spec.Header) <nil>,
             Examples: (map[string]interface {}) <nil>
            },
            VendorExtensible: (spec.VendorExtensible) {
             Extensions: (spec.Extensions) <nil>
            }
           },
           (int) 404: (spec.Response) {
            Refable: (spec.Refable) {
             Ref: (spec.Ref) #/responses/NotFound
            },
            ResponseProps: (spec.ResponseProps) {
             Description: (string) "",
             Schema: (*spec.Schema)(<nil>),
             Headers: (map[string]spec.Header) <nil>,
             Examples: (map[string]interface {}) <nil>
            },
            VendorExtensible: (spec.VendorExtensible) {
             Extensions: (spec.Extensions) <nil>
            }
           }
          }
         }
        })
       }
      }),
      Post: (*spec.Operation)(0xc0000e0b60)({
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       OperationProps: (spec.OperationProps) {
        Description: (string) "",
        Consumes: ([]string) <nil>,
        Produces: ([]string) <nil>,
        Schemes: ([]string) <nil>,
        Tags: ([]string) <nil>,
        Summary: (string) (len=48) "Verify and possibly remove the verification code",
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        ID: (string) (len=10) "verifyCode",
        Deprecated: (bool) false,
        Security: ([]map[string][]string) <nil>,
        Parameters: ([]spec.Parameter) (len=3 cap=4) {
         (spec.Parameter) {
          Refable: (spec.Refable) {
           Ref: (spec.Ref) 
          },
          CommonValidations: (spec.CommonValidations) {
           Maximum: (*float64)(<nil>),
           ExclusiveMaximum: (bool) false,
           Minimum: (*float64)(<nil>),
           ExclusiveMinimum: (bool) false,
           MaxLength: (*int64)(<nil>),
           MinLength: (*int64)(<nil>),
           Pattern: (string) "",
           MaxItems: (*int64)(<nil>),
           MinItems: (*int64)(<nil>),
           UniqueItems: (bool) false,
           MultipleOf: (*float64)(<nil>),
           Enum: ([]interface {}) <nil>
          },
          SimpleSchema: (spec.SimpleSchema) {
           Type: (string) (len=6) "string",
           Format: (string) "",
           Items: (*spec.Items)(<nil>),
           CollectionFormat: (string) "",
           Default: (interface {}) <nil>,
           Example: (interface {}) <nil>
          },
          VendorExtensible: (spec.VendorExtensible) {
           Extensions: (spec.Extensions) <nil>
          },
          ParamProps: (spec.ParamProps) {
           Description: (string) "",
           Name: (string) (len=4) "code",
           In: (string) (len=5) "query",
           Required: (bool) true,
           Schema: (*spec.Schema)(<nil>),
           AllowEmptyValue: (bool) false
          }
         },
         (spec.Parameter) {
          Refable: (spec.Refable) {
           Ref: (spec.Ref) 
          },
          CommonValidations: (spec.CommonValidations) {
           Maximum: (*float64)(<nil>),
           ExclusiveMaximum: (bool) false,
           Minimum: (*float64)(<nil>),
           ExclusiveMinimum: (bool) false,
           MaxLength: (*int64)(<nil>),
           MinLength: (*int64)(<nil>),
           Pattern: (string) "",
           MaxItems: (*int64)(<nil>),
           MinItems: (*int64)(<nil>),
           UniqueItems: (bool) false,
           MultipleOf: (*float64)(<nil>),
           Enum: ([]interface {}) <nil>
          },
          SimpleSchema: (spec.SimpleSchema) {
           Type: (string) (len=7) "boolean",
           Format: (string) "",
           Items: (*spec.Items)(<nil>),
           CollectionFormat: (string) "",
           Default: (interface {}) <nil>,
           Example: (interface {}) <nil>
          },
          VendorExtensible: (spec.VendorExtensible) {
           Extensions: (spec.Extensions) <nil>
          },
          ParamProps: (spec.ParamProps) {
           Description: (string) "",
           Name: (string) (len=10) "invalidate",
           In: (string) (len=5) "query",
           Required: (bool) false,
           Schema: (*spec.Schema)(<nil>),
           AllowEmptyValue: (bool) false
          }
         },
         (spec.Parameter) {
          Refable: (spec.Refable) {
           Ref: (spec.Ref) 
          },
          CommonValidations: (spec.CommonValidations) {
           Maximum: (*float64)(<nil>),
           ExclusiveMaximum: (bool) false,
           Minimum: (*float64)(<nil>),
           ExclusiveMinimum: (bool) false,
           MaxLength: (*int64)(<nil>),
           MinLength: (*int64)(<nil>),
           Pattern: (string) "",
           MaxItems: (*int64)(<nil>),
           MinItems: (*int64)(<nil>),
           UniqueItems: (bool) false,
           MultipleOf: (*float64)(<nil>),
           Enum: ([]interface {}) <nil>
          },
          SimpleSchema: (spec.SimpleSchema) {
           Type: (string) (len=6) "string",
           Format: (string) "",
           Items: (*spec.Items)(<nil>),
           CollectionFormat: (string) "",
           Default: (interface {}) <nil>,
           Example: (interface {}) <nil>
          },
          VendorExtensible: (spec.VendorExtensible) {
           Extensions: (spec.Extensions) <nil>
          },
          ParamProps: (spec.ParamProps) {
           Description: (string) "",
           Name: (string) (len=7) "adminID",
           In: (string) (len=4) "path",
           Required: (bool) true,
           Schema: (*spec.Schema)(<nil>),
           AllowEmptyValue: (bool) false
          }
         }
        },
        Responses: (*spec.Responses)(0xc000820fc0)({
         VendorExtensible: (spec.VendorExtensible) {
          Extensions: (spec.Extensions) <nil>
         },
         ResponsesProps: (spec.ResponsesProps) {
          Default: (*spec.Response)(<nil>),
          StatusCodeResponses: (map[int]spec.Response) (len=2) {
           (int) 404: (spec.Response) {
            Refable: (spec.Refable) {
             Ref: (spec.Ref) #/responses/NotFound
            },
            ResponseProps: (spec.ResponseProps) {
             Description: (string) "",
             Schema: (*spec.Schema)(<nil>),
             Headers: (map[string]spec.Header) <nil>,
             Examples: (map[string]interface {}) <nil>
            },
            VendorExtensible: (spec.VendorExtensible) {
             Extensions: (spec.Extensions) <nil>
            }
           },
           (int) 200: (spec.Response) {
            Refable: (spec.Refable) {
             Ref: (spec.Ref) 
            },
            ResponseProps: (spec.ResponseProps) {
             Description: (string) (len=11) "OK response",
             Schema: (*spec.Schema)(<nil>),
             Headers: (map[string]spec.Header) <nil>,
             Examples: (map[string]interface {}) <nil>
            },
            VendorExtensible: (spec.VendorExtensible) {
             Extensions: (spec.Extensions) <nil>
            }
           }
          }
         }
        })
       }
      }),
      Delete: (*spec.Operation)(<nil>),
      Options: (*spec.Operation)(<nil>),
      Head: (*spec.Operation)(<nil>),
      Patch: (*spec.Operation)(<nil>),
      Parameters: ([]spec.Parameter) <nil>
     }
    },
    (string) (len=40) "/v1/apps/{appID}/admins/{adminID}/verify": (spec.PathItem) {
     Refable: (spec.Refable) {
      Ref: (spec.Ref) 
     },
     VendorExtensible: (spec.VendorExtensible) {
      Extensions: (spec.Extensions) <nil>
     },
     PathItemProps: (spec.PathItemProps) {
      Get: (*spec.Operation)(<nil>),
      Put: (*spec.Operation)(<nil>),
      Post: (*spec.Operation)(0xc0003ae700)({
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       OperationProps: (spec.OperationProps) {
        Description: (string) "",
        Consumes: ([]string) <nil>,
        Produces: ([]string) <nil>,
        Schemes: ([]string) <nil>,
        Tags: ([]string) <nil>,
        Summary: (string) (len=42) "Updates an admin's verification for an app",
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        ID: (string) (len=14) "verifyAppAdmin",
        Deprecated: (bool) false,
        Security: ([]map[string][]string) <nil>,
        Parameters: ([]spec.Parameter) (len=3 cap=4) {
         (spec.Parameter) {
          Refable: (spec.Refable) {
           Ref: (spec.Ref) 
          },
          CommonValidations: (spec.CommonValidations) {
           Maximum: (*float64)(<nil>),
           ExclusiveMaximum: (bool) false,
           Minimum: (*float64)(<nil>),
           ExclusiveMinimum: (bool) false,
           MaxLength: (*int64)(<nil>),
           MinLength: (*int64)(<nil>),
           Pattern: (string) "",
           MaxItems: (*int64)(<nil>),
           MinItems: (*int64)(<nil>),
           UniqueItems: (bool) false,
           MultipleOf: (*float64)(<nil>),
           Enum: ([]interface {}) <nil>
          },
          SimpleSchema: (spec.SimpleSchema) {
           Type: (string) (len=6) "string",
           Format: (string) "",
           Items: (*spec.Items)(<nil>),
           CollectionFormat: (string) "",
           Default: (interface {}) <nil>,
           Example: (interface {}) <nil>
          },
          VendorExtensible: (spec.VendorExtensible) {
           Extensions: (spec.Extensions) <nil>
          },
          ParamProps: (spec.ParamProps) {
           Description: (string) "",
           Name: (string) (len=5) "appID",
           In: (string) (len=4) "path",
           Required: (bool) true,
           Schema: (*spec.Schema)(<nil>),
           AllowEmptyValue: (bool) false
          }
         },
         (spec.Parameter) {
          Refable: (spec.Refable) {
           Ref: (spec.Ref) 
          },
          CommonValidations: (spec.CommonValidations) {
           Maximum: (*float64)(<nil>),
           ExclusiveMaximum: (bool) false,
           Minimum: (*float64)(<nil>),
           ExclusiveMinimum: (bool) false,
           MaxLength: (*int64)(<nil>),
           MinLength: (*int64)(<nil>),
           Pattern: (string) "",
           MaxItems: (*int64)(<nil>),
           MinItems: (*int64)(<nil>),
           UniqueItems: (bool) false,
           MultipleOf: (*float64)(<nil>),
           Enum: ([]interface {}) <nil>
          },
          SimpleSchema: (spec.SimpleSchema) {
           Type: (string) (len=6) "string",
           Format: (string) "",
           Items: (*spec.Items)(<nil>),
           CollectionFormat: (string) "",
           Default: (interface {}) <nil>,
           Example: (interface {}) <nil>
          },
          VendorExtensible: (spec.VendorExtensible) {
           Extensions: (spec.Extensions) <nil>
          },
          ParamProps: (spec.ParamProps) {
           Description: (string) "",
           Name: (string) (len=7) "adminID",
           In: (string) (len=4) "path",
           Required: (bool) true,
           Schema: (*spec.Schema)(<nil>),
           AllowEmptyValue: (bool) false
          }
         },
         (spec.Parameter) {
          Refable: (spec.Refable) {
           Ref: (spec.Ref) 
          },
          CommonValidations: (spec.CommonValidations) {
           Maximum: (*float64)(<nil>),
           ExclusiveMaximum: (bool) false,
           Minimum: (*float64)(<nil>),
           ExclusiveMinimum: (bool) false,
           MaxLength: (*int64)(<nil>),
           MinLength: (*int64)(<nil>),
           Pattern: (string) "",
           MaxItems: (*int64)(<nil>),
           MinItems: (*int64)(<nil>),
           UniqueItems: (bool) false,
           MultipleOf: (*float64)(<nil>),
           Enum: ([]interface {}) <nil>
          },
          SimpleSchema: (spec.SimpleSchema) {
           Type: (string) (len=7) "boolean",
           Format: (string) "",
           Items: (*spec.Items)(<nil>),
           CollectionFormat: (string) "",
           Default: (interface {}) <nil>,
           Example: (interface {}) <nil>
          },
          VendorExtensible: (spec.VendorExtensible) {
           Extensions: (spec.Extensions) <nil>
          },
          ParamProps: (spec.ParamProps) {
           Description: (string) "",
           Name: (string) (len=8) "verified",
           In: (string) (len=5) "query",
           Required: (bool) true,
           Schema: (*spec.Schema)(<nil>),
           AllowEmptyValue: (bool) false
          }
         }
        },
        Responses: (*spec.Responses)(0xc0006bbd00)({
         VendorExtensible: (spec.VendorExtensible) {
          Extensions: (spec.Extensions) <nil>
         },
         ResponsesProps: (spec.ResponsesProps) {
          Default: (*spec.Response)(<nil>),
          StatusCodeResponses: (map[int]spec.Response) (len=3) {
           (int) 200: (spec.Response) {
            Refable: (spec.Refable) {
             Ref: (spec.Ref) 
            },
            ResponseProps: (spec.ResponseProps) {
             Description: (string) (len=11) "OK response",
             Schema: (*spec.Schema)(<nil>),
             Headers: (map[string]spec.Header) <nil>,
             Examples: (map[string]interface {}) <nil>
            },
            VendorExtensible: (spec.VendorExtensible) {
             Extensions: (spec.Extensions) <nil>
            }
           },
           (int) 403: (spec.Response) {
            Refable: (spec.Refable) {
             Ref: (spec.Ref) #/responses/Forbidden
            },
            ResponseProps: (spec.ResponseProps) {
             Description: (string) "",
             Schema: (*spec.Schema)(<nil>),
             Headers: (map[string]spec.Header) <nil>,
             Examples: (map[string]interface {}) <nil>
            },
            VendorExtensible: (spec.VendorExtensible) {
             Extensions: (spec.Extensions) <nil>
            }
           },
           (int) 404: (spec.Response) {
            Refable: (spec.Refable) {
             Ref: (spec.Ref) #/responses/NotFound
            },
            ResponseProps: (spec.ResponseProps) {
             Description: (string) "",
             Schema: (*spec.Schema)(<nil>),
             Headers: (map[string]spec.Header) <nil>,
             Examples: (map[string]interface {}) <nil>
            },
            VendorExtensible: (spec.VendorExtensible) {
             Extensions: (spec.Extensions) <nil>
            }
           }
          }
         }
        })
       }
      }),
      Delete: (*spec.Operation)(<nil>),
      Options: (*spec.Operation)(<nil>),
      Head: (*spec.Operation)(<nil>),
      Patch: (*spec.Operation)(<nil>),
      Parameters: ([]spec.Parameter) <nil>
     }
    },
    (string) (len=14) "/v1/categories": (spec.PathItem) {
     Refable: (spec.Refable) {
      Ref: (spec.Ref) 
     },
     VendorExtensible: (spec.VendorExtensible) {
      Extensions: (spec.Extensions) <nil>
     },
     PathItemProps: (spec.PathItemProps) {
      Get: (*spec.Operation)(0xc0003af500)({
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       OperationProps: (spec.OperationProps) {
        Description: (string) "",
        Consumes: ([]string) <nil>,
        Produces: ([]string) <nil>,
        Schemes: ([]string) <nil>,
        Tags: ([]string) <nil>,
        Summary: (string) (len=41) "All valid categories an app can belong to",
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        ID: (string) (len=16) "getAllCategories",
        Deprecated: (bool) false,
        Security: ([]map[string][]string) <nil>,
        Parameters: ([]spec.Parameter) <nil>,
        Responses: (*spec.Responses)(0xc0008a0f60)({
         VendorExtensible: (spec.VendorExtensible) {
          Extensions: (spec.Extensions) <nil>
         },
         ResponsesProps: (spec.ResponsesProps) {
          Default: (*spec.Response)(<nil>),
          StatusCodeResponses: (map[int]spec.Response) (len=1) {
           (int) 200: (spec.Response) {
            Refable: (spec.Refable) {
             Ref: (spec.Ref) 
            },
            ResponseProps: (spec.ResponseProps) {
             Description: (string) (len=14) "All categories",
             Schema: (*spec.Schema)(0xc0003066c0)({
              VendorExtensible: (spec.VendorExtensible) {
               Extensions: (spec.Extensions) <nil>
              },
              SchemaProps: (spec.SchemaProps) {
               ID: (string) "",
               Ref: (spec.Ref) #/definitions/Categories,
               Schema: (spec.SchemaURL) "",
               Description: (string) "",
               Type: (spec.StringOrArray) <nil>,
               Format: (string) "",
               Title: (string) "",
               Default: (interface {}) <nil>,
               Maximum: (*float64)(<nil>),
               ExclusiveMaximum: (bool) false,
               Minimum: (*float64)(<nil>),
               ExclusiveMinimum: (bool) false,
               MaxLength: (*int64)(<nil>),
               MinLength: (*int64)(<nil>),
               Pattern: (string) "",
               MaxItems: (*int64)(<nil>),
               MinItems: (*int64)(<nil>),
               UniqueItems: (bool) false,
               MultipleOf: (*float64)(<nil>),
               Enum: ([]interface {}) <nil>,
               MaxProperties: (*int64)(<nil>),
               MinProperties: (*int64)(<nil>),
               Required: ([]string) <nil>,
               Items: (*spec.SchemaOrArray)(<nil>),
               AllOf: ([]spec.Schema) <nil>,
               OneOf: ([]spec.Schema) <nil>,
               AnyOf: ([]spec.Schema) <nil>,
               Not: (*spec.Schema)(<nil>),
               Properties: (map[string]spec.Schema) <nil>,
               AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
               PatternProperties: (map[string]spec.Schema) <nil>,
               Dependencies: (spec.Dependencies) <nil>,
               AdditionalItems: (*spec.SchemaOrBool)(<nil>),
               Definitions: (spec.Definitions) <nil>
              },
              SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
               Discriminator: (string) "",
               ReadOnly: (bool) false,
               XML: (*spec.XMLObject)(<nil>),
               ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
               Example: (interface {}) <nil>
              },
              ExtraProps: (map[string]interface {}) <nil>
             }),
             Headers: (map[string]spec.Header) <nil>,
             Examples: (map[string]interface {}) <nil>
            },
            VendorExtensible: (spec.VendorExtensible) {
             Extensions: (spec.Extensions) <nil>
            }
           }
          }
         }
        })
       }
      }),
      Put: (*spec.Operation)(<nil>),
      Post: (*spec.Operation)(<nil>),
      Delete: (*spec.Operation)(<nil>),
      Options: (*spec.Operation)(<nil>),
      Head: (*spec.Operation)(<nil>),
      Patch: (*spec.Operation)(<nil>),
      Parameters: ([]spec.Parameter) <nil>
     }
    },
    (string) (len=27) "/v1/apps/{appID}/onboarding": (spec.PathItem) {
     Refable: (spec.Refable) {
      Ref: (spec.Ref) 
     },
     VendorExtensible: (spec.VendorExtensible) {
      Extensions: (spec.Extensions) <nil>
     },
     PathItemProps: (spec.PathItemProps) {
      Get: (*spec.Operation)(0xc0003af960)({
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       OperationProps: (spec.OperationProps) {
        Description: (string) "",
        Consumes: ([]string) <nil>,
        Produces: ([]string) <nil>,
        Schemes: ([]string) <nil>,
        Tags: ([]string) <nil>,
        Summary: (string) (len=36) "Returns an app's onboarding progress",
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        ID: (string) (len=13) "getOnboarding",
        Deprecated: (bool) false,
        Security: ([]map[string][]string) <nil>,
        Parameters: ([]spec.Parameter) (len=1 cap=4) {
         (spec.Parameter) {
          Refable: (spec.Refable) {
           Ref: (spec.Ref) 
          },
          CommonValidations: (spec.CommonValidations) {
           Maximum: (*float64)(<nil>),
           ExclusiveMaximum: (bool) false,
           Minimum: (*float64)(<nil>),
           ExclusiveMinimum: (bool) false,
           MaxLength: (*int64)(<nil>),
           MinLength: (*int64)(<nil>),
           Pattern: (string) "",
           MaxItems: (*int64)(<nil>),
           MinItems: (*int64)(<nil>),
           UniqueItems: (bool) false,
           MultipleOf: (*float64)(<nil>),
           Enum: ([]interface {}) <nil>
          },
          SimpleSchema: (spec.SimpleSchema) {
           Type: (string) (len=6) "string",
           Format: (string) "",
           Items: (*spec.Items)(<nil>),
           CollectionFormat: (string) "",
           Default: (interface {}) <nil>,
           Example: (interface {}) <nil>
          },
          VendorExtensible: (spec.VendorExtensible) {
           Extensions: (spec.Extensions) <nil>
          },
          ParamProps: (spec.ParamProps) {
           Description: (string) "",
           Name: (string) (len=5) "appID",
           In: (string) (len=4) "path",
           Required: (bool) true,
           Schema: (*spec.Schema)(<nil>),
           AllowEmptyValue: (bool) false
          }
         }
        },
        Responses: (*spec.Responses)(0xc0008e4b40)({
         VendorExtensible: (spec.VendorExtensible) {
          Extensions: (spec.Extensions) <nil>
         },
         ResponsesProps: (spec.ResponsesProps) {
          Default: (*spec.Response)(<nil>),
          StatusCodeResponses: (map[int]spec.Response) (len=2) {
           (int) 200: (spec.Response) {
            Refable: (spec.Refable) {
             Ref: (spec.Ref) 
            },
            ResponseProps: (spec.ResponseProps) {
             Description: (string) (len=29) "The app's onboarding progress",
             Schema: (*spec.Schema)(0xc0002ee6c0)({
              VendorExtensible: (spec.VendorExtensible) {
               Extensions: (spec.Extensions) <nil>
              },
              SchemaProps: (spec.SchemaProps) {
               ID: (string) "",
               Ref: (spec.Ref) #/definitions/Onboarding,
               Schema: (spec.SchemaURL) "",
               Description: (string) "",
               Type: (spec.StringOrArray) <nil>,
               Format: (string) "",
               Title: (string) "",
               Default: (interface {}) <nil>,
               Maximum: (*float64)(<nil>),
               ExclusiveMaximum: (bool) false,
               Minimum: (*float64)(<nil>),
               ExclusiveMinimum: (bool) false,
               MaxLength: (*int64)(<nil>),
               MinLength: (*int64)(<nil>),
               Pattern: (string) "",
               MaxItems: (*int64)(<nil>),
               MinItems: (*int64)(<nil>),
               UniqueItems: (bool) false,
               MultipleOf: (*float64)(<nil>),
               Enum: ([]interface {}) <nil>,
               MaxProperties: (*int64)(<nil>),
               MinProperties: (*int64)(<nil>),
               Required: ([]string) <nil>,
               Items: (*spec.SchemaOrArray)(<nil>),
               AllOf: ([]spec.Schema) <nil>,
               OneOf: ([]spec.Schema) <nil>,
               AnyOf: ([]spec.Schema) <nil>,
               Not: (*spec.Schema)(<nil>),
               Properties: (map[string]spec.Schema) <nil>,
               AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
               PatternProperties: (map[string]spec.Schema) <nil>,
               Dependencies: (spec.Dependencies) <nil>,
               AdditionalItems: (*spec.SchemaOrBool)(<nil>),
               Definitions: (spec.Definitions) <nil>
              },
              SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
               Discriminator: (string) "",
               ReadOnly: (bool) false,
               XML: (*spec.XMLObject)(<nil>),
               ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
               Example: (interface {}) <nil>
              },
              ExtraProps: (map[string]interface {}) <nil>
             }),
             Headers: (map[string]spec.Header) <nil>,
             Examples: (map[string]interface {}) <nil>
            },
            VendorExtensible: (spec.VendorExtensible) {
             Extensions: (spec.Extensions) <nil>
            }
           },
           (int) 404: (spec.Response) {
            Refable: (spec.Refable) {
             Ref: (spec.Ref) #/responses/NotFound
            },
            ResponseProps: (spec.ResponseProps) {
             Description: (string) "",
             Schema: (*spec.Schema)(<nil>),
             Headers: (map[string]spec.Header) <nil>,
             Examples: (map[string]interface {}) <nil>
            },
            VendorExtensible: (spec.VendorExtensible) {
             Extensions: (spec.Extensions) <nil>
            }
           }
          }
         }
        })
       }
      }),
      Put: (*spec.Operation)(0xc0003afa40)({
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       OperationProps: (spec.OperationProps) {
        Description: (string) "",
        Consumes: ([]string) <nil>,
        Produces: ([]string) <nil>,
        Schemes: ([]string) <nil>,
        Tags: ([]string) <nil>,
        Summary: (string) (len=40) "Initializes an app's onboarding progress",
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        ID: (string) (len=20) "initializeOnboarding",
        Deprecated: (bool) false,
        Security: ([]map[string][]string) <nil>,
        Parameters: ([]spec.Parameter) (len=1 cap=4) {
         (spec.Parameter) {
          Refable: (spec.Refable) {
           Ref: (spec.Ref) 
          },
          CommonValidations: (spec.CommonValidations) {
           Maximum: (*float64)(<nil>),
           ExclusiveMaximum: (bool) false,
           Minimum: (*float64)(<nil>),
           ExclusiveMinimum: (bool) false,
           MaxLength: (*int64)(<nil>),
           MinLength: (*int64)(<nil>),
           Pattern: (string) "",
           MaxItems: (*int64)(<nil>),
           MinItems: (*int64)(<nil>),
           UniqueItems: (bool) false,
           MultipleOf: (*float64)(<nil>),
           Enum: ([]interface {}) <nil>
          },
          SimpleSchema: (spec.SimpleSchema) {
           Type: (string) (len=6) "string",
           Format: (string) "",
           Items: (*spec.Items)(<nil>),
           CollectionFormat: (string) "",
           Default: (interface {}) <nil>,
           Example: (interface {}) <nil>
          },
          VendorExtensible: (spec.VendorExtensible) {
           Extensions: (spec.Extensions) <nil>
          },
          ParamProps: (spec.ParamProps) {
           Description: (string) "",
           Name: (string) (len=5) "appID",
           In: (string) (len=4) "path",
           Required: (bool) true,
           Schema: (*spec.Schema)(<nil>),
           AllowEmptyValue: (bool) false
          }
         }
        },
        Responses: (*spec.Responses)(0xc0008e4ee0)({
         VendorExtensible: (spec.VendorExtensible) {
          Extensions: (spec.Extensions) <nil>
         },
         ResponsesProps: (spec.ResponsesProps) {
          Default: (*spec.Response)(<nil>),
          StatusCodeResponses: (map[int]spec.Response) (len=2) {
           (int) 200: (spec.Response) {
            Refable: (spec.Refable) {
             Ref: (spec.Ref) 
            },
            ResponseProps: (spec.ResponseProps) {
             Description: (string) (len=11) "OK response",
             Schema: (*spec.Schema)(<nil>),
             Headers: (map[string]spec.Header) <nil>,
             Examples: (map[string]interface {}) <nil>
            },
            VendorExtensible: (spec.VendorExtensible) {
             Extensions: (spec.Extensions) <nil>
            }
           },
           (int) 404: (spec.Response) {
            Refable: (spec.Refable) {
             Ref: (spec.Ref) #/responses/NotFound
            },
            ResponseProps: (spec.ResponseProps) {
             Description: (string) "",
             Schema: (*spec.Schema)(<nil>),
             Headers: (map[string]spec.Header) <nil>,
             Examples: (map[string]interface {}) <nil>
            },
            VendorExtensible: (spec.VendorExtensible) {
             Extensions: (spec.Extensions) <nil>
            }
           }
          }
         }
        })
       }
      }),
      Post: (*spec.Operation)(<nil>),
      Delete: (*spec.Operation)(<nil>),
      Options: (*spec.Operation)(<nil>),
      Head: (*spec.Operation)(<nil>),
      Patch: (*spec.Operation)(0xc0003afb20)({
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       OperationProps: (spec.OperationProps) {
        Description: (string) "",
        Consumes: ([]string) <nil>,
        Produces: ([]string) <nil>,
        Schemes: ([]string) <nil>,
        Tags: ([]string) <nil>,
        Summary: (string) (len=36) "Updates an app's onboarding progress",
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        ID: (string) (len=16) "updateOnboarding",
        Deprecated: (bool) false,
        Security: ([]map[string][]string) <nil>,
        Parameters: ([]spec.Parameter) (len=2 cap=4) {
         (spec.Parameter) {
          Refable: (spec.Refable) {
           Ref: (spec.Ref) 
          },
          CommonValidations: (spec.CommonValidations) {
           Maximum: (*float64)(<nil>),
           ExclusiveMaximum: (bool) false,
           Minimum: (*float64)(<nil>),
           ExclusiveMinimum: (bool) false,
           MaxLength: (*int64)(<nil>),
           MinLength: (*int64)(<nil>),
           Pattern: (string) "",
           MaxItems: (*int64)(<nil>),
           MinItems: (*int64)(<nil>),
           UniqueItems: (bool) false,
           MultipleOf: (*float64)(<nil>),
           Enum: ([]interface {}) <nil>
          },
          SimpleSchema: (spec.SimpleSchema) {
           Type: (string) (len=6) "string",
           Format: (string) "",
           Items: (*spec.Items)(<nil>),
           CollectionFormat: (string) "",
           Default: (interface {}) <nil>,
           Example: (interface {}) <nil>
          },
          VendorExtensible: (spec.VendorExtensible) {
           Extensions: (spec.Extensions) <nil>
          },
          ParamProps: (spec.ParamProps) {
           Description: (string) "",
           Name: (string) (len=5) "appID",
           In: (string) (len=4) "path",
           Required: (bool) true,
           Schema: (*spec.Schema)(<nil>),
           AllowEmptyValue: (bool) false
          }
         },
         (spec.Parameter) {
          Refable: (spec.Refable) {
           Ref: (spec.Ref) 
          },
          CommonValidations: (spec.CommonValidations) {
           Maximum: (*float64)(<nil>),
           ExclusiveMaximum: (bool) false,
           Minimum: (*float64)(<nil>),
           ExclusiveMinimum: (bool) false,
           MaxLength: (*int64)(<nil>),
           MinLength: (*int64)(<nil>),
           Pattern: (string) "",
           MaxItems: (*int64)(<nil>),
           MinItems: (*int64)(<nil>),
           UniqueItems: (bool) false,
           MultipleOf: (*float64)(<nil>),
           Enum: ([]interface {}) <nil>
          },
          SimpleSchema: (spec.SimpleSchema) {
           Type: (string) "",
           Format: (string) "",
           Items: (*spec.Items)(<nil>),
           CollectionFormat: (string) "",
           Default: (interface {}) <nil>,
           Example: (interface {}) <nil>
          },
          VendorExtensible: (spec.VendorExtensible) {
           Extensions: (spec.Extensions) <nil>
          },
          ParamProps: (spec.ParamProps) {
           Description: (string) "",
           Name: (string) (len=6) "update",
           In: (string) (len=4) "body",
           Required: (bool) true,
           Schema: (*spec.Schema)(0xc0002ee900)({
            VendorExtensible: (spec.VendorExtensible) {
             Extensions: (spec.Extensions) <nil>
            },
            SchemaProps: (spec.SchemaProps) {
             ID: (string) "",
             Ref: (spec.Ref) #/definitions/UpdateOnboardingRequest,
             Schema: (spec.SchemaURL) "",
             Description: (string) "",
             Type: (spec.StringOrArray) <nil>,
             Format: (string) "",
             Title: (string) "",
             Default: (interface {}) <nil>,
             Maximum: (*float64)(<nil>),
             ExclusiveMaximum: (bool) false,
             Minimum: (*float64)(<nil>),
             ExclusiveMinimum: (bool) false,
             MaxLength: (*int64)(<nil>),
             MinLength: (*int64)(<nil>),
             Pattern: (string) "",
             MaxItems: (*int64)(<nil>),
             MinItems: (*int64)(<nil>),
             UniqueItems: (bool) false,
             MultipleOf: (*float64)(<nil>),
             Enum: ([]interface {}) <nil>,
             MaxProperties: (*int64)(<nil>),
             MinProperties: (*int64)(<nil>),
             Required: ([]string) <nil>,
             Items: (*spec.SchemaOrArray)(<nil>),
             AllOf: ([]spec.Schema) <nil>,
             OneOf: ([]spec.Schema) <nil>,
             AnyOf: ([]spec.Schema) <nil>,
             Not: (*spec.Schema)(<nil>),
             Properties: (map[string]spec.Schema) <nil>,
             AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
             PatternProperties: (map[string]spec.Schema) <nil>,
             Dependencies: (spec.Dependencies) <nil>,
             AdditionalItems: (*spec.SchemaOrBool)(<nil>),
             Definitions: (spec.Definitions) <nil>
            },
            SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
             Discriminator: (string) "",
             ReadOnly: (bool) false,
             XML: (*spec.XMLObject)(<nil>),
             ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
             Example: (interface {}) <nil>
            },
            ExtraProps: (map[string]interface {}) <nil>
           }),
           AllowEmptyValue: (bool) false
          }
         }
        },
        Responses: (*spec.Responses)(0xc0008e5340)({
         VendorExtensible: (spec.VendorExtensible) {
          Extensions: (spec.Extensions) <nil>
         },
         ResponsesProps: (spec.ResponsesProps) {
          Default: (*spec.Response)(<nil>),
          StatusCodeResponses: (map[int]spec.Response) (len=2) {
           (int) 200: (spec.Response) {
            Refable: (spec.Refable) {
             Ref: (spec.Ref) 
            },
            ResponseProps: (spec.ResponseProps) {
             Description: (string) (len=11) "OK response",
             Schema: (*spec.Schema)(<nil>),
             Headers: (map[string]spec.Header) <nil>,
             Examples: (map[string]interface {}) <nil>
            },
            VendorExtensible: (spec.VendorExtensible) {
             Extensions: (spec.Extensions) <nil>
            }
           },
           (int) 404: (spec.Response) {
            Refable: (spec.Refable) {
             Ref: (spec.Ref) #/responses/NotFound
            },
            ResponseProps: (spec.ResponseProps) {
             Description: (string) "",
             Schema: (*spec.Schema)(<nil>),
             Headers: (map[string]spec.Header) <nil>,
             Examples: (map[string]interface {}) <nil>
            },
            VendorExtensible: (spec.VendorExtensible) {
             Extensions: (spec.Extensions) <nil>
            }
           }
          }
         }
        })
       }
      }),
      Parameters: ([]spec.Parameter) <nil>
     }
    },
    (string) (len=49) "/v1/apps/{appID}/certifications/{schoolYearStart}": (spec.PathItem) {
     Refable: (spec.Refable) {
      Ref: (spec.Ref) 
     },
     VendorExtensible: (spec.VendorExtensible) {
      Extensions: (spec.Extensions) <nil>
     },
     PathItemProps: (spec.PathItemProps) {
      Get: (*spec.Operation)(0xc0000e02a0)({
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       OperationProps: (spec.OperationProps) {
        Description: (string) "",
        Consumes: ([]string) <nil>,
        Produces: ([]string) <nil>,
        Schemes: ([]string) <nil>,
        Tags: ([]string) <nil>,
        Summary: (string) (len=65) "Returns the given app's certifications for the given school year.",
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        ID: (string) (len=17) "getCertifications",
        Deprecated: (bool) false,
        Security: ([]map[string][]string) <nil>,
        Parameters: ([]spec.Parameter) (len=2 cap=4) {
         (spec.Parameter) {
          Refable: (spec.Refable) {
           Ref: (spec.Ref) 
          },
          CommonValidations: (spec.CommonValidations) {
           Maximum: (*float64)(<nil>),
           ExclusiveMaximum: (bool) false,
           Minimum: (*float64)(<nil>),
           ExclusiveMinimum: (bool) false,
           MaxLength: (*int64)(<nil>),
           MinLength: (*int64)(<nil>),
           Pattern: (string) "",
           MaxItems: (*int64)(<nil>),
           MinItems: (*int64)(<nil>),
           UniqueItems: (bool) false,
           MultipleOf: (*float64)(<nil>),
           Enum: ([]interface {}) <nil>
          },
          SimpleSchema: (spec.SimpleSchema) {
           Type: (string) (len=6) "string",
           Format: (string) "",
           Items: (*spec.Items)(<nil>),
           CollectionFormat: (string) "",
           Default: (interface {}) <nil>,
           Example: (interface {}) <nil>
          },
          VendorExtensible: (spec.VendorExtensible) {
           Extensions: (spec.Extensions) <nil>
          },
          ParamProps: (spec.ParamProps) {
           Description: (string) "",
           Name: (string) (len=5) "appID",
           In: (string) (len=4) "path",
           Required: (bool) true,
           Schema: (*spec.Schema)(<nil>),
           AllowEmptyValue: (bool) false
          }
         },
         (spec.Parameter) {
          Refable: (spec.Refable) {
           Ref: (spec.Ref) 
          },
          CommonValidations: (spec.CommonValidations) {
           Maximum: (*float64)(<nil>),
           ExclusiveMaximum: (bool) false,
           Minimum: (*float64)(<nil>),
           ExclusiveMinimum: (bool) false,
           MaxLength: (*int64)(<nil>),
           MinLength: (*int64)(<nil>),
           Pattern: (string) "",
           MaxItems: (*int64)(<nil>),
           MinItems: (*int64)(<nil>),
           UniqueItems: (bool) false,
           MultipleOf: (*float64)(<nil>),
           Enum: ([]interface {}) <nil>
          },
          SimpleSchema: (spec.SimpleSchema) {
           Type: (string) (len=7) "integer",
           Format: (string) (len=5) "int32",
           Items: (*spec.Items)(<nil>),
           CollectionFormat: (string) "",
           Default: (interface {}) <nil>,
           Example: (interface {}) <nil>
          },
          VendorExtensible: (spec.VendorExtensible) {
           Extensions: (spec.Extensions) <nil>
          },
          ParamProps: (spec.ParamProps) {
           Description: (string) "",
           Name: (string) (len=15) "schoolYearStart",
           In: (string) (len=4) "path",
           Required: (bool) true,
           Schema: (*spec.Schema)(<nil>),
           AllowEmptyValue: (bool) false
          }
         }
        },
        Responses: (*spec.Responses)(0xc000792100)({
         VendorExtensible: (spec.VendorExtensible) {
          Extensions: (spec.Extensions) <nil>
         },
         ResponsesProps: (spec.ResponsesProps) {
          Default: (*spec.Response)(<nil>),
          StatusCodeResponses: (map[int]spec.Response) (len=2) {
           (int) 404: (spec.Response) {
            Refable: (spec.Refable) {
             Ref: (spec.Ref) #/responses/NotFound
            },
            ResponseProps: (spec.ResponseProps) {
             Description: (string) "",
             Schema: (*spec.Schema)(<nil>),
             Headers: (map[string]spec.Header) <nil>,
             Examples: (map[string]interface {}) <nil>
            },
            VendorExtensible: (spec.VendorExtensible) {
             Extensions: (spec.Extensions) <nil>
            }
           },
           (int) 200: (spec.Response) {
            Refable: (spec.Refable) {
             Ref: (spec.Ref) 
            },
            ResponseProps: (spec.ResponseProps) {
             Description: (string) (len=29) "The app's onboarding progress",
             Schema: (*spec.Schema)(0xc000412d80)({
              VendorExtensible: (spec.VendorExtensible) {
               Extensions: (spec.Extensions) <nil>
              },
              SchemaProps: (spec.SchemaProps) {
               ID: (string) "",
               Ref: (spec.Ref) #/definitions/Certifications,
               Schema: (spec.SchemaURL) "",
               Description: (string) "",
               Type: (spec.StringOrArray) <nil>,
               Format: (string) "",
               Title: (string) "",
               Default: (interface {}) <nil>,
               Maximum: (*float64)(<nil>),
               ExclusiveMaximum: (bool) false,
               Minimum: (*float64)(<nil>),
               ExclusiveMinimum: (bool) false,
               MaxLength: (*int64)(<nil>),
               MinLength: (*int64)(<nil>),
               Pattern: (string) "",
               MaxItems: (*int64)(<nil>),
               MinItems: (*int64)(<nil>),
               UniqueItems: (bool) false,
               MultipleOf: (*float64)(<nil>),
               Enum: ([]interface {}) <nil>,
               MaxProperties: (*int64)(<nil>),
               MinProperties: (*int64)(<nil>),
               Required: ([]string) <nil>,
               Items: (*spec.SchemaOrArray)(<nil>),
               AllOf: ([]spec.Schema) <nil>,
               OneOf: ([]spec.Schema) <nil>,
               AnyOf: ([]spec.Schema) <nil>,
               Not: (*spec.Schema)(<nil>),
               Properties: (map[string]spec.Schema) <nil>,
               AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
               PatternProperties: (map[string]spec.Schema) <nil>,
               Dependencies: (spec.Dependencies) <nil>,
               AdditionalItems: (*spec.SchemaOrBool)(<nil>),
               Definitions: (spec.Definitions) <nil>
              },
              SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
               Discriminator: (string) "",
               ReadOnly: (bool) false,
               XML: (*spec.XMLObject)(<nil>),
               ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
               Example: (interface {}) <nil>
              },
              ExtraProps: (map[string]interface {}) <nil>
             }),
             Headers: (map[string]spec.Header) <nil>,
             Examples: (map[string]interface {}) <nil>
            },
            VendorExtensible: (spec.VendorExtensible) {
             Extensions: (spec.Extensions) <nil>
            }
           }
          }
         }
        })
       }
      }),
      Put: (*spec.Operation)(<nil>),
      Post: (*spec.Operation)(0xc0000e0380)({
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       OperationProps: (spec.OperationProps) {
        Description: (string) "",
        Consumes: ([]string) <nil>,
        Produces: ([]string) <nil>,
        Schemes: ([]string) <nil>,
        Tags: ([]string) <nil>,
        Summary: (string) (len=62) "Sets the given app's certifications for the given school year.",
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        ID: (string) (len=17) "setCertifications",
        Deprecated: (bool) false,
        Security: ([]map[string][]string) <nil>,
        Parameters: ([]spec.Parameter) (len=3 cap=4) {
         (spec.Parameter) {
          Refable: (spec.Refable) {
           Ref: (spec.Ref) 
          },
          CommonValidations: (spec.CommonValidations) {
           Maximum: (*float64)(<nil>),
           ExclusiveMaximum: (bool) false,
           Minimum: (*float64)(<nil>),
           ExclusiveMinimum: (bool) false,
           MaxLength: (*int64)(<nil>),
           MinLength: (*int64)(<nil>),
           Pattern: (string) "",
           MaxItems: (*int64)(<nil>),
           MinItems: (*int64)(<nil>),
           UniqueItems: (bool) false,
           MultipleOf: (*float64)(<nil>),
           Enum: ([]interface {}) <nil>
          },
          SimpleSchema: (spec.SimpleSchema) {
           Type: (string) (len=6) "string",
           Format: (string) "",
           Items: (*spec.Items)(<nil>),
           CollectionFormat: (string) "",
           Default: (interface {}) <nil>,
           Example: (interface {}) <nil>
          },
          VendorExtensible: (spec.VendorExtensible) {
           Extensions: (spec.Extensions) <nil>
          },
          ParamProps: (spec.ParamProps) {
           Description: (string) "",
           Name: (string) (len=5) "appID",
           In: (string) (len=4) "path",
           Required: (bool) true,
           Schema: (*spec.Schema)(<nil>),
           AllowEmptyValue: (bool) false
          }
         },
         (spec.Parameter) {
          Refable: (spec.Refable) {
           Ref: (spec.Ref) 
          },
          CommonValidations: (spec.CommonValidations) {
           Maximum: (*float64)(<nil>),
           ExclusiveMaximum: (bool) false,
           Minimum: (*float64)(<nil>),
           ExclusiveMinimum: (bool) false,
           MaxLength: (*int64)(<nil>),
           MinLength: (*int64)(<nil>),
           Pattern: (string) "",
           MaxItems: (*int64)(<nil>),
           MinItems: (*int64)(<nil>),
           UniqueItems: (bool) false,
           MultipleOf: (*float64)(<nil>),
           Enum: ([]interface {}) <nil>
          },
          SimpleSchema: (spec.SimpleSchema) {
           Type: (string) (len=7) "integer",
           Format: (string) (len=5) "int32",
           Items: (*spec.Items)(<nil>),
           CollectionFormat: (string) "",
           Default: (interface {}) <nil>,
           Example: (interface {}) <nil>
          },
          VendorExtensible: (spec.VendorExtensible) {
           Extensions: (spec.Extensions) <nil>
          },
          ParamProps: (spec.ParamProps) {
           Description: (string) "",
           Name: (string) (len=15) "schoolYearStart",
           In: (string) (len=4) "path",
           Required: (bool) true,
           Schema: (*spec.Schema)(<nil>),
           AllowEmptyValue: (bool) false
          }
         },
         (spec.Parameter) {
          Refable: (spec.Refable) {
           Ref: (spec.Ref) 
          },
          CommonValidations: (spec.CommonValidations) {
           Maximum: (*float64)(<nil>),
           ExclusiveMaximum: (bool) false,
           Minimum: (*float64)(<nil>),
           ExclusiveMinimum: (bool) false,
           MaxLength: (*int64)(<nil>),
           MinLength: (*int64)(<nil>),
           Pattern: (string) "",
           MaxItems: (*int64)(<nil>),
           MinItems: (*int64)(<nil>),
           UniqueItems: (bool) false,
           MultipleOf: (*float64)(<nil>),
           Enum: ([]interface {}) <nil>
          },
          SimpleSchema: (spec.SimpleSchema) {
           Type: (string) "",
           Format: (string) "",
           Items: (*spec.Items)(<nil>),
           CollectionFormat: (string) "",
           Default: (interface {}) <nil>,
           Example: (interface {}) <nil>
          },
          VendorExtensible: (spec.VendorExtensible) {
           Extensions: (spec.Extensions) <nil>
          },
          ParamProps: (spec.ParamProps) {
           Description: (string) "",
           Name: (string) (len=14) "certifications",
           In: (string) (len=4) "body",
           Required: (bool) true,
           Schema: (*spec.Schema)(0xc000413680)({
            VendorExtensible: (spec.VendorExtensible) {
             Extensions: (spec.Extensions) <nil>
            },
            SchemaProps: (spec.SchemaProps) {
             ID: (string) "",
             Ref: (spec.Ref) #/definitions/SetCertificationsRequest,
             Schema: (spec.SchemaURL) "",
             Description: (string) "",
             Type: (spec.StringOrArray) <nil>,
             Format: (string) "",
             Title: (string) "",
             Default: (interface {}) <nil>,
             Maximum: (*float64)(<nil>),
             ExclusiveMaximum: (bool) false,
             Minimum: (*float64)(<nil>),
             ExclusiveMinimum: (bool) false,
             MaxLength: (*int64)(<nil>),
             MinLength: (*int64)(<nil>),
             Pattern: (string) "",
             MaxItems: (*int64)(<nil>),
             MinItems: (*int64)(<nil>),
             UniqueItems: (bool) false,
             MultipleOf: (*float64)(<nil>),
             Enum: ([]interface {}) <nil>,
             MaxProperties: (*int64)(<nil>),
             MinProperties: (*int64)(<nil>),
             Required: ([]string) <nil>,
             Items: (*spec.SchemaOrArray)(<nil>),
             AllOf: ([]spec.Schema) <nil>,
             OneOf: ([]spec.Schema) <nil>,
             AnyOf: ([]spec.Schema) <nil>,
             Not: (*spec.Schema)(<nil>),
             Properties: (map[string]spec.Schema) <nil>,
             AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
             PatternProperties: (map[string]spec.Schema) <nil>,
             Dependencies: (spec.Dependencies) <nil>,
             AdditionalItems: (*spec.SchemaOrBool)(<nil>),
             Definitions: (spec.Definitions) <nil>
            },
            SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
             Discriminator: (string) "",
             ReadOnly: (bool) false,
             XML: (*spec.XMLObject)(<nil>),
             ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
             Example: (interface {}) <nil>
            },
            ExtraProps: (map[string]interface {}) <nil>
           }),
           AllowEmptyValue: (bool) false
          }
         }
        },
        Responses: (*spec.Responses)(0xc000792a40)({
         VendorExtensible: (spec.VendorExtensible) {
          Extensions: (spec.Extensions) <nil>
         },
         ResponsesProps: (spec.ResponsesProps) {
          Default: (*spec.Response)(<nil>),
          StatusCodeResponses: (map[int]spec.Response) (len=2) {
           (int) 200: (spec.Response) {
            Refable: (spec.Refable) {
             Ref: (spec.Ref) 
            },
            ResponseProps: (spec.ResponseProps) {
             Description: (string) (len=29) "The app's onboarding progress",
             Schema: (*spec.Schema)(0xc0003ec240)({
              VendorExtensible: (spec.VendorExtensible) {
               Extensions: (spec.Extensions) <nil>
              },
              SchemaProps: (spec.SchemaProps) {
               ID: (string) "",
               Ref: (spec.Ref) #/definitions/Certifications,
               Schema: (spec.SchemaURL) "",
               Description: (string) "",
               Type: (spec.StringOrArray) <nil>,
               Format: (string) "",
               Title: (string) "",
               Default: (interface {}) <nil>,
               Maximum: (*float64)(<nil>),
               ExclusiveMaximum: (bool) false,
               Minimum: (*float64)(<nil>),
               ExclusiveMinimum: (bool) false,
               MaxLength: (*int64)(<nil>),
               MinLength: (*int64)(<nil>),
               Pattern: (string) "",
               MaxItems: (*int64)(<nil>),
               MinItems: (*int64)(<nil>),
               UniqueItems: (bool) false,
               MultipleOf: (*float64)(<nil>),
               Enum: ([]interface {}) <nil>,
               MaxProperties: (*int64)(<nil>),
               MinProperties: (*int64)(<nil>),
               Required: ([]string) <nil>,
               Items: (*spec.SchemaOrArray)(<nil>),
               AllOf: ([]spec.Schema) <nil>,
               OneOf: ([]spec.Schema) <nil>,
               AnyOf: ([]spec.Schema) <nil>,
               Not: (*spec.Schema)(<nil>),
               Properties: (map[string]spec.Schema) <nil>,
               AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
               PatternProperties: (map[string]spec.Schema) <nil>,
               Dependencies: (spec.Dependencies) <nil>,
               AdditionalItems: (*spec.SchemaOrBool)(<nil>),
               Definitions: (spec.Definitions) <nil>
              },
              SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
               Discriminator: (string) "",
               ReadOnly: (bool) false,
               XML: (*spec.XMLObject)(<nil>),
               ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
               Example: (interface {}) <nil>
              },
              ExtraProps: (map[string]interface {}) <nil>
             }),
             Headers: (map[string]spec.Header) <nil>,
             Examples: (map[string]interface {}) <nil>
            },
            VendorExtensible: (spec.VendorExtensible) {
             Extensions: (spec.Extensions) <nil>
            }
           },
           (int) 404: (spec.Response) {
            Refable: (spec.Refable) {
             Ref: (spec.Ref) #/responses/NotFound
            },
            ResponseProps: (spec.ResponseProps) {
             Description: (string) "",
             Schema: (*spec.Schema)(<nil>),
             Headers: (map[string]spec.Header) <nil>,
             Examples: (map[string]interface {}) <nil>
            },
            VendorExtensible: (spec.VendorExtensible) {
             Extensions: (spec.Extensions) <nil>
            }
           }
          }
         }
        })
       }
      }),
      Delete: (*spec.Operation)(<nil>),
      Options: (*spec.Operation)(<nil>),
      Head: (*spec.Operation)(<nil>),
      Patch: (*spec.Operation)(<nil>),
      Parameters: ([]spec.Parameter) <nil>
     }
    },
    (string) (len=47) "/v2/apps/{srcAppID}/override-config/{destAppID}": (spec.PathItem) {
     Refable: (spec.Refable) {
      Ref: (spec.Ref) 
     },
     VendorExtensible: (spec.VendorExtensible) {
      Extensions: (spec.Extensions) <nil>
     },
     PathItemProps: (spec.PathItemProps) {
      Get: (*spec.Operation)(<nil>),
      Put: (*spec.Operation)(<nil>),
      Post: (*spec.Operation)(0xc0000e10a0)({
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       OperationProps: (spec.OperationProps) {
        Description: (string) "",
        Consumes: ([]string) <nil>,
        Produces: ([]string) <nil>,
        Schemes: ([]string) <nil>,
        Tags: ([]string) <nil>,
        Summary: (string) (len=40) "Override one app's config with another's",
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        ID: (string) (len=14) "overrideConfig",
        Deprecated: (bool) false,
        Security: ([]map[string][]string) <nil>,
        Parameters: ([]spec.Parameter) (len=2 cap=4) {
         (spec.Parameter) {
          Refable: (spec.Refable) {
           Ref: (spec.Ref) 
          },
          CommonValidations: (spec.CommonValidations) {
           Maximum: (*float64)(<nil>),
           ExclusiveMaximum: (bool) false,
           Minimum: (*float64)(<nil>),
           ExclusiveMinimum: (bool) false,
           MaxLength: (*int64)(<nil>),
           MinLength: (*int64)(<nil>),
           Pattern: (string) "",
           MaxItems: (*int64)(<nil>),
           MinItems: (*int64)(<nil>),
           UniqueItems: (bool) false,
           MultipleOf: (*float64)(<nil>),
           Enum: ([]interface {}) <nil>
          },
          SimpleSchema: (spec.SimpleSchema) {
           Type: (string) (len=6) "string",
           Format: (string) "",
           Items: (*spec.Items)(<nil>),
           CollectionFormat: (string) "",
           Default: (interface {}) <nil>,
           Example: (interface {}) <nil>
          },
          VendorExtensible: (spec.VendorExtensible) {
           Extensions: (spec.Extensions) <nil>
          },
          ParamProps: (spec.ParamProps) {
           Description: (string) "",
           Name: (string) (len=8) "srcAppID",
           In: (string) (len=4) "path",
           Required: (bool) true,
           Schema: (*spec.Schema)(<nil>),
           AllowEmptyValue: (bool) false
          }
         },
         (spec.Parameter) {
          Refable: (spec.Refable) {
           Ref: (spec.Ref) 
          },
          CommonValidations: (spec.CommonValidations) {
           Maximum: (*float64)(<nil>),
           ExclusiveMaximum: (bool) false,
           Minimum: (*float64)(<nil>),
           ExclusiveMinimum: (bool) false,
           MaxLength: (*int64)(<nil>),
           MinLength: (*int64)(<nil>),
           Pattern: (string) "",
           MaxItems: (*int64)(<nil>),
           MinItems: (*int64)(<nil>),
           UniqueItems: (bool) false,
           MultipleOf: (*float64)(<nil>),
           Enum: ([]interface {}) <nil>
          },
          SimpleSchema: (spec.SimpleSchema) {
           Type: (string) (len=6) "string",
           Format: (string) "",
           Items: (*spec.Items)(<nil>),
           CollectionFormat: (string) "",
           Default: (interface {}) <nil>,
           Example: (interface {}) <nil>
          },
          VendorExtensible: (spec.VendorExtensible) {
           Extensions: (spec.Extensions) <nil>
          },
          ParamProps: (spec.ParamProps) {
           Description: (string) "",
           Name: (string) (len=9) "destAppID",
           In: (string) (len=4) "path",
           Required: (bool) true,
           Schema: (*spec.Schema)(<nil>),
           AllowEmptyValue: (bool) false
          }
         }
        },
        Responses: (*spec.Responses)(0xc000797480)({
         VendorExtensible: (spec.VendorExtensible) {
          Extensions: (spec.Extensions) <nil>
         },
         ResponsesProps: (spec.ResponsesProps) {
          Default: (*spec.Response)(<nil>),
          StatusCodeResponses: (map[int]spec.Response) (len=2) {
           (int) 200: (spec.Response) {
            Refable: (spec.Refable) {
             Ref: (spec.Ref) 
            },
            ResponseProps: (spec.ResponseProps) {
             Description: (string) (len=34) "App config successfully overridden",
             Schema: (*spec.Schema)(<nil>),
             Headers: (map[string]spec.Header) <nil>,
             Examples: (map[string]interface {}) <nil>
            },
            VendorExtensible: (spec.VendorExtensible) {
             Extensions: (spec.Extensions) <nil>
            }
           },
           (int) 404: (spec.Response) {
            Refable: (spec.Refable) {
             Ref: (spec.Ref) #/responses/NotFound
            },
            ResponseProps: (spec.ResponseProps) {
             Description: (string) "",
             Schema: (*spec.Schema)(<nil>),
             Headers: (map[string]spec.Header) <nil>,
             Examples: (map[string]interface {}) <nil>
            },
            VendorExtensible: (spec.VendorExtensible) {
             Extensions: (spec.Extensions) <nil>
            }
           }
          }
         }
        })
       }
      }),
      Delete: (*spec.Operation)(<nil>),
      Options: (*spec.Operation)(<nil>),
      Head: (*spec.Operation)(<nil>),
      Patch: (*spec.Operation)(<nil>),
      Parameters: ([]spec.Parameter) <nil>
     }
    },
    (string) (len=36) "/v1/apps/{appID}/platform/{clientID}": (spec.PathItem) {
     Refable: (spec.Refable) {
      Ref: (spec.Ref) 
     },
     VendorExtensible: (spec.VendorExtensible) {
      Extensions: (spec.Extensions) <nil>
     },
     PathItemProps: (spec.PathItemProps) {
      Get: (*spec.Operation)(<nil>),
      Put: (*spec.Operation)(<nil>),
      Post: (*spec.Operation)(<nil>),
      Delete: (*spec.Operation)(0xc0003ae8c0)({
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       OperationProps: (spec.OperationProps) {
        Description: (string) "",
        Consumes: ([]string) <nil>,
        Produces: ([]string) <nil>,
        Schemes: ([]string) <nil>,
        Tags: ([]string) <nil>,
        Summary: (string) (len=17) "Delete a platform",
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        ID: (string) (len=14) "deletePlatform",
        Deprecated: (bool) false,
        Security: ([]map[string][]string) <nil>,
        Parameters: ([]spec.Parameter) (len=2 cap=4) {
         (spec.Parameter) {
          Refable: (spec.Refable) {
           Ref: (spec.Ref) 
          },
          CommonValidations: (spec.CommonValidations) {
           Maximum: (*float64)(<nil>),
           ExclusiveMaximum: (bool) false,
           Minimum: (*float64)(<nil>),
           ExclusiveMinimum: (bool) false,
           MaxLength: (*int64)(<nil>),
           MinLength: (*int64)(<nil>),
           Pattern: (string) "",
           MaxItems: (*int64)(<nil>),
           MinItems: (*int64)(<nil>),
           UniqueItems: (bool) false,
           MultipleOf: (*float64)(<nil>),
           Enum: ([]interface {}) <nil>
          },
          SimpleSchema: (spec.SimpleSchema) {
           Type: (string) (len=6) "string",
           Format: (string) "",
           Items: (*spec.Items)(<nil>),
           CollectionFormat: (string) "",
           Default: (interface {}) <nil>,
           Example: (interface {}) <nil>
          },
          VendorExtensible: (spec.VendorExtensible) {
           Extensions: (spec.Extensions) <nil>
          },
          ParamProps: (spec.ParamProps) {
           Description: (string) "",
           Name: (string) (len=5) "appID",
           In: (string) (len=4) "path",
           Required: (bool) true,
           Schema: (*spec.Schema)(<nil>),
           AllowEmptyValue: (bool) false
          }
         },
         (spec.Parameter) {
          Refable: (spec.Refable) {
           Ref: (spec.Ref) 
          },
          CommonValidations: (spec.CommonValidations) {
           Maximum: (*float64)(<nil>),
           ExclusiveMaximum: (bool) false,
           Minimum: (*float64)(<nil>),
           ExclusiveMinimum: (bool) false,
           MaxLength: (*int64)(<nil>),
           MinLength: (*int64)(<nil>),
           Pattern: (string) "",
           MaxItems: (*int64)(<nil>),
           MinItems: (*int64)(<nil>),
           UniqueItems: (bool) false,
           MultipleOf: (*float64)(<nil>),
           Enum: ([]interface {}) <nil>
          },
          SimpleSchema: (spec.SimpleSchema) {
           Type: (string) (len=6) "string",
           Format: (string) "",
           Items: (*spec.Items)(<nil>),
           CollectionFormat: (string) "",
           Default: (interface {}) <nil>,
           Example: (interface {}) <nil>
          },
          VendorExtensible: (spec.VendorExtensible) {
           Extensions: (spec.Extensions) <nil>
          },
          ParamProps: (spec.ParamProps) {
           Description: (string) "",
           Name: (string) (len=8) "clientID",
           In: (string) (len=4) "path",
           Required: (bool) true,
           Schema: (*spec.Schema)(<nil>),
           AllowEmptyValue: (bool) false
          }
         }
        },
        Responses: (*spec.Responses)(0xc0003c6ca0)({
         VendorExtensible: (spec.VendorExtensible) {
          Extensions: (spec.Extensions) <nil>
         },
         ResponsesProps: (spec.ResponsesProps) {
          Default: (*spec.Response)(<nil>),
          StatusCodeResponses: (map[int]spec.Response) (len=2) {
           (int) 200: (spec.Response) {
            Refable: (spec.Refable) {
             Ref: (spec.Ref) 
            },
            ResponseProps: (spec.ResponseProps) {
             Description: (string) (len=11) "OK response",
             Schema: (*spec.Schema)(<nil>),
             Headers: (map[string]spec.Header) <nil>,
             Examples: (map[string]interface {}) <nil>
            },
            VendorExtensible: (spec.VendorExtensible) {
             Extensions: (spec.Extensions) <nil>
            }
           },
           (int) 404: (spec.Response) {
            Refable: (spec.Refable) {
             Ref: (spec.Ref) #/responses/NotFound
            },
            ResponseProps: (spec.ResponseProps) {
             Description: (string) "",
             Schema: (*spec.Schema)(<nil>),
             Headers: (map[string]spec.Header) <nil>,
             Examples: (map[string]interface {}) <nil>
            },
            VendorExtensible: (spec.VendorExtensible) {
             Extensions: (spec.Extensions) <nil>
            }
           }
          }
         }
        })
       }
      }),
      Options: (*spec.Operation)(<nil>),
      Head: (*spec.Operation)(<nil>),
      Patch: (*spec.Operation)(0xc0003ae7e0)({
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       OperationProps: (spec.OperationProps) {
        Description: (string) "",
        Consumes: ([]string) <nil>,
        Produces: ([]string) <nil>,
        Schemes: ([]string) <nil>,
        Tags: ([]string) <nil>,
        Summary: (string) (len=17) "Update a platform",
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        ID: (string) (len=14) "updatePlatform",
        Deprecated: (bool) false,
        Security: ([]map[string][]string) <nil>,
        Parameters: ([]spec.Parameter) (len=3 cap=4) {
         (spec.Parameter) {
          Refable: (spec.Refable) {
           Ref: (spec.Ref) 
          },
          CommonValidations: (spec.CommonValidations) {
           Maximum: (*float64)(<nil>),
           ExclusiveMaximum: (bool) false,
           Minimum: (*float64)(<nil>),
           ExclusiveMinimum: (bool) false,
           MaxLength: (*int64)(<nil>),
           MinLength: (*int64)(<nil>),
           Pattern: (string) "",
           MaxItems: (*int64)(<nil>),
           MinItems: (*int64)(<nil>),
           UniqueItems: (bool) false,
           MultipleOf: (*float64)(<nil>),
           Enum: ([]interface {}) <nil>
          },
          SimpleSchema: (spec.SimpleSchema) {
           Type: (string) (len=6) "string",
           Format: (string) "",
           Items: (*spec.Items)(<nil>),
           CollectionFormat: (string) "",
           Default: (interface {}) <nil>,
           Example: (interface {}) <nil>
          },
          VendorExtensible: (spec.VendorExtensible) {
           Extensions: (spec.Extensions) <nil>
          },
          ParamProps: (spec.ParamProps) {
           Description: (string) "",
           Name: (string) (len=5) "appID",
           In: (string) (len=4) "path",
           Required: (bool) true,
           Schema: (*spec.Schema)(<nil>),
           AllowEmptyValue: (bool) false
          }
         },
         (spec.Parameter) {
          Refable: (spec.Refable) {
           Ref: (spec.Ref) 
          },
          CommonValidations: (spec.CommonValidations) {
           Maximum: (*float64)(<nil>),
           ExclusiveMaximum: (bool) false,
           Minimum: (*float64)(<nil>),
           ExclusiveMinimum: (bool) false,
           MaxLength: (*int64)(<nil>),
           MinLength: (*int64)(<nil>),
           Pattern: (string) "",
           MaxItems: (*int64)(<nil>),
           MinItems: (*int64)(<nil>),
           UniqueItems: (bool) false,
           MultipleOf: (*float64)(<nil>),
           Enum: ([]interface {}) <nil>
          },
          SimpleSchema: (spec.SimpleSchema) {
           Type: (string) (len=6) "string",
           Format: (string) "",
           Items: (*spec.Items)(<nil>),
           CollectionFormat: (string) "",
           Default: (interface {}) <nil>,
           Example: (interface {}) <nil>
          },
          VendorExtensible: (spec.VendorExtensible) {
           Extensions: (spec.Extensions) <nil>
          },
          ParamProps: (spec.ParamProps) {
           Description: (string) "",
           Name: (string) (len=8) "clientID",
           In: (string) (len=4) "path",
           Required: (bool) true,
           Schema: (*spec.Schema)(<nil>),
           AllowEmptyValue: (bool) false
          }
         },
         (spec.Parameter) {
          Refable: (spec.Refable) {
           Ref: (spec.Ref) 
          },
          CommonValidations: (spec.CommonValidations) {
           Maximum: (*float64)(<nil>),
           ExclusiveMaximum: (bool) false,
           Minimum: (*float64)(<nil>),
           ExclusiveMinimum: (bool) false,
           MaxLength: (*int64)(<nil>),
           MinLength: (*int64)(<nil>),
           Pattern: (string) "",
           MaxItems: (*int64)(<nil>),
           MinItems: (*int64)(<nil>),
           UniqueItems: (bool) false,
           MultipleOf: (*float64)(<nil>),
           Enum: ([]interface {}) <nil>
          },
          SimpleSchema: (spec.SimpleSchema) {
           Type: (string) "",
           Format: (string) "",
           Items: (*spec.Items)(<nil>),
           CollectionFormat: (string) "",
           Default: (interface {}) <nil>,
           Example: (interface {}) <nil>
          },
          VendorExtensible: (spec.VendorExtensible) {
           Extensions: (spec.Extensions) <nil>
          },
          ParamProps: (spec.ParamProps) {
           Description: (string) "",
           Name: (string) (len=7) "request",
           In: (string) (len=4) "body",
           Required: (bool) true,
           Schema: (*spec.Schema)(0xc000348000)({
            VendorExtensible: (spec.VendorExtensible) {
             Extensions: (spec.Extensions) <nil>
            },
            SchemaProps: (spec.SchemaProps) {
             ID: (string) "",
             Ref: (spec.Ref) #/definitions/PatchPlatformRequest,
             Schema: (spec.SchemaURL) "",
             Description: (string) "",
             Type: (spec.StringOrArray) <nil>,
             Format: (string) "",
             Title: (string) "",
             Default: (interface {}) <nil>,
             Maximum: (*float64)(<nil>),
             ExclusiveMaximum: (bool) false,
             Minimum: (*float64)(<nil>),
             ExclusiveMinimum: (bool) false,
             MaxLength: (*int64)(<nil>),
             MinLength: (*int64)(<nil>),
             Pattern: (string) "",
             MaxItems: (*int64)(<nil>),
             MinItems: (*int64)(<nil>),
             UniqueItems: (bool) false,
             MultipleOf: (*float64)(<nil>),
             Enum: ([]interface {}) <nil>,
             MaxProperties: (*int64)(<nil>),
             MinProperties: (*int64)(<nil>),
             Required: ([]string) <nil>,
             Items: (*spec.SchemaOrArray)(<nil>),
             AllOf: ([]spec.Schema) <nil>,
             OneOf: ([]spec.Schema) <nil>,
             AnyOf: ([]spec.Schema) <nil>,
             Not: (*spec.Schema)(<nil>),
             Properties: (map[string]spec.Schema) <nil>,
             AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
             PatternProperties: (map[string]spec.Schema) <nil>,
             Dependencies: (spec.Dependencies) <nil>,
             AdditionalItems: (*spec.SchemaOrBool)(<nil>),
             Definitions: (spec.Definitions) <nil>
            },
            SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
             Discriminator: (string) "",
             ReadOnly: (bool) false,
             XML: (*spec.XMLObject)(<nil>),
             ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
             Example: (interface {}) <nil>
            },
            ExtraProps: (map[string]interface {}) <nil>
           }),
           AllowEmptyValue: (bool) false
          }
         }
        },
        Responses: (*spec.Responses)(0xc00021f6e0)({
         VendorExtensible: (spec.VendorExtensible) {
          Extensions: (spec.Extensions) <nil>
         },
         ResponsesProps: (spec.ResponsesProps) {
          Default: (*spec.Response)(<nil>),
          StatusCodeResponses: (map[int]spec.Response) (len=2) {
           (int) 200: (spec.Response) {
            Refable: (spec.Refable) {
             Ref: (spec.Ref) 
            },
            ResponseProps: (spec.ResponseProps) {
             Description: (string) (len=11) "OK response",
             Schema: (*spec.Schema)(0xc000348900)({
              VendorExtensible: (spec.VendorExtensible) {
               Extensions: (spec.Extensions) <nil>
              },
              SchemaProps: (spec.SchemaProps) {
               ID: (string) "",
               Ref: (spec.Ref) #/definitions/Platform,
               Schema: (spec.SchemaURL) "",
               Description: (string) "",
               Type: (spec.StringOrArray) <nil>,
               Format: (string) "",
               Title: (string) "",
               Default: (interface {}) <nil>,
               Maximum: (*float64)(<nil>),
               ExclusiveMaximum: (bool) false,
               Minimum: (*float64)(<nil>),
               ExclusiveMinimum: (bool) false,
               MaxLength: (*int64)(<nil>),
               MinLength: (*int64)(<nil>),
               Pattern: (string) "",
               MaxItems: (*int64)(<nil>),
               MinItems: (*int64)(<nil>),
               UniqueItems: (bool) false,
               MultipleOf: (*float64)(<nil>),
               Enum: ([]interface {}) <nil>,
               MaxProperties: (*int64)(<nil>),
               MinProperties: (*int64)(<nil>),
               Required: ([]string) <nil>,
               Items: (*spec.SchemaOrArray)(<nil>),
               AllOf: ([]spec.Schema) <nil>,
               OneOf: ([]spec.Schema) <nil>,
               AnyOf: ([]spec.Schema) <nil>,
               Not: (*spec.Schema)(<nil>),
               Properties: (map[string]spec.Schema) <nil>,
               AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
               PatternProperties: (map[string]spec.Schema) <nil>,
               Dependencies: (spec.Dependencies) <nil>,
               AdditionalItems: (*spec.SchemaOrBool)(<nil>),
               Definitions: (spec.Definitions) <nil>
              },
              SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
               Discriminator: (string) "",
               ReadOnly: (bool) false,
               XML: (*spec.XMLObject)(<nil>),
               ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
               Example: (interface {}) <nil>
              },
              ExtraProps: (map[string]interface {}) <nil>
             }),
             Headers: (map[string]spec.Header) <nil>,
             Examples: (map[string]interface {}) <nil>
            },
            VendorExtensible: (spec.VendorExtensible) {
             Extensions: (spec.Extensions) <nil>
            }
           },
           (int) 404: (spec.Response) {
            Refable: (spec.Refable) {
             Ref: (spec.Ref) #/responses/NotFound
            },
            ResponseProps: (spec.ResponseProps) {
             Description: (string) "",
             Schema: (*spec.Schema)(<nil>),
             Headers: (map[string]spec.Header) <nil>,
             Examples: (map[string]interface {}) <nil>
            },
            VendorExtensible: (spec.VendorExtensible) {
             Extensions: (spec.Extensions) <nil>
            }
           }
          }
         }
        })
       }
      }),
      Parameters: ([]spec.Parameter) <nil>
     }
    },
    (string) (len=18) "/v1/analytics/apps": (spec.PathItem) {
     Refable: (spec.Refable) {
      Ref: (spec.Ref) 
     },
     VendorExtensible: (spec.VendorExtensible) {
      Extensions: (spec.Extensions) <nil>
     },
     PathItemProps: (spec.PathItemProps) {
      Get: (*spec.Operation)(0xc0000e0540)({
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       OperationProps: (spec.OperationProps) {
        Description: (string) "",
        Consumes: ([]string) <nil>,
        Produces: ([]string) <nil>,
        Schemes: ([]string) <nil>,
        Tags: ([]string) <nil>,
        Summary: (string) (len=73) "Returns all apps that are not found in district or library data (for p4a)",
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        ID: (string) (len=19) "getAllAnalyticsApps",
        Deprecated: (bool) false,
        Security: ([]map[string][]string) <nil>,
        Parameters: ([]spec.Parameter) <nil>,
        Responses: (*spec.Responses)(0xc0007931e0)({
         VendorExtensible: (spec.VendorExtensible) {
          Extensions: (spec.Extensions) <nil>
         },
         ResponsesProps: (spec.ResponsesProps) {
          Default: (*spec.Response)(<nil>),
          StatusCodeResponses: (map[int]spec.Response) (len=2) {
           (int) 200: (spec.Response) {
            Refable: (spec.Refable) {
             Ref: (spec.Ref) 
            },
            ResponseProps: (spec.ResponseProps) {
             Description: (string) (len=8) "All apps",
             Schema: (*spec.Schema)(0xc0003ecb40)({
              VendorExtensible: (spec.VendorExtensible) {
               Extensions: (spec.Extensions) <nil>
              },
              SchemaProps: (spec.SchemaProps) {
               ID: (string) "",
               Ref: (spec.Ref) #/definitions/AnalyticsApps,
               Schema: (spec.SchemaURL) "",
               Description: (string) "",
               Type: (spec.StringOrArray) <nil>,
               Format: (string) "",
               Title: (string) "",
               Default: (interface {}) <nil>,
               Maximum: (*float64)(<nil>),
               ExclusiveMaximum: (bool) false,
               Minimum: (*float64)(<nil>),
               ExclusiveMinimum: (bool) false,
               MaxLength: (*int64)(<nil>),
               MinLength: (*int64)(<nil>),
               Pattern: (string) "",
               MaxItems: (*int64)(<nil>),
               MinItems: (*int64)(<nil>),
               UniqueItems: (bool) false,
               MultipleOf: (*float64)(<nil>),
               Enum: ([]interface {}) <nil>,
               MaxProperties: (*int64)(<nil>),
               MinProperties: (*int64)(<nil>),
               Required: ([]string) <nil>,
               Items: (*spec.SchemaOrArray)(<nil>),
               AllOf: ([]spec.Schema) <nil>,
               OneOf: ([]spec.Schema) <nil>,
               AnyOf: ([]spec.Schema) <nil>,
               Not: (*spec.Schema)(<nil>),
               Properties: (map[string]spec.Schema) <nil>,
               AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
               PatternProperties: (map[string]spec.Schema) <nil>,
               Dependencies: (spec.Dependencies) <nil>,
               AdditionalItems: (*spec.SchemaOrBool)(<nil>),
               Definitions: (spec.Definitions) <nil>
              },
              SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
               Discriminator: (string) "",
               ReadOnly: (bool) false,
               XML: (*spec.XMLObject)(<nil>),
               ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
               Example: (interface {}) <nil>
              },
              ExtraProps: (map[string]interface {}) <nil>
             }),
             Headers: (map[string]spec.Header) <nil>,
             Examples: (map[string]interface {}) <nil>
            },
            VendorExtensible: (spec.VendorExtensible) {
             Extensions: (spec.Extensions) <nil>
            }
           },
           (int) 404: (spec.Response) {
            Refable: (spec.Refable) {
             Ref: (spec.Ref) #/responses/NotFound
            },
            ResponseProps: (spec.ResponseProps) {
             Description: (string) "",
             Schema: (*spec.Schema)(<nil>),
             Headers: (map[string]spec.Header) <nil>,
             Examples: (map[string]interface {}) <nil>
            },
            VendorExtensible: (spec.VendorExtensible) {
             Extensions: (spec.Extensions) <nil>
            }
           }
          }
         }
        })
       }
      }),
      Put: (*spec.Operation)(<nil>),
      Post: (*spec.Operation)(<nil>),
      Delete: (*spec.Operation)(<nil>),
      Options: (*spec.Operation)(<nil>),
      Head: (*spec.Operation)(<nil>),
      Patch: (*spec.Operation)(<nil>),
      Parameters: ([]spec.Parameter) <nil>
     }
    },
    (string) (len=33) "/v1/admins/{adminID}/verify_email": (spec.PathItem) {
     Refable: (spec.Refable) {
      Ref: (spec.Ref) 
     },
     VendorExtensible: (spec.VendorExtensible) {
      Extensions: (spec.Extensions) <nil>
     },
     PathItemProps: (spec.PathItemProps) {
      Get: (*spec.Operation)(<nil>),
      Put: (*spec.Operation)(<nil>),
      Post: (*spec.Operation)(0xc0000e1180)({
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       OperationProps: (spec.OperationProps) {
        Description: (string) (len=34) "set the verified email of an admin",
        Consumes: ([]string) <nil>,
        Produces: ([]string) <nil>,
        Schemes: ([]string) <nil>,
        Tags: ([]string) <nil>,
        Summary: (string) "",
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        ID: (string) (len=16) "verifyAdminEmail",
        Deprecated: (bool) false,
        Security: ([]map[string][]string) <nil>,
        Parameters: ([]spec.Parameter) (len=2 cap=4) {
         (spec.Parameter) {
          Refable: (spec.Refable) {
           Ref: (spec.Ref) 
          },
          CommonValidations: (spec.CommonValidations) {
           Maximum: (*float64)(<nil>),
           ExclusiveMaximum: (bool) false,
           Minimum: (*float64)(<nil>),
           ExclusiveMinimum: (bool) false,
           MaxLength: (*int64)(<nil>),
           MinLength: (*int64)(<nil>),
           Pattern: (string) "",
           MaxItems: (*int64)(<nil>),
           MinItems: (*int64)(<nil>),
           UniqueItems: (bool) false,
           MultipleOf: (*float64)(<nil>),
           Enum: ([]interface {}) <nil>
          },
          SimpleSchema: (spec.SimpleSchema) {
           Type: (string) (len=6) "string",
           Format: (string) "",
           Items: (*spec.Items)(<nil>),
           CollectionFormat: (string) "",
           Default: (interface {}) <nil>,
           Example: (interface {}) <nil>
          },
          VendorExtensible: (spec.VendorExtensible) {
           Extensions: (spec.Extensions) <nil>
          },
          ParamProps: (spec.ParamProps) {
           Description: (string) "",
           Name: (string) (len=7) "adminID",
           In: (string) (len=4) "path",
           Required: (bool) true,
           Schema: (*spec.Schema)(<nil>),
           AllowEmptyValue: (bool) false
          }
         },
         (spec.Parameter) {
          Refable: (spec.Refable) {
           Ref: (spec.Ref) 
          },
          CommonValidations: (spec.CommonValidations) {
           Maximum: (*float64)(<nil>),
           ExclusiveMaximum: (bool) false,
           Minimum: (*float64)(<nil>),
           ExclusiveMinimum: (bool) false,
           MaxLength: (*int64)(<nil>),
           MinLength: (*int64)(<nil>),
           Pattern: (string) "",
           MaxItems: (*int64)(<nil>),
           MinItems: (*int64)(<nil>),
           UniqueItems: (bool) false,
           MultipleOf: (*float64)(<nil>),
           Enum: ([]interface {}) <nil>
          },
          SimpleSchema: (spec.SimpleSchema) {
           Type: (string) "",
           Format: (string) "",
           Items: (*spec.Items)(<nil>),
           CollectionFormat: (string) "",
           Default: (interface {}) <nil>,
           Example: (interface {}) <nil>
          },
          VendorExtensible: (spec.VendorExtensible) {
           Extensions: (spec.Extensions) <nil>
          },
          ParamProps: (spec.ParamProps) {
           Description: (string) "",
           Name: (string) (len=7) "request",
           In: (string) (len=4) "body",
           Required: (bool) true,
           Schema: (*spec.Schema)(0xc000392b40)({
            VendorExtensible: (spec.VendorExtensible) {
             Extensions: (spec.Extensions) <nil>
            },
            SchemaProps: (spec.SchemaProps) {
             ID: (string) "",
             Ref: (spec.Ref) #/definitions/VerifyAdminEmailRequest,
             Schema: (spec.SchemaURL) "",
             Description: (string) "",
             Type: (spec.StringOrArray) <nil>,
             Format: (string) "",
             Title: (string) "",
             Default: (interface {}) <nil>,
             Maximum: (*float64)(<nil>),
             ExclusiveMaximum: (bool) false,
             Minimum: (*float64)(<nil>),
             ExclusiveMinimum: (bool) false,
             MaxLength: (*int64)(<nil>),
             MinLength: (*int64)(<nil>),
             Pattern: (string) "",
             MaxItems: (*int64)(<nil>),
             MinItems: (*int64)(<nil>),
             UniqueItems: (bool) false,
             MultipleOf: (*float64)(<nil>),
             Enum: ([]interface {}) <nil>,
             MaxProperties: (*int64)(<nil>),
             MinProperties: (*int64)(<nil>),
             Required: ([]string) <nil>,
             Items: (*spec.SchemaOrArray)(<nil>),
             AllOf: ([]spec.Schema) <nil>,
             OneOf: ([]spec.Schema) <nil>,
             AnyOf: ([]spec.Schema) <nil>,
             Not: (*spec.Schema)(<nil>),
             Properties: (map[string]spec.Schema) <nil>,
             AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
             PatternProperties: (map[string]spec.Schema) <nil>,
             Dependencies: (spec.Dependencies) <nil>,
             AdditionalItems: (*spec.SchemaOrBool)(<nil>),
             Definitions: (spec.Definitions) <nil>
            },
            SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
             Discriminator: (string) "",
             ReadOnly: (bool) false,
             XML: (*spec.XMLObject)(<nil>),
             ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
             Example: (interface {}) <nil>
            },
            ExtraProps: (map[string]interface {}) <nil>
           }),
           AllowEmptyValue: (bool) false
          }
         }
        },
        Responses: (*spec.Responses)(0xc00036a140)({
         VendorExtensible: (spec.VendorExtensible) {
          Extensions: (spec.Extensions) <nil>
         },
         ResponsesProps: (spec.ResponsesProps) {
          Default: (*spec.Response)(<nil>),
          StatusCodeResponses: (map[int]spec.Response) (len=3) {
           (int) 200: (spec.Response) {
            Refable: (spec.Refable) {
             Ref: (spec.Ref) 
            },
            ResponseProps: (spec.ResponseProps) {
             Description: (string) (len=11) "OK response",
             Schema: (*spec.Schema)(<nil>),
             Headers: (map[string]spec.Header) <nil>,
             Examples: (map[string]interface {}) <nil>
            },
            VendorExtensible: (spec.VendorExtensible) {
             Extensions: (spec.Extensions) <nil>
            }
           },
           (int) 404: (spec.Response) {
            Refable: (spec.Refable) {
             Ref: (spec.Ref) #/responses/NotFound
            },
            ResponseProps: (spec.ResponseProps) {
             Description: (string) "",
             Schema: (*spec.Schema)(<nil>),
             Headers: (map[string]spec.Header) <nil>,
             Examples: (map[string]interface {}) <nil>
            },
            VendorExtensible: (spec.VendorExtensible) {
             Extensions: (spec.Extensions) <nil>
            }
           },
           (int) 400: (spec.Response) {
            Refable: (spec.Refable) {
             Ref: (spec.Ref) #/responses/BadRequest
            },
            ResponseProps: (spec.ResponseProps) {
             Description: (string) "",
             Schema: (*spec.Schema)(<nil>),
             Headers: (map[string]spec.Header) <nil>,
             Examples: (map[string]interface {}) <nil>
            },
            VendorExtensible: (spec.VendorExtensible) {
             Extensions: (spec.Extensions) <nil>
            }
           }
          }
         }
        })
       }
      }),
      Delete: (*spec.Operation)(<nil>),
      Options: (*spec.Operation)(<nil>),
      Head: (*spec.Operation)(<nil>),
      Patch: (*spec.Operation)(<nil>),
      Parameters: ([]spec.Parameter) <nil>
     }
    },
    (string) (len=20) "/v1/admins/{adminID}": (spec.PathItem) {
     Refable: (spec.Refable) {
      Ref: (spec.Ref) 
     },
     VendorExtensible: (spec.VendorExtensible) {
      Extensions: (spec.Extensions) <nil>
     },
     PathItemProps: (spec.PathItemProps) {
      Get: (*spec.Operation)(0xc0000e1340)({
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       OperationProps: (spec.OperationProps) {
        Description: (string) "",
        Consumes: ([]string) <nil>,
        Produces: ([]string) <nil>,
        Schemes: ([]string) <nil>,
        Tags: ([]string) <nil>,
        Summary: (string) (len=15) "Get admin by ID",
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        ID: (string) (len=12) "getAdminByID",
        Deprecated: (bool) false,
        Security: ([]map[string][]string) <nil>,
        Parameters: ([]spec.Parameter) (len=1 cap=4) {
         (spec.Parameter) {
          Refable: (spec.Refable) {
           Ref: (spec.Ref) 
          },
          CommonValidations: (spec.CommonValidations) {
           Maximum: (*float64)(<nil>),
           ExclusiveMaximum: (bool) false,
           Minimum: (*float64)(<nil>),
           ExclusiveMinimum: (bool) false,
           MaxLength: (*int64)(<nil>),
           MinLength: (*int64)(<nil>),
           Pattern: (string) "",
           MaxItems: (*int64)(<nil>),
           MinItems: (*int64)(<nil>),
           UniqueItems: (bool) false,
           MultipleOf: (*float64)(<nil>),
           Enum: ([]interface {}) <nil>
          },
          SimpleSchema: (spec.SimpleSchema) {
           Type: (string) (len=6) "string",
           Format: (string) "",
           Items: (*spec.Items)(<nil>),
           CollectionFormat: (string) "",
           Default: (interface {}) <nil>,
           Example: (interface {}) <nil>
          },
          VendorExtensible: (spec.VendorExtensible) {
           Extensions: (spec.Extensions) <nil>
          },
          ParamProps: (spec.ParamProps) {
           Description: (string) "",
           Name: (string) (len=7) "adminID",
           In: (string) (len=4) "path",
           Required: (bool) true,
           Schema: (*spec.Schema)(<nil>),
           AllowEmptyValue: (bool) false
          }
         }
        },
        Responses: (*spec.Responses)(0xc000421940)({
         VendorExtensible: (spec.VendorExtensible) {
          Extensions: (spec.Extensions) <nil>
         },
         ResponsesProps: (spec.ResponsesProps) {
          Default: (*spec.Response)(<nil>),
          StatusCodeResponses: (map[int]spec.Response) (len=2) {
           (int) 200: (spec.Response) {
            Refable: (spec.Refable) {
             Ref: (spec.Ref) 
            },
            ResponseProps: (spec.ResponseProps) {
             Description: (string) (len=5) "Admin",
             Schema: (*spec.Schema)(0xc000384240)({
              VendorExtensible: (spec.VendorExtensible) {
               Extensions: (spec.Extensions) <nil>
              },
              SchemaProps: (spec.SchemaProps) {
               ID: (string) "",
               Ref: (spec.Ref) #/definitions/Admin,
               Schema: (spec.SchemaURL) "",
               Description: (string) "",
               Type: (spec.StringOrArray) <nil>,
               Format: (string) "",
               Title: (string) "",
               Default: (interface {}) <nil>,
               Maximum: (*float64)(<nil>),
               ExclusiveMaximum: (bool) false,
               Minimum: (*float64)(<nil>),
               ExclusiveMinimum: (bool) false,
               MaxLength: (*int64)(<nil>),
               MinLength: (*int64)(<nil>),
               Pattern: (string) "",
               MaxItems: (*int64)(<nil>),
               MinItems: (*int64)(<nil>),
               UniqueItems: (bool) false,
               MultipleOf: (*float64)(<nil>),
               Enum: ([]interface {}) <nil>,
               MaxProperties: (*int64)(<nil>),
               MinProperties: (*int64)(<nil>),
               Required: ([]string) <nil>,
               Items: (*spec.SchemaOrArray)(<nil>),
               AllOf: ([]spec.Schema) <nil>,
               OneOf: ([]spec.Schema) <nil>,
               AnyOf: ([]spec.Schema) <nil>,
               Not: (*spec.Schema)(<nil>),
               Properties: (map[string]spec.Schema) <nil>,
               AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
               PatternProperties: (map[string]spec.Schema) <nil>,
               Dependencies: (spec.Dependencies) <nil>,
               AdditionalItems: (*spec.SchemaOrBool)(<nil>),
               Definitions: (spec.Definitions) <nil>
              },
              SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
               Discriminator: (string) "",
               ReadOnly: (bool) false,
               XML: (*spec.XMLObject)(<nil>),
               ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
               Example: (interface {}) <nil>
              },
              ExtraProps: (map[string]interface {}) <nil>
             }),
             Headers: (map[string]spec.Header) <nil>,
             Examples: (map[string]interface {}) <nil>
            },
            VendorExtensible: (spec.VendorExtensible) {
             Extensions: (spec.Extensions) <nil>
            }
           },
           (int) 404: (spec.Response) {
            Refable: (spec.Refable) {
             Ref: (spec.Ref) #/responses/NotFound
            },
            ResponseProps: (spec.ResponseProps) {
             Description: (string) "",
             Schema: (*spec.Schema)(<nil>),
             Headers: (map[string]spec.Header) <nil>,
             Examples: (map[string]interface {}) <nil>
            },
            VendorExtensible: (spec.VendorExtensible) {
             Extensions: (spec.Extensions) <nil>
            }
           }
          }
         }
        })
       }
      }),
      Put: (*spec.Operation)(0xc0000e1260)({
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       OperationProps: (spec.OperationProps) {
        Description: (string) "",
        Consumes: ([]string) <nil>,
        Produces: ([]string) <nil>,
        Schemes: ([]string) <nil>,
        Tags: ([]string) <nil>,
        Summary: (string) (len=20) "Creates an app admin",
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        ID: (string) (len=11) "createAdmin",
        Deprecated: (bool) false,
        Security: ([]map[string][]string) <nil>,
        Parameters: ([]spec.Parameter) (len=2 cap=4) {
         (spec.Parameter) {
          Refable: (spec.Refable) {
           Ref: (spec.Ref) 
          },
          CommonValidations: (spec.CommonValidations) {
           Maximum: (*float64)(<nil>),
           ExclusiveMaximum: (bool) false,
           Minimum: (*float64)(<nil>),
           ExclusiveMinimum: (bool) false,
           MaxLength: (*int64)(<nil>),
           MinLength: (*int64)(<nil>),
           Pattern: (string) "",
           MaxItems: (*int64)(<nil>),
           MinItems: (*int64)(<nil>),
           UniqueItems: (bool) false,
           MultipleOf: (*float64)(<nil>),
           Enum: ([]interface {}) <nil>
          },
          SimpleSchema: (spec.SimpleSchema) {
           Type: (string) "",
           Format: (string) "",
           Items: (*spec.Items)(<nil>),
           CollectionFormat: (string) "",
           Default: (interface {}) <nil>,
           Example: (interface {}) <nil>
          },
          VendorExtensible: (spec.VendorExtensible) {
           Extensions: (spec.Extensions) <nil>
          },
          ParamProps: (spec.ParamProps) {
           Description: (string) "",
           Name: (string) (len=11) "createAdmin",
           In: (string) (len=4) "body",
           Required: (bool) true,
           Schema: (*spec.Schema)(0xc000393440)({
            VendorExtensible: (spec.VendorExtensible) {
             Extensions: (spec.Extensions) <nil>
            },
            SchemaProps: (spec.SchemaProps) {
             ID: (string) "",
             Ref: (spec.Ref) #/definitions/CreateAdminRequest,
             Schema: (spec.SchemaURL) "",
             Description: (string) "",
             Type: (spec.StringOrArray) <nil>,
             Format: (string) "",
             Title: (string) "",
             Default: (interface {}) <nil>,
             Maximum: (*float64)(<nil>),
             ExclusiveMaximum: (bool) false,
             Minimum: (*float64)(<nil>),
             ExclusiveMinimum: (bool) false,
             MaxLength: (*int64)(<nil>),
             MinLength: (*int64)(<nil>),
             Pattern: (string) "",
             MaxItems: (*int64)(<nil>),
             MinItems: (*int64)(<nil>),
             UniqueItems: (bool) false,
             MultipleOf: (*float64)(<nil>),
             Enum: ([]interface {}) <nil>,
             MaxProperties: (*int64)(<nil>),
             MinProperties: (*int64)(<nil>),
             Required: ([]string) <nil>,
             Items: (*spec.SchemaOrArray)(<nil>),
             AllOf: ([]spec.Schema) <nil>,
             OneOf: ([]spec.Schema) <nil>,
             AnyOf: ([]spec.Schema) <nil>,
             Not: (*spec.Schema)(<nil>),
             Properties: (map[string]spec.Schema) <nil>,
             AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
             PatternProperties: (map[string]spec.Schema) <nil>,
             Dependencies: (spec.Dependencies) <nil>,
             AdditionalItems: (*spec.SchemaOrBool)(<nil>),
             Definitions: (spec.Definitions) <nil>
            },
            SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
             Discriminator: (string) "",
             ReadOnly: (bool) false,
             XML: (*spec.XMLObject)(<nil>),
             ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
             Example: (interface {}) <nil>
            },
            ExtraProps: (map[string]interface {}) <nil>
           }),
           AllowEmptyValue: (bool) false
          }
         },
         (spec.Parameter) {
          Refable: (spec.Refable) {
           Ref: (spec.Ref) 
          },
          CommonValidations: (spec.CommonValidations) {
           Maximum: (*float64)(<nil>),
           ExclusiveMaximum: (bool) false,
           Minimum: (*float64)(<nil>),
           ExclusiveMinimum: (bool) false,
           MaxLength: (*int64)(<nil>),
           MinLength: (*int64)(<nil>),
           Pattern: (string) "",
           MaxItems: (*int64)(<nil>),
           MinItems: (*int64)(<nil>),
           UniqueItems: (bool) false,
           MultipleOf: (*float64)(<nil>),
           Enum: ([]interface {}) <nil>
          },
          SimpleSchema: (spec.SimpleSchema) {
           Type: (string) (len=6) "string",
           Format: (string) (len=8) "mongo-id",
           Items: (*spec.Items)(<nil>),
           CollectionFormat: (string) "",
           Default: (interface {}) <nil>,
           Example: (interface {}) <nil>
          },
          VendorExtensible: (spec.VendorExtensible) {
           Extensions: (spec.Extensions) <nil>
          },
          ParamProps: (spec.ParamProps) {
           Description: (string) "",
           Name: (string) (len=7) "adminID",
           In: (string) (len=4) "path",
           Required: (bool) true,
           Schema: (*spec.Schema)(<nil>),
           AllowEmptyValue: (bool) false
          }
         }
        },
        Responses: (*spec.Responses)(0xc000420260)({
         VendorExtensible: (spec.VendorExtensible) {
          Extensions: (spec.Extensions) <nil>
         },
         ResponsesProps: (spec.ResponsesProps) {
          Default: (*spec.Response)(<nil>),
          StatusCodeResponses: (map[int]spec.Response) (len=1) {
           (int) 200: (spec.Response) {
            Refable: (spec.Refable) {
             Ref: (spec.Ref) 
            },
            ResponseProps: (spec.ResponseProps) {
             Description: (string) (len=8) "An admin",
             Schema: (*spec.Schema)(0xc000393d40)({
              VendorExtensible: (spec.VendorExtensible) {
               Extensions: (spec.Extensions) <nil>
              },
              SchemaProps: (spec.SchemaProps) {
               ID: (string) "",
               Ref: (spec.Ref) #/definitions/Admin,
               Schema: (spec.SchemaURL) "",
               Description: (string) "",
               Type: (spec.StringOrArray) <nil>,
               Format: (string) "",
               Title: (string) "",
               Default: (interface {}) <nil>,
               Maximum: (*float64)(<nil>),
               ExclusiveMaximum: (bool) false,
               Minimum: (*float64)(<nil>),
               ExclusiveMinimum: (bool) false,
               MaxLength: (*int64)(<nil>),
               MinLength: (*int64)(<nil>),
               Pattern: (string) "",
               MaxItems: (*int64)(<nil>),
               MinItems: (*int64)(<nil>),
               UniqueItems: (bool) false,
               MultipleOf: (*float64)(<nil>),
               Enum: ([]interface {}) <nil>,
               MaxProperties: (*int64)(<nil>),
               MinProperties: (*int64)(<nil>),
               Required: ([]string) <nil>,
               Items: (*spec.SchemaOrArray)(<nil>),
               AllOf: ([]spec.Schema) <nil>,
               OneOf: ([]spec.Schema) <nil>,
               AnyOf: ([]spec.Schema) <nil>,
               Not: (*spec.Schema)(<nil>),
               Properties: (map[string]spec.Schema) <nil>,
               AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
               PatternProperties: (map[string]spec.Schema) <nil>,
               Dependencies: (spec.Dependencies) <nil>,
               AdditionalItems: (*spec.SchemaOrBool)(<nil>),
               Definitions: (spec.Definitions) <nil>
              },
              SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
               Discriminator: (string) "",
               ReadOnly: (bool) false,
               XML: (*spec.XMLObject)(<nil>),
               ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
               Example: (interface {}) <nil>
              },
              ExtraProps: (map[string]interface {}) <nil>
             }),
             Headers: (map[string]spec.Header) <nil>,
             Examples: (map[string]interface {}) <nil>
            },
            VendorExtensible: (spec.VendorExtensible) {
             Extensions: (spec.Extensions) <nil>
            }
           }
          }
         }
        })
       }
      }),
      Post: (*spec.Operation)(<nil>),
      Delete: (*spec.Operation)(0xc0000e1500)({
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       OperationProps: (spec.OperationProps) {
        Description: (string) "",
        Consumes: ([]string) <nil>,
        Produces: ([]string) <nil>,
        Schemes: ([]string) <nil>,
        Tags: ([]string) <nil>,
        Summary: (string) (len=15) "Delete an admin",
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        ID: (string) (len=11) "deleteAdmin",
        Deprecated: (bool) false,
        Security: ([]map[string][]string) <nil>,
        Parameters: ([]spec.Parameter) (len=1 cap=4) {
         (spec.Parameter) {
          Refable: (spec.Refable) {
           Ref: (spec.Ref) 
          },
          CommonValidations: (spec.CommonValidations) {
           Maximum: (*float64)(<nil>),
           ExclusiveMaximum: (bool) false,
           Minimum: (*float64)(<nil>),
           ExclusiveMinimum: (bool) false,
           MaxLength: (*int64)(<nil>),
           MinLength: (*int64)(<nil>),
           Pattern: (string) "",
           MaxItems: (*int64)(<nil>),
           MinItems: (*int64)(<nil>),
           UniqueItems: (bool) false,
           MultipleOf: (*float64)(<nil>),
           Enum: ([]interface {}) <nil>
          },
          SimpleSchema: (spec.SimpleSchema) {
           Type: (string) (len=6) "string",
           Format: (string) "",
           Items: (*spec.Items)(<nil>),
           CollectionFormat: (string) "",
           Default: (interface {}) <nil>,
           Example: (interface {}) <nil>
          },
          VendorExtensible: (spec.VendorExtensible) {
           Extensions: (spec.Extensions) <nil>
          },
          ParamProps: (spec.ParamProps) {
           Description: (string) "",
           Name: (string) (len=7) "adminID",
           In: (string) (len=4) "path",
           Required: (bool) true,
           Schema: (*spec.Schema)(<nil>),
           AllowEmptyValue: (bool) false
          }
         }
        },
        Responses: (*spec.Responses)(0xc0001da3a0)({
         VendorExtensible: (spec.VendorExtensible) {
          Extensions: (spec.Extensions) <nil>
         },
         ResponsesProps: (spec.ResponsesProps) {
          Default: (*spec.Response)(<nil>),
          StatusCodeResponses: (map[int]spec.Response) (len=2) {
           (int) 200: (spec.Response) {
            Refable: (spec.Refable) {
             Ref: (spec.Ref) 
            },
            ResponseProps: (spec.ResponseProps) {
             Description: (string) (len=11) "OK response",
             Schema: (*spec.Schema)(<nil>),
             Headers: (map[string]spec.Header) <nil>,
             Examples: (map[string]interface {}) <nil>
            },
            VendorExtensible: (spec.VendorExtensible) {
             Extensions: (spec.Extensions) <nil>
            }
           },
           (int) 404: (spec.Response) {
            Refable: (spec.Refable) {
             Ref: (spec.Ref) #/responses/NotFound
            },
            ResponseProps: (spec.ResponseProps) {
             Description: (string) "",
             Schema: (*spec.Schema)(<nil>),
             Headers: (map[string]spec.Header) <nil>,
             Examples: (map[string]interface {}) <nil>
            },
            VendorExtensible: (spec.VendorExtensible) {
             Extensions: (spec.Extensions) <nil>
            }
           }
          }
         }
        })
       }
      }),
      Options: (*spec.Operation)(<nil>),
      Head: (*spec.Operation)(<nil>),
      Patch: (*spec.Operation)(0xc0000e1420)({
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       OperationProps: (spec.OperationProps) {
        Description: (string) "",
        Consumes: ([]string) <nil>,
        Produces: ([]string) <nil>,
        Schemes: ([]string) <nil>,
        Tags: ([]string) <nil>,
        Summary: (string) (len=15) "Update an admin",
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        ID: (string) (len=11) "updateAdmin",
        Deprecated: (bool) false,
        Security: ([]map[string][]string) <nil>,
        Parameters: ([]spec.Parameter) (len=2 cap=4) {
         (spec.Parameter) {
          Refable: (spec.Refable) {
           Ref: (spec.Ref) 
          },
          CommonValidations: (spec.CommonValidations) {
           Maximum: (*float64)(<nil>),
           ExclusiveMaximum: (bool) false,
           Minimum: (*float64)(<nil>),
           ExclusiveMinimum: (bool) false,
           MaxLength: (*int64)(<nil>),
           MinLength: (*int64)(<nil>),
           Pattern: (string) "",
           MaxItems: (*int64)(<nil>),
           MinItems: (*int64)(<nil>),
           UniqueItems: (bool) false,
           MultipleOf: (*float64)(<nil>),
           Enum: ([]interface {}) <nil>
          },
          SimpleSchema: (spec.SimpleSchema) {
           Type: (string) (len=6) "string",
           Format: (string) "",
           Items: (*spec.Items)(<nil>),
           CollectionFormat: (string) "",
           Default: (interface {}) <nil>,
           Example: (interface {}) <nil>
          },
          VendorExtensible: (spec.VendorExtensible) {
           Extensions: (spec.Extensions) <nil>
          },
          ParamProps: (spec.ParamProps) {
           Description: (string) "",
           Name: (string) (len=7) "adminID",
           In: (string) (len=4) "path",
           Required: (bool) true,
           Schema: (*spec.Schema)(<nil>),
           AllowEmptyValue: (bool) false
          }
         },
         (spec.Parameter) {
          Refable: (spec.Refable) {
           Ref: (spec.Ref) 
          },
          CommonValidations: (spec.CommonValidations) {
           Maximum: (*float64)(<nil>),
           ExclusiveMaximum: (bool) false,
           Minimum: (*float64)(<nil>),
           ExclusiveMinimum: (bool) false,
           MaxLength: (*int64)(<nil>),
           MinLength: (*int64)(<nil>),
           Pattern: (string) "",
           MaxItems: (*int64)(<nil>),
           MinItems: (*int64)(<nil>),
           UniqueItems: (bool) false,
           MultipleOf: (*float64)(<nil>),
           Enum: ([]interface {}) <nil>
          },
          SimpleSchema: (spec.SimpleSchema) {
           Type: (string) "",
           Format: (string) "",
           Items: (*spec.Items)(<nil>),
           CollectionFormat: (string) "",
           Default: (interface {}) <nil>,
           Example: (interface {}) <nil>
          },
          VendorExtensible: (spec.VendorExtensible) {
           Extensions: (spec.Extensions) <nil>
          },
          ParamProps: (spec.ParamProps) {
           Description: (string) "",
           Name: (string) (len=5) "admin",
           In: (string) (len=4) "body",
           Required: (bool) true,
           Schema: (*spec.Schema)(0xc000384b40)({
            VendorExtensible: (spec.VendorExtensible) {
             Extensions: (spec.Extensions) <nil>
            },
            SchemaProps: (spec.SchemaProps) {
             ID: (string) "",
             Ref: (spec.Ref) #/definitions/PatchAdminRequest,
             Schema: (spec.SchemaURL) "",
             Description: (string) "",
             Type: (spec.StringOrArray) <nil>,
             Format: (string) "",
             Title: (string) "",
             Default: (interface {}) <nil>,
             Maximum: (*float64)(<nil>),
             ExclusiveMaximum: (bool) false,
             Minimum: (*float64)(<nil>),
             ExclusiveMinimum: (bool) false,
             MaxLength: (*int64)(<nil>),
             MinLength: (*int64)(<nil>),
             Pattern: (string) "",
             MaxItems: (*int64)(<nil>),
             MinItems: (*int64)(<nil>),
             UniqueItems: (bool) false,
             MultipleOf: (*float64)(<nil>),
             Enum: ([]interface {}) <nil>,
             MaxProperties: (*int64)(<nil>),
             MinProperties: (*int64)(<nil>),
             Required: ([]string) <nil>,
             Items: (*spec.SchemaOrArray)(<nil>),
             AllOf: ([]spec.Schema) <nil>,
             OneOf: ([]spec.Schema) <nil>,
             AnyOf: ([]spec.Schema) <nil>,
             Not: (*spec.Schema)(<nil>),
             Properties: (map[string]spec.Schema) <nil>,
             AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
             PatternProperties: (map[string]spec.Schema) <nil>,
             Dependencies: (spec.Dependencies) <nil>,
             AdditionalItems: (*spec.SchemaOrBool)(<nil>),
             Definitions: (spec.Definitions) <nil>
            },
            SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
             Discriminator: (string) "",
             ReadOnly: (bool) false,
             XML: (*spec.XMLObject)(<nil>),
             ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
             Example: (interface {}) <nil>
            },
            ExtraProps: (map[string]interface {}) <nil>
           }),
           AllowEmptyValue: (bool) false
          }
         }
        },
        Responses: (*spec.Responses)(0xc00000f600)({
         VendorExtensible: (spec.VendorExtensible) {
          Extensions: (spec.Extensions) <nil>
         },
         ResponsesProps: (spec.ResponsesProps) {
          Default: (*spec.Response)(<nil>),
          StatusCodeResponses: (map[int]spec.Response) (len=2) {
           (int) 200: (spec.Response) {
            Refable: (spec.Refable) {
             Ref: (spec.Ref) 
            },
            ResponseProps: (spec.ResponseProps) {
             Description: (string) (len=11) "OK response",
             Schema: (*spec.Schema)(0xc000384fc0)({
              VendorExtensible: (spec.VendorExtensible) {
               Extensions: (spec.Extensions) <nil>
              },
              SchemaProps: (spec.SchemaProps) {
               ID: (string) "",
               Ref: (spec.Ref) #/definitions/Admin,
               Schema: (spec.SchemaURL) "",
               Description: (string) "",
               Type: (spec.StringOrArray) <nil>,
               Format: (string) "",
               Title: (string) "",
               Default: (interface {}) <nil>,
               Maximum: (*float64)(<nil>),
               ExclusiveMaximum: (bool) false,
               Minimum: (*float64)(<nil>),
               ExclusiveMinimum: (bool) false,
               MaxLength: (*int64)(<nil>),
               MinLength: (*int64)(<nil>),
               Pattern: (string) "",
               MaxItems: (*int64)(<nil>),
               MinItems: (*int64)(<nil>),
               UniqueItems: (bool) false,
               MultipleOf: (*float64)(<nil>),
               Enum: ([]interface {}) <nil>,
               MaxProperties: (*int64)(<nil>),
               MinProperties: (*int64)(<nil>),
               Required: ([]string) <nil>,
               Items: (*spec.SchemaOrArray)(<nil>),
               AllOf: ([]spec.Schema) <nil>,
               OneOf: ([]spec.Schema) <nil>,
               AnyOf: ([]spec.Schema) <nil>,
               Not: (*spec.Schema)(<nil>),
               Properties: (map[string]spec.Schema) <nil>,
               AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
               PatternProperties: (map[string]spec.Schema) <nil>,
               Dependencies: (spec.Dependencies) <nil>,
               AdditionalItems: (*spec.SchemaOrBool)(<nil>),
               Definitions: (spec.Definitions) <nil>
              },
              SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
               Discriminator: (string) "",
               ReadOnly: (bool) false,
               XML: (*spec.XMLObject)(<nil>),
               ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
               Example: (interface {}) <nil>
              },
              ExtraProps: (map[string]interface {}) <nil>
             }),
             Headers: (map[string]spec.Header) <nil>,
             Examples: (map[string]interface {}) <nil>
            },
            VendorExtensible: (spec.VendorExtensible) {
             Extensions: (spec.Extensions) <nil>
            }
           },
           (int) 404: (spec.Response) {
            Refable: (spec.Refable) {
             Ref: (spec.Ref) #/responses/NotFound
            },
            ResponseProps: (spec.ResponseProps) {
             Description: (string) "",
             Schema: (*spec.Schema)(<nil>),
             Headers: (map[string]spec.Header) <nil>,
             Examples: (map[string]interface {}) <nil>
            },
            VendorExtensible: (spec.VendorExtensible) {
             Extensions: (spec.Extensions) <nil>
            }
           }
          }
         }
        })
       }
      }),
      Parameters: ([]spec.Parameter) <nil>
     }
    },
    (string) (len=24) "/v1/platforms/{clientID}": (spec.PathItem) {
     Refable: (spec.Refable) {
      Ref: (spec.Ref) 
     },
     VendorExtensible: (spec.VendorExtensible) {
      Extensions: (spec.Extensions) <nil>
     },
     PathItemProps: (spec.PathItemProps) {
      Get: (*spec.Operation)(0xc0000e1b20)({
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       OperationProps: (spec.OperationProps) {
        Description: (string) "",
        Consumes: ([]string) <nil>,
        Produces: ([]string) <nil>,
        Schemes: ([]string) <nil>,
        Tags: ([]string) <nil>,
        Summary: (string) (len=25) "Get platform by client ID",
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        ID: (string) (len=21) "getPlatformByClientID",
        Deprecated: (bool) false,
        Security: ([]map[string][]string) <nil>,
        Parameters: ([]spec.Parameter) (len=1 cap=4) {
         (spec.Parameter) {
          Refable: (spec.Refable) {
           Ref: (spec.Ref) 
          },
          CommonValidations: (spec.CommonValidations) {
           Maximum: (*float64)(<nil>),
           ExclusiveMaximum: (bool) false,
           Minimum: (*float64)(<nil>),
           ExclusiveMinimum: (bool) false,
           MaxLength: (*int64)(<nil>),
           MinLength: (*int64)(<nil>),
           Pattern: (string) "",
           MaxItems: (*int64)(<nil>),
           MinItems: (*int64)(<nil>),
           UniqueItems: (bool) false,
           MultipleOf: (*float64)(<nil>),
           Enum: ([]interface {}) <nil>
          },
          SimpleSchema: (spec.SimpleSchema) {
           Type: (string) (len=6) "string",
           Format: (string) "",
           Items: (*spec.Items)(<nil>),
           CollectionFormat: (string) "",
           Default: (interface {}) <nil>,
           Example: (interface {}) <nil>
          },
          VendorExtensible: (spec.VendorExtensible) {
           Extensions: (spec.Extensions) <nil>
          },
          ParamProps: (spec.ParamProps) {
           Description: (string) "",
           Name: (string) (len=8) "clientID",
           In: (string) (len=4) "path",
           Required: (bool) true,
           Schema: (*spec.Schema)(<nil>),
           AllowEmptyValue: (bool) false
          }
         }
        },
        Responses: (*spec.Responses)(0xc00018b9c0)({
         VendorExtensible: (spec.VendorExtensible) {
          Extensions: (spec.Extensions) <nil>
         },
         ResponsesProps: (spec.ResponsesProps) {
          Default: (*spec.Response)(<nil>),
          StatusCodeResponses: (map[int]spec.Response) (len=2) {
           (int) 200: (spec.Response) {
            Refable: (spec.Refable) {
             Ref: (spec.Ref) 
            },
            ResponseProps: (spec.ResponseProps) {
             Description: (string) (len=8) "Platform",
             Schema: (*spec.Schema)(0xc000362480)({
              VendorExtensible: (spec.VendorExtensible) {
               Extensions: (spec.Extensions) <nil>
              },
              SchemaProps: (spec.SchemaProps) {
               ID: (string) "",
               Ref: (spec.Ref) #/definitions/Platform,
               Schema: (spec.SchemaURL) "",
               Description: (string) "",
               Type: (spec.StringOrArray) <nil>,
               Format: (string) "",
               Title: (string) "",
               Default: (interface {}) <nil>,
               Maximum: (*float64)(<nil>),
               ExclusiveMaximum: (bool) false,
               Minimum: (*float64)(<nil>),
               ExclusiveMinimum: (bool) false,
               MaxLength: (*int64)(<nil>),
               MinLength: (*int64)(<nil>),
               Pattern: (string) "",
               MaxItems: (*int64)(<nil>),
               MinItems: (*int64)(<nil>),
               UniqueItems: (bool) false,
               MultipleOf: (*float64)(<nil>),
               Enum: ([]interface {}) <nil>,
               MaxProperties: (*int64)(<nil>),
               MinProperties: (*int64)(<nil>),
               Required: ([]string) <nil>,
               Items: (*spec.SchemaOrArray)(<nil>),
               AllOf: ([]spec.Schema) <nil>,
               OneOf: ([]spec.Schema) <nil>,
               AnyOf: ([]spec.Schema) <nil>,
               Not: (*spec.Schema)(<nil>),
               Properties: (map[string]spec.Schema) <nil>,
               AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
               PatternProperties: (map[string]spec.Schema) <nil>,
               Dependencies: (spec.Dependencies) <nil>,
               AdditionalItems: (*spec.SchemaOrBool)(<nil>),
               Definitions: (spec.Definitions) <nil>
              },
              SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
               Discriminator: (string) "",
               ReadOnly: (bool) false,
               XML: (*spec.XMLObject)(<nil>),
               ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
               Example: (interface {}) <nil>
              },
              ExtraProps: (map[string]interface {}) <nil>
             }),
             Headers: (map[string]spec.Header) <nil>,
             Examples: (map[string]interface {}) <nil>
            },
            VendorExtensible: (spec.VendorExtensible) {
             Extensions: (spec.Extensions) <nil>
            }
           },
           (int) 404: (spec.Response) {
            Refable: (spec.Refable) {
             Ref: (spec.Ref) #/responses/NotFound
            },
            ResponseProps: (spec.ResponseProps) {
             Description: (string) "",
             Schema: (*spec.Schema)(<nil>),
             Headers: (map[string]spec.Header) <nil>,
             Examples: (map[string]interface {}) <nil>
            },
            VendorExtensible: (spec.VendorExtensible) {
             Extensions: (spec.Extensions) <nil>
            }
           }
          }
         }
        })
       }
      }),
      Put: (*spec.Operation)(<nil>),
      Post: (*spec.Operation)(<nil>),
      Delete: (*spec.Operation)(<nil>),
      Options: (*spec.Operation)(<nil>),
      Head: (*spec.Operation)(<nil>),
      Patch: (*spec.Operation)(<nil>),
      Parameters: ([]spec.Parameter) <nil>
     }
    },
    (string) (len=8) "/_health": (spec.PathItem) {
     Refable: (spec.Refable) {
      Ref: (spec.Ref) 
     },
     VendorExtensible: (spec.VendorExtensible) {
      Extensions: (spec.Extensions) <nil>
     },
     PathItemProps: (spec.PathItemProps) {
      Get: (*spec.Operation)(0xc0003af0a0)({
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       OperationProps: (spec.OperationProps) {
        Description: (string) (len=32) "Checks if the service is healthy",
        Consumes: ([]string) <nil>,
        Produces: ([]string) <nil>,
        Schemes: ([]string) <nil>,
        Tags: ([]string) <nil>,
        Summary: (string) "",
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        ID: (string) (len=11) "healthCheck",
        Deprecated: (bool) false,
        Security: ([]map[string][]string) <nil>,
        Parameters: ([]spec.Parameter) <nil>,
        Responses: (*spec.Responses)(0xc0008639a0)({
         VendorExtensible: (spec.VendorExtensible) {
          Extensions: (spec.Extensions) <nil>
         },
         ResponsesProps: (spec.ResponsesProps) {
          Default: (*spec.Response)(<nil>),
          StatusCodeResponses: (map[int]spec.Response) (len=1) {
           (int) 200: (spec.Response) {
            Refable: (spec.Refable) {
             Ref: (spec.Ref) 
            },
            ResponseProps: (spec.ResponseProps) {
             Description: (string) (len=11) "OK response",
             Schema: (*spec.Schema)(<nil>),
             Headers: (map[string]spec.Header) <nil>,
             Examples: (map[string]interface {}) <nil>
            },
            VendorExtensible: (spec.VendorExtensible) {
             Extensions: (spec.Extensions) <nil>
            }
           }
          }
         }
        })
       }
      }),
      Put: (*spec.Operation)(<nil>),
      Post: (*spec.Operation)(<nil>),
      Delete: (*spec.Operation)(<nil>),
      Options: (*spec.Operation)(<nil>),
      Head: (*spec.Operation)(<nil>),
      Patch: (*spec.Operation)(<nil>),
      Parameters: ([]spec.Parameter) <nil>
     }
    },
    (string) (len=16) "/v1/apps/{appID}": (spec.PathItem) {
     Refable: (spec.Refable) {
      Ref: (spec.Ref) 
     },
     VendorExtensible: (spec.VendorExtensible) {
      Extensions: (spec.Extensions) <nil>
     },
     PathItemProps: (spec.PathItemProps) {
      Get: (*spec.Operation)(0xc0003af260)({
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       OperationProps: (spec.OperationProps) {
        Description: (string) "",
        Consumes: ([]string) <nil>,
        Produces: ([]string) <nil>,
        Schemes: ([]string) <nil>,
        Tags: ([]string) <nil>,
        Summary: (string) (len=21) "Get application by ID",
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        ID: (string) (len=10) "getAppByID",
        Deprecated: (bool) false,
        Security: ([]map[string][]string) <nil>,
        Parameters: ([]spec.Parameter) (len=1 cap=4) {
         (spec.Parameter) {
          Refable: (spec.Refable) {
           Ref: (spec.Ref) 
          },
          CommonValidations: (spec.CommonValidations) {
           Maximum: (*float64)(<nil>),
           ExclusiveMaximum: (bool) false,
           Minimum: (*float64)(<nil>),
           ExclusiveMinimum: (bool) false,
           MaxLength: (*int64)(<nil>),
           MinLength: (*int64)(<nil>),
           Pattern: (string) "",
           MaxItems: (*int64)(<nil>),
           MinItems: (*int64)(<nil>),
           UniqueItems: (bool) false,
           MultipleOf: (*float64)(<nil>),
           Enum: ([]interface {}) <nil>
          },
          SimpleSchema: (spec.SimpleSchema) {
           Type: (string) (len=6) "string",
           Format: (string) (len=8) "mongo-id",
           Items: (*spec.Items)(<nil>),
           CollectionFormat: (string) "",
           Default: (interface {}) <nil>,
           Example: (interface {}) <nil>
          },
          VendorExtensible: (spec.VendorExtensible) {
           Extensions: (spec.Extensions) <nil>
          },
          ParamProps: (spec.ParamProps) {
           Description: (string) "",
           Name: (string) (len=5) "appID",
           In: (string) (len=4) "path",
           Required: (bool) true,
           Schema: (*spec.Schema)(<nil>),
           AllowEmptyValue: (bool) false
          }
         }
        },
        Responses: (*spec.Responses)(0xc0008a0300)({
         VendorExtensible: (spec.VendorExtensible) {
          Extensions: (spec.Extensions) <nil>
         },
         ResponsesProps: (spec.ResponsesProps) {
          Default: (*spec.Response)(<nil>),
          StatusCodeResponses: (map[int]spec.Response) (len=2) {
           (int) 404: (spec.Response) {
            Refable: (spec.Refable) {
             Ref: (spec.Ref) #/responses/NotFound
            },
            ResponseProps: (spec.ResponseProps) {
             Description: (string) "",
             Schema: (*spec.Schema)(<nil>),
             Headers: (map[string]spec.Header) <nil>,
             Examples: (map[string]interface {}) <nil>
            },
            VendorExtensible: (spec.VendorExtensible) {
             Extensions: (spec.Extensions) <nil>
            }
           },
           (int) 200: (spec.Response) {
            Refable: (spec.Refable) {
             Ref: (spec.Ref) 
            },
            ResponseProps: (spec.ResponseProps) {
             Description: (string) (len=11) "Application",
             Schema: (*spec.Schema)(0xc00030eb40)({
              VendorExtensible: (spec.VendorExtensible) {
               Extensions: (spec.Extensions) <nil>
              },
              SchemaProps: (spec.SchemaProps) {
               ID: (string) "",
               Ref: (spec.Ref) #/definitions/App,
               Schema: (spec.SchemaURL) "",
               Description: (string) "",
               Type: (spec.StringOrArray) <nil>,
               Format: (string) "",
               Title: (string) "",
               Default: (interface {}) <nil>,
               Maximum: (*float64)(<nil>),
               ExclusiveMaximum: (bool) false,
               Minimum: (*float64)(<nil>),
               ExclusiveMinimum: (bool) false,
               MaxLength: (*int64)(<nil>),
               MinLength: (*int64)(<nil>),
               Pattern: (string) "",
               MaxItems: (*int64)(<nil>),
               MinItems: (*int64)(<nil>),
               UniqueItems: (bool) false,
               MultipleOf: (*float64)(<nil>),
               Enum: ([]interface {}) <nil>,
               MaxProperties: (*int64)(<nil>),
               MinProperties: (*int64)(<nil>),
               Required: ([]string) <nil>,
               Items: (*spec.SchemaOrArray)(<nil>),
               AllOf: ([]spec.Schema) <nil>,
               OneOf: ([]spec.Schema) <nil>,
               AnyOf: ([]spec.Schema) <nil>,
               Not: (*spec.Schema)(<nil>),
               Properties: (map[string]spec.Schema) <nil>,
               AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
               PatternProperties: (map[string]spec.Schema) <nil>,
               Dependencies: (spec.Dependencies) <nil>,
               AdditionalItems: (*spec.SchemaOrBool)(<nil>),
               Definitions: (spec.Definitions) <nil>
              },
              SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
               Discriminator: (string) "",
               ReadOnly: (bool) false,
               XML: (*spec.XMLObject)(<nil>),
               ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
               Example: (interface {}) <nil>
              },
              ExtraProps: (map[string]interface {}) <nil>
             }),
             Headers: (map[string]spec.Header) <nil>,
             Examples: (map[string]interface {}) <nil>
            },
            VendorExtensible: (spec.VendorExtensible) {
             Extensions: (spec.Extensions) <nil>
            }
           }
          }
         }
        })
       }
      }),
      Put: (*spec.Operation)(0xc0003af180)({
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       OperationProps: (spec.OperationProps) {
        Description: (string) "",
        Consumes: ([]string) <nil>,
        Produces: ([]string) <nil>,
        Schemes: ([]string) <nil>,
        Tags: ([]string) <nil>,
        Summary: (string) (len=14) "Creates an app",
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        ID: (string) (len=9) "createApp",
        Deprecated: (bool) false,
        Security: ([]map[string][]string) <nil>,
        Parameters: ([]spec.Parameter) (len=2 cap=4) {
         (spec.Parameter) {
          Refable: (spec.Refable) {
           Ref: (spec.Ref) 
          },
          CommonValidations: (spec.CommonValidations) {
           Maximum: (*float64)(<nil>),
           ExclusiveMaximum: (bool) false,
           Minimum: (*float64)(<nil>),
           ExclusiveMinimum: (bool) false,
           MaxLength: (*int64)(<nil>),
           MinLength: (*int64)(<nil>),
           Pattern: (string) "",
           MaxItems: (*int64)(<nil>),
           MinItems: (*int64)(<nil>),
           UniqueItems: (bool) false,
           MultipleOf: (*float64)(<nil>),
           Enum: ([]interface {}) <nil>
          },
          SimpleSchema: (spec.SimpleSchema) {
           Type: (string) "",
           Format: (string) "",
           Items: (*spec.Items)(<nil>),
           CollectionFormat: (string) "",
           Default: (interface {}) <nil>,
           Example: (interface {}) <nil>
          },
          VendorExtensible: (spec.VendorExtensible) {
           Extensions: (spec.Extensions) <nil>
          },
          ParamProps: (spec.ParamProps) {
           Description: (string) "",
           Name: (string) (len=3) "app",
           In: (string) (len=4) "body",
           Required: (bool) false,
           Schema: (*spec.Schema)(0xc00031bb00)({
            VendorExtensible: (spec.VendorExtensible) {
             Extensions: (spec.Extensions) <nil>
            },
            SchemaProps: (spec.SchemaProps) {
             ID: (string) "",
             Ref: (spec.Ref) #/definitions/App,
             Schema: (spec.SchemaURL) "",
             Description: (string) "",
             Type: (spec.StringOrArray) <nil>,
             Format: (string) "",
             Title: (string) "",
             Default: (interface {}) <nil>,
             Maximum: (*float64)(<nil>),
             ExclusiveMaximum: (bool) false,
             Minimum: (*float64)(<nil>),
             ExclusiveMinimum: (bool) false,
             MaxLength: (*int64)(<nil>),
             MinLength: (*int64)(<nil>),
             Pattern: (string) "",
             MaxItems: (*int64)(<nil>),
             MinItems: (*int64)(<nil>),
             UniqueItems: (bool) false,
             MultipleOf: (*float64)(<nil>),
             Enum: ([]interface {}) <nil>,
             MaxProperties: (*int64)(<nil>),
             MinProperties: (*int64)(<nil>),
             Required: ([]string) <nil>,
             Items: (*spec.SchemaOrArray)(<nil>),
             AllOf: ([]spec.Schema) <nil>,
             OneOf: ([]spec.Schema) <nil>,
             AnyOf: ([]spec.Schema) <nil>,
             Not: (*spec.Schema)(<nil>),
             Properties: (map[string]spec.Schema) <nil>,
             AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
             PatternProperties: (map[string]spec.Schema) <nil>,
             Dependencies: (spec.Dependencies) <nil>,
             AdditionalItems: (*spec.SchemaOrBool)(<nil>),
             Definitions: (spec.Definitions) <nil>
            },
            SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
             Discriminator: (string) "",
             ReadOnly: (bool) false,
             XML: (*spec.XMLObject)(<nil>),
             ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
             Example: (interface {}) <nil>
            },
            ExtraProps: (map[string]interface {}) <nil>
           }),
           AllowEmptyValue: (bool) false
          }
         },
         (spec.Parameter) {
          Refable: (spec.Refable) {
           Ref: (spec.Ref) 
          },
          CommonValidations: (spec.CommonValidations) {
           Maximum: (*float64)(<nil>),
           ExclusiveMaximum: (bool) false,
           Minimum: (*float64)(<nil>),
           ExclusiveMinimum: (bool) false,
           MaxLength: (*int64)(<nil>),
           MinLength: (*int64)(<nil>),
           Pattern: (string) "",
           MaxItems: (*int64)(<nil>),
           MinItems: (*int64)(<nil>),
           UniqueItems: (bool) false,
           MultipleOf: (*float64)(<nil>),
           Enum: ([]interface {}) <nil>
          },
          SimpleSchema: (spec.SimpleSchema) {
           Type: (string) (len=6) "string",
           Format: (string) (len=8) "mongo-id",
           Items: (*spec.Items)(<nil>),
           CollectionFormat: (string) "",
           Default: (interface {}) <nil>,
           Example: (interface {}) <nil>
          },
          VendorExtensible: (spec.VendorExtensible) {
           Extensions: (spec.Extensions) <nil>
          },
          ParamProps: (spec.ParamProps) {
           Description: (string) "",
           Name: (string) (len=5) "appID",
           In: (string) (len=4) "path",
           Required: (bool) true,
           Schema: (*spec.Schema)(<nil>),
           AllowEmptyValue: (bool) false
          }
         }
        },
        Responses: (*spec.Responses)(0xc000863fa0)({
         VendorExtensible: (spec.VendorExtensible) {
          Extensions: (spec.Extensions) <nil>
         },
         ResponsesProps: (spec.ResponsesProps) {
          Default: (*spec.Response)(<nil>),
          StatusCodeResponses: (map[int]spec.Response) (len=1) {
           (int) 200: (spec.Response) {
            Refable: (spec.Refable) {
             Ref: (spec.Ref) 
            },
            ResponseProps: (spec.ResponseProps) {
             Description: (string) (len=15) "The created app",
             Schema: (*spec.Schema)(0xc00030e240)({
              VendorExtensible: (spec.VendorExtensible) {
               Extensions: (spec.Extensions) <nil>
              },
              SchemaProps: (spec.SchemaProps) {
               ID: (string) "",
               Ref: (spec.Ref) #/definitions/App,
               Schema: (spec.SchemaURL) "",
               Description: (string) "",
               Type: (spec.StringOrArray) <nil>,
               Format: (string) "",
               Title: (string) "",
               Default: (interface {}) <nil>,
               Maximum: (*float64)(<nil>),
               ExclusiveMaximum: (bool) false,
               Minimum: (*float64)(<nil>),
               ExclusiveMinimum: (bool) false,
               MaxLength: (*int64)(<nil>),
               MinLength: (*int64)(<nil>),
               Pattern: (string) "",
               MaxItems: (*int64)(<nil>),
               MinItems: (*int64)(<nil>),
               UniqueItems: (bool) false,
               MultipleOf: (*float64)(<nil>),
               Enum: ([]interface {}) <nil>,
               MaxProperties: (*int64)(<nil>),
               MinProperties: (*int64)(<nil>),
               Required: ([]string) <nil>,
               Items: (*spec.SchemaOrArray)(<nil>),
               AllOf: ([]spec.Schema) <nil>,
               OneOf: ([]spec.Schema) <nil>,
               AnyOf: ([]spec.Schema) <nil>,
               Not: (*spec.Schema)(<nil>),
               Properties: (map[string]spec.Schema) <nil>,
               AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
               PatternProperties: (map[string]spec.Schema) <nil>,
               Dependencies: (spec.Dependencies) <nil>,
               AdditionalItems: (*spec.SchemaOrBool)(<nil>),
               Definitions: (spec.Definitions) <nil>
              },
              SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
               Discriminator: (string) "",
               ReadOnly: (bool) false,
               XML: (*spec.XMLObject)(<nil>),
               ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
               Example: (interface {}) <nil>
              },
              ExtraProps: (map[string]interface {}) <nil>
             }),
             Headers: (map[string]spec.Header) <nil>,
             Examples: (map[string]interface {}) <nil>
            },
            VendorExtensible: (spec.VendorExtensible) {
             Extensions: (spec.Extensions) <nil>
            }
           }
          }
         }
        })
       }
      }),
      Post: (*spec.Operation)(<nil>),
      Delete: (*spec.Operation)(0xc0003af420)({
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       OperationProps: (spec.OperationProps) {
        Description: (string) "",
        Consumes: ([]string) <nil>,
        Produces: ([]string) <nil>,
        Schemes: ([]string) <nil>,
        Tags: ([]string) <nil>,
        Summary: (string) (len=21) "Delete an application",
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        ID: (string) (len=9) "deleteApp",
        Deprecated: (bool) false,
        Security: ([]map[string][]string) <nil>,
        Parameters: ([]spec.Parameter) (len=1 cap=4) {
         (spec.Parameter) {
          Refable: (spec.Refable) {
           Ref: (spec.Ref) 
          },
          CommonValidations: (spec.CommonValidations) {
           Maximum: (*float64)(<nil>),
           ExclusiveMaximum: (bool) false,
           Minimum: (*float64)(<nil>),
           ExclusiveMinimum: (bool) false,
           MaxLength: (*int64)(<nil>),
           MinLength: (*int64)(<nil>),
           Pattern: (string) "",
           MaxItems: (*int64)(<nil>),
           MinItems: (*int64)(<nil>),
           UniqueItems: (bool) false,
           MultipleOf: (*float64)(<nil>),
           Enum: ([]interface {}) <nil>
          },
          SimpleSchema: (spec.SimpleSchema) {
           Type: (string) (len=6) "string",
           Format: (string) (len=8) "mongo-id",
           Items: (*spec.Items)(<nil>),
           CollectionFormat: (string) "",
           Default: (interface {}) <nil>,
           Example: (interface {}) <nil>
          },
          VendorExtensible: (spec.VendorExtensible) {
           Extensions: (spec.Extensions) <nil>
          },
          ParamProps: (spec.ParamProps) {
           Description: (string) "",
           Name: (string) (len=5) "appID",
           In: (string) (len=4) "path",
           Required: (bool) true,
           Schema: (*spec.Schema)(<nil>),
           AllowEmptyValue: (bool) false
          }
         }
        },
        Responses: (*spec.Responses)(0xc0008a0d40)({
         VendorExtensible: (spec.VendorExtensible) {
          Extensions: (spec.Extensions) <nil>
         },
         ResponsesProps: (spec.ResponsesProps) {
          Default: (*spec.Response)(<nil>),
          StatusCodeResponses: (map[int]spec.Response) (len=2) {
           (int) 200: (spec.Response) {
            Refable: (spec.Refable) {
             Ref: (spec.Ref) 
            },
            ResponseProps: (spec.ResponseProps) {
             Description: (string) (len=11) "OK response",
             Schema: (*spec.Schema)(<nil>),
             Headers: (map[string]spec.Header) <nil>,
             Examples: (map[string]interface {}) <nil>
            },
            VendorExtensible: (spec.VendorExtensible) {
             Extensions: (spec.Extensions) <nil>
            }
           },
           (int) 404: (spec.Response) {
            Refable: (spec.Refable) {
             Ref: (spec.Ref) #/responses/NotFound
            },
            ResponseProps: (spec.ResponseProps) {
             Description: (string) "",
             Schema: (*spec.Schema)(<nil>),
             Headers: (map[string]spec.Header) <nil>,
             Examples: (map[string]interface {}) <nil>
            },
            VendorExtensible: (spec.VendorExtensible) {
             Extensions: (spec.Extensions) <nil>
            }
           }
          }
         }
        })
       }
      }),
      Options: (*spec.Operation)(<nil>),
      Head: (*spec.Operation)(<nil>),
      Patch: (*spec.Operation)(0xc0003af340)({
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       OperationProps: (spec.OperationProps) {
        Description: (string) "",
        Consumes: ([]string) <nil>,
        Produces: ([]string) <nil>,
        Schemes: ([]string) <nil>,
        Tags: ([]string) <nil>,
        Summary: (string) (len=21) "Update an application",
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        ID: (string) (len=9) "updateApp",
        Deprecated: (bool) false,
        Security: ([]map[string][]string) <nil>,
        Parameters: ([]spec.Parameter) (len=3 cap=4) {
         (spec.Parameter) {
          Refable: (spec.Refable) {
           Ref: (spec.Ref) 
          },
          CommonValidations: (spec.CommonValidations) {
           Maximum: (*float64)(<nil>),
           ExclusiveMaximum: (bool) false,
           Minimum: (*float64)(<nil>),
           ExclusiveMinimum: (bool) false,
           MaxLength: (*int64)(<nil>),
           MinLength: (*int64)(<nil>),
           Pattern: (string) "",
           MaxItems: (*int64)(<nil>),
           MinItems: (*int64)(<nil>),
           UniqueItems: (bool) false,
           MultipleOf: (*float64)(<nil>),
           Enum: ([]interface {}) <nil>
          },
          SimpleSchema: (spec.SimpleSchema) {
           Type: (string) (len=6) "string",
           Format: (string) (len=8) "mongo-id",
           Items: (*spec.Items)(<nil>),
           CollectionFormat: (string) "",
           Default: (interface {}) <nil>,
           Example: (interface {}) <nil>
          },
          VendorExtensible: (spec.VendorExtensible) {
           Extensions: (spec.Extensions) <nil>
          },
          ParamProps: (spec.ParamProps) {
           Description: (string) "",
           Name: (string) (len=5) "appID",
           In: (string) (len=4) "path",
           Required: (bool) true,
           Schema: (*spec.Schema)(<nil>),
           AllowEmptyValue: (bool) false
          }
         },
         (spec.Parameter) {
          Refable: (spec.Refable) {
           Ref: (spec.Ref) 
          },
          CommonValidations: (spec.CommonValidations) {
           Maximum: (*float64)(<nil>),
           ExclusiveMaximum: (bool) false,
           Minimum: (*float64)(<nil>),
           ExclusiveMinimum: (bool) false,
           MaxLength: (*int64)(<nil>),
           MinLength: (*int64)(<nil>),
           Pattern: (string) "",
           MaxItems: (*int64)(<nil>),
           MinItems: (*int64)(<nil>),
           UniqueItems: (bool) false,
           MultipleOf: (*float64)(<nil>),
           Enum: ([]interface {}) <nil>
          },
          SimpleSchema: (spec.SimpleSchema) {
           Type: (string) (len=7) "boolean",
           Format: (string) "",
           Items: (*spec.Items)(<nil>),
           CollectionFormat: (string) "",
           Default: (interface {}) <nil>,
           Example: (interface {}) <nil>
          },
          VendorExtensible: (spec.VendorExtensible) {
           Extensions: (spec.Extensions) <nil>
          },
          ParamProps: (spec.ParamProps) {
           Description: (string) (len=133) "If scopes change, then the app schema will be updated. This flag will propagate app schema updates to all connection schemas as well\n",
           Name: (string) (len=21) "withSchemaPropagation",
           In: (string) (len=5) "query",
           Required: (bool) false,
           Schema: (*spec.Schema)(<nil>),
           AllowEmptyValue: (bool) false
          }
         },
         (spec.Parameter) {
          Refable: (spec.Refable) {
           Ref: (spec.Ref) 
          },
          CommonValidations: (spec.CommonValidations) {
           Maximum: (*float64)(<nil>),
           ExclusiveMaximum: (bool) false,
           Minimum: (*float64)(<nil>),
           ExclusiveMinimum: (bool) false,
           MaxLength: (*int64)(<nil>),
           MinLength: (*int64)(<nil>),
           Pattern: (string) "",
           MaxItems: (*int64)(<nil>),
           MinItems: (*int64)(<nil>),
           UniqueItems: (bool) false,
           MultipleOf: (*float64)(<nil>),
           Enum: ([]interface {}) <nil>
          },
          SimpleSchema: (spec.SimpleSchema) {
           Type: (string) "",
           Format: (string) "",
           Items: (*spec.Items)(<nil>),
           CollectionFormat: (string) "",
           Default: (interface {}) <nil>,
           Example: (interface {}) <nil>
          },
          VendorExtensible: (spec.VendorExtensible) {
           Extensions: (spec.Extensions) <nil>
          },
          ParamProps: (spec.ParamProps) {
           Description: (string) "",
           Name: (string) (len=3) "app",
           In: (string) (len=4) "body",
           Required: (bool) true,
           Schema: (*spec.Schema)(0xc00030f440)({
            VendorExtensible: (spec.VendorExtensible) {
             Extensions: (spec.Extensions) <nil>
            },
            SchemaProps: (spec.SchemaProps) {
             ID: (string) "",
             Ref: (spec.Ref) #/definitions/PatchAppRequest,
             Schema: (spec.SchemaURL) "",
             Description: (string) "",
             Type: (spec.StringOrArray) <nil>,
             Format: (string) "",
             Title: (string) "",
             Default: (interface {}) <nil>,
             Maximum: (*float64)(<nil>),
             ExclusiveMaximum: (bool) false,
             Minimum: (*float64)(<nil>),
             ExclusiveMinimum: (bool) false,
             MaxLength: (*int64)(<nil>),
             MinLength: (*int64)(<nil>),
             Pattern: (string) "",
             MaxItems: (*int64)(<nil>),
             MinItems: (*int64)(<nil>),
             UniqueItems: (bool) false,
             MultipleOf: (*float64)(<nil>),
             Enum: ([]interface {}) <nil>,
             MaxProperties: (*int64)(<nil>),
             MinProperties: (*int64)(<nil>),
             Required: ([]string) <nil>,
             Items: (*spec.SchemaOrArray)(<nil>),
             AllOf: ([]spec.Schema) <nil>,
             OneOf: ([]spec.Schema) <nil>,
             AnyOf: ([]spec.Schema) <nil>,
             Not: (*spec.Schema)(<nil>),
             Properties: (map[string]spec.Schema) <nil>,
             AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
             PatternProperties: (map[string]spec.Schema) <nil>,
             Dependencies: (spec.Dependencies) <nil>,
             AdditionalItems: (*spec.SchemaOrBool)(<nil>),
             Definitions: (spec.Definitions) <nil>
            },
            SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
             Discriminator: (string) "",
             ReadOnly: (bool) false,
             XML: (*spec.XMLObject)(<nil>),
             ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
             Example: (interface {}) <nil>
            },
            ExtraProps: (map[string]interface {}) <nil>
           }),
           AllowEmptyValue: (bool) false
          }
         }
        },
        Responses: (*spec.Responses)(0xc0008a0940)({
         VendorExtensible: (spec.VendorExtensible) {
          Extensions: (spec.Extensions) <nil>
         },
         ResponsesProps: (spec.ResponsesProps) {
          Default: (*spec.Response)(<nil>),
          StatusCodeResponses: (map[int]spec.Response) (len=2) {
           (int) 404: (spec.Response) {
            Refable: (spec.Refable) {
             Ref: (spec.Ref) #/responses/NotFound
            },
            ResponseProps: (spec.ResponseProps) {
             Description: (string) "",
             Schema: (*spec.Schema)(<nil>),
             Headers: (map[string]spec.Header) <nil>,
             Examples: (map[string]interface {}) <nil>
            },
            VendorExtensible: (spec.VendorExtensible) {
             Extensions: (spec.Extensions) <nil>
            }
           },
           (int) 200: (spec.Response) {
            Refable: (spec.Refable) {
             Ref: (spec.Ref) 
            },
            ResponseProps: (spec.ResponseProps) {
             Description: (string) (len=11) "OK response",
             Schema: (*spec.Schema)(0xc00030fd40)({
              VendorExtensible: (spec.VendorExtensible) {
               Extensions: (spec.Extensions) <nil>
              },
              SchemaProps: (spec.SchemaProps) {
               ID: (string) "",
               Ref: (spec.Ref) #/definitions/App,
               Schema: (spec.SchemaURL) "",
               Description: (string) "",
               Type: (spec.StringOrArray) <nil>,
               Format: (string) "",
               Title: (string) "",
               Default: (interface {}) <nil>,
               Maximum: (*float64)(<nil>),
               ExclusiveMaximum: (bool) false,
               Minimum: (*float64)(<nil>),
               ExclusiveMinimum: (bool) false,
               MaxLength: (*int64)(<nil>),
               MinLength: (*int64)(<nil>),
               Pattern: (string) "",
               MaxItems: (*int64)(<nil>),
               MinItems: (*int64)(<nil>),
               UniqueItems: (bool) false,
               MultipleOf: (*float64)(<nil>),
               Enum: ([]interface {}) <nil>,
               MaxProperties: (*int64)(<nil>),
               MinProperties: (*int64)(<nil>),
               Required: ([]string) <nil>,
               Items: (*spec.SchemaOrArray)(<nil>),
               AllOf: ([]spec.Schema) <nil>,
               OneOf: ([]spec.Schema) <nil>,
               AnyOf: ([]spec.Schema) <nil>,
               Not: (*spec.Schema)(<nil>),
               Properties: (map[string]spec.Schema) <nil>,
               AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
               PatternProperties: (map[string]spec.Schema) <nil>,
               Dependencies: (spec.Dependencies) <nil>,
               AdditionalItems: (*spec.SchemaOrBool)(<nil>),
               Definitions: (spec.Definitions) <nil>
              },
              SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
               Discriminator: (string) "",
               ReadOnly: (bool) false,
               XML: (*spec.XMLObject)(<nil>),
               ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
               Example: (interface {}) <nil>
              },
              ExtraProps: (map[string]interface {}) <nil>
             }),
             Headers: (map[string]spec.Header) <nil>,
             Examples: (map[string]interface {}) <nil>
            },
            VendorExtensible: (spec.VendorExtensible) {
             Extensions: (spec.Extensions) <nil>
            }
           }
          }
         }
        })
       }
      }),
      Parameters: ([]spec.Parameter) <nil>
     }
    },
    (string) (len=25) "/v1/admins/{adminID}/apps": (spec.PathItem) {
     Refable: (spec.Refable) {
      Ref: (spec.Ref) 
     },
     VendorExtensible: (spec.VendorExtensible) {
      Extensions: (spec.Extensions) <nil>
     },
     PathItemProps: (spec.PathItemProps) {
      Get: (*spec.Operation)(0xc0003af5e0)({
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       OperationProps: (spec.OperationProps) {
        Description: (string) "",
        Consumes: ([]string) <nil>,
        Produces: ([]string) <nil>,
        Schemes: ([]string) <nil>,
        Tags: ([]string) <nil>,
        Summary: (string) (len=32) "Apps an admin is associated with",
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        ID: (string) (len=25) "getAppsForAdminDeprecated",
        Deprecated: (bool) true,
        Security: ([]map[string][]string) <nil>,
        Parameters: ([]spec.Parameter) (len=1 cap=4) {
         (spec.Parameter) {
          Refable: (spec.Refable) {
           Ref: (spec.Ref) 
          },
          CommonValidations: (spec.CommonValidations) {
           Maximum: (*float64)(<nil>),
           ExclusiveMaximum: (bool) false,
           Minimum: (*float64)(<nil>),
           ExclusiveMinimum: (bool) false,
           MaxLength: (*int64)(<nil>),
           MinLength: (*int64)(<nil>),
           Pattern: (string) "",
           MaxItems: (*int64)(<nil>),
           MinItems: (*int64)(<nil>),
           UniqueItems: (bool) false,
           MultipleOf: (*float64)(<nil>),
           Enum: ([]interface {}) <nil>
          },
          SimpleSchema: (spec.SimpleSchema) {
           Type: (string) (len=6) "string",
           Format: (string) "",
           Items: (*spec.Items)(<nil>),
           CollectionFormat: (string) "",
           Default: (interface {}) <nil>,
           Example: (interface {}) <nil>
          },
          VendorExtensible: (spec.VendorExtensible) {
           Extensions: (spec.Extensions) <nil>
          },
          ParamProps: (spec.ParamProps) {
           Description: (string) "",
           Name: (string) (len=7) "adminID",
           In: (string) (len=4) "path",
           Required: (bool) true,
           Schema: (*spec.Schema)(<nil>),
           AllowEmptyValue: (bool) false
          }
         }
        },
        Responses: (*spec.Responses)(0xc0008a12a0)({
         VendorExtensible: (spec.VendorExtensible) {
          Extensions: (spec.Extensions) <nil>
         },
         ResponsesProps: (spec.ResponsesProps) {
          Default: (*spec.Response)(<nil>),
          StatusCodeResponses: (map[int]spec.Response) (len=2) {
           (int) 200: (spec.Response) {
            Refable: (spec.Refable) {
             Ref: (spec.Ref) 
            },
            ResponseProps: (spec.ResponseProps) {
             Description: (string) (len=4) "Apps",
             Schema: (*spec.Schema)(0xc000306fc0)({
              VendorExtensible: (spec.VendorExtensible) {
               Extensions: (spec.Extensions) <nil>
              },
              SchemaProps: (spec.SchemaProps) {
               ID: (string) "",
               Ref: (spec.Ref) ,
               Schema: (spec.SchemaURL) "",
               Description: (string) "",
               Type: (spec.StringOrArray) (len=1 cap=1) {
                (string) (len=5) "array"
               },
               Format: (string) "",
               Title: (string) "",
               Default: (interface {}) <nil>,
               Maximum: (*float64)(<nil>),
               ExclusiveMaximum: (bool) false,
               Minimum: (*float64)(<nil>),
               ExclusiveMinimum: (bool) false,
               MaxLength: (*int64)(<nil>),
               MinLength: (*int64)(<nil>),
               Pattern: (string) "",
               MaxItems: (*int64)(<nil>),
               MinItems: (*int64)(<nil>),
               UniqueItems: (bool) false,
               MultipleOf: (*float64)(<nil>),
               Enum: ([]interface {}) <nil>,
               MaxProperties: (*int64)(<nil>),
               MinProperties: (*int64)(<nil>),
               Required: ([]string) <nil>,
               Items: (*spec.SchemaOrArray)(0xc0008a12c0)({
                Schema: (*spec.Schema)(0xc0003078c0)({
                 VendorExtensible: (spec.VendorExtensible) {
                  Extensions: (spec.Extensions) <nil>
                 },
                 SchemaProps: (spec.SchemaProps) {
                  ID: (string) "",
                  Ref: (spec.Ref) #/definitions/App,
                  Schema: (spec.SchemaURL) "",
                  Description: (string) "",
                  Type: (spec.StringOrArray) <nil>,
                  Format: (string) "",
                  Title: (string) "",
                  Default: (interface {}) <nil>,
                  Maximum: (*float64)(<nil>),
                  ExclusiveMaximum: (bool) false,
                  Minimum: (*float64)(<nil>),
                  ExclusiveMinimum: (bool) false,
                  MaxLength: (*int64)(<nil>),
                  MinLength: (*int64)(<nil>),
                  Pattern: (string) "",
                  MaxItems: (*int64)(<nil>),
                  MinItems: (*int64)(<nil>),
                  UniqueItems: (bool) false,
                  MultipleOf: (*float64)(<nil>),
                  Enum: ([]interface {}) <nil>,
                  MaxProperties: (*int64)(<nil>),
                  MinProperties: (*int64)(<nil>),
                  Required: ([]string) <nil>,
                  Items: (*spec.SchemaOrArray)(<nil>),
                  AllOf: ([]spec.Schema) <nil>,
                  OneOf: ([]spec.Schema) <nil>,
                  AnyOf: ([]spec.Schema) <nil>,
                  Not: (*spec.Schema)(<nil>),
                  Properties: (map[string]spec.Schema) <nil>,
                  AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
                  PatternProperties: (map[string]spec.Schema) <nil>,
                  Dependencies: (spec.Dependencies) <nil>,
                  AdditionalItems: (*spec.SchemaOrBool)(<nil>),
                  Definitions: (spec.Definitions) <nil>
                 },
                 SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
                  Discriminator: (string) "",
                  ReadOnly: (bool) false,
                  XML: (*spec.XMLObject)(<nil>),
                  ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
                  Example: (interface {}) <nil>
                 },
                 ExtraProps: (map[string]interface {}) <nil>
                }),
                Schemas: ([]spec.Schema) <nil>
               }),
               AllOf: ([]spec.Schema) <nil>,
               OneOf: ([]spec.Schema) <nil>,
               AnyOf: ([]spec.Schema) <nil>,
               Not: (*spec.Schema)(<nil>),
               Properties: (map[string]spec.Schema) <nil>,
               AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
               PatternProperties: (map[string]spec.Schema) <nil>,
               Dependencies: (spec.Dependencies) <nil>,
               AdditionalItems: (*spec.SchemaOrBool)(<nil>),
               Definitions: (spec.Definitions) <nil>
              },
              SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
               Discriminator: (string) "",
               ReadOnly: (bool) false,
               XML: (*spec.XMLObject)(<nil>),
               ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
               Example: (interface {}) <nil>
              },
              ExtraProps: (map[string]interface {}) <nil>
             }),
             Headers: (map[string]spec.Header) <nil>,
             Examples: (map[string]interface {}) <nil>
            },
            VendorExtensible: (spec.VendorExtensible) {
             Extensions: (spec.Extensions) <nil>
            }
           },
           (int) 404: (spec.Response) {
            Refable: (spec.Refable) {
             Ref: (spec.Ref) #/responses/NotFound
            },
            ResponseProps: (spec.ResponseProps) {
             Description: (string) "",
             Schema: (*spec.Schema)(<nil>),
             Headers: (map[string]spec.Header) <nil>,
             Examples: (map[string]interface {}) <nil>
            },
            VendorExtensible: (spec.VendorExtensible) {
             Extensions: (spec.Extensions) <nil>
            }
           }
          }
         }
        })
       }
      }),
      Put: (*spec.Operation)(<nil>),
      Post: (*spec.Operation)(<nil>),
      Delete: (*spec.Operation)(<nil>),
      Options: (*spec.Operation)(<nil>),
      Head: (*spec.Operation)(<nil>),
      Patch: (*spec.Operation)(<nil>),
      Parameters: ([]spec.Parameter) <nil>
     }
    },
    (string) (len=15) "/v1/permissions": (spec.PathItem) {
     Refable: (spec.Refable) {
      Ref: (spec.Ref) 
     },
     VendorExtensible: (spec.VendorExtensible) {
      Extensions: (spec.Extensions) <nil>
     },
     PathItemProps: (spec.PathItemProps) {
      Get: (*spec.Operation)(0xc0003af6c0)({
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       OperationProps: (spec.OperationProps) {
        Description: (string) "",
        Consumes: ([]string) <nil>,
        Produces: ([]string) <nil>,
        Schemes: ([]string) <nil>,
        Tags: ([]string) <nil>,
        Summary: (string) (len=26) "Get all valid permissions.",
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        ID: (string) (len=19) "getValidPermissions",
        Deprecated: (bool) false,
        Security: ([]map[string][]string) <nil>,
        Parameters: ([]spec.Parameter) <nil>,
        Responses: (*spec.Responses)(0xc0008a1620)({
         VendorExtensible: (spec.VendorExtensible) {
          Extensions: (spec.Extensions) <nil>
         },
         ResponsesProps: (spec.ResponsesProps) {
          Default: (*spec.Response)(<nil>),
          StatusCodeResponses: (map[int]spec.Response) (len=1) {
           (int) 200: (spec.Response) {
            Refable: (spec.Refable) {
             Ref: (spec.Ref) 
            },
            ResponseProps: (spec.ResponseProps) {
             Description: (string) (len=11) "Permissions",
             Schema: (*spec.Schema)(0xc000300480)({
              VendorExtensible: (spec.VendorExtensible) {
               Extensions: (spec.Extensions) <nil>
              },
              SchemaProps: (spec.SchemaProps) {
               ID: (string) "",
               Ref: (spec.Ref) #/definitions/GetValidPermissionsResponse,
               Schema: (spec.SchemaURL) "",
               Description: (string) "",
               Type: (spec.StringOrArray) <nil>,
               Format: (string) "",
               Title: (string) "",
               Default: (interface {}) <nil>,
               Maximum: (*float64)(<nil>),
               ExclusiveMaximum: (bool) false,
               Minimum: (*float64)(<nil>),
               ExclusiveMinimum: (bool) false,
               MaxLength: (*int64)(<nil>),
               MinLength: (*int64)(<nil>),
               Pattern: (string) "",
               MaxItems: (*int64)(<nil>),
               MinItems: (*int64)(<nil>),
               UniqueItems: (bool) false,
               MultipleOf: (*float64)(<nil>),
               Enum: ([]interface {}) <nil>,
               MaxProperties: (*int64)(<nil>),
               MinProperties: (*int64)(<nil>),
               Required: ([]string) <nil>,
               Items: (*spec.SchemaOrArray)(<nil>),
               AllOf: ([]spec.Schema) <nil>,
               OneOf: ([]spec.Schema) <nil>,
               AnyOf: ([]spec.Schema) <nil>,
               Not: (*spec.Schema)(<nil>),
               Properties: (map[string]spec.Schema) <nil>,
               AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
               PatternProperties: (map[string]spec.Schema) <nil>,
               Dependencies: (spec.Dependencies) <nil>,
               AdditionalItems: (*spec.SchemaOrBool)(<nil>),
               Definitions: (spec.Definitions) <nil>
              },
              SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
               Discriminator: (string) "",
               ReadOnly: (bool) false,
               XML: (*spec.XMLObject)(<nil>),
               ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
               Example: (interface {}) <nil>
              },
              ExtraProps: (map[string]interface {}) <nil>
             }),
             Headers: (map[string]spec.Header) <nil>,
             Examples: (map[string]interface {}) <nil>
            },
            VendorExtensible: (spec.VendorExtensible) {
             Extensions: (spec.Extensions) <nil>
            }
           }
          }
         }
        })
       }
      }),
      Put: (*spec.Operation)(<nil>),
      Post: (*spec.Operation)(<nil>),
      Delete: (*spec.Operation)(<nil>),
      Options: (*spec.Operation)(<nil>),
      Head: (*spec.Operation)(<nil>),
      Patch: (*spec.Operation)(<nil>),
      Parameters: ([]spec.Parameter) <nil>
     }
    },
    (string) (len=33) "/v1/apps/{appID}/admins/{adminID}": (spec.PathItem) {
     Refable: (spec.Refable) {
      Ref: (spec.Ref) 
     },
     VendorExtensible: (spec.VendorExtensible) {
      Extensions: (spec.Extensions) <nil>
     },
     PathItemProps: (spec.PathItemProps) {
      Get: (*spec.Operation)(<nil>),
      Put: (*spec.Operation)(0xc0000e08c0)({
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       OperationProps: (spec.OperationProps) {
        Description: (string) "",
        Consumes: ([]string) <nil>,
        Produces: ([]string) <nil>,
        Schemes: ([]string) <nil>,
        Tags: ([]string) <nil>,
        Summary: (string) (len=22) "Add an admin to an app",
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        ID: (string) (len=12) "linkAppAdmin",
        Deprecated: (bool) false,
        Security: ([]map[string][]string) <nil>,
        Parameters: ([]spec.Parameter) (len=3 cap=4) {
         (spec.Parameter) {
          Refable: (spec.Refable) {
           Ref: (spec.Ref) 
          },
          CommonValidations: (spec.CommonValidations) {
           Maximum: (*float64)(<nil>),
           ExclusiveMaximum: (bool) false,
           Minimum: (*float64)(<nil>),
           ExclusiveMinimum: (bool) false,
           MaxLength: (*int64)(<nil>),
           MinLength: (*int64)(<nil>),
           Pattern: (string) "",
           MaxItems: (*int64)(<nil>),
           MinItems: (*int64)(<nil>),
           UniqueItems: (bool) false,
           MultipleOf: (*float64)(<nil>),
           Enum: ([]interface {}) <nil>
          },
          SimpleSchema: (spec.SimpleSchema) {
           Type: (string) (len=6) "string",
           Format: (string) "",
           Items: (*spec.Items)(<nil>),
           CollectionFormat: (string) "",
           Default: (interface {}) <nil>,
           Example: (interface {}) <nil>
          },
          VendorExtensible: (spec.VendorExtensible) {
           Extensions: (spec.Extensions) <nil>
          },
          ParamProps: (spec.ParamProps) {
           Description: (string) "",
           Name: (string) (len=5) "appID",
           In: (string) (len=4) "path",
           Required: (bool) true,
           Schema: (*spec.Schema)(<nil>),
           AllowEmptyValue: (bool) false
          }
         },
         (spec.Parameter) {
          Refable: (spec.Refable) {
           Ref: (spec.Ref) 
          },
          CommonValidations: (spec.CommonValidations) {
           Maximum: (*float64)(<nil>),
           ExclusiveMaximum: (bool) false,
           Minimum: (*float64)(<nil>),
           ExclusiveMinimum: (bool) false,
           MaxLength: (*int64)(<nil>),
           MinLength: (*int64)(<nil>),
           Pattern: (string) "",
           MaxItems: (*int64)(<nil>),
           MinItems: (*int64)(<nil>),
           UniqueItems: (bool) false,
           MultipleOf: (*float64)(<nil>),
           Enum: ([]interface {}) <nil>
          },
          SimpleSchema: (spec.SimpleSchema) {
           Type: (string) (len=6) "string",
           Format: (string) "",
           Items: (*spec.Items)(<nil>),
           CollectionFormat: (string) "",
           Default: (interface {}) <nil>,
           Example: (interface {}) <nil>
          },
          VendorExtensible: (spec.VendorExtensible) {
           Extensions: (spec.Extensions) <nil>
          },
          ParamProps: (spec.ParamProps) {
           Description: (string) "",
           Name: (string) (len=7) "adminID",
           In: (string) (len=4) "path",
           Required: (bool) true,
           Schema: (*spec.Schema)(<nil>),
           AllowEmptyValue: (bool) false
          }
         },
         (spec.Parameter) {
          Refable: (spec.Refable) {
           Ref: (spec.Ref) 
          },
          CommonValidations: (spec.CommonValidations) {
           Maximum: (*float64)(<nil>),
           ExclusiveMaximum: (bool) false,
           Minimum: (*float64)(<nil>),
           ExclusiveMinimum: (bool) false,
           MaxLength: (*int64)(<nil>),
           MinLength: (*int64)(<nil>),
           Pattern: (string) "",
           MaxItems: (*int64)(<nil>),
           MinItems: (*int64)(<nil>),
           UniqueItems: (bool) false,
           MultipleOf: (*float64)(<nil>),
           Enum: ([]interface {}) <nil>
          },
          SimpleSchema: (spec.SimpleSchema) {
           Type: (string) "",
           Format: (string) "",
           Items: (*spec.Items)(<nil>),
           CollectionFormat: (string) "",
           Default: (interface {}) <nil>,
           Example: (interface {}) <nil>
          },
          VendorExtensible: (spec.VendorExtensible) {
           Extensions: (spec.Extensions) <nil>
          },
          ParamProps: (spec.ParamProps) {
           Description: (string) "",
           Name: (string) (len=11) "permissions",
           In: (string) (len=4) "body",
           Required: (bool) true,
           Schema: (*spec.Schema)(0xc0003bed80)({
            VendorExtensible: (spec.VendorExtensible) {
             Extensions: (spec.Extensions) <nil>
            },
            SchemaProps: (spec.SchemaProps) {
             ID: (string) "",
             Ref: (spec.Ref) #/definitions/PermissionList,
             Schema: (spec.SchemaURL) "",
             Description: (string) "",
             Type: (spec.StringOrArray) <nil>,
             Format: (string) "",
             Title: (string) "",
             Default: (interface {}) <nil>,
             Maximum: (*float64)(<nil>),
             ExclusiveMaximum: (bool) false,
             Minimum: (*float64)(<nil>),
             ExclusiveMinimum: (bool) false,
             MaxLength: (*int64)(<nil>),
             MinLength: (*int64)(<nil>),
             Pattern: (string) "",
             MaxItems: (*int64)(<nil>),
             MinItems: (*int64)(<nil>),
             UniqueItems: (bool) false,
             MultipleOf: (*float64)(<nil>),
             Enum: ([]interface {}) <nil>,
             MaxProperties: (*int64)(<nil>),
             MinProperties: (*int64)(<nil>),
             Required: ([]string) <nil>,
             Items: (*spec.SchemaOrArray)(<nil>),
             AllOf: ([]spec.Schema) <nil>,
             OneOf: ([]spec.Schema) <nil>,
             AnyOf: ([]spec.Schema) <nil>,
             Not: (*spec.Schema)(<nil>),
             Properties: (map[string]spec.Schema) <nil>,
             AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
             PatternProperties: (map[string]spec.Schema) <nil>,
             Dependencies: (spec.Dependencies) <nil>,
             AdditionalItems: (*spec.SchemaOrBool)(<nil>),
             Definitions: (spec.Definitions) <nil>
            },
            SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
             Discriminator: (string) "",
             ReadOnly: (bool) false,
             XML: (*spec.XMLObject)(<nil>),
             ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
             Example: (interface {}) <nil>
            },
            ExtraProps: (map[string]interface {}) <nil>
           }),
           AllowEmptyValue: (bool) false
          }
         }
        },
        Responses: (*spec.Responses)(0xc0007ff000)({
         VendorExtensible: (spec.VendorExtensible) {
          Extensions: (spec.Extensions) <nil>
         },
         ResponsesProps: (spec.ResponsesProps) {
          Default: (*spec.Response)(<nil>),
          StatusCodeResponses: (map[int]spec.Response) (len=3) {
           (int) 404: (spec.Response) {
            Refable: (spec.Refable) {
             Ref: (spec.Ref) #/responses/NotFound
            },
            ResponseProps: (spec.ResponseProps) {
             Description: (string) "",
             Schema: (*spec.Schema)(<nil>),
             Headers: (map[string]spec.Header) <nil>,
             Examples: (map[string]interface {}) <nil>
            },
            VendorExtensible: (spec.VendorExtensible) {
             Extensions: (spec.Extensions) <nil>
            }
           },
           (int) 200: (spec.Response) {
            Refable: (spec.Refable) {
             Ref: (spec.Ref) 
            },
            ResponseProps: (spec.ResponseProps) {
             Description: (string) (len=11) "OK response",
             Schema: (*spec.Schema)(<nil>),
             Headers: (map[string]spec.Header) <nil>,
             Examples: (map[string]interface {}) <nil>
            },
            VendorExtensible: (spec.VendorExtensible) {
             Extensions: (spec.Extensions) <nil>
            }
           },
           (int) 403: (spec.Response) {
            Refable: (spec.Refable) {
             Ref: (spec.Ref) #/responses/Forbidden
            },
            ResponseProps: (spec.ResponseProps) {
             Description: (string) "",
             Schema: (*spec.Schema)(<nil>),
             Headers: (map[string]spec.Header) <nil>,
             Examples: (map[string]interface {}) <nil>
            },
            VendorExtensible: (spec.VendorExtensible) {
             Extensions: (spec.Extensions) <nil>
            }
           }
          }
         }
        })
       }
      }),
      Post: (*spec.Operation)(<nil>),
      Delete: (*spec.Operation)(0xc0000e09a0)({
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       OperationProps: (spec.OperationProps) {
        Description: (string) "",
        Consumes: ([]string) <nil>,
        Produces: ([]string) <nil>,
        Schemes: ([]string) <nil>,
        Tags: ([]string) <nil>,
        Summary: (string) (len=27) "Remove an admin from an app",
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        ID: (string) (len=14) "unlinkAppAdmin",
        Deprecated: (bool) false,
        Security: ([]map[string][]string) <nil>,
        Parameters: ([]spec.Parameter) (len=2 cap=4) {
         (spec.Parameter) {
          Refable: (spec.Refable) {
           Ref: (spec.Ref) 
          },
          CommonValidations: (spec.CommonValidations) {
           Maximum: (*float64)(<nil>),
           ExclusiveMaximum: (bool) false,
           Minimum: (*float64)(<nil>),
           ExclusiveMinimum: (bool) false,
           MaxLength: (*int64)(<nil>),
           MinLength: (*int64)(<nil>),
           Pattern: (string) "",
           MaxItems: (*int64)(<nil>),
           MinItems: (*int64)(<nil>),
           UniqueItems: (bool) false,
           MultipleOf: (*float64)(<nil>),
           Enum: ([]interface {}) <nil>
          },
          SimpleSchema: (spec.SimpleSchema) {
           Type: (string) (len=6) "string",
           Format: (string) "",
           Items: (*spec.Items)(<nil>),
           CollectionFormat: (string) "",
           Default: (interface {}) <nil>,
           Example: (interface {}) <nil>
          },
          VendorExtensible: (spec.VendorExtensible) {
           Extensions: (spec.Extensions) <nil>
          },
          ParamProps: (spec.ParamProps) {
           Description: (string) "",
           Name: (string) (len=5) "appID",
           In: (string) (len=4) "path",
           Required: (bool) true,
           Schema: (*spec.Schema)(<nil>),
           AllowEmptyValue: (bool) false
          }
         },
         (spec.Parameter) {
          Refable: (spec.Refable) {
           Ref: (spec.Ref) 
          },
          CommonValidations: (spec.CommonValidations) {
           Maximum: (*float64)(<nil>),
           ExclusiveMaximum: (bool) false,
           Minimum: (*float64)(<nil>),
           ExclusiveMinimum: (bool) false,
           MaxLength: (*int64)(<nil>),
           MinLength: (*int64)(<nil>),
           Pattern: (string) "",
           MaxItems: (*int64)(<nil>),
           MinItems: (*int64)(<nil>),
           UniqueItems: (bool) false,
           MultipleOf: (*float64)(<nil>),
           Enum: ([]interface {}) <nil>
          },
          SimpleSchema: (spec.SimpleSchema) {
           Type: (string) (len=6) "string",
           Format: (string) "",
           Items: (*spec.Items)(<nil>),
           CollectionFormat: (string) "",
           Default: (interface {}) <nil>,
           Example: (interface {}) <nil>
          },
          VendorExtensible: (spec.VendorExtensible) {
           Extensions: (spec.Extensions) <nil>
          },
          ParamProps: (spec.ParamProps) {
           Description: (string) "",
           Name: (string) (len=7) "adminID",
           In: (string) (len=4) "path",
           Required: (bool) true,
           Schema: (*spec.Schema)(<nil>),
           AllowEmptyValue: (bool) false
          }
         }
        },
        Responses: (*spec.Responses)(0xc0007ffba0)({
         VendorExtensible: (spec.VendorExtensible) {
          Extensions: (spec.Extensions) <nil>
         },
         ResponsesProps: (spec.ResponsesProps) {
          Default: (*spec.Response)(<nil>),
          StatusCodeResponses: (map[int]spec.Response) (len=3) {
           (int) 200: (spec.Response) {
            Refable: (spec.Refable) {
             Ref: (spec.Ref) 
            },
            ResponseProps: (spec.ResponseProps) {
             Description: (string) (len=11) "OK response",
             Schema: (*spec.Schema)(<nil>),
             Headers: (map[string]spec.Header) <nil>,
             Examples: (map[string]interface {}) <nil>
            },
            VendorExtensible: (spec.VendorExtensible) {
             Extensions: (spec.Extensions) <nil>
            }
           },
           (int) 403: (spec.Response) {
            Refable: (spec.Refable) {
             Ref: (spec.Ref) #/responses/Forbidden
            },
            ResponseProps: (spec.ResponseProps) {
             Description: (string) "",
             Schema: (*spec.Schema)(<nil>),
             Headers: (map[string]spec.Header) <nil>,
             Examples: (map[string]interface {}) <nil>
            },
            VendorExtensible: (spec.VendorExtensible) {
             Extensions: (spec.Extensions) <nil>
            }
           },
           (int) 404: (spec.Response) {
            Refable: (spec.Refable) {
             Ref: (spec.Ref) #/responses/NotFound
            },
            ResponseProps: (spec.ResponseProps) {
             Description: (string) "",
             Schema: (*spec.Schema)(<nil>),
             Headers: (map[string]spec.Header) <nil>,
             Examples: (map[string]interface {}) <nil>
            },
            VendorExtensible: (spec.VendorExtensible) {
             Extensions: (spec.Extensions) <nil>
            }
           }
          }
         }
        })
       }
      }),
      Options: (*spec.Operation)(<nil>),
      Head: (*spec.Operation)(<nil>),
      Patch: (*spec.Operation)(<nil>),
      Parameters: ([]spec.Parameter) <nil>
     }
    },
    (string) (len=24) "/v1/apps/{appID}/sharing": (spec.PathItem) {
     Refable: (spec.Refable) {
      Ref: (spec.Ref) 
     },
     VendorExtensible: (spec.VendorExtensible) {
      Extensions: (spec.Extensions) <nil>
     },
     PathItemProps: (spec.PathItemProps) {
      Get: (*spec.Operation)(0xc0000e0c40)({
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       OperationProps: (spec.OperationProps) {
        Description: (string) "",
        Consumes: ([]string) <nil>,
        Produces: ([]string) <nil>,
        Schemes: ([]string) <nil>,
        Tags: ([]string) <nil>,
        Summary: (string) (len=32) "Get recommended sharing settings",
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        ID: (string) (len=21) "getRecommendedSharing",
        Deprecated: (bool) false,
        Security: ([]map[string][]string) <nil>,
        Parameters: ([]spec.Parameter) (len=1 cap=4) {
         (spec.Parameter) {
          Refable: (spec.Refable) {
           Ref: (spec.Ref) 
          },
          CommonValidations: (spec.CommonValidations) {
           Maximum: (*float64)(<nil>),
           ExclusiveMaximum: (bool) false,
           Minimum: (*float64)(<nil>),
           ExclusiveMinimum: (bool) false,
           MaxLength: (*int64)(<nil>),
           MinLength: (*int64)(<nil>),
           Pattern: (string) "",
           MaxItems: (*int64)(<nil>),
           MinItems: (*int64)(<nil>),
           UniqueItems: (bool) false,
           MultipleOf: (*float64)(<nil>),
           Enum: ([]interface {}) <nil>
          },
          SimpleSchema: (spec.SimpleSchema) {
           Type: (string) (len=6) "string",
           Format: (string) "",
           Items: (*spec.Items)(<nil>),
           CollectionFormat: (string) "",
           Default: (interface {}) <nil>,
           Example: (interface {}) <nil>
          },
          VendorExtensible: (spec.VendorExtensible) {
           Extensions: (spec.Extensions) <nil>
          },
          ParamProps: (spec.ParamProps) {
           Description: (string) "",
           Name: (string) (len=5) "appID",
           In: (string) (len=4) "path",
           Required: (bool) true,
           Schema: (*spec.Schema)(<nil>),
           AllowEmptyValue: (bool) false
          }
         }
        },
        Responses: (*spec.Responses)(0xc000821420)({
         VendorExtensible: (spec.VendorExtensible) {
          Extensions: (spec.Extensions) <nil>
         },
         ResponsesProps: (spec.ResponsesProps) {
          Default: (*spec.Response)(<nil>),
          StatusCodeResponses: (map[int]spec.Response) (len=2) {
           (int) 200: (spec.Response) {
            Refable: (spec.Refable) {
             Ref: (spec.Ref) 
            },
            ResponseProps: (spec.ResponseProps) {
             Description: (string) (len=16) "Sharing settings",
             Schema: (*spec.Schema)(0xc0003986c0)({
              VendorExtensible: (spec.VendorExtensible) {
               Extensions: (spec.Extensions) <nil>
              },
              SchemaProps: (spec.SchemaProps) {
               ID: (string) "",
               Ref: (spec.Ref) #/definitions/SharingRecommendations,
               Schema: (spec.SchemaURL) "",
               Description: (string) "",
               Type: (spec.StringOrArray) <nil>,
               Format: (string) "",
               Title: (string) "",
               Default: (interface {}) <nil>,
               Maximum: (*float64)(<nil>),
               ExclusiveMaximum: (bool) false,
               Minimum: (*float64)(<nil>),
               ExclusiveMinimum: (bool) false,
               MaxLength: (*int64)(<nil>),
               MinLength: (*int64)(<nil>),
               Pattern: (string) "",
               MaxItems: (*int64)(<nil>),
               MinItems: (*int64)(<nil>),
               UniqueItems: (bool) false,
               MultipleOf: (*float64)(<nil>),
               Enum: ([]interface {}) <nil>,
               MaxProperties: (*int64)(<nil>),
               MinProperties: (*int64)(<nil>),
               Required: ([]string) <nil>,
               Items: (*spec.SchemaOrArray)(<nil>),
               AllOf: ([]spec.Schema) <nil>,
               OneOf: ([]spec.Schema) <nil>,
               AnyOf: ([]spec.Schema) <nil>,
               Not: (*spec.Schema)(<nil>),
               Properties: (map[string]spec.Schema) <nil>,
               AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
               PatternProperties: (map[string]spec.Schema) <nil>,
               Dependencies: (spec.Dependencies) <nil>,
               AdditionalItems: (*spec.SchemaOrBool)(<nil>),
               Definitions: (spec.Definitions) <nil>
              },
              SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
               Discriminator: (string) "",
               ReadOnly: (bool) false,
               XML: (*spec.XMLObject)(<nil>),
               ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
               Example: (interface {}) <nil>
              },
              ExtraProps: (map[string]interface {}) <nil>
             }),
             Headers: (map[string]spec.Header) <nil>,
             Examples: (map[string]interface {}) <nil>
            },
            VendorExtensible: (spec.VendorExtensible) {
             Extensions: (spec.Extensions) <nil>
            }
           },
           (int) 404: (spec.Response) {
            Refable: (spec.Refable) {
             Ref: (spec.Ref) #/responses/NotFound
            },
            ResponseProps: (spec.ResponseProps) {
             Description: (string) "",
             Schema: (*spec.Schema)(<nil>),
             Headers: (map[string]spec.Header) <nil>,
             Examples: (map[string]interface {}) <nil>
            },
            VendorExtensible: (spec.VendorExtensible) {
             Extensions: (spec.Extensions) <nil>
            }
           }
          }
         }
        })
       }
      }),
      Put: (*spec.Operation)(0xc0000e0d20)({
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       OperationProps: (spec.OperationProps) {
        Description: (string) "",
        Consumes: ([]string) <nil>,
        Produces: ([]string) <nil>,
        Schemes: ([]string) <nil>,
        Tags: ([]string) <nil>,
        Summary: (string) (len=32) "Set recommended sharing settings",
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        ID: (string) (len=21) "setRecommendedSharing",
        Deprecated: (bool) false,
        Security: ([]map[string][]string) <nil>,
        Parameters: ([]spec.Parameter) (len=2 cap=4) {
         (spec.Parameter) {
          Refable: (spec.Refable) {
           Ref: (spec.Ref) 
          },
          CommonValidations: (spec.CommonValidations) {
           Maximum: (*float64)(<nil>),
           ExclusiveMaximum: (bool) false,
           Minimum: (*float64)(<nil>),
           ExclusiveMinimum: (bool) false,
           MaxLength: (*int64)(<nil>),
           MinLength: (*int64)(<nil>),
           Pattern: (string) "",
           MaxItems: (*int64)(<nil>),
           MinItems: (*int64)(<nil>),
           UniqueItems: (bool) false,
           MultipleOf: (*float64)(<nil>),
           Enum: ([]interface {}) <nil>
          },
          SimpleSchema: (spec.SimpleSchema) {
           Type: (string) (len=6) "string",
           Format: (string) "",
           Items: (*spec.Items)(<nil>),
           CollectionFormat: (string) "",
           Default: (interface {}) <nil>,
           Example: (interface {}) <nil>
          },
          VendorExtensible: (spec.VendorExtensible) {
           Extensions: (spec.Extensions) <nil>
          },
          ParamProps: (spec.ParamProps) {
           Description: (string) "",
           Name: (string) (len=5) "appID",
           In: (string) (len=4) "path",
           Required: (bool) true,
           Schema: (*spec.Schema)(<nil>),
           AllowEmptyValue: (bool) false
          }
         },
         (spec.Parameter) {
          Refable: (spec.Refable) {
           Ref: (spec.Ref) 
          },
          CommonValidations: (spec.CommonValidations) {
           Maximum: (*float64)(<nil>),
           ExclusiveMaximum: (bool) false,
           Minimum: (*float64)(<nil>),
           ExclusiveMinimum: (bool) false,
           MaxLength: (*int64)(<nil>),
           MinLength: (*int64)(<nil>),
           Pattern: (string) "",
           MaxItems: (*int64)(<nil>),
           MinItems: (*int64)(<nil>),
           UniqueItems: (bool) false,
           MultipleOf: (*float64)(<nil>),
           Enum: ([]interface {}) <nil>
          },
          SimpleSchema: (spec.SimpleSchema) {
           Type: (string) "",
           Format: (string) "",
           Items: (*spec.Items)(<nil>),
           CollectionFormat: (string) "",
           Default: (interface {}) <nil>,
           Example: (interface {}) <nil>
          },
          VendorExtensible: (spec.VendorExtensible) {
           Extensions: (spec.Extensions) <nil>
          },
          ParamProps: (spec.ParamProps) {
           Description: (string) "",
           Name: (string) (len=15) "recommendations",
           In: (string) (len=4) "body",
           Required: (bool) false,
           Schema: (*spec.Schema)(0xc000398b40)({
            VendorExtensible: (spec.VendorExtensible) {
             Extensions: (spec.Extensions) <nil>
            },
            SchemaProps: (spec.SchemaProps) {
             ID: (string) "",
             Ref: (spec.Ref) #/definitions/SharingRecommendations,
             Schema: (spec.SchemaURL) "",
             Description: (string) "",
             Type: (spec.StringOrArray) <nil>,
             Format: (string) "",
             Title: (string) "",
             Default: (interface {}) <nil>,
             Maximum: (*float64)(<nil>),
             ExclusiveMaximum: (bool) false,
             Minimum: (*float64)(<nil>),
             ExclusiveMinimum: (bool) false,
             MaxLength: (*int64)(<nil>),
             MinLength: (*int64)(<nil>),
             Pattern: (string) "",
             MaxItems: (*int64)(<nil>),
             MinItems: (*int64)(<nil>),
             UniqueItems: (bool) false,
             MultipleOf: (*float64)(<nil>),
             Enum: ([]interface {}) <nil>,
             MaxProperties: (*int64)(<nil>),
             MinProperties: (*int64)(<nil>),
             Required: ([]string) <nil>,
             Items: (*spec.SchemaOrArray)(<nil>),
             AllOf: ([]spec.Schema) <nil>,
             OneOf: ([]spec.Schema) <nil>,
             AnyOf: ([]spec.Schema) <nil>,
             Not: (*spec.Schema)(<nil>),
             Properties: (map[string]spec.Schema) <nil>,
             AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
             PatternProperties: (map[string]spec.Schema) <nil>,
             Dependencies: (spec.Dependencies) <nil>,
             AdditionalItems: (*spec.SchemaOrBool)(<nil>),
             Definitions: (spec.Definitions) <nil>
            },
            SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
             Discriminator: (string) "",
             ReadOnly: (bool) false,
             XML: (*spec.XMLObject)(<nil>),
             ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
             Example: (interface {}) <nil>
            },
            ExtraProps: (map[string]interface {}) <nil>
           }),
           AllowEmptyValue: (bool) false
          }
         }
        },
        Responses: (*spec.Responses)(0xc0008218e0)({
         VendorExtensible: (spec.VendorExtensible) {
          Extensions: (spec.Extensions) <nil>
         },
         ResponsesProps: (spec.ResponsesProps) {
          Default: (*spec.Response)(<nil>),
          StatusCodeResponses: (map[int]spec.Response) (len=2) {
           (int) 200: (spec.Response) {
            Refable: (spec.Refable) {
             Ref: (spec.Ref) 
            },
            ResponseProps: (spec.ResponseProps) {
             Description: (string) (len=11) "OK response",
             Schema: (*spec.Schema)(<nil>),
             Headers: (map[string]spec.Header) <nil>,
             Examples: (map[string]interface {}) <nil>
            },
            VendorExtensible: (spec.VendorExtensible) {
             Extensions: (spec.Extensions) <nil>
            }
           },
           (int) 404: (spec.Response) {
            Refable: (spec.Refable) {
             Ref: (spec.Ref) #/responses/NotFound
            },
            ResponseProps: (spec.ResponseProps) {
             Description: (string) "",
             Schema: (*spec.Schema)(<nil>),
             Headers: (map[string]spec.Header) <nil>,
             Examples: (map[string]interface {}) <nil>
            },
            VendorExtensible: (spec.VendorExtensible) {
             Extensions: (spec.Extensions) <nil>
            }
           }
          }
         }
        })
       }
      }),
      Post: (*spec.Operation)(<nil>),
      Delete: (*spec.Operation)(<nil>),
      Options: (*spec.Operation)(<nil>),
      Head: (*spec.Operation)(<nil>),
      Patch: (*spec.Operation)(<nil>),
      Parameters: ([]spec.Parameter) <nil>
     }
    },
    (string) (len=30) "/v1/analytics/apps/{shortname}": (spec.PathItem) {
     Refable: (spec.Refable) {
      Ref: (spec.Ref) 
     },
     VendorExtensible: (spec.VendorExtensible) {
      Extensions: (spec.Extensions) <nil>
     },
     PathItemProps: (spec.PathItemProps) {
      Get: (*spec.Operation)(0xc0003afc00)({
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       OperationProps: (spec.OperationProps) {
        Description: (string) "",
        Consumes: ([]string) <nil>,
        Produces: ([]string) <nil>,
        Schemes: ([]string) <nil>,
        Tags: ([]string) <nil>,
        Summary: (string) (len=47) "Returns an analytics app matching the shortname",
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        ID: (string) (len=26) "getAnalyticsAppByShortname",
        Deprecated: (bool) false,
        Security: ([]map[string][]string) <nil>,
        Parameters: ([]spec.Parameter) (len=1 cap=4) {
         (spec.Parameter) {
          Refable: (spec.Refable) {
           Ref: (spec.Ref) 
          },
          CommonValidations: (spec.CommonValidations) {
           Maximum: (*float64)(<nil>),
           ExclusiveMaximum: (bool) false,
           Minimum: (*float64)(<nil>),
           ExclusiveMinimum: (bool) false,
           MaxLength: (*int64)(<nil>),
           MinLength: (*int64)(<nil>),
           Pattern: (string) "",
           MaxItems: (*int64)(<nil>),
           MinItems: (*int64)(<nil>),
           UniqueItems: (bool) false,
           MultipleOf: (*float64)(<nil>),
           Enum: ([]interface {}) <nil>
          },
          SimpleSchema: (spec.SimpleSchema) {
           Type: (string) (len=6) "string",
           Format: (string) "",
           Items: (*spec.Items)(<nil>),
           CollectionFormat: (string) "",
           Default: (interface {}) <nil>,
           Example: (interface {}) <nil>
          },
          VendorExtensible: (spec.VendorExtensible) {
           Extensions: (spec.Extensions) <nil>
          },
          ParamProps: (spec.ParamProps) {
           Description: (string) "",
           Name: (string) (len=9) "shortname",
           In: (string) (len=4) "path",
           Required: (bool) true,
           Schema: (*spec.Schema)(<nil>),
           AllowEmptyValue: (bool) false
          }
         }
        },
        Responses: (*spec.Responses)(0xc0008e56e0)({
         VendorExtensible: (spec.VendorExtensible) {
          Extensions: (spec.Extensions) <nil>
         },
         ResponsesProps: (spec.ResponsesProps) {
          Default: (*spec.Response)(<nil>),
          StatusCodeResponses: (map[int]spec.Response) (len=2) {
           (int) 200: (spec.Response) {
            Refable: (spec.Refable) {
             Ref: (spec.Ref) 
            },
            ResponseProps: (spec.ResponseProps) {
             Description: (string) (len=16) "The matching app",
             Schema: (*spec.Schema)(0xc0002ef200)({
              VendorExtensible: (spec.VendorExtensible) {
               Extensions: (spec.Extensions) <nil>
              },
              SchemaProps: (spec.SchemaProps) {
               ID: (string) "",
               Ref: (spec.Ref) #/definitions/AnalyticsApp,
               Schema: (spec.SchemaURL) "",
               Description: (string) "",
               Type: (spec.StringOrArray) <nil>,
               Format: (string) "",
               Title: (string) "",
               Default: (interface {}) <nil>,
               Maximum: (*float64)(<nil>),
               ExclusiveMaximum: (bool) false,
               Minimum: (*float64)(<nil>),
               ExclusiveMinimum: (bool) false,
               MaxLength: (*int64)(<nil>),
               MinLength: (*int64)(<nil>),
               Pattern: (string) "",
               MaxItems: (*int64)(<nil>),
               MinItems: (*int64)(<nil>),
               UniqueItems: (bool) false,
               MultipleOf: (*float64)(<nil>),
               Enum: ([]interface {}) <nil>,
               MaxProperties: (*int64)(<nil>),
               MinProperties: (*int64)(<nil>),
               Required: ([]string) <nil>,
               Items: (*spec.SchemaOrArray)(<nil>),
               AllOf: ([]spec.Schema) <nil>,
               OneOf: ([]spec.Schema) <nil>,
               AnyOf: ([]spec.Schema) <nil>,
               Not: (*spec.Schema)(<nil>),
               Properties: (map[string]spec.Schema) <nil>,
               AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
               PatternProperties: (map[string]spec.Schema) <nil>,
               Dependencies: (spec.Dependencies) <nil>,
               AdditionalItems: (*spec.SchemaOrBool)(<nil>),
               Definitions: (spec.Definitions) <nil>
              },
              SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
               Discriminator: (string) "",
               ReadOnly: (bool) false,
               XML: (*spec.XMLObject)(<nil>),
               ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
               Example: (interface {}) <nil>
              },
              ExtraProps: (map[string]interface {}) <nil>
             }),
             Headers: (map[string]spec.Header) <nil>,
             Examples: (map[string]interface {}) <nil>
            },
            VendorExtensible: (spec.VendorExtensible) {
             Extensions: (spec.Extensions) <nil>
            }
           },
           (int) 404: (spec.Response) {
            Refable: (spec.Refable) {
             Ref: (spec.Ref) #/responses/NotFound
            },
            ResponseProps: (spec.ResponseProps) {
             Description: (string) "",
             Schema: (*spec.Schema)(<nil>),
             Headers: (map[string]spec.Header) <nil>,
             Examples: (map[string]interface {}) <nil>
            },
            VendorExtensible: (spec.VendorExtensible) {
             Extensions: (spec.Extensions) <nil>
            }
           }
          }
         }
        })
       }
      }),
      Put: (*spec.Operation)(<nil>),
      Post: (*spec.Operation)(<nil>),
      Delete: (*spec.Operation)(<nil>),
      Options: (*spec.Operation)(<nil>),
      Head: (*spec.Operation)(<nil>),
      Patch: (*spec.Operation)(<nil>),
      Parameters: ([]spec.Parameter) <nil>
     }
    },
    (string) (len=8) "/v1/apps": (spec.PathItem) {
     Refable: (spec.Refable) {
      Ref: (spec.Ref) 
     },
     VendorExtensible: (spec.VendorExtensible) {
      Extensions: (spec.Extensions) <nil>
     },
     PathItemProps: (spec.PathItemProps) {
      Get: (*spec.Operation)(0xc0003afce0)({
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       OperationProps: (spec.OperationProps) {
        Description: (string) (len=56) "The server takes in the intersection of input parameters",
        Consumes: ([]string) <nil>,
        Produces: ([]string) <nil>,
        Schemes: ([]string) <nil>,
        Tags: ([]string) <nil>,
        Summary: (string) (len=44) "Gets applications filtered by the parameters",
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        ID: (string) (len=7) "getApps",
        Deprecated: (bool) false,
        Security: ([]map[string][]string) <nil>,
        Parameters: ([]spec.Parameter) (len=7 cap=9) {
         (spec.Parameter) {
          Refable: (spec.Refable) {
           Ref: (spec.Ref) 
          },
          CommonValidations: (spec.CommonValidations) {
           Maximum: (*float64)(<nil>),
           ExclusiveMaximum: (bool) false,
           Minimum: (*float64)(<nil>),
           ExclusiveMinimum: (bool) false,
           MaxLength: (*int64)(<nil>),
           MinLength: (*int64)(<nil>),
           Pattern: (string) "",
           MaxItems: (*int64)(<nil>),
           MinItems: (*int64)(<nil>),
           UniqueItems: (bool) false,
           MultipleOf: (*float64)(<nil>),
           Enum: ([]interface {}) <nil>
          },
          SimpleSchema: (spec.SimpleSchema) {
           Type: (string) (len=5) "array",
           Format: (string) "",
           Items: (*spec.Items)(0xc000889300)({
            Refable: (spec.Refable) {
             Ref: (spec.Ref) 
            },
            CommonValidations: (spec.CommonValidations) {
             Maximum: (*float64)(<nil>),
             ExclusiveMaximum: (bool) false,
             Minimum: (*float64)(<nil>),
             ExclusiveMinimum: (bool) false,
             MaxLength: (*int64)(<nil>),
             MinLength: (*int64)(<nil>),
             Pattern: (string) "",
             MaxItems: (*int64)(<nil>),
             MinItems: (*int64)(<nil>),
             UniqueItems: (bool) false,
             MultipleOf: (*float64)(<nil>),
             Enum: ([]interface {}) <nil>
            },
            SimpleSchema: (spec.SimpleSchema) {
             Type: (string) (len=6) "string",
             Format: (string) "",
             Items: (*spec.Items)(<nil>),
             CollectionFormat: (string) "",
             Default: (interface {}) <nil>,
             Example: (interface {}) <nil>
            },
            VendorExtensible: (spec.VendorExtensible) {
             Extensions: (spec.Extensions) <nil>
            }
           }),
           CollectionFormat: (string) "",
           Default: (interface {}) <nil>,
           Example: (interface {}) <nil>
          },
          VendorExtensible: (spec.VendorExtensible) {
           Extensions: (spec.Extensions) <nil>
          },
          ParamProps: (spec.ParamProps) {
           Description: (string) "",
           Name: (string) (len=3) "ids",
           In: (string) (len=5) "query",
           Required: (bool) false,
           Schema: (*spec.Schema)(<nil>),
           AllowEmptyValue: (bool) false
          }
         },
         (spec.Parameter) {
          Refable: (spec.Refable) {
           Ref: (spec.Ref) 
          },
          CommonValidations: (spec.CommonValidations) {
           Maximum: (*float64)(<nil>),
           ExclusiveMaximum: (bool) false,
           Minimum: (*float64)(<nil>),
           ExclusiveMinimum: (bool) false,
           MaxLength: (*int64)(<nil>),
           MinLength: (*int64)(<nil>),
           Pattern: (string) "",
           MaxItems: (*int64)(<nil>),
           MinItems: (*int64)(<nil>),
           UniqueItems: (bool) false,
           MultipleOf: (*float64)(<nil>),
           Enum: ([]interface {}) <nil>
          },
          SimpleSchema: (spec.SimpleSchema) {
           Type: (string) (len=6) "string",
           Format: (string) "",
           Items: (*spec.Items)(<nil>),
           CollectionFormat: (string) "",
           Default: (interface {}) <nil>,
           Example: (interface {}) <nil>
          },
          VendorExtensible: (spec.VendorExtensible) {
           Extensions: (spec.Extensions) <nil>
          },
          ParamProps: (spec.ParamProps) {
           Description: (string) "",
           Name: (string) (len=8) "clientId",
           In: (string) (len=5) "query",
           Required: (bool) false,
           Schema: (*spec.Schema)(<nil>),
           AllowEmptyValue: (bool) false
          }
         },
         (spec.Parameter) {
          Refable: (spec.Refable) {
           Ref: (spec.Ref) 
          },
          CommonValidations: (spec.CommonValidations) {
           Maximum: (*float64)(<nil>),
           ExclusiveMaximum: (bool) false,
           Minimum: (*float64)(<nil>),
           ExclusiveMinimum: (bool) false,
           MaxLength: (*int64)(<nil>),
           MinLength: (*int64)(<nil>),
           Pattern: (string) "",
           MaxItems: (*int64)(<nil>),
           MinItems: (*int64)(<nil>),
           UniqueItems: (bool) false,
           MultipleOf: (*float64)(<nil>),
           Enum: ([]interface {}) <nil>
          },
          SimpleSchema: (spec.SimpleSchema) {
           Type: (string) (len=6) "string",
           Format: (string) "",
           Items: (*spec.Items)(<nil>),
           CollectionFormat: (string) "",
           Default: (interface {}) <nil>,
           Example: (interface {}) <nil>
          },
          VendorExtensible: (spec.VendorExtensible) {
           Extensions: (spec.Extensions) <nil>
          },
          ParamProps: (spec.ParamProps) {
           Description: (string) "",
           Name: (string) (len=12) "clientSecret",
           In: (string) (len=5) "query",
           Required: (bool) false,
           Schema: (*spec.Schema)(<nil>),
           AllowEmptyValue: (bool) false
          }
         },
         (spec.Parameter) {
          Refable: (spec.Refable) {
           Ref: (spec.Ref) 
          },
          CommonValidations: (spec.CommonValidations) {
           Maximum: (*float64)(<nil>),
           ExclusiveMaximum: (bool) false,
           Minimum: (*float64)(<nil>),
           ExclusiveMinimum: (bool) false,
           MaxLength: (*int64)(<nil>),
           MinLength: (*int64)(<nil>),
           Pattern: (string) "",
           MaxItems: (*int64)(<nil>),
           MinItems: (*int64)(<nil>),
           UniqueItems: (bool) false,
           MultipleOf: (*float64)(<nil>),
           Enum: ([]interface {}) <nil>
          },
          SimpleSchema: (spec.SimpleSchema) {
           Type: (string) (len=6) "string",
           Format: (string) "",
           Items: (*spec.Items)(<nil>),
           CollectionFormat: (string) "",
           Default: (interface {}) <nil>,
           Example: (interface {}) <nil>
          },
          VendorExtensible: (spec.VendorExtensible) {
           Extensions: (spec.Extensions) <nil>
          },
          ParamProps: (spec.ParamProps) {
           Description: (string) "",
           Name: (string) (len=9) "shortname",
           In: (string) (len=5) "query",
           Required: (bool) false,
           Schema: (*spec.Schema)(<nil>),
           AllowEmptyValue: (bool) false
          }
         },
         (spec.Parameter) {
          Refable: (spec.Refable) {
           Ref: (spec.Ref) 
          },
          CommonValidations: (spec.CommonValidations) {
           Maximum: (*float64)(<nil>),
           ExclusiveMaximum: (bool) false,
           Minimum: (*float64)(<nil>),
           ExclusiveMinimum: (bool) false,
           MaxLength: (*int64)(<nil>),
           MinLength: (*int64)(<nil>),
           Pattern: (string) "",
           MaxItems: (*int64)(<nil>),
           MinItems: (*int64)(<nil>),
           UniqueItems: (bool) false,
           MultipleOf: (*float64)(<nil>),
           Enum: ([]interface {}) <nil>
          },
          SimpleSchema: (spec.SimpleSchema) {
           Type: (string) (len=6) "string",
           Format: (string) "",
           Items: (*spec.Items)(<nil>),
           CollectionFormat: (string) "",
           Default: (interface {}) <nil>,
           Example: (interface {}) <nil>
          },
          VendorExtensible: (spec.VendorExtensible) {
           Extensions: (spec.Extensions) <nil>
          },
          ParamProps: (spec.ParamProps) {
           Description: (string) "",
           Name: (string) (len=13) "businessToken",
           In: (string) (len=5) "query",
           Required: (bool) false,
           Schema: (*spec.Schema)(<nil>),
           AllowEmptyValue: (bool) false
          }
         },
         (spec.Parameter) {
          Refable: (spec.Refable) {
           Ref: (spec.Ref) 
          },
          CommonValidations: (spec.CommonValidations) {
           Maximum: (*float64)(<nil>),
           ExclusiveMaximum: (bool) false,
           Minimum: (*float64)(<nil>),
           ExclusiveMinimum: (bool) false,
           MaxLength: (*int64)(<nil>),
           MinLength: (*int64)(<nil>),
           Pattern: (string) "",
           MaxItems: (*int64)(<nil>),
           MinItems: (*int64)(<nil>),
           UniqueItems: (bool) false,
           MultipleOf: (*float64)(<nil>),
           Enum: ([]interface {}) <nil>
          },
          SimpleSchema: (spec.SimpleSchema) {
           Type: (string) (len=5) "array",
           Format: (string) "",
           Items: (*spec.Items)(0xc000889400)({
            Refable: (spec.Refable) {
             Ref: (spec.Ref) 
            },
            CommonValidations: (spec.CommonValidations) {
             Maximum: (*float64)(<nil>),
             ExclusiveMaximum: (bool) false,
             Minimum: (*float64)(<nil>),
             ExclusiveMinimum: (bool) false,
             MaxLength: (*int64)(<nil>),
             MinLength: (*int64)(<nil>),
             Pattern: (string) "",
             MaxItems: (*int64)(<nil>),
             MinItems: (*int64)(<nil>),
             UniqueItems: (bool) false,
             MultipleOf: (*float64)(<nil>),
             Enum: ([]interface {}) <nil>
            },
            SimpleSchema: (spec.SimpleSchema) {
             Type: (string) (len=6) "string",
             Format: (string) "",
             Items: (*spec.Items)(<nil>),
             CollectionFormat: (string) "",
             Default: (interface {}) <nil>,
             Example: (interface {}) <nil>
            },
            VendorExtensible: (spec.VendorExtensible) {
             Extensions: (spec.Extensions) <nil>
            }
           }),
           CollectionFormat: (string) "",
           Default: (interface {}) <nil>,
           Example: (interface {}) <nil>
          },
          VendorExtensible: (spec.VendorExtensible) {
           Extensions: (spec.Extensions) <nil>
          },
          ParamProps: (spec.ParamProps) {
           Description: (string) "",
           Name: (string) (len=4) "tags",
           In: (string) (len=5) "query",
           Required: (bool) false,
           Schema: (*spec.Schema)(<nil>),
           AllowEmptyValue: (bool) false
          }
         },
         (spec.Parameter) {
          Refable: (spec.Refable) {
           Ref: (spec.Ref) 
          },
          CommonValidations: (spec.CommonValidations) {
           Maximum: (*float64)(<nil>),
           ExclusiveMaximum: (bool) false,
           Minimum: (*float64)(<nil>),
           ExclusiveMinimum: (bool) false,
           MaxLength: (*int64)(<nil>),
           MinLength: (*int64)(<nil>),
           Pattern: (string) "",
           MaxItems: (*int64)(<nil>),
           MinItems: (*int64)(<nil>),
           UniqueItems: (bool) false,
           MultipleOf: (*float64)(<nil>),
           Enum: ([]interface {}) <nil>
          },
          SimpleSchema: (spec.SimpleSchema) {
           Type: (string) (len=5) "array",
           Format: (string) "",
           Items: (*spec.Items)(0xc000889500)({
            Refable: (spec.Refable) {
             Ref: (spec.Ref) 
            },
            CommonValidations: (spec.CommonValidations) {
             Maximum: (*float64)(<nil>),
             ExclusiveMaximum: (bool) false,
             Minimum: (*float64)(<nil>),
             ExclusiveMinimum: (bool) false,
             MaxLength: (*int64)(<nil>),
             MinLength: (*int64)(<nil>),
             Pattern: (string) "",
             MaxItems: (*int64)(<nil>),
             MinItems: (*int64)(<nil>),
             UniqueItems: (bool) false,
             MultipleOf: (*float64)(<nil>),
             Enum: ([]interface {}) <nil>
            },
            SimpleSchema: (spec.SimpleSchema) {
             Type: (string) (len=6) "string",
             Format: (string) "",
             Items: (*spec.Items)(<nil>),
             CollectionFormat: (string) "",
             Default: (interface {}) <nil>,
             Example: (interface {}) <nil>
            },
            VendorExtensible: (spec.VendorExtensible) {
             Extensions: (spec.Extensions) <nil>
            }
           }),
           CollectionFormat: (string) "",
           Default: (interface {}) <nil>,
           Example: (interface {}) <nil>
          },
          VendorExtensible: (spec.VendorExtensible) {
           Extensions: (spec.Extensions) <nil>
          },
          ParamProps: (spec.ParamProps) {
           Description: (string) "",
           Name: (string) (len=8) "skipTags",
           In: (string) (len=5) "query",
           Required: (bool) false,
           Schema: (*spec.Schema)(<nil>),
           AllowEmptyValue: (bool) false
          }
         }
        },
        Responses: (*spec.Responses)(0xc000928140)({
         VendorExtensible: (spec.VendorExtensible) {
          Extensions: (spec.Extensions) <nil>
         },
         ResponsesProps: (spec.ResponsesProps) {
          Default: (*spec.Response)(<nil>),
          StatusCodeResponses: (map[int]spec.Response) (len=1) {
           (int) 200: (spec.Response) {
            Refable: (spec.Refable) {
             Ref: (spec.Ref) 
            },
            ResponseProps: (spec.ResponseProps) {
             Description: (string) (len=39) "Array of apps that satisfy the criteria",
             Schema: (*spec.Schema)(0xc0002efb00)({
              VendorExtensible: (spec.VendorExtensible) {
               Extensions: (spec.Extensions) <nil>
              },
              SchemaProps: (spec.SchemaProps) {
               ID: (string) "",
               Ref: (spec.Ref) ,
               Schema: (spec.SchemaURL) "",
               Description: (string) "",
               Type: (spec.StringOrArray) (len=1 cap=1) {
                (string) (len=5) "array"
               },
               Format: (string) "",
               Title: (string) "",
               Default: (interface {}) <nil>,
               Maximum: (*float64)(<nil>),
               ExclusiveMaximum: (bool) false,
               Minimum: (*float64)(<nil>),
               ExclusiveMinimum: (bool) false,
               MaxLength: (*int64)(<nil>),
               MinLength: (*int64)(<nil>),
               Pattern: (string) "",
               MaxItems: (*int64)(<nil>),
               MinItems: (*int64)(<nil>),
               UniqueItems: (bool) false,
               MultipleOf: (*float64)(<nil>),
               Enum: ([]interface {}) <nil>,
               MaxProperties: (*int64)(<nil>),
               MinProperties: (*int64)(<nil>),
               Required: ([]string) <nil>,
               Items: (*spec.SchemaOrArray)(0xc000928160)({
                Schema: (*spec.Schema)(0xc0002e6480)({
                 VendorExtensible: (spec.VendorExtensible) {
                  Extensions: (spec.Extensions) <nil>
                 },
                 SchemaProps: (spec.SchemaProps) {
                  ID: (string) "",
                  Ref: (spec.Ref) #/definitions/App,
                  Schema: (spec.SchemaURL) "",
                  Description: (string) "",
                  Type: (spec.StringOrArray) <nil>,
                  Format: (string) "",
                  Title: (string) "",
                  Default: (interface {}) <nil>,
                  Maximum: (*float64)(<nil>),
                  ExclusiveMaximum: (bool) false,
                  Minimum: (*float64)(<nil>),
                  ExclusiveMinimum: (bool) false,
                  MaxLength: (*int64)(<nil>),
                  MinLength: (*int64)(<nil>),
                  Pattern: (string) "",
                  MaxItems: (*int64)(<nil>),
                  MinItems: (*int64)(<nil>),
                  UniqueItems: (bool) false,
                  MultipleOf: (*float64)(<nil>),
                  Enum: ([]interface {}) <nil>,
                  MaxProperties: (*int64)(<nil>),
                  MinProperties: (*int64)(<nil>),
                  Required: ([]string) <nil>,
                  Items: (*spec.SchemaOrArray)(<nil>),
                  AllOf: ([]spec.Schema) <nil>,
                  OneOf: ([]spec.Schema) <nil>,
                  AnyOf: ([]spec.Schema) <nil>,
                  Not: (*spec.Schema)(<nil>),
                  Properties: (map[string]spec.Schema) <nil>,
                  AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
                  PatternProperties: (map[string]spec.Schema) <nil>,
                  Dependencies: (spec.Dependencies) <nil>,
                  AdditionalItems: (*spec.SchemaOrBool)(<nil>),
                  Definitions: (spec.Definitions) <nil>
                 },
                 SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
                  Discriminator: (string) "",
                  ReadOnly: (bool) false,
                  XML: (*spec.XMLObject)(<nil>),
                  ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
                  Example: (interface {}) <nil>
                 },
                 ExtraProps: (map[string]interface {}) <nil>
                }),
                Schemas: ([]spec.Schema) <nil>
               }),
               AllOf: ([]spec.Schema) <nil>,
               OneOf: ([]spec.Schema) <nil>,
               AnyOf: ([]spec.Schema) <nil>,
               Not: (*spec.Schema)(<nil>),
               Properties: (map[string]spec.Schema) <nil>,
               AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
               PatternProperties: (map[string]spec.Schema) <nil>,
               Dependencies: (spec.Dependencies) <nil>,
               AdditionalItems: (*spec.SchemaOrBool)(<nil>),
               Definitions: (spec.Definitions) <nil>
              },
              SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
               Discriminator: (string) "",
               ReadOnly: (bool) false,
               XML: (*spec.XMLObject)(<nil>),
               ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
               Example: (interface {}) <nil>
              },
              ExtraProps: (map[string]interface {}) <nil>
             }),
             Headers: (map[string]spec.Header) <nil>,
             Examples: (map[string]interface {}) <nil>
            },
            VendorExtensible: (spec.VendorExtensible) {
             Extensions: (spec.Extensions) <nil>
            }
           }
          }
         }
        })
       }
      }),
      Put: (*spec.Operation)(<nil>),
      Post: (*spec.Operation)(<nil>),
      Delete: (*spec.Operation)(<nil>),
      Options: (*spec.Operation)(<nil>),
      Head: (*spec.Operation)(<nil>),
      Patch: (*spec.Operation)(<nil>),
      Parameters: ([]spec.Parameter) <nil>
     }
    },
    (string) (len=45) "/v1/apps/{appID}/admins/{adminID}/permissions": (spec.PathItem) {
     Refable: (spec.Refable) {
      Ref: (spec.Ref) 
     },
     VendorExtensible: (spec.VendorExtensible) {
      Extensions: (spec.Extensions) <nil>
     },
     PathItemProps: (spec.PathItemProps) {
      Get: (*spec.Operation)(0xc0000e0620)({
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       OperationProps: (spec.OperationProps) {
        Description: (string) "",
        Consumes: ([]string) <nil>,
        Produces: ([]string) <nil>,
        Schemes: ([]string) <nil>,
        Tags: ([]string) <nil>,
        Summary: (string) (len=29) "Permissions for an app admin.",
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        ID: (string) (len=22) "getPermissionsForAdmin",
        Deprecated: (bool) false,
        Security: ([]map[string][]string) <nil>,
        Parameters: ([]spec.Parameter) (len=2 cap=4) {
         (spec.Parameter) {
          Refable: (spec.Refable) {
           Ref: (spec.Ref) 
          },
          CommonValidations: (spec.CommonValidations) {
           Maximum: (*float64)(<nil>),
           ExclusiveMaximum: (bool) false,
           Minimum: (*float64)(<nil>),
           ExclusiveMinimum: (bool) false,
           MaxLength: (*int64)(<nil>),
           MinLength: (*int64)(<nil>),
           Pattern: (string) "",
           MaxItems: (*int64)(<nil>),
           MinItems: (*int64)(<nil>),
           UniqueItems: (bool) false,
           MultipleOf: (*float64)(<nil>),
           Enum: ([]interface {}) <nil>
          },
          SimpleSchema: (spec.SimpleSchema) {
           Type: (string) (len=6) "string",
           Format: (string) "",
           Items: (*spec.Items)(<nil>),
           CollectionFormat: (string) "",
           Default: (interface {}) <nil>,
           Example: (interface {}) <nil>
          },
          VendorExtensible: (spec.VendorExtensible) {
           Extensions: (spec.Extensions) <nil>
          },
          ParamProps: (spec.ParamProps) {
           Description: (string) "",
           Name: (string) (len=7) "adminID",
           In: (string) (len=4) "path",
           Required: (bool) true,
           Schema: (*spec.Schema)(<nil>),
           AllowEmptyValue: (bool) false
          }
         },
         (spec.Parameter) {
          Refable: (spec.Refable) {
           Ref: (spec.Ref) 
          },
          CommonValidations: (spec.CommonValidations) {
           Maximum: (*float64)(<nil>),
           ExclusiveMaximum: (bool) false,
           Minimum: (*float64)(<nil>),
           ExclusiveMinimum: (bool) false,
           MaxLength: (*int64)(<nil>),
           MinLength: (*int64)(<nil>),
           Pattern: (string) "",
           MaxItems: (*int64)(<nil>),
           MinItems: (*int64)(<nil>),
           UniqueItems: (bool) false,
           MultipleOf: (*float64)(<nil>),
           Enum: ([]interface {}) <nil>
          },
          SimpleSchema: (spec.SimpleSchema) {
           Type: (string) (len=6) "string",
           Format: (string) "",
           Items: (*spec.Items)(<nil>),
           CollectionFormat: (string) "",
           Default: (interface {}) <nil>,
           Example: (interface {}) <nil>
          },
          VendorExtensible: (spec.VendorExtensible) {
           Extensions: (spec.Extensions) <nil>
          },
          ParamProps: (spec.ParamProps) {
           Description: (string) "",
           Name: (string) (len=5) "appID",
           In: (string) (len=4) "path",
           Required: (bool) true,
           Schema: (*spec.Schema)(<nil>),
           AllowEmptyValue: (bool) false
          }
         }
        },
        Responses: (*spec.Responses)(0xc000793960)({
         VendorExtensible: (spec.VendorExtensible) {
          Extensions: (spec.Extensions) <nil>
         },
         ResponsesProps: (spec.ResponsesProps) {
          Default: (*spec.Response)(<nil>),
          StatusCodeResponses: (map[int]spec.Response) (len=2) {
           (int) 200: (spec.Response) {
            Refable: (spec.Refable) {
             Ref: (spec.Ref) 
            },
            ResponseProps: (spec.ResponseProps) {
             Description: (string) (len=11) "Permissions",
             Schema: (*spec.Schema)(0xc0003ed440)({
              VendorExtensible: (spec.VendorExtensible) {
               Extensions: (spec.Extensions) <nil>
              },
              SchemaProps: (spec.SchemaProps) {
               ID: (string) "",
               Ref: (spec.Ref) #/definitions/PermissionList,
               Schema: (spec.SchemaURL) "",
               Description: (string) "",
               Type: (spec.StringOrArray) <nil>,
               Format: (string) "",
               Title: (string) "",
               Default: (interface {}) <nil>,
               Maximum: (*float64)(<nil>),
               ExclusiveMaximum: (bool) false,
               Minimum: (*float64)(<nil>),
               ExclusiveMinimum: (bool) false,
               MaxLength: (*int64)(<nil>),
               MinLength: (*int64)(<nil>),
               Pattern: (string) "",
               MaxItems: (*int64)(<nil>),
               MinItems: (*int64)(<nil>),
               UniqueItems: (bool) false,
               MultipleOf: (*float64)(<nil>),
               Enum: ([]interface {}) <nil>,
               MaxProperties: (*int64)(<nil>),
               MinProperties: (*int64)(<nil>),
               Required: ([]string) <nil>,
               Items: (*spec.SchemaOrArray)(<nil>),
               AllOf: ([]spec.Schema) <nil>,
               OneOf: ([]spec.Schema) <nil>,
               AnyOf: ([]spec.Schema) <nil>,
               Not: (*spec.Schema)(<nil>),
               Properties: (map[string]spec.Schema) <nil>,
               AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
               PatternProperties: (map[string]spec.Schema) <nil>,
               Dependencies: (spec.Dependencies) <nil>,
               AdditionalItems: (*spec.SchemaOrBool)(<nil>),
               Definitions: (spec.Definitions) <nil>
              },
              SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
               Discriminator: (string) "",
               ReadOnly: (bool) false,
               XML: (*spec.XMLObject)(<nil>),
               ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
               Example: (interface {}) <nil>
              },
              ExtraProps: (map[string]interface {}) <nil>
             }),
             Headers: (map[string]spec.Header) <nil>,
             Examples: (map[string]interface {}) <nil>
            },
            VendorExtensible: (spec.VendorExtensible) {
             Extensions: (spec.Extensions) <nil>
            }
           },
           (int) 404: (spec.Response) {
            Refable: (spec.Refable) {
             Ref: (spec.Ref) #/responses/NotFound
            },
            ResponseProps: (spec.ResponseProps) {
             Description: (string) "",
             Schema: (*spec.Schema)(<nil>),
             Headers: (map[string]spec.Header) <nil>,
             Examples: (map[string]interface {}) <nil>
            },
            VendorExtensible: (spec.VendorExtensible) {
             Extensions: (spec.Extensions) <nil>
            }
           }
          }
         }
        })
       }
      }),
      Put: (*spec.Operation)(<nil>),
      Post: (*spec.Operation)(<nil>),
      Delete: (*spec.Operation)(<nil>),
      Options: (*spec.Operation)(<nil>),
      Head: (*spec.Operation)(<nil>),
      Patch: (*spec.Operation)(<nil>),
      Parameters: ([]spec.Parameter) <nil>
     }
    },
    (string) (len=32) "/v1/libraryResources/{shortname}": (spec.PathItem) {
     Refable: (spec.Refable) {
      Ref: (spec.Ref) 
     },
     VendorExtensible: (spec.VendorExtensible) {
      Extensions: (spec.Extensions) <nil>
     },
     PathItemProps: (spec.PathItemProps) {
      Get: (*spec.Operation)(0xc0000e0e00)({
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       OperationProps: (spec.OperationProps) {
        Description: (string) "",
        Consumes: ([]string) <nil>,
        Produces: ([]string) <nil>,
        Schemes: ([]string) <nil>,
        Tags: ([]string) <nil>,
        Summary: (string) (len=49) "Returns a library resource with a given shortname",
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        ID: (string) (len=29) "getLibraryResourceByShortname",
        Deprecated: (bool) false,
        Security: ([]map[string][]string) <nil>,
        Parameters: ([]spec.Parameter) (len=3 cap=4) {
         (spec.Parameter) {
          Refable: (spec.Refable) {
           Ref: (spec.Ref) 
          },
          CommonValidations: (spec.CommonValidations) {
           Maximum: (*float64)(<nil>),
           ExclusiveMaximum: (bool) false,
           Minimum: (*float64)(<nil>),
           ExclusiveMinimum: (bool) false,
           MaxLength: (*int64)(<nil>),
           MinLength: (*int64)(<nil>),
           Pattern: (string) "",
           MaxItems: (*int64)(<nil>),
           MinItems: (*int64)(<nil>),
           UniqueItems: (bool) false,
           MultipleOf: (*float64)(<nil>),
           Enum: ([]interface {}) <nil>
          },
          SimpleSchema: (spec.SimpleSchema) {
           Type: (string) (len=6) "string",
           Format: (string) "",
           Items: (*spec.Items)(<nil>),
           CollectionFormat: (string) "",
           Default: (interface {}) <nil>,
           Example: (interface {}) <nil>
          },
          VendorExtensible: (spec.VendorExtensible) {
           Extensions: (spec.Extensions) <nil>
          },
          ParamProps: (spec.ParamProps) {
           Description: (string) "",
           Name: (string) (len=9) "shortname",
           In: (string) (len=4) "path",
           Required: (bool) true,
           Schema: (*spec.Schema)(<nil>),
           AllowEmptyValue: (bool) false
          }
         },
         (spec.Parameter) {
          Refable: (spec.Refable) {
           Ref: (spec.Ref) 
          },
          CommonValidations: (spec.CommonValidations) {
           Maximum: (*float64)(<nil>),
           ExclusiveMaximum: (bool) false,
           Minimum: (*float64)(<nil>),
           ExclusiveMinimum: (bool) false,
           MaxLength: (*int64)(<nil>),
           MinLength: (*int64)(<nil>),
           Pattern: (string) "",
           MaxItems: (*int64)(<nil>),
           MinItems: (*int64)(<nil>),
           UniqueItems: (bool) false,
           MultipleOf: (*float64)(<nil>),
           Enum: ([]interface {}) <nil>
          },
          SimpleSchema: (spec.SimpleSchema) {
           Type: (string) (len=7) "boolean",
           Format: (string) "",
           Items: (*spec.Items)(<nil>),
           CollectionFormat: (string) "",
           Default: (interface {}) <nil>,
           Example: (interface {}) <nil>
          },
          VendorExtensible: (spec.VendorExtensible) {
           Extensions: (spec.Extensions) <nil>
          },
          ParamProps: (spec.ParamProps) {
           Description: (string) "",
           Name: (string) (len=14) "includeDevApps",
           In: (string) (len=5) "query",
           Required: (bool) false,
           Schema: (*spec.Schema)(<nil>),
           AllowEmptyValue: (bool) false
          }
         },
         (spec.Parameter) {
          Refable: (spec.Refable) {
           Ref: (spec.Ref) 
          },
          CommonValidations: (spec.CommonValidations) {
           Maximum: (*float64)(<nil>),
           ExclusiveMaximum: (bool) false,
           Minimum: (*float64)(<nil>),
           ExclusiveMinimum: (bool) false,
           MaxLength: (*int64)(<nil>),
           MinLength: (*int64)(<nil>),
           Pattern: (string) "",
           MaxItems: (*int64)(<nil>),
           MinItems: (*int64)(<nil>),
           UniqueItems: (bool) false,
           MultipleOf: (*float64)(<nil>),
           Enum: ([]interface {}) <nil>
          },
          SimpleSchema: (spec.SimpleSchema) {
           Type: (string) (len=7) "boolean",
           Format: (string) "",
           Items: (*spec.Items)(<nil>),
           CollectionFormat: (string) "",
           Default: (interface {}) <nil>,
           Example: (interface {}) <nil>
          },
          VendorExtensible: (spec.VendorExtensible) {
           Extensions: (spec.Extensions) <nil>
          },
          ParamProps: (spec.ParamProps) {
           Description: (string) "",
           Name: (string) (len=12) "includeLinks",
           In: (string) (len=5) "query",
           Required: (bool) false,
           Schema: (*spec.Schema)(<nil>),
           AllowEmptyValue: (bool) false
          }
         }
        },
        Responses: (*spec.Responses)(0xc000821fc0)({
         VendorExtensible: (spec.VendorExtensible) {
          Extensions: (spec.Extensions) <nil>
         },
         ResponsesProps: (spec.ResponsesProps) {
          Default: (*spec.Response)(<nil>),
          StatusCodeResponses: (map[int]spec.Response) (len=2) {
           (int) 404: (spec.Response) {
            Refable: (spec.Refable) {
             Ref: (spec.Ref) #/responses/NotFound
            },
            ResponseProps: (spec.ResponseProps) {
             Description: (string) "",
             Schema: (*spec.Schema)(<nil>),
             Headers: (map[string]spec.Header) <nil>,
             Examples: (map[string]interface {}) <nil>
            },
            VendorExtensible: (spec.VendorExtensible) {
             Extensions: (spec.Extensions) <nil>
            }
           },
           (int) 200: (spec.Response) {
            Refable: (spec.Refable) {
             Ref: (spec.Ref) 
            },
            ResponseProps: (spec.ResponseProps) {
             Description: (string) (len=29) "The matching library resource",
             Schema: (*spec.Schema)(0xc000398fc0)({
              VendorExtensible: (spec.VendorExtensible) {
               Extensions: (spec.Extensions) <nil>
              },
              SchemaProps: (spec.SchemaProps) {
               ID: (string) "",
               Ref: (spec.Ref) #/definitions/LibraryResource,
               Schema: (spec.SchemaURL) "",
               Description: (string) "",
               Type: (spec.StringOrArray) <nil>,
               Format: (string) "",
               Title: (string) "",
               Default: (interface {}) <nil>,
               Maximum: (*float64)(<nil>),
               ExclusiveMaximum: (bool) false,
               Minimum: (*float64)(<nil>),
               ExclusiveMinimum: (bool) false,
               MaxLength: (*int64)(<nil>),
               MinLength: (*int64)(<nil>),
               Pattern: (string) "",
               MaxItems: (*int64)(<nil>),
               MinItems: (*int64)(<nil>),
               UniqueItems: (bool) false,
               MultipleOf: (*float64)(<nil>),
               Enum: ([]interface {}) <nil>,
               MaxProperties: (*int64)(<nil>),
               MinProperties: (*int64)(<nil>),
               Required: ([]string) <nil>,
               Items: (*spec.SchemaOrArray)(<nil>),
               AllOf: ([]spec.Schema) <nil>,
               OneOf: ([]spec.Schema) <nil>,
               AnyOf: ([]spec.Schema) <nil>,
               Not: (*spec.Schema)(<nil>),
               Properties: (map[string]spec.Schema) <nil>,
               AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
               PatternProperties: (map[string]spec.Schema) <nil>,
               Dependencies: (spec.Dependencies) <nil>,
               AdditionalItems: (*spec.SchemaOrBool)(<nil>),
               Definitions: (spec.Definitions) <nil>
              },
              SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
               Discriminator: (string) "",
               ReadOnly: (bool) false,
               XML: (*spec.XMLObject)(<nil>),
               ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
               Example: (interface {}) <nil>
              },
              ExtraProps: (map[string]interface {}) <nil>
             }),
             Headers: (map[string]spec.Header) <nil>,
             Examples: (map[string]interface {}) <nil>
            },
            VendorExtensible: (spec.VendorExtensible) {
             Extensions: (spec.Extensions) <nil>
            }
           }
          }
         }
        })
       }
      }),
      Put: (*spec.Operation)(<nil>),
      Post: (*spec.Operation)(0xc0000e0ee0)({
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       OperationProps: (spec.OperationProps) {
        Description: (string) "",
        Consumes: ([]string) <nil>,
        Produces: ([]string) <nil>,
        Schemes: ([]string) <nil>,
        Tags: ([]string) <nil>,
        Summary: (string) (len=51) "Creates a library resource with the given shortname",
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        ID: (string) (len=21) "createLibraryResource",
        Deprecated: (bool) false,
        Security: ([]map[string][]string) <nil>,
        Parameters: ([]spec.Parameter) (len=2 cap=4) {
         (spec.Parameter) {
          Refable: (spec.Refable) {
           Ref: (spec.Ref) 
          },
          CommonValidations: (spec.CommonValidations) {
           Maximum: (*float64)(<nil>),
           ExclusiveMaximum: (bool) false,
           Minimum: (*float64)(<nil>),
           ExclusiveMinimum: (bool) false,
           MaxLength: (*int64)(<nil>),
           MinLength: (*int64)(<nil>),
           Pattern: (string) "",
           MaxItems: (*int64)(<nil>),
           MinItems: (*int64)(<nil>),
           UniqueItems: (bool) false,
           MultipleOf: (*float64)(<nil>),
           Enum: ([]interface {}) <nil>
          },
          SimpleSchema: (spec.SimpleSchema) {
           Type: (string) (len=6) "string",
           Format: (string) "",
           Items: (*spec.Items)(<nil>),
           CollectionFormat: (string) "",
           Default: (interface {}) <nil>,
           Example: (interface {}) <nil>
          },
          VendorExtensible: (spec.VendorExtensible) {
           Extensions: (spec.Extensions) <nil>
          },
          ParamProps: (spec.ParamProps) {
           Description: (string) "",
           Name: (string) (len=9) "shortname",
           In: (string) (len=4) "path",
           Required: (bool) true,
           Schema: (*spec.Schema)(<nil>),
           AllowEmptyValue: (bool) false
          }
         },
         (spec.Parameter) {
          Refable: (spec.Refable) {
           Ref: (spec.Ref) 
          },
          CommonValidations: (spec.CommonValidations) {
           Maximum: (*float64)(<nil>),
           ExclusiveMaximum: (bool) false,
           Minimum: (*float64)(<nil>),
           ExclusiveMinimum: (bool) false,
           MaxLength: (*int64)(<nil>),
           MinLength: (*int64)(<nil>),
           Pattern: (string) "",
           MaxItems: (*int64)(<nil>),
           MinItems: (*int64)(<nil>),
           UniqueItems: (bool) false,
           MultipleOf: (*float64)(<nil>),
           Enum: ([]interface {}) <nil>
          },
          SimpleSchema: (spec.SimpleSchema) {
           Type: (string) "",
           Format: (string) "",
           Items: (*spec.Items)(<nil>),
           CollectionFormat: (string) "",
           Default: (interface {}) <nil>,
           Example: (interface {}) <nil>
          },
          VendorExtensible: (spec.VendorExtensible) {
           Extensions: (spec.Extensions) <nil>
          },
          ParamProps: (spec.ParamProps) {
           Description: (string) "",
           Name: (string) (len=15) "libraryResource",
           In: (string) (len=4) "body",
           Required: (bool) true,
           Schema: (*spec.Schema)(0xc000399440)({
            VendorExtensible: (spec.VendorExtensible) {
             Extensions: (spec.Extensions) <nil>
            },
            SchemaProps: (spec.SchemaProps) {
             ID: (string) "",
             Ref: (spec.Ref) #/definitions/CreateLibraryResourceRequest,
             Schema: (spec.SchemaURL) "",
             Description: (string) "",
             Type: (spec.StringOrArray) <nil>,
             Format: (string) "",
             Title: (string) "",
             Default: (interface {}) <nil>,
             Maximum: (*float64)(<nil>),
             ExclusiveMaximum: (bool) false,
             Minimum: (*float64)(<nil>),
             ExclusiveMinimum: (bool) false,
             MaxLength: (*int64)(<nil>),
             MinLength: (*int64)(<nil>),
             Pattern: (string) "",
             MaxItems: (*int64)(<nil>),
             MinItems: (*int64)(<nil>),
             UniqueItems: (bool) false,
             MultipleOf: (*float64)(<nil>),
             Enum: ([]interface {}) <nil>,
             MaxProperties: (*int64)(<nil>),
             MinProperties: (*int64)(<nil>),
             Required: ([]string) <nil>,
             Items: (*spec.SchemaOrArray)(<nil>),
             AllOf: ([]spec.Schema) <nil>,
             OneOf: ([]spec.Schema) <nil>,
             AnyOf: ([]spec.Schema) <nil>,
             Not: (*spec.Schema)(<nil>),
             Properties: (map[string]spec.Schema) <nil>,
             AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
             PatternProperties: (map[string]spec.Schema) <nil>,
             Dependencies: (spec.Dependencies) <nil>,
             AdditionalItems: (*spec.SchemaOrBool)(<nil>),
             Definitions: (spec.Definitions) <nil>
            },
            SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
             Discriminator: (string) "",
             ReadOnly: (bool) false,
             XML: (*spec.XMLObject)(<nil>),
             ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
             Example: (interface {}) <nil>
            },
            ExtraProps: (map[string]interface {}) <nil>
           }),
           AllowEmptyValue: (bool) false
          }
         }
        },
        Responses: (*spec.Responses)(0xc0007966c0)({
         VendorExtensible: (spec.VendorExtensible) {
          Extensions: (spec.Extensions) <nil>
         },
         ResponsesProps: (spec.ResponsesProps) {
          Default: (*spec.Response)(<nil>),
          StatusCodeResponses: (map[int]spec.Response) (len=2) {
           (int) 200: (spec.Response) {
            Refable: (spec.Refable) {
             Ref: (spec.Ref) 
            },
            ResponseProps: (spec.ResponseProps) {
             Description: (string) (len=28) "The created library resource",
             Schema: (*spec.Schema)(0xc0003998c0)({
              VendorExtensible: (spec.VendorExtensible) {
               Extensions: (spec.Extensions) <nil>
              },
              SchemaProps: (spec.SchemaProps) {
               ID: (string) "",
               Ref: (spec.Ref) #/definitions/LibraryResource,
               Schema: (spec.SchemaURL) "",
               Description: (string) "",
               Type: (spec.StringOrArray) <nil>,
               Format: (string) "",
               Title: (string) "",
               Default: (interface {}) <nil>,
               Maximum: (*float64)(<nil>),
               ExclusiveMaximum: (bool) false,
               Minimum: (*float64)(<nil>),
               ExclusiveMinimum: (bool) false,
               MaxLength: (*int64)(<nil>),
               MinLength: (*int64)(<nil>),
               Pattern: (string) "",
               MaxItems: (*int64)(<nil>),
               MinItems: (*int64)(<nil>),
               UniqueItems: (bool) false,
               MultipleOf: (*float64)(<nil>),
               Enum: ([]interface {}) <nil>,
               MaxProperties: (*int64)(<nil>),
               MinProperties: (*int64)(<nil>),
               Required: ([]string) <nil>,
               Items: (*spec.SchemaOrArray)(<nil>),
               AllOf: ([]spec.Schema) <nil>,
               OneOf: ([]spec.Schema) <nil>,
               AnyOf: ([]spec.Schema) <nil>,
               Not: (*spec.Schema)(<nil>),
               Properties: (map[string]spec.Schema) <nil>,
               AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
               PatternProperties: (map[string]spec.Schema) <nil>,
               Dependencies: (spec.Dependencies) <nil>,
               AdditionalItems: (*spec.SchemaOrBool)(<nil>),
               Definitions: (spec.Definitions) <nil>
              },
              SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
               Discriminator: (string) "",
               ReadOnly: (bool) false,
               XML: (*spec.XMLObject)(<nil>),
               ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
               Example: (interface {}) <nil>
              },
              ExtraProps: (map[string]interface {}) <nil>
             }),
             Headers: (map[string]spec.Header) <nil>,
             Examples: (map[string]interface {}) <nil>
            },
            VendorExtensible: (spec.VendorExtensible) {
             Extensions: (spec.Extensions) <nil>
            }
           },
           (int) 404: (spec.Response) {
            Refable: (spec.Refable) {
             Ref: (spec.Ref) #/responses/NotFound
            },
            ResponseProps: (spec.ResponseProps) {
             Description: (string) "",
             Schema: (*spec.Schema)(<nil>),
             Headers: (map[string]spec.Header) <nil>,
             Examples: (map[string]interface {}) <nil>
            },
            VendorExtensible: (spec.VendorExtensible) {
             Extensions: (spec.Extensions) <nil>
            }
           }
          }
         }
        })
       }
      }),
      Delete: (*spec.Operation)(<nil>),
      Options: (*spec.Operation)(<nil>),
      Head: (*spec.Operation)(<nil>),
      Patch: (*spec.Operation)(0xc0000e0fc0)({
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       OperationProps: (spec.OperationProps) {
        Description: (string) "",
        Consumes: ([]string) <nil>,
        Produces: ([]string) <nil>,
        Schemes: ([]string) <nil>,
        Tags: ([]string) <nil>,
        Summary: (string) (len=51) "Updates the library resource with a given shortname",
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        ID: (string) (len=32) "updateLibraryResourceByShortname",
        Deprecated: (bool) false,
        Security: ([]map[string][]string) <nil>,
        Parameters: ([]spec.Parameter) (len=2 cap=4) {
         (spec.Parameter) {
          Refable: (spec.Refable) {
           Ref: (spec.Ref) 
          },
          CommonValidations: (spec.CommonValidations) {
           Maximum: (*float64)(<nil>),
           ExclusiveMaximum: (bool) false,
           Minimum: (*float64)(<nil>),
           ExclusiveMinimum: (bool) false,
           MaxLength: (*int64)(<nil>),
           MinLength: (*int64)(<nil>),
           Pattern: (string) "",
           MaxItems: (*int64)(<nil>),
           MinItems: (*int64)(<nil>),
           UniqueItems: (bool) false,
           MultipleOf: (*float64)(<nil>),
           Enum: ([]interface {}) <nil>
          },
          SimpleSchema: (spec.SimpleSchema) {
           Type: (string) (len=6) "string",
           Format: (string) "",
           Items: (*spec.Items)(<nil>),
           CollectionFormat: (string) "",
           Default: (interface {}) <nil>,
           Example: (interface {}) <nil>
          },
          VendorExtensible: (spec.VendorExtensible) {
           Extensions: (spec.Extensions) <nil>
          },
          ParamProps: (spec.ParamProps) {
           Description: (string) "",
           Name: (string) (len=9) "shortname",
           In: (string) (len=4) "path",
           Required: (bool) true,
           Schema: (*spec.Schema)(<nil>),
           AllowEmptyValue: (bool) false
          }
         },
         (spec.Parameter) {
          Refable: (spec.Refable) {
           Ref: (spec.Ref) 
          },
          CommonValidations: (spec.CommonValidations) {
           Maximum: (*float64)(<nil>),
           ExclusiveMaximum: (bool) false,
           Minimum: (*float64)(<nil>),
           ExclusiveMinimum: (bool) false,
           MaxLength: (*int64)(<nil>),
           MinLength: (*int64)(<nil>),
           Pattern: (string) "",
           MaxItems: (*int64)(<nil>),
           MinItems: (*int64)(<nil>),
           UniqueItems: (bool) false,
           MultipleOf: (*float64)(<nil>),
           Enum: ([]interface {}) <nil>
          },
          SimpleSchema: (spec.SimpleSchema) {
           Type: (string) "",
           Format: (string) "",
           Items: (*spec.Items)(<nil>),
           CollectionFormat: (string) "",
           Default: (interface {}) <nil>,
           Example: (interface {}) <nil>
          },
          VendorExtensible: (spec.VendorExtensible) {
           Extensions: (spec.Extensions) <nil>
          },
          ParamProps: (spec.ParamProps) {
           Description: (string) "",
           Name: (string) (len=15) "libraryResource",
           In: (string) (len=4) "body",
           Required: (bool) true,
           Schema: (*spec.Schema)(0xc000399d40)({
            VendorExtensible: (spec.VendorExtensible) {
             Extensions: (spec.Extensions) <nil>
            },
            SchemaProps: (spec.SchemaProps) {
             ID: (string) "",
             Ref: (spec.Ref) #/definitions/PatchLibraryResourceRequest,
             Schema: (spec.SchemaURL) "",
             Description: (string) "",
             Type: (spec.StringOrArray) <nil>,
             Format: (string) "",
             Title: (string) "",
             Default: (interface {}) <nil>,
             Maximum: (*float64)(<nil>),
             ExclusiveMaximum: (bool) false,
             Minimum: (*float64)(<nil>),
             ExclusiveMinimum: (bool) false,
             MaxLength: (*int64)(<nil>),
             MinLength: (*int64)(<nil>),
             Pattern: (string) "",
             MaxItems: (*int64)(<nil>),
             MinItems: (*int64)(<nil>),
             UniqueItems: (bool) false,
             MultipleOf: (*float64)(<nil>),
             Enum: ([]interface {}) <nil>,
             MaxProperties: (*int64)(<nil>),
             MinProperties: (*int64)(<nil>),
             Required: ([]string) <nil>,
             Items: (*spec.SchemaOrArray)(<nil>),
             AllOf: ([]spec.Schema) <nil>,
             OneOf: ([]spec.Schema) <nil>,
             AnyOf: ([]spec.Schema) <nil>,
             Not: (*spec.Schema)(<nil>),
             Properties: (map[string]spec.Schema) <nil>,
             AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
             PatternProperties: (map[string]spec.Schema) <nil>,
             Dependencies: (spec.Dependencies) <nil>,
             AdditionalItems: (*spec.SchemaOrBool)(<nil>),
             Definitions: (spec.Definitions) <nil>
            },
            SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
             Discriminator: (string) "",
             ReadOnly: (bool) false,
             XML: (*spec.XMLObject)(<nil>),
             ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
             Example: (interface {}) <nil>
            },
            ExtraProps: (map[string]interface {}) <nil>
           }),
           AllowEmptyValue: (bool) false
          }
         }
        },
        Responses: (*spec.Responses)(0xc000796c80)({
         VendorExtensible: (spec.VendorExtensible) {
          Extensions: (spec.Extensions) <nil>
         },
         ResponsesProps: (spec.ResponsesProps) {
          Default: (*spec.Response)(<nil>),
          StatusCodeResponses: (map[int]spec.Response) (len=2) {
           (int) 200: (spec.Response) {
            Refable: (spec.Refable) {
             Ref: (spec.Ref) 
            },
            ResponseProps: (spec.ResponseProps) {
             Description: (string) (len=11) "OK response",
             Schema: (*spec.Schema)(0xc000392240)({
              VendorExtensible: (spec.VendorExtensible) {
               Extensions: (spec.Extensions) <nil>
              },
              SchemaProps: (spec.SchemaProps) {
               ID: (string) "",
               Ref: (spec.Ref) #/definitions/LibraryResource,
               Schema: (spec.SchemaURL) "",
               Description: (string) "",
               Type: (spec.StringOrArray) <nil>,
               Format: (string) "",
               Title: (string) "",
               Default: (interface {}) <nil>,
               Maximum: (*float64)(<nil>),
               ExclusiveMaximum: (bool) false,
               Minimum: (*float64)(<nil>),
               ExclusiveMinimum: (bool) false,
               MaxLength: (*int64)(<nil>),
               MinLength: (*int64)(<nil>),
               Pattern: (string) "",
               MaxItems: (*int64)(<nil>),
               MinItems: (*int64)(<nil>),
               UniqueItems: (bool) false,
               MultipleOf: (*float64)(<nil>),
               Enum: ([]interface {}) <nil>,
               MaxProperties: (*int64)(<nil>),
               MinProperties: (*int64)(<nil>),
               Required: ([]string) <nil>,
               Items: (*spec.SchemaOrArray)(<nil>),
               AllOf: ([]spec.Schema) <nil>,
               OneOf: ([]spec.Schema) <nil>,
               AnyOf: ([]spec.Schema) <nil>,
               Not: (*spec.Schema)(<nil>),
               Properties: (map[string]spec.Schema) <nil>,
               AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
               PatternProperties: (map[string]spec.Schema) <nil>,
               Dependencies: (spec.Dependencies) <nil>,
               AdditionalItems: (*spec.SchemaOrBool)(<nil>),
               Definitions: (spec.Definitions) <nil>
              },
              SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
               Discriminator: (string) "",
               ReadOnly: (bool) false,
               XML: (*spec.XMLObject)(<nil>),
               ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
               Example: (interface {}) <nil>
              },
              ExtraProps: (map[string]interface {}) <nil>
             }),
             Headers: (map[string]spec.Header) <nil>,
             Examples: (map[string]interface {}) <nil>
            },
            VendorExtensible: (spec.VendorExtensible) {
             Extensions: (spec.Extensions) <nil>
            }
           },
           (int) 404: (spec.Response) {
            Refable: (spec.Refable) {
             Ref: (spec.Ref) #/responses/NotFound
            },
            ResponseProps: (spec.ResponseProps) {
             Description: (string) "",
             Schema: (*spec.Schema)(<nil>),
             Headers: (map[string]spec.Header) <nil>,
             Examples: (map[string]interface {}) <nil>
            },
            VendorExtensible: (spec.VendorExtensible) {
             Extensions: (spec.Extensions) <nil>
            }
           }
          }
         }
        })
       }
      }),
      Parameters: ([]spec.Parameter) <nil>
     }
    },
    (string) (len=23) "/v1/apps/{appID}/schema": (spec.PathItem) {
     Refable: (spec.Refable) {
      Ref: (spec.Ref) 
     },
     VendorExtensible: (spec.VendorExtensible) {
      Extensions: (spec.Extensions) <nil>
     },
     PathItemProps: (spec.PathItemProps) {
      Get: (*spec.Operation)(0xc0000e1ea0)({
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       OperationProps: (spec.OperationProps) {
        Description: (string) "",
        Consumes: ([]string) <nil>,
        Produces: ([]string) <nil>,
        Schemes: ([]string) <nil>,
        Tags: ([]string) <nil>,
        Summary: (string) (len=39) "Get field settings specified by the app",
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        ID: (string) (len=12) "getAppSchema",
        Deprecated: (bool) false,
        Security: ([]map[string][]string) <nil>,
        Parameters: ([]spec.Parameter) (len=1 cap=4) {
         (spec.Parameter) {
          Refable: (spec.Refable) {
           Ref: (spec.Ref) 
          },
          CommonValidations: (spec.CommonValidations) {
           Maximum: (*float64)(<nil>),
           ExclusiveMaximum: (bool) false,
           Minimum: (*float64)(<nil>),
           ExclusiveMinimum: (bool) false,
           MaxLength: (*int64)(<nil>),
           MinLength: (*int64)(<nil>),
           Pattern: (string) "",
           MaxItems: (*int64)(<nil>),
           MinItems: (*int64)(<nil>),
           UniqueItems: (bool) false,
           MultipleOf: (*float64)(<nil>),
           Enum: ([]interface {}) <nil>
          },
          SimpleSchema: (spec.SimpleSchema) {
           Type: (string) (len=6) "string",
           Format: (string) (len=8) "mongo-id",
           Items: (*spec.Items)(<nil>),
           CollectionFormat: (string) "",
           Default: (interface {}) <nil>,
           Example: (interface {}) <nil>
          },
          VendorExtensible: (spec.VendorExtensible) {
           Extensions: (spec.Extensions) <nil>
          },
          ParamProps: (spec.ParamProps) {
           Description: (string) "",
           Name: (string) (len=5) "appID",
           In: (string) (len=4) "path",
           Required: (bool) true,
           Schema: (*spec.Schema)(<nil>),
           AllowEmptyValue: (bool) false
          }
         }
        },
        Responses: (*spec.Responses)(0xc000a5b200)({
         VendorExtensible: (spec.VendorExtensible) {
          Extensions: (spec.Extensions) <nil>
         },
         ResponsesProps: (spec.ResponsesProps) {
          Default: (*spec.Response)(<nil>),
          StatusCodeResponses: (map[int]spec.Response) (len=2) {
           (int) 200: (spec.Response) {
            Refable: (spec.Refable) {
             Ref: (spec.Ref) 
            },
            ResponseProps: (spec.ResponseProps) {
             Description: (string) (len=10) "App Schema",
             Schema: (*spec.Schema)(0xc000356900)({
              VendorExtensible: (spec.VendorExtensible) {
               Extensions: (spec.Extensions) <nil>
              },
              SchemaProps: (spec.SchemaProps) {
               ID: (string) "",
               Ref: (spec.Ref) #/definitions/AppSchema,
               Schema: (spec.SchemaURL) "",
               Description: (string) "",
               Type: (spec.StringOrArray) <nil>,
               Format: (string) "",
               Title: (string) "",
               Default: (interface {}) <nil>,
               Maximum: (*float64)(<nil>),
               ExclusiveMaximum: (bool) false,
               Minimum: (*float64)(<nil>),
               ExclusiveMinimum: (bool) false,
               MaxLength: (*int64)(<nil>),
               MinLength: (*int64)(<nil>),
               Pattern: (string) "",
               MaxItems: (*int64)(<nil>),
               MinItems: (*int64)(<nil>),
               UniqueItems: (bool) false,
               MultipleOf: (*float64)(<nil>),
               Enum: ([]interface {}) <nil>,
               MaxProperties: (*int64)(<nil>),
               MinProperties: (*int64)(<nil>),
               Required: ([]string) <nil>,
               Items: (*spec.SchemaOrArray)(<nil>),
               AllOf: ([]spec.Schema) <nil>,
               OneOf: ([]spec.Schema) <nil>,
               AnyOf: ([]spec.Schema) <nil>,
               Not: (*spec.Schema)(<nil>),
               Properties: (map[string]spec.Schema) <nil>,
               AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
               PatternProperties: (map[string]spec.Schema) <nil>,
               Dependencies: (spec.Dependencies) <nil>,
               AdditionalItems: (*spec.SchemaOrBool)(<nil>),
               Definitions: (spec.Definitions) <nil>
              },
              SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
               Discriminator: (string) "",
               ReadOnly: (bool) false,
               XML: (*spec.XMLObject)(<nil>),
               ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
               Example: (interface {}) <nil>
              },
              ExtraProps: (map[string]interface {}) <nil>
             }),
             Headers: (map[string]spec.Header) <nil>,
             Examples: (map[string]interface {}) <nil>
            },
            VendorExtensible: (spec.VendorExtensible) {
             Extensions: (spec.Extensions) <nil>
            }
           },
           (int) 404: (spec.Response) {
            Refable: (spec.Refable) {
             Ref: (spec.Ref) #/responses/NotFound
            },
            ResponseProps: (spec.ResponseProps) {
             Description: (string) "",
             Schema: (*spec.Schema)(<nil>),
             Headers: (map[string]spec.Header) <nil>,
             Examples: (map[string]interface {}) <nil>
            },
            VendorExtensible: (spec.VendorExtensible) {
             Extensions: (spec.Extensions) <nil>
            }
           }
          }
         }
        })
       }
      }),
      Put: (*spec.Operation)(0xc0003ae000)({
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       OperationProps: (spec.OperationProps) {
        Description: (string) "",
        Consumes: ([]string) <nil>,
        Produces: ([]string) <nil>,
        Schemes: ([]string) <nil>,
        Tags: ([]string) <nil>,
        Summary: (string) (len=108) "Set field settings for an app. Will propagate app schema changes to all connections associated with this app",
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        ID: (string) (len=12) "setAppSchema",
        Deprecated: (bool) false,
        Security: ([]map[string][]string) <nil>,
        Parameters: ([]spec.Parameter) (len=4 cap=4) {
         (spec.Parameter) {
          Refable: (spec.Refable) {
           Ref: (spec.Ref) 
          },
          CommonValidations: (spec.CommonValidations) {
           Maximum: (*float64)(<nil>),
           ExclusiveMaximum: (bool) false,
           Minimum: (*float64)(<nil>),
           ExclusiveMinimum: (bool) false,
           MaxLength: (*int64)(<nil>),
           MinLength: (*int64)(<nil>),
           Pattern: (string) "",
           MaxItems: (*int64)(<nil>),
           MinItems: (*int64)(<nil>),
           UniqueItems: (bool) false,
           MultipleOf: (*float64)(<nil>),
           Enum: ([]interface {}) <nil>
          },
          SimpleSchema: (spec.SimpleSchema) {
           Type: (string) (len=6) "string",
           Format: (string) (len=8) "mongo-id",
           Items: (*spec.Items)(<nil>),
           CollectionFormat: (string) "",
           Default: (interface {}) <nil>,
           Example: (interface {}) <nil>
          },
          VendorExtensible: (spec.VendorExtensible) {
           Extensions: (spec.Extensions) <nil>
          },
          ParamProps: (spec.ParamProps) {
           Description: (string) "",
           Name: (string) (len=5) "appID",
           In: (string) (len=4) "path",
           Required: (bool) true,
           Schema: (*spec.Schema)(<nil>),
           AllowEmptyValue: (bool) false
          }
         },
         (spec.Parameter) {
          Refable: (spec.Refable) {
           Ref: (spec.Ref) 
          },
          CommonValidations: (spec.CommonValidations) {
           Maximum: (*float64)(<nil>),
           ExclusiveMaximum: (bool) false,
           Minimum: (*float64)(<nil>),
           ExclusiveMinimum: (bool) false,
           MaxLength: (*int64)(<nil>),
           MinLength: (*int64)(<nil>),
           Pattern: (string) "",
           MaxItems: (*int64)(<nil>),
           MinItems: (*int64)(<nil>),
           UniqueItems: (bool) false,
           MultipleOf: (*float64)(<nil>),
           Enum: ([]interface {}) <nil>
          },
          SimpleSchema: (spec.SimpleSchema) {
           Type: (string) (len=7) "boolean",
           Format: (string) "",
           Items: (*spec.Items)(<nil>),
           CollectionFormat: (string) "",
           Default: (interface {}) <nil>,
           Example: (interface {}) <nil>
          },
          VendorExtensible: (spec.VendorExtensible) {
           Extensions: (spec.Extensions) <nil>
          },
          ParamProps: (spec.ParamProps) {
           Description: (string) (len=38) "Skip propagation to connection schemas",
           Name: (string) (len=15) "skipPropagation",
           In: (string) (len=5) "query",
           Required: (bool) false,
           Schema: (*spec.Schema)(<nil>),
           AllowEmptyValue: (bool) false
          }
         },
         (spec.Parameter) {
          Refable: (spec.Refable) {
           Ref: (spec.Ref) 
          },
          CommonValidations: (spec.CommonValidations) {
           Maximum: (*float64)(<nil>),
           ExclusiveMaximum: (bool) false,
           Minimum: (*float64)(<nil>),
           ExclusiveMinimum: (bool) false,
           MaxLength: (*int64)(<nil>),
           MinLength: (*int64)(<nil>),
           Pattern: (string) "",
           MaxItems: (*int64)(<nil>),
           MinItems: (*int64)(<nil>),
           UniqueItems: (bool) false,
           MultipleOf: (*float64)(<nil>),
           Enum: ([]interface {}) <nil>
          },
          SimpleSchema: (spec.SimpleSchema) {
           Type: (string) (len=7) "boolean",
           Format: (string) "",
           Items: (*spec.Items)(<nil>),
           CollectionFormat: (string) "",
           Default: (interface {}) <nil>,
           Example: (interface {}) <nil>
          },
          VendorExtensible: (spec.VendorExtensible) {
           Extensions: (spec.Extensions) <nil>
          },
          ParamProps: (spec.ParamProps) {
           Description: (string) (len=44) "Update data warnings when app schema changes",
           Name: (string) (len=15) "updateDataRules",
           In: (string) (len=5) "query",
           Required: (bool) false,
           Schema: (*spec.Schema)(<nil>),
           AllowEmptyValue: (bool) false
          }
         },
         (spec.Parameter) {
          Refable: (spec.Refable) {
           Ref: (spec.Ref) 
          },
          CommonValidations: (spec.CommonValidations) {
           Maximum: (*float64)(<nil>),
           ExclusiveMaximum: (bool) false,
           Minimum: (*float64)(<nil>),
           ExclusiveMinimum: (bool) false,
           MaxLength: (*int64)(<nil>),
           MinLength: (*int64)(<nil>),
           Pattern: (string) "",
           MaxItems: (*int64)(<nil>),
           MinItems: (*int64)(<nil>),
           UniqueItems: (bool) false,
           MultipleOf: (*float64)(<nil>),
           Enum: ([]interface {}) <nil>
          },
          SimpleSchema: (spec.SimpleSchema) {
           Type: (string) "",
           Format: (string) "",
           Items: (*spec.Items)(<nil>),
           CollectionFormat: (string) "",
           Default: (interface {}) <nil>,
           Example: (interface {}) <nil>
          },
          VendorExtensible: (spec.VendorExtensible) {
           Extensions: (spec.Extensions) <nil>
          },
          ParamProps: (spec.ParamProps) {
           Description: (string) "",
           Name: (string) (len=9) "appSchema",
           In: (string) (len=4) "body",
           Required: (bool) false,
           Schema: (*spec.Schema)(0xc000357200)({
            VendorExtensible: (spec.VendorExtensible) {
             Extensions: (spec.Extensions) <nil>
            },
            SchemaProps: (spec.SchemaProps) {
             ID: (string) "",
             Ref: (spec.Ref) #/definitions/AppSchema,
             Schema: (spec.SchemaURL) "",
             Description: (string) "",
             Type: (spec.StringOrArray) <nil>,
             Format: (string) "",
             Title: (string) "",
             Default: (interface {}) <nil>,
             Maximum: (*float64)(<nil>),
             ExclusiveMaximum: (bool) false,
             Minimum: (*float64)(<nil>),
             ExclusiveMinimum: (bool) false,
             MaxLength: (*int64)(<nil>),
             MinLength: (*int64)(<nil>),
             Pattern: (string) "",
             MaxItems: (*int64)(<nil>),
             MinItems: (*int64)(<nil>),
             UniqueItems: (bool) false,
             MultipleOf: (*float64)(<nil>),
             Enum: ([]interface {}) <nil>,
             MaxProperties: (*int64)(<nil>),
             MinProperties: (*int64)(<nil>),
             Required: ([]string) <nil>,
             Items: (*spec.SchemaOrArray)(<nil>),
             AllOf: ([]spec.Schema) <nil>,
             OneOf: ([]spec.Schema) <nil>,
             AnyOf: ([]spec.Schema) <nil>,
             Not: (*spec.Schema)(<nil>),
             Properties: (map[string]spec.Schema) <nil>,
             AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
             PatternProperties: (map[string]spec.Schema) <nil>,
             Dependencies: (spec.Dependencies) <nil>,
             AdditionalItems: (*spec.SchemaOrBool)(<nil>),
             Definitions: (spec.Definitions) <nil>
            },
            SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
             Discriminator: (string) "",
             ReadOnly: (bool) false,
             XML: (*spec.XMLObject)(<nil>),
             ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
             Example: (interface {}) <nil>
            },
            ExtraProps: (map[string]interface {}) <nil>
           }),
           AllowEmptyValue: (bool) false
          }
         }
        },
        Responses: (*spec.Responses)(0xc000a5b900)({
         VendorExtensible: (spec.VendorExtensible) {
          Extensions: (spec.Extensions) <nil>
         },
         ResponsesProps: (spec.ResponsesProps) {
          Default: (*spec.Response)(<nil>),
          StatusCodeResponses: (map[int]spec.Response) (len=2) {
           (int) 200: (spec.Response) {
            Refable: (spec.Refable) {
             Ref: (spec.Ref) 
            },
            ResponseProps: (spec.ResponseProps) {
             Description: (string) (len=11) "OK Response",
             Schema: (*spec.Schema)(0xc000357b00)({
              VendorExtensible: (spec.VendorExtensible) {
               Extensions: (spec.Extensions) <nil>
              },
              SchemaProps: (spec.SchemaProps) {
               ID: (string) "",
               Ref: (spec.Ref) #/definitions/AppSchema,
               Schema: (spec.SchemaURL) "",
               Description: (string) "",
               Type: (spec.StringOrArray) <nil>,
               Format: (string) "",
               Title: (string) "",
               Default: (interface {}) <nil>,
               Maximum: (*float64)(<nil>),
               ExclusiveMaximum: (bool) false,
               Minimum: (*float64)(<nil>),
               ExclusiveMinimum: (bool) false,
               MaxLength: (*int64)(<nil>),
               MinLength: (*int64)(<nil>),
               Pattern: (string) "",
               MaxItems: (*int64)(<nil>),
               MinItems: (*int64)(<nil>),
               UniqueItems: (bool) false,
               MultipleOf: (*float64)(<nil>),
               Enum: ([]interface {}) <nil>,
               MaxProperties: (*int64)(<nil>),
               MinProperties: (*int64)(<nil>),
               Required: ([]string) <nil>,
               Items: (*spec.SchemaOrArray)(<nil>),
               AllOf: ([]spec.Schema) <nil>,
               OneOf: ([]spec.Schema) <nil>,
               AnyOf: ([]spec.Schema) <nil>,
               Not: (*spec.Schema)(<nil>),
               Properties: (map[string]spec.Schema) <nil>,
               AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
               PatternProperties: (map[string]spec.Schema) <nil>,
               Dependencies: (spec.Dependencies) <nil>,
               AdditionalItems: (*spec.SchemaOrBool)(<nil>),
               Definitions: (spec.Definitions) <nil>
              },
              SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
               Discriminator: (string) "",
               ReadOnly: (bool) false,
               XML: (*spec.XMLObject)(<nil>),
               ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
               Example: (interface {}) <nil>
              },
              ExtraProps: (map[string]interface {}) <nil>
             }),
             Headers: (map[string]spec.Header) <nil>,
             Examples: (map[string]interface {}) <nil>
            },
            VendorExtensible: (spec.VendorExtensible) {
             Extensions: (spec.Extensions) <nil>
            }
           },
           (int) 404: (spec.Response) {
            Refable: (spec.Refable) {
             Ref: (spec.Ref) #/responses/NotFound
            },
            ResponseProps: (spec.ResponseProps) {
             Description: (string) "",
             Schema: (*spec.Schema)(<nil>),
             Headers: (map[string]spec.Header) <nil>,
             Examples: (map[string]interface {}) <nil>
            },
            VendorExtensible: (spec.VendorExtensible) {
             Extensions: (spec.Extensions) <nil>
            }
           }
          }
         }
        })
       }
      }),
      Post: (*spec.Operation)(0xc0000e1dc0)({
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       OperationProps: (spec.OperationProps) {
        Description: (string) "",
        Consumes: ([]string) <nil>,
        Produces: ([]string) <nil>,
        Schemes: ([]string) <nil>,
        Tags: ([]string) <nil>,
        Summary: (string) (len=108) "Creates the schema for an app. Will propagate app schema changes to all connections associated with this app",
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        ID: (string) (len=15) "createAppSchema",
        Deprecated: (bool) false,
        Security: ([]map[string][]string) <nil>,
        Parameters: ([]spec.Parameter) (len=3 cap=4) {
         (spec.Parameter) {
          Refable: (spec.Refable) {
           Ref: (spec.Ref) 
          },
          CommonValidations: (spec.CommonValidations) {
           Maximum: (*float64)(<nil>),
           ExclusiveMaximum: (bool) false,
           Minimum: (*float64)(<nil>),
           ExclusiveMinimum: (bool) false,
           MaxLength: (*int64)(<nil>),
           MinLength: (*int64)(<nil>),
           Pattern: (string) "",
           MaxItems: (*int64)(<nil>),
           MinItems: (*int64)(<nil>),
           UniqueItems: (bool) false,
           MultipleOf: (*float64)(<nil>),
           Enum: ([]interface {}) <nil>
          },
          SimpleSchema: (spec.SimpleSchema) {
           Type: (string) (len=6) "string",
           Format: (string) (len=8) "mongo-id",
           Items: (*spec.Items)(<nil>),
           CollectionFormat: (string) "",
           Default: (interface {}) <nil>,
           Example: (interface {}) <nil>
          },
          VendorExtensible: (spec.VendorExtensible) {
           Extensions: (spec.Extensions) <nil>
          },
          ParamProps: (spec.ParamProps) {
           Description: (string) "",
           Name: (string) (len=5) "appID",
           In: (string) (len=4) "path",
           Required: (bool) true,
           Schema: (*spec.Schema)(<nil>),
           AllowEmptyValue: (bool) false
          }
         },
         (spec.Parameter) {
          Refable: (spec.Refable) {
           Ref: (spec.Ref) 
          },
          CommonValidations: (spec.CommonValidations) {
           Maximum: (*float64)(<nil>),
           ExclusiveMaximum: (bool) false,
           Minimum: (*float64)(<nil>),
           ExclusiveMinimum: (bool) false,
           MaxLength: (*int64)(<nil>),
           MinLength: (*int64)(<nil>),
           Pattern: (string) "",
           MaxItems: (*int64)(<nil>),
           MinItems: (*int64)(<nil>),
           UniqueItems: (bool) false,
           MultipleOf: (*float64)(<nil>),
           Enum: ([]interface {}) <nil>
          },
          SimpleSchema: (spec.SimpleSchema) {
           Type: (string) (len=7) "boolean",
           Format: (string) "",
           Items: (*spec.Items)(<nil>),
           CollectionFormat: (string) "",
           Default: (interface {}) <nil>,
           Example: (interface {}) <nil>
          },
          VendorExtensible: (spec.VendorExtensible) {
           Extensions: (spec.Extensions) <nil>
          },
          ParamProps: (spec.ParamProps) {
           Description: (string) (len=38) "Skip propagation to connection schemas",
           Name: (string) (len=15) "skipPropagation",
           In: (string) (len=5) "query",
           Required: (bool) false,
           Schema: (*spec.Schema)(<nil>),
           AllowEmptyValue: (bool) false
          }
         },
         (spec.Parameter) {
          Refable: (spec.Refable) {
           Ref: (spec.Ref) 
          },
          CommonValidations: (spec.CommonValidations) {
           Maximum: (*float64)(<nil>),
           ExclusiveMaximum: (bool) false,
           Minimum: (*float64)(<nil>),
           ExclusiveMinimum: (bool) false,
           MaxLength: (*int64)(<nil>),
           MinLength: (*int64)(<nil>),
           Pattern: (string) "",
           MaxItems: (*int64)(<nil>),
           MinItems: (*int64)(<nil>),
           UniqueItems: (bool) false,
           MultipleOf: (*float64)(<nil>),
           Enum: ([]interface {}) <nil>
          },
          SimpleSchema: (spec.SimpleSchema) {
           Type: (string) (len=7) "boolean",
           Format: (string) "",
           Items: (*spec.Items)(<nil>),
           CollectionFormat: (string) "",
           Default: (interface {}) <nil>,
           Example: (interface {}) <nil>
          },
          VendorExtensible: (spec.VendorExtensible) {
           Extensions: (spec.Extensions) <nil>
          },
          ParamProps: (spec.ParamProps) {
           Description: (string) (len=44) "Update data warnings when app schema changes",
           Name: (string) (len=15) "updateDataRules",
           In: (string) (len=5) "query",
           Required: (bool) false,
           Schema: (*spec.Schema)(<nil>),
           AllowEmptyValue: (bool) false
          }
         }
        },
        Responses: (*spec.Responses)(0xc000a5ae00)({
         VendorExtensible: (spec.VendorExtensible) {
          Extensions: (spec.Extensions) <nil>
         },
         ResponsesProps: (spec.ResponsesProps) {
          Default: (*spec.Response)(<nil>),
          StatusCodeResponses: (map[int]spec.Response) (len=2) {
           (int) 200: (spec.Response) {
            Refable: (spec.Refable) {
             Ref: (spec.Ref) 
            },
            ResponseProps: (spec.ResponseProps) {
             Description: (string) (len=10) "App Schema",
             Schema: (*spec.Schema)(0xc000356000)({
              VendorExtensible: (spec.VendorExtensible) {
               Extensions: (spec.Extensions) <nil>
              },
              SchemaProps: (spec.SchemaProps) {
               ID: (string) "",
               Ref: (spec.Ref) #/definitions/AppSchema,
               Schema: (spec.SchemaURL) "",
               Description: (string) "",
               Type: (spec.StringOrArray) <nil>,
               Format: (string) "",
               Title: (string) "",
               Default: (interface {}) <nil>,
               Maximum: (*float64)(<nil>),
               ExclusiveMaximum: (bool) false,
               Minimum: (*float64)(<nil>),
               ExclusiveMinimum: (bool) false,
               MaxLength: (*int64)(<nil>),
               MinLength: (*int64)(<nil>),
               Pattern: (string) "",
               MaxItems: (*int64)(<nil>),
               MinItems: (*int64)(<nil>),
               UniqueItems: (bool) false,
               MultipleOf: (*float64)(<nil>),
               Enum: ([]interface {}) <nil>,
               MaxProperties: (*int64)(<nil>),
               MinProperties: (*int64)(<nil>),
               Required: ([]string) <nil>,
               Items: (*spec.SchemaOrArray)(<nil>),
               AllOf: ([]spec.Schema) <nil>,
               OneOf: ([]spec.Schema) <nil>,
               AnyOf: ([]spec.Schema) <nil>,
               Not: (*spec.Schema)(<nil>),
               Properties: (map[string]spec.Schema) <nil>,
               AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
               PatternProperties: (map[string]spec.Schema) <nil>,
               Dependencies: (spec.Dependencies) <nil>,
               AdditionalItems: (*spec.SchemaOrBool)(<nil>),
               Definitions: (spec.Definitions) <nil>
              },
              SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
               Discriminator: (string) "",
               ReadOnly: (bool) false,
               XML: (*spec.XMLObject)(<nil>),
               ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
               Example: (interface {}) <nil>
              },
              ExtraProps: (map[string]interface {}) <nil>
             }),
             Headers: (map[string]spec.Header) <nil>,
             Examples: (map[string]interface {}) <nil>
            },
            VendorExtensible: (spec.VendorExtensible) {
             Extensions: (spec.Extensions) <nil>
            }
           },
           (int) 404: (spec.Response) {
            Refable: (spec.Refable) {
             Ref: (spec.Ref) #/responses/NotFound
            },
            ResponseProps: (spec.ResponseProps) {
             Description: (string) "",
             Schema: (*spec.Schema)(<nil>),
             Headers: (map[string]spec.Header) <nil>,
             Examples: (map[string]interface {}) <nil>
            },
            VendorExtensible: (spec.VendorExtensible) {
             Extensions: (spec.Extensions) <nil>
            }
           }
          }
         }
        })
       }
      }),
      Delete: (*spec.Operation)(0xc0003ae0e0)({
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       OperationProps: (spec.OperationProps) {
        Description: (string) "",
        Consumes: ([]string) <nil>,
        Produces: ([]string) <nil>,
        Schemes: ([]string) <nil>,
        Tags: ([]string) <nil>,
        Summary: (string) (len=42) "Delete field settings specified by the app",
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        ID: (string) (len=15) "deleteAppSchema",
        Deprecated: (bool) false,
        Security: ([]map[string][]string) <nil>,
        Parameters: ([]spec.Parameter) (len=2 cap=4) {
         (spec.Parameter) {
          Refable: (spec.Refable) {
           Ref: (spec.Ref) 
          },
          CommonValidations: (spec.CommonValidations) {
           Maximum: (*float64)(<nil>),
           ExclusiveMaximum: (bool) false,
           Minimum: (*float64)(<nil>),
           ExclusiveMinimum: (bool) false,
           MaxLength: (*int64)(<nil>),
           MinLength: (*int64)(<nil>),
           Pattern: (string) "",
           MaxItems: (*int64)(<nil>),
           MinItems: (*int64)(<nil>),
           UniqueItems: (bool) false,
           MultipleOf: (*float64)(<nil>),
           Enum: ([]interface {}) <nil>
          },
          SimpleSchema: (spec.SimpleSchema) {
           Type: (string) (len=6) "string",
           Format: (string) (len=8) "mongo-id",
           Items: (*spec.Items)(<nil>),
           CollectionFormat: (string) "",
           Default: (interface {}) <nil>,
           Example: (interface {}) <nil>
          },
          VendorExtensible: (spec.VendorExtensible) {
           Extensions: (spec.Extensions) <nil>
          },
          ParamProps: (spec.ParamProps) {
           Description: (string) "",
           Name: (string) (len=5) "appID",
           In: (string) (len=4) "path",
           Required: (bool) true,
           Schema: (*spec.Schema)(<nil>),
           AllowEmptyValue: (bool) false
          }
         },
         (spec.Parameter) {
          Refable: (spec.Refable) {
           Ref: (spec.Ref) 
          },
          CommonValidations: (spec.CommonValidations) {
           Maximum: (*float64)(<nil>),
           ExclusiveMaximum: (bool) false,
           Minimum: (*float64)(<nil>),
           ExclusiveMinimum: (bool) false,
           MaxLength: (*int64)(<nil>),
           MinLength: (*int64)(<nil>),
           Pattern: (string) "",
           MaxItems: (*int64)(<nil>),
           MinItems: (*int64)(<nil>),
           UniqueItems: (bool) false,
           MultipleOf: (*float64)(<nil>),
           Enum: ([]interface {}) <nil>
          },
          SimpleSchema: (spec.SimpleSchema) {
           Type: (string) (len=7) "boolean",
           Format: (string) "",
           Items: (*spec.Items)(<nil>),
           CollectionFormat: (string) "",
           Default: (interface {}) <nil>,
           Example: (interface {}) <nil>
          },
          VendorExtensible: (spec.VendorExtensible) {
           Extensions: (spec.Extensions) <nil>
          },
          ParamProps: (spec.ParamProps) {
           Description: (string) (len=67) "Delete field setting-style data warnings when app schema is deleted",
           Name: (string) (len=15) "deleteDataRules",
           In: (string) (len=5) "query",
           Required: (bool) false,
           Schema: (*spec.Schema)(<nil>),
           AllowEmptyValue: (bool) false
          }
         }
        },
        Responses: (*spec.Responses)(0xc000a5be00)({
         VendorExtensible: (spec.VendorExtensible) {
          Extensions: (spec.Extensions) <nil>
         },
         ResponsesProps: (spec.ResponsesProps) {
          Default: (*spec.Response)(<nil>),
          StatusCodeResponses: (map[int]spec.Response) (len=2) {
           (int) 404: (spec.Response) {
            Refable: (spec.Refable) {
             Ref: (spec.Ref) #/responses/NotFound
            },
            ResponseProps: (spec.ResponseProps) {
             Description: (string) "",
             Schema: (*spec.Schema)(<nil>),
             Headers: (map[string]spec.Header) <nil>,
             Examples: (map[string]interface {}) <nil>
            },
            VendorExtensible: (spec.VendorExtensible) {
             Extensions: (spec.Extensions) <nil>
            }
           },
           (int) 200: (spec.Response) {
            Refable: (spec.Refable) {
             Ref: (spec.Ref) 
            },
            ResponseProps: (spec.ResponseProps) {
             Description: (string) (len=11) "OK response",
             Schema: (*spec.Schema)(<nil>),
             Headers: (map[string]spec.Header) <nil>,
             Examples: (map[string]interface {}) <nil>
            },
            VendorExtensible: (spec.VendorExtensible) {
             Extensions: (spec.Extensions) <nil>
            }
           }
          }
         }
        })
       }
      }),
      Options: (*spec.Operation)(<nil>),
      Head: (*spec.Operation)(<nil>),
      Patch: (*spec.Operation)(<nil>),
      Parameters: ([]spec.Parameter) <nil>
     }
    },
    (string) (len=27) "/v1/libraryResources/search": (spec.PathItem) {
     Refable: (spec.Refable) {
      Ref: (spec.Ref) 
     },
     VendorExtensible: (spec.VendorExtensible) {
      Extensions: (spec.Extensions) <nil>
     },
     PathItemProps: (spec.PathItemProps) {
      Get: (*spec.Operation)(0xc0003ae9a0)({
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       OperationProps: (spec.OperationProps) {
        Description: (string) "",
        Consumes: ([]string) <nil>,
        Produces: ([]string) <nil>,
        Schemes: ([]string) <nil>,
        Tags: ([]string) <nil>,
        Summary: (string) (len=57) "Returns a list of library resource matching a given query",
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        ID: (string) (len=21) "searchLibraryResource",
        Deprecated: (bool) false,
        Security: ([]map[string][]string) <nil>,
        Parameters: ([]spec.Parameter) (len=3 cap=4) {
         (spec.Parameter) {
          Refable: (spec.Refable) {
           Ref: (spec.Ref) 
          },
          CommonValidations: (spec.CommonValidations) {
           Maximum: (*float64)(<nil>),
           ExclusiveMaximum: (bool) false,
           Minimum: (*float64)(<nil>),
           ExclusiveMinimum: (bool) false,
           MaxLength: (*int64)(<nil>),
           MinLength: (*int64)(<nil>),
           Pattern: (string) "",
           MaxItems: (*int64)(<nil>),
           MinItems: (*int64)(<nil>),
           UniqueItems: (bool) false,
           MultipleOf: (*float64)(<nil>),
           Enum: ([]interface {}) <nil>
          },
          SimpleSchema: (spec.SimpleSchema) {
           Type: (string) (len=6) "string",
           Format: (string) "",
           Items: (*spec.Items)(<nil>),
           CollectionFormat: (string) "",
           Default: (interface {}) <nil>,
           Example: (interface {}) <nil>
          },
          VendorExtensible: (spec.VendorExtensible) {
           Extensions: (spec.Extensions) <nil>
          },
          ParamProps: (spec.ParamProps) {
           Description: (string) "",
           Name: (string) (len=10) "searchTerm",
           In: (string) (len=5) "query",
           Required: (bool) true,
           Schema: (*spec.Schema)(<nil>),
           AllowEmptyValue: (bool) false
          }
         },
         (spec.Parameter) {
          Refable: (spec.Refable) {
           Ref: (spec.Ref) 
          },
          CommonValidations: (spec.CommonValidations) {
           Maximum: (*float64)(<nil>),
           ExclusiveMaximum: (bool) false,
           Minimum: (*float64)(<nil>),
           ExclusiveMinimum: (bool) false,
           MaxLength: (*int64)(<nil>),
           MinLength: (*int64)(<nil>),
           Pattern: (string) "",
           MaxItems: (*int64)(<nil>),
           MinItems: (*int64)(<nil>),
           UniqueItems: (bool) false,
           MultipleOf: (*float64)(<nil>),
           Enum: ([]interface {}) <nil>
          },
          SimpleSchema: (spec.SimpleSchema) {
           Type: (string) (len=7) "boolean",
           Format: (string) "",
           Items: (*spec.Items)(<nil>),
           CollectionFormat: (string) "",
           Default: (interface {}) <nil>,
           Example: (interface {}) <nil>
          },
          VendorExtensible: (spec.VendorExtensible) {
           Extensions: (spec.Extensions) <nil>
          },
          ParamProps: (spec.ParamProps) {
           Description: (string) "",
           Name: (string) (len=17) "showInLibraryOnly",
           In: (string) (len=5) "query",
           Required: (bool) false,
           Schema: (*spec.Schema)(<nil>),
           AllowEmptyValue: (bool) false
          }
         },
         (spec.Parameter) {
          Refable: (spec.Refable) {
           Ref: (spec.Ref) 
          },
          CommonValidations: (spec.CommonValidations) {
           Maximum: (*float64)(<nil>),
           ExclusiveMaximum: (bool) false,
           Minimum: (*float64)(<nil>),
           ExclusiveMinimum: (bool) false,
           MaxLength: (*int64)(<nil>),
           MinLength: (*int64)(<nil>),
           Pattern: (string) "",
           MaxItems: (*int64)(<nil>),
           MinItems: (*int64)(<nil>),
           UniqueItems: (bool) false,
           MultipleOf: (*float64)(<nil>),
           Enum: ([]interface {}) <nil>
          },
          SimpleSchema: (spec.SimpleSchema) {
           Type: (string) (len=7) "boolean",
           Format: (string) "",
           Items: (*spec.Items)(<nil>),
           CollectionFormat: (string) "",
           Default: (interface {}) <nil>,
           Example: (interface {}) <nil>
          },
          VendorExtensible: (spec.VendorExtensible) {
           Extensions: (spec.Extensions) <nil>
          },
          ParamProps: (spec.ParamProps) {
           Description: (string) "",
           Name: (string) (len=12) "includeLinks",
           In: (string) (len=5) "query",
           Required: (bool) false,
           Schema: (*spec.Schema)(<nil>),
           AllowEmptyValue: (bool) false
          }
         }
        },
        Responses: (*spec.Responses)(0xc0003c77c0)({
         VendorExtensible: (spec.VendorExtensible) {
          Extensions: (spec.Extensions) <nil>
         },
         ResponsesProps: (spec.ResponsesProps) {
          Default: (*spec.Response)(<nil>),
          StatusCodeResponses: (map[int]spec.Response) (len=1) {
           (int) 200: (spec.Response) {
            Refable: (spec.Refable) {
             Ref: (spec.Ref) 
            },
            ResponseProps: (spec.ResponseProps) {
             Description: (string) (len=30) "The matching library resources",
             Schema: (*spec.Schema)(0xc000349200)({
              VendorExtensible: (spec.VendorExtensible) {
               Extensions: (spec.Extensions) <nil>
              },
              SchemaProps: (spec.SchemaProps) {
               ID: (string) "",
               Ref: (spec.Ref) #/definitions/LibraryResources,
               Schema: (spec.SchemaURL) "",
               Description: (string) "",
               Type: (spec.StringOrArray) <nil>,
               Format: (string) "",
               Title: (string) "",
               Default: (interface {}) <nil>,
               Maximum: (*float64)(<nil>),
               ExclusiveMaximum: (bool) false,
               Minimum: (*float64)(<nil>),
               ExclusiveMinimum: (bool) false,
               MaxLength: (*int64)(<nil>),
               MinLength: (*int64)(<nil>),
               Pattern: (string) "",
               MaxItems: (*int64)(<nil>),
               MinItems: (*int64)(<nil>),
               UniqueItems: (bool) false,
               MultipleOf: (*float64)(<nil>),
               Enum: ([]interface {}) <nil>,
               MaxProperties: (*int64)(<nil>),
               MinProperties: (*int64)(<nil>),
               Required: ([]string) <nil>,
               Items: (*spec.SchemaOrArray)(<nil>),
               AllOf: ([]spec.Schema) <nil>,
               OneOf: ([]spec.Schema) <nil>,
               AnyOf: ([]spec.Schema) <nil>,
               Not: (*spec.Schema)(<nil>),
               Properties: (map[string]spec.Schema) <nil>,
               AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
               PatternProperties: (map[string]spec.Schema) <nil>,
               Dependencies: (spec.Dependencies) <nil>,
               AdditionalItems: (*spec.SchemaOrBool)(<nil>),
               Definitions: (spec.Definitions) <nil>
              },
              SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
               Discriminator: (string) "",
               ReadOnly: (bool) false,
               XML: (*spec.XMLObject)(<nil>),
               ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
               Example: (interface {}) <nil>
              },
              ExtraProps: (map[string]interface {}) <nil>
             }),
             Headers: (map[string]spec.Header) <nil>,
             Examples: (map[string]interface {}) <nil>
            },
            VendorExtensible: (spec.VendorExtensible) {
             Extensions: (spec.Extensions) <nil>
            }
           }
          }
         }
        })
       }
      }),
      Put: (*spec.Operation)(<nil>),
      Post: (*spec.Operation)(<nil>),
      Delete: (*spec.Operation)(<nil>),
      Options: (*spec.Operation)(<nil>),
      Head: (*spec.Operation)(<nil>),
      Patch: (*spec.Operation)(<nil>),
      Parameters: ([]spec.Parameter) <nil>
     }
    },
    (string) (len=13) "/v1/platforms": (spec.PathItem) {
     Refable: (spec.Refable) {
      Ref: (spec.Ref) 
     },
     VendorExtensible: (spec.VendorExtensible) {
      Extensions: (spec.Extensions) <nil>
     },
     PathItemProps: (spec.PathItemProps) {
      Get: (*spec.Operation)(0xc0003aee00)({
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       OperationProps: (spec.OperationProps) {
        Description: (string) (len=56) "The server takes in the intersection of input parameters",
        Consumes: ([]string) <nil>,
        Produces: ([]string) <nil>,
        Schemes: ([]string) <nil>,
        Tags: ([]string) <nil>,
        Summary: (string) (len=41) "Gets platforms filtered by the parameters",
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        ID: (string) (len=12) "getPlatforms",
        Deprecated: (bool) false,
        Security: ([]map[string][]string) <nil>,
        Parameters: ([]spec.Parameter) (len=2 cap=4) {
         (spec.Parameter) {
          Refable: (spec.Refable) {
           Ref: (spec.Ref) 
          },
          CommonValidations: (spec.CommonValidations) {
           Maximum: (*float64)(<nil>),
           ExclusiveMaximum: (bool) false,
           Minimum: (*float64)(<nil>),
           ExclusiveMinimum: (bool) false,
           MaxLength: (*int64)(<nil>),
           MinLength: (*int64)(<nil>),
           Pattern: (string) "",
           MaxItems: (*int64)(<nil>),
           MinItems: (*int64)(<nil>),
           UniqueItems: (bool) false,
           MultipleOf: (*float64)(<nil>),
           Enum: ([]interface {}) <nil>
          },
          SimpleSchema: (spec.SimpleSchema) {
           Type: (string) (len=5) "array",
           Format: (string) "",
           Items: (*spec.Items)(0xc000799d00)({
            Refable: (spec.Refable) {
             Ref: (spec.Ref) 
            },
            CommonValidations: (spec.CommonValidations) {
             Maximum: (*float64)(<nil>),
             ExclusiveMaximum: (bool) false,
             Minimum: (*float64)(<nil>),
             ExclusiveMinimum: (bool) false,
             MaxLength: (*int64)(<nil>),
             MinLength: (*int64)(<nil>),
             Pattern: (string) "",
             MaxItems: (*int64)(<nil>),
             MinItems: (*int64)(<nil>),
             UniqueItems: (bool) false,
             MultipleOf: (*float64)(<nil>),
             Enum: ([]interface {}) <nil>
            },
            SimpleSchema: (spec.SimpleSchema) {
             Type: (string) (len=6) "string",
             Format: (string) "",
             Items: (*spec.Items)(<nil>),
             CollectionFormat: (string) "",
             Default: (interface {}) <nil>,
             Example: (interface {}) <nil>
            },
            VendorExtensible: (spec.VendorExtensible) {
             Extensions: (spec.Extensions) <nil>
            }
           }),
           CollectionFormat: (string) "",
           Default: (interface {}) <nil>,
           Example: (interface {}) <nil>
          },
          VendorExtensible: (spec.VendorExtensible) {
           Extensions: (spec.Extensions) <nil>
          },
          ParamProps: (spec.ParamProps) {
           Description: (string) "",
           Name: (string) (len=6) "appIds",
           In: (string) (len=5) "query",
           Required: (bool) false,
           Schema: (*spec.Schema)(<nil>),
           AllowEmptyValue: (bool) false
          }
         },
         (spec.Parameter) {
          Refable: (spec.Refable) {
           Ref: (spec.Ref) 
          },
          CommonValidations: (spec.CommonValidations) {
           Maximum: (*float64)(<nil>),
           ExclusiveMaximum: (bool) false,
           Minimum: (*float64)(<nil>),
           ExclusiveMinimum: (bool) false,
           MaxLength: (*int64)(<nil>),
           MinLength: (*int64)(<nil>),
           Pattern: (string) "",
           MaxItems: (*int64)(<nil>),
           MinItems: (*int64)(<nil>),
           UniqueItems: (bool) false,
           MultipleOf: (*float64)(<nil>),
           Enum: ([]interface {}) <nil>
          },
          SimpleSchema: (spec.SimpleSchema) {
           Type: (string) (len=6) "string",
           Format: (string) "",
           Items: (*spec.Items)(<nil>),
           CollectionFormat: (string) "",
           Default: (interface {}) <nil>,
           Example: (interface {}) <nil>
          },
          VendorExtensible: (spec.VendorExtensible) {
           Extensions: (spec.Extensions) <nil>
          },
          ParamProps: (spec.ParamProps) {
           Description: (string) "",
           Name: (string) (len=4) "name",
           In: (string) (len=5) "query",
           Required: (bool) false,
           Schema: (*spec.Schema)(<nil>),
           AllowEmptyValue: (bool) false
          }
         }
        },
        Responses: (*spec.Responses)(0xc000862c00)({
         VendorExtensible: (spec.VendorExtensible) {
          Extensions: (spec.Extensions) <nil>
         },
         ResponsesProps: (spec.ResponsesProps) {
          Default: (*spec.Response)(<nil>),
          StatusCodeResponses: (map[int]spec.Response) (len=1) {
           (int) 200: (spec.Response) {
            Refable: (spec.Refable) {
             Ref: (spec.Ref) 
            },
            ResponseProps: (spec.ResponseProps) {
             Description: (string) (len=44) "Array of platforms that satisfy the criteria",
             Schema: (*spec.Schema)(0xc00032f440)({
              VendorExtensible: (spec.VendorExtensible) {
               Extensions: (spec.Extensions) <nil>
              },
              SchemaProps: (spec.SchemaProps) {
               ID: (string) "",
               Ref: (spec.Ref) ,
               Schema: (spec.SchemaURL) "",
               Description: (string) "",
               Type: (spec.StringOrArray) (len=1 cap=1) {
                (string) (len=5) "array"
               },
               Format: (string) "",
               Title: (string) "",
               Default: (interface {}) <nil>,
               Maximum: (*float64)(<nil>),
               ExclusiveMaximum: (bool) false,
               Minimum: (*float64)(<nil>),
               ExclusiveMinimum: (bool) false,
               MaxLength: (*int64)(<nil>),
               MinLength: (*int64)(<nil>),
               Pattern: (string) "",
               MaxItems: (*int64)(<nil>),
               MinItems: (*int64)(<nil>),
               UniqueItems: (bool) false,
               MultipleOf: (*float64)(<nil>),
               Enum: ([]interface {}) <nil>,
               MaxProperties: (*int64)(<nil>),
               MinProperties: (*int64)(<nil>),
               Required: ([]string) <nil>,
               Items: (*spec.SchemaOrArray)(0xc000862c20)({
                Schema: (*spec.Schema)(0xc0003226c0)({
                 VendorExtensible: (spec.VendorExtensible) {
                  Extensions: (spec.Extensions) <nil>
                 },
                 SchemaProps: (spec.SchemaProps) {
                  ID: (string) "",
                  Ref: (spec.Ref) #/definitions/Platform,
                  Schema: (spec.SchemaURL) "",
                  Description: (string) "",
                  Type: (spec.StringOrArray) <nil>,
                  Format: (string) "",
                  Title: (string) "",
                  Default: (interface {}) <nil>,
                  Maximum: (*float64)(<nil>),
                  ExclusiveMaximum: (bool) false,
                  Minimum: (*float64)(<nil>),
                  ExclusiveMinimum: (bool) false,
                  MaxLength: (*int64)(<nil>),
                  MinLength: (*int64)(<nil>),
                  Pattern: (string) "",
                  MaxItems: (*int64)(<nil>),
                  MinItems: (*int64)(<nil>),
                  UniqueItems: (bool) false,
                  MultipleOf: (*float64)(<nil>),
                  Enum: ([]interface {}) <nil>,
                  MaxProperties: (*int64)(<nil>),
                  MinProperties: (*int64)(<nil>),
                  Required: ([]string) <nil>,
                  Items: (*spec.SchemaOrArray)(<nil>),
                  AllOf: ([]spec.Schema) <nil>,
                  OneOf: ([]spec.Schema) <nil>,
                  AnyOf: ([]spec.Schema) <nil>,
                  Not: (*spec.Schema)(<nil>),
                  Properties: (map[string]spec.Schema) <nil>,
                  AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
                  PatternProperties: (map[string]spec.Schema) <nil>,
                  Dependencies: (spec.Dependencies) <nil>,
                  AdditionalItems: (*spec.SchemaOrBool)(<nil>),
                  Definitions: (spec.Definitions) <nil>
                 },
                 SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
                  Discriminator: (string) "",
                  ReadOnly: (bool) false,
                  XML: (*spec.XMLObject)(<nil>),
                  ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
                  Example: (interface {}) <nil>
                 },
                 ExtraProps: (map[string]interface {}) <nil>
                }),
                Schemas: ([]spec.Schema) <nil>
               }),
               AllOf: ([]spec.Schema) <nil>,
               OneOf: ([]spec.Schema) <nil>,
               AnyOf: ([]spec.Schema) <nil>,
               Not: (*spec.Schema)(<nil>),
               Properties: (map[string]spec.Schema) <nil>,
               AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
               PatternProperties: (map[string]spec.Schema) <nil>,
               Dependencies: (spec.Dependencies) <nil>,
               AdditionalItems: (*spec.SchemaOrBool)(<nil>),
               Definitions: (spec.Definitions) <nil>
              },
              SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
               Discriminator: (string) "",
               ReadOnly: (bool) false,
               XML: (*spec.XMLObject)(<nil>),
               ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
               Example: (interface {}) <nil>
              },
              ExtraProps: (map[string]interface {}) <nil>
             }),
             Headers: (map[string]spec.Header) <nil>,
             Examples: (map[string]interface {}) <nil>
            },
            VendorExtensible: (spec.VendorExtensible) {
             Extensions: (spec.Extensions) <nil>
            }
           }
          }
         }
        })
       }
      }),
      Put: (*spec.Operation)(<nil>),
      Post: (*spec.Operation)(<nil>),
      Delete: (*spec.Operation)(<nil>),
      Options: (*spec.Operation)(<nil>),
      Head: (*spec.Operation)(<nil>),
      Patch: (*spec.Operation)(<nil>),
      Parameters: ([]spec.Parameter) <nil>
     }
    },
    (string) (len=26) "/v1/apps/{appID}/platforms": (spec.PathItem) {
     Refable: (spec.Refable) {
      Ref: (spec.Ref) 
     },
     VendorExtensible: (spec.VendorExtensible) {
      Extensions: (spec.Extensions) <nil>
     },
     PathItemProps: (spec.PathItemProps) {
      Get: (*spec.Operation)(0xc0003aeee0)({
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       OperationProps: (spec.OperationProps) {
        Description: (string) "",
        Consumes: ([]string) <nil>,
        Produces: ([]string) <nil>,
        Schemes: ([]string) <nil>,
        Tags: ([]string) <nil>,
        Summary: (string) (len=44) "Returns list of platforms for an application",
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        ID: (string) (len=19) "getPlatformsByAppID",
        Deprecated: (bool) false,
        Security: ([]map[string][]string) <nil>,
        Parameters: ([]spec.Parameter) (len=1 cap=4) {
         (spec.Parameter) {
          Refable: (spec.Refable) {
           Ref: (spec.Ref) 
          },
          CommonValidations: (spec.CommonValidations) {
           Maximum: (*float64)(<nil>),
           ExclusiveMaximum: (bool) false,
           Minimum: (*float64)(<nil>),
           ExclusiveMinimum: (bool) false,
           MaxLength: (*int64)(<nil>),
           MinLength: (*int64)(<nil>),
           Pattern: (string) "",
           MaxItems: (*int64)(<nil>),
           MinItems: (*int64)(<nil>),
           UniqueItems: (bool) false,
           MultipleOf: (*float64)(<nil>),
           Enum: ([]interface {}) <nil>
          },
          SimpleSchema: (spec.SimpleSchema) {
           Type: (string) (len=6) "string",
           Format: (string) "",
           Items: (*spec.Items)(<nil>),
           CollectionFormat: (string) "",
           Default: (interface {}) <nil>,
           Example: (interface {}) <nil>
          },
          VendorExtensible: (spec.VendorExtensible) {
           Extensions: (spec.Extensions) <nil>
          },
          ParamProps: (spec.ParamProps) {
           Description: (string) "",
           Name: (string) (len=5) "appID",
           In: (string) (len=4) "path",
           Required: (bool) true,
           Schema: (*spec.Schema)(<nil>),
           AllowEmptyValue: (bool) false
          }
         }
        },
        Responses: (*spec.Responses)(0xc000863120)({
         VendorExtensible: (spec.VendorExtensible) {
          Extensions: (spec.Extensions) <nil>
         },
         ResponsesProps: (spec.ResponsesProps) {
          Default: (*spec.Response)(<nil>),
          StatusCodeResponses: (map[int]spec.Response) (len=2) {
           (int) 200: (spec.Response) {
            Refable: (spec.Refable) {
             Ref: (spec.Ref) 
            },
            ResponseProps: (spec.ResponseProps) {
             Description: (string) (len=39) "Array of platforms belonging to the app",
             Schema: (*spec.Schema)(0xc000322fc0)({
              VendorExtensible: (spec.VendorExtensible) {
               Extensions: (spec.Extensions) <nil>
              },
              SchemaProps: (spec.SchemaProps) {
               ID: (string) "",
               Ref: (spec.Ref) ,
               Schema: (spec.SchemaURL) "",
               Description: (string) "",
               Type: (spec.StringOrArray) (len=1 cap=1) {
                (string) (len=5) "array"
               },
               Format: (string) "",
               Title: (string) "",
               Default: (interface {}) <nil>,
               Maximum: (*float64)(<nil>),
               ExclusiveMaximum: (bool) false,
               Minimum: (*float64)(<nil>),
               ExclusiveMinimum: (bool) false,
               MaxLength: (*int64)(<nil>),
               MinLength: (*int64)(<nil>),
               Pattern: (string) "",
               MaxItems: (*int64)(<nil>),
               MinItems: (*int64)(<nil>),
               UniqueItems: (bool) false,
               MultipleOf: (*float64)(<nil>),
               Enum: ([]interface {}) <nil>,
               MaxProperties: (*int64)(<nil>),
               MinProperties: (*int64)(<nil>),
               Required: ([]string) <nil>,
               Items: (*spec.SchemaOrArray)(0xc000863140)({
                Schema: (*spec.Schema)(0xc0003238c0)({
                 VendorExtensible: (spec.VendorExtensible) {
                  Extensions: (spec.Extensions) <nil>
                 },
                 SchemaProps: (spec.SchemaProps) {
                  ID: (string) "",
                  Ref: (spec.Ref) #/definitions/Platform,
                  Schema: (spec.SchemaURL) "",
                  Description: (string) "",
                  Type: (spec.StringOrArray) <nil>,
                  Format: (string) "",
                  Title: (string) "",
                  Default: (interface {}) <nil>,
                  Maximum: (*float64)(<nil>),
                  ExclusiveMaximum: (bool) false,
                  Minimum: (*float64)(<nil>),
                  ExclusiveMinimum: (bool) false,
                  MaxLength: (*int64)(<nil>),
                  MinLength: (*int64)(<nil>),
                  Pattern: (string) "",
                  MaxItems: (*int64)(<nil>),
                  MinItems: (*int64)(<nil>),
                  UniqueItems: (bool) false,
                  MultipleOf: (*float64)(<nil>),
                  Enum: ([]interface {}) <nil>,
                  MaxProperties: (*int64)(<nil>),
                  MinProperties: (*int64)(<nil>),
                  Required: ([]string) <nil>,
                  Items: (*spec.SchemaOrArray)(<nil>),
                  AllOf: ([]spec.Schema) <nil>,
                  OneOf: ([]spec.Schema) <nil>,
                  AnyOf: ([]spec.Schema) <nil>,
                  Not: (*spec.Schema)(<nil>),
                  Properties: (map[string]spec.Schema) <nil>,
                  AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
                  PatternProperties: (map[string]spec.Schema) <nil>,
                  Dependencies: (spec.Dependencies) <nil>,
                  AdditionalItems: (*spec.SchemaOrBool)(<nil>),
                  Definitions: (spec.Definitions) <nil>
                 },
                 SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
                  Discriminator: (string) "",
                  ReadOnly: (bool) false,
                  XML: (*spec.XMLObject)(<nil>),
                  ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
                  Example: (interface {}) <nil>
                 },
                 ExtraProps: (map[string]interface {}) <nil>
                }),
                Schemas: ([]spec.Schema) <nil>
               }),
               AllOf: ([]spec.Schema) <nil>,
               OneOf: ([]spec.Schema) <nil>,
               AnyOf: ([]spec.Schema) <nil>,
               Not: (*spec.Schema)(<nil>),
               Properties: (map[string]spec.Schema) <nil>,
               AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
               PatternProperties: (map[string]spec.Schema) <nil>,
               Dependencies: (spec.Dependencies) <nil>,
               AdditionalItems: (*spec.SchemaOrBool)(<nil>),
               Definitions: (spec.Definitions) <nil>
              },
              SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
               Discriminator: (string) "",
               ReadOnly: (bool) false,
               XML: (*spec.XMLObject)(<nil>),
               ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
               Example: (interface {}) <nil>
              },
              ExtraProps: (map[string]interface {}) <nil>
             }),
             Headers: (map[string]spec.Header) <nil>,
             Examples: (map[string]interface {}) <nil>
            },
            VendorExtensible: (spec.VendorExtensible) {
             Extensions: (spec.Extensions) <nil>
            }
           },
           (int) 404: (spec.Response) {
            Refable: (spec.Refable) {
             Ref: (spec.Ref) #/responses/NotFound
            },
            ResponseProps: (spec.ResponseProps) {
             Description: (string) "",
             Schema: (*spec.Schema)(<nil>),
             Headers: (map[string]spec.Header) <nil>,
             Examples: (map[string]interface {}) <nil>
            },
            VendorExtensible: (spec.VendorExtensible) {
             Extensions: (spec.Extensions) <nil>
            }
           }
          }
         }
        })
       }
      }),
      Put: (*spec.Operation)(0xc0003aefc0)({
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       OperationProps: (spec.OperationProps) {
        Description: (string) "",
        Consumes: ([]string) <nil>,
        Produces: ([]string) <nil>,
        Schemes: ([]string) <nil>,
        Tags: ([]string) <nil>,
        Summary: (string) (len=18) "Creates a platform",
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        ID: (string) (len=14) "createPlatform",
        Deprecated: (bool) false,
        Security: ([]map[string][]string) <nil>,
        Parameters: ([]spec.Parameter) (len=2 cap=4) {
         (spec.Parameter) {
          Refable: (spec.Refable) {
           Ref: (spec.Ref) 
          },
          CommonValidations: (spec.CommonValidations) {
           Maximum: (*float64)(<nil>),
           ExclusiveMaximum: (bool) false,
           Minimum: (*float64)(<nil>),
           ExclusiveMinimum: (bool) false,
           MaxLength: (*int64)(<nil>),
           MinLength: (*int64)(<nil>),
           Pattern: (string) "",
           MaxItems: (*int64)(<nil>),
           MinItems: (*int64)(<nil>),
           UniqueItems: (bool) false,
           MultipleOf: (*float64)(<nil>),
           Enum: ([]interface {}) <nil>
          },
          SimpleSchema: (spec.SimpleSchema) {
           Type: (string) (len=6) "string",
           Format: (string) "",
           Items: (*spec.Items)(<nil>),
           CollectionFormat: (string) "",
           Default: (interface {}) <nil>,
           Example: (interface {}) <nil>
          },
          VendorExtensible: (spec.VendorExtensible) {
           Extensions: (spec.Extensions) <nil>
          },
          ParamProps: (spec.ParamProps) {
           Description: (string) "",
           Name: (string) (len=5) "appID",
           In: (string) (len=4) "path",
           Required: (bool) true,
           Schema: (*spec.Schema)(<nil>),
           AllowEmptyValue: (bool) false
          }
         },
         (spec.Parameter) {
          Refable: (spec.Refable) {
           Ref: (spec.Ref) 
          },
          CommonValidations: (spec.CommonValidations) {
           Maximum: (*float64)(<nil>),
           ExclusiveMaximum: (bool) false,
           Minimum: (*float64)(<nil>),
           ExclusiveMinimum: (bool) false,
           MaxLength: (*int64)(<nil>),
           MinLength: (*int64)(<nil>),
           Pattern: (string) "",
           MaxItems: (*int64)(<nil>),
           MinItems: (*int64)(<nil>),
           UniqueItems: (bool) false,
           MultipleOf: (*float64)(<nil>),
           Enum: ([]interface {}) <nil>
          },
          SimpleSchema: (spec.SimpleSchema) {
           Type: (string) "",
           Format: (string) "",
           Items: (*spec.Items)(<nil>),
           CollectionFormat: (string) "",
           Default: (interface {}) <nil>,
           Example: (interface {}) <nil>
          },
          VendorExtensible: (spec.VendorExtensible) {
           Extensions: (spec.Extensions) <nil>
          },
          ParamProps: (spec.ParamProps) {
           Description: (string) "",
           Name: (string) (len=7) "request",
           In: (string) (len=4) "body",
           Required: (bool) true,
           Schema: (*spec.Schema)(0xc00031a6c0)({
            VendorExtensible: (spec.VendorExtensible) {
             Extensions: (spec.Extensions) <nil>
            },
            SchemaProps: (spec.SchemaProps) {
             ID: (string) "",
             Ref: (spec.Ref) #/definitions/CreatePlatformRequest,
             Schema: (spec.SchemaURL) "",
             Description: (string) "",
             Type: (spec.StringOrArray) <nil>,
             Format: (string) "",
             Title: (string) "",
             Default: (interface {}) <nil>,
             Maximum: (*float64)(<nil>),
             ExclusiveMaximum: (bool) false,
             Minimum: (*float64)(<nil>),
             ExclusiveMinimum: (bool) false,
             MaxLength: (*int64)(<nil>),
             MinLength: (*int64)(<nil>),
             Pattern: (string) "",
             MaxItems: (*int64)(<nil>),
             MinItems: (*int64)(<nil>),
             UniqueItems: (bool) false,
             MultipleOf: (*float64)(<nil>),
             Enum: ([]interface {}) <nil>,
             MaxProperties: (*int64)(<nil>),
             MinProperties: (*int64)(<nil>),
             Required: ([]string) <nil>,
             Items: (*spec.SchemaOrArray)(<nil>),
             AllOf: ([]spec.Schema) <nil>,
             OneOf: ([]spec.Schema) <nil>,
             AnyOf: ([]spec.Schema) <nil>,
             Not: (*spec.Schema)(<nil>),
             Properties: (map[string]spec.Schema) <nil>,
             AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
             PatternProperties: (map[string]spec.Schema) <nil>,
             Dependencies: (spec.Dependencies) <nil>,
             AdditionalItems: (*spec.SchemaOrBool)(<nil>),
             Definitions: (spec.Definitions) <nil>
            },
            SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
             Discriminator: (string) "",
             ReadOnly: (bool) false,
             XML: (*spec.XMLObject)(<nil>),
             ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
             Example: (interface {}) <nil>
            },
            ExtraProps: (map[string]interface {}) <nil>
           }),
           AllowEmptyValue: (bool) false
          }
         }
        },
        Responses: (*spec.Responses)(0xc0008636c0)({
         VendorExtensible: (spec.VendorExtensible) {
          Extensions: (spec.Extensions) <nil>
         },
         ResponsesProps: (spec.ResponsesProps) {
          Default: (*spec.Response)(<nil>),
          StatusCodeResponses: (map[int]spec.Response) (len=2) {
           (int) 200: (spec.Response) {
            Refable: (spec.Refable) {
             Ref: (spec.Ref) 
            },
            ResponseProps: (spec.ResponseProps) {
             Description: (string) (len=20) "The created platform",
             Schema: (*spec.Schema)(0xc00031afc0)({
              VendorExtensible: (spec.VendorExtensible) {
               Extensions: (spec.Extensions) <nil>
              },
              SchemaProps: (spec.SchemaProps) {
               ID: (string) "",
               Ref: (spec.Ref) #/definitions/Platform,
               Schema: (spec.SchemaURL) "",
               Description: (string) "",
               Type: (spec.StringOrArray) <nil>,
               Format: (string) "",
               Title: (string) "",
               Default: (interface {}) <nil>,
               Maximum: (*float64)(<nil>),
               ExclusiveMaximum: (bool) false,
               Minimum: (*float64)(<nil>),
               ExclusiveMinimum: (bool) false,
               MaxLength: (*int64)(<nil>),
               MinLength: (*int64)(<nil>),
               Pattern: (string) "",
               MaxItems: (*int64)(<nil>),
               MinItems: (*int64)(<nil>),
               UniqueItems: (bool) false,
               MultipleOf: (*float64)(<nil>),
               Enum: ([]interface {}) <nil>,
               MaxProperties: (*int64)(<nil>),
               MinProperties: (*int64)(<nil>),
               Required: ([]string) <nil>,
               Items: (*spec.SchemaOrArray)(<nil>),
               AllOf: ([]spec.Schema) <nil>,
               OneOf: ([]spec.Schema) <nil>,
               AnyOf: ([]spec.Schema) <nil>,
               Not: (*spec.Schema)(<nil>),
               Properties: (map[string]spec.Schema) <nil>,
               AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
               PatternProperties: (map[string]spec.Schema) <nil>,
               Dependencies: (spec.Dependencies) <nil>,
               AdditionalItems: (*spec.SchemaOrBool)(<nil>),
               Definitions: (spec.Definitions) <nil>
              },
              SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
               Discriminator: (string) "",
               ReadOnly: (bool) false,
               XML: (*spec.XMLObject)(<nil>),
               ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
               Example: (interface {}) <nil>
              },
              ExtraProps: (map[string]interface {}) <nil>
             }),
             Headers: (map[string]spec.Header) <nil>,
             Examples: (map[string]interface {}) <nil>
            },
            VendorExtensible: (spec.VendorExtensible) {
             Extensions: (spec.Extensions) <nil>
            }
           },
           (int) 404: (spec.Response) {
            Refable: (spec.Refable) {
             Ref: (spec.Ref) #/responses/NotFound
            },
            ResponseProps: (spec.ResponseProps) {
             Description: (string) "",
             Schema: (*spec.Schema)(<nil>),
             Headers: (map[string]spec.Header) <nil>,
             Examples: (map[string]interface {}) <nil>
            },
            VendorExtensible: (spec.VendorExtensible) {
             Extensions: (spec.Extensions) <nil>
            }
           }
          }
         }
        })
       }
      }),
      Post: (*spec.Operation)(<nil>),
      Delete: (*spec.Operation)(<nil>),
      Options: (*spec.Operation)(<nil>),
      Head: (*spec.Operation)(<nil>),
      Patch: (*spec.Operation)(<nil>),
      Parameters: ([]spec.Parameter) <nil>
     }
    },
    (string) (len=23) "/v1/apps/{appID}/admins": (spec.PathItem) {
     Refable: (spec.Refable) {
      Ref: (spec.Ref) 
     },
     VendorExtensible: (spec.VendorExtensible) {
      Extensions: (spec.Extensions) <nil>
     },
     PathItemProps: (spec.PathItemProps) {
      Get: (*spec.Operation)(0xc0000e01c0)({
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       OperationProps: (spec.OperationProps) {
        Description: (string) "",
        Consumes: ([]string) <nil>,
        Produces: ([]string) <nil>,
        Schemes: ([]string) <nil>,
        Tags: ([]string) <nil>,
        Summary: (string) (len=17) "Admins for an app",
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        ID: (string) (len=15) "getAdminsForApp",
        Deprecated: (bool) false,
        Security: ([]map[string][]string) <nil>,
        Parameters: ([]spec.Parameter) (len=1 cap=4) {
         (spec.Parameter) {
          Refable: (spec.Refable) {
           Ref: (spec.Ref) 
          },
          CommonValidations: (spec.CommonValidations) {
           Maximum: (*float64)(<nil>),
           ExclusiveMaximum: (bool) false,
           Minimum: (*float64)(<nil>),
           ExclusiveMinimum: (bool) false,
           MaxLength: (*int64)(<nil>),
           MinLength: (*int64)(<nil>),
           Pattern: (string) "",
           MaxItems: (*int64)(<nil>),
           MinItems: (*int64)(<nil>),
           UniqueItems: (bool) false,
           MultipleOf: (*float64)(<nil>),
           Enum: ([]interface {}) <nil>
          },
          SimpleSchema: (spec.SimpleSchema) {
           Type: (string) (len=6) "string",
           Format: (string) "",
           Items: (*spec.Items)(<nil>),
           CollectionFormat: (string) "",
           Default: (interface {}) <nil>,
           Example: (interface {}) <nil>
          },
          VendorExtensible: (spec.VendorExtensible) {
           Extensions: (spec.Extensions) <nil>
          },
          ParamProps: (spec.ParamProps) {
           Description: (string) "",
           Name: (string) (len=5) "appID",
           In: (string) (len=4) "path",
           Required: (bool) true,
           Schema: (*spec.Schema)(<nil>),
           AllowEmptyValue: (bool) false
          }
         }
        },
        Responses: (*spec.Responses)(0xc00081b9c0)({
         VendorExtensible: (spec.VendorExtensible) {
          Extensions: (spec.Extensions) <nil>
         },
         ResponsesProps: (spec.ResponsesProps) {
          Default: (*spec.Response)(<nil>),
          StatusCodeResponses: (map[int]spec.Response) (len=2) {
           (int) 200: (spec.Response) {
            Refable: (spec.Refable) {
             Ref: (spec.Ref) 
            },
            ResponseProps: (spec.ResponseProps) {
             Description: (string) (len=22) "The admins for the app",
             Schema: (*spec.Schema)(0xc000405b00)({
              VendorExtensible: (spec.VendorExtensible) {
               Extensions: (spec.Extensions) <nil>
              },
              SchemaProps: (spec.SchemaProps) {
               ID: (string) "",
               Ref: (spec.Ref) ,
               Schema: (spec.SchemaURL) "",
               Description: (string) "",
               Type: (spec.StringOrArray) (len=1 cap=1) {
                (string) (len=5) "array"
               },
               Format: (string) "",
               Title: (string) "",
               Default: (interface {}) <nil>,
               Maximum: (*float64)(<nil>),
               ExclusiveMaximum: (bool) false,
               Minimum: (*float64)(<nil>),
               ExclusiveMinimum: (bool) false,
               MaxLength: (*int64)(<nil>),
               MinLength: (*int64)(<nil>),
               Pattern: (string) "",
               MaxItems: (*int64)(<nil>),
               MinItems: (*int64)(<nil>),
               UniqueItems: (bool) false,
               MultipleOf: (*float64)(<nil>),
               Enum: ([]interface {}) <nil>,
               MaxProperties: (*int64)(<nil>),
               MinProperties: (*int64)(<nil>),
               Required: ([]string) <nil>,
               Items: (*spec.SchemaOrArray)(0xc00081b9e0)({
                Schema: (*spec.Schema)(0xc000412240)({
                 VendorExtensible: (spec.VendorExtensible) {
                  Extensions: (spec.Extensions) <nil>
                 },
                 SchemaProps: (spec.SchemaProps) {
                  ID: (string) "",
                  Ref: (spec.Ref) #/definitions/AppAdminResponse,
                  Schema: (spec.SchemaURL) "",
                  Description: (string) "",
                  Type: (spec.StringOrArray) <nil>,
                  Format: (string) "",
                  Title: (string) "",
                  Default: (interface {}) <nil>,
                  Maximum: (*float64)(<nil>),
                  ExclusiveMaximum: (bool) false,
                  Minimum: (*float64)(<nil>),
                  ExclusiveMinimum: (bool) false,
                  MaxLength: (*int64)(<nil>),
                  MinLength: (*int64)(<nil>),
                  Pattern: (string) "",
                  MaxItems: (*int64)(<nil>),
                  MinItems: (*int64)(<nil>),
                  UniqueItems: (bool) false,
                  MultipleOf: (*float64)(<nil>),
                  Enum: ([]interface {}) <nil>,
                  MaxProperties: (*int64)(<nil>),
                  MinProperties: (*int64)(<nil>),
                  Required: ([]string) <nil>,
                  Items: (*spec.SchemaOrArray)(<nil>),
                  AllOf: ([]spec.Schema) <nil>,
                  OneOf: ([]spec.Schema) <nil>,
                  AnyOf: ([]spec.Schema) <nil>,
                  Not: (*spec.Schema)(<nil>),
                  Properties: (map[string]spec.Schema) <nil>,
                  AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
                  PatternProperties: (map[string]spec.Schema) <nil>,
                  Dependencies: (spec.Dependencies) <nil>,
                  AdditionalItems: (*spec.SchemaOrBool)(<nil>),
                  Definitions: (spec.Definitions) <nil>
                 },
                 SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
                  Discriminator: (string) "",
                  ReadOnly: (bool) false,
                  XML: (*spec.XMLObject)(<nil>),
                  ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
                  Example: (interface {}) <nil>
                 },
                 ExtraProps: (map[string]interface {}) <nil>
                }),
                Schemas: ([]spec.Schema) <nil>
               }),
               AllOf: ([]spec.Schema) <nil>,
               OneOf: ([]spec.Schema) <nil>,
               AnyOf: ([]spec.Schema) <nil>,
               Not: (*spec.Schema)(<nil>),
               Properties: (map[string]spec.Schema) <nil>,
               AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
               PatternProperties: (map[string]spec.Schema) <nil>,
               Dependencies: (spec.Dependencies) <nil>,
               AdditionalItems: (*spec.SchemaOrBool)(<nil>),
               Definitions: (spec.Definitions) <nil>
              },
              SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
               Discriminator: (string) "",
               ReadOnly: (bool) false,
               XML: (*spec.XMLObject)(<nil>),
               ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
               Example: (interface {}) <nil>
              },
              ExtraProps: (map[string]interface {}) <nil>
             }),
             Headers: (map[string]spec.Header) <nil>,
             Examples: (map[string]interface {}) <nil>
            },
            VendorExtensible: (spec.VendorExtensible) {
             Extensions: (spec.Extensions) <nil>
            }
           },
           (int) 404: (spec.Response) {
            Refable: (spec.Refable) {
             Ref: (spec.Ref) #/responses/NotFound
            },
            ResponseProps: (spec.ResponseProps) {
             Description: (string) "",
             Schema: (*spec.Schema)(<nil>),
             Headers: (map[string]spec.Header) <nil>,
             Examples: (map[string]interface {}) <nil>
            },
            VendorExtensible: (spec.VendorExtensible) {
             Extensions: (spec.Extensions) <nil>
            }
           }
          }
         }
        })
       }
      }),
      Put: (*spec.Operation)(<nil>),
      Post: (*spec.Operation)(<nil>),
      Delete: (*spec.Operation)(<nil>),
      Options: (*spec.Operation)(<nil>),
      Head: (*spec.Operation)(<nil>),
      Patch: (*spec.Operation)(<nil>),
      Parameters: ([]spec.Parameter) <nil>
     }
    },
    (string) (len=37) "/v1/libraryResources/{shortname}/link": (spec.PathItem) {
     Refable: (spec.Refable) {
      Ref: (spec.Ref) 
     },
     VendorExtensible: (spec.VendorExtensible) {
      Extensions: (spec.Extensions) <nil>
     },
     PathItemProps: (spec.PathItemProps) {
      Get: (*spec.Operation)(<nil>),
      Put: (*spec.Operation)(<nil>),
      Post: (*spec.Operation)(<nil>),
      Delete: (*spec.Operation)(0xc0000e0460)({
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       OperationProps: (spec.OperationProps) {
        Description: (string) "",
        Consumes: ([]string) <nil>,
        Produces: ([]string) <nil>,
        Schemes: ([]string) <nil>,
        Tags: ([]string) <nil>,
        Summary: (string) (len=45) "Deletes a library link with a given shortname",
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        ID: (string) (len=25) "deleteLibraryResourceLink",
        Deprecated: (bool) false,
        Security: ([]map[string][]string) <nil>,
        Parameters: ([]spec.Parameter) (len=1 cap=4) {
         (spec.Parameter) {
          Refable: (spec.Refable) {
           Ref: (spec.Ref) 
          },
          CommonValidations: (spec.CommonValidations) {
           Maximum: (*float64)(<nil>),
           ExclusiveMaximum: (bool) false,
           Minimum: (*float64)(<nil>),
           ExclusiveMinimum: (bool) false,
           MaxLength: (*int64)(<nil>),
           MinLength: (*int64)(<nil>),
           Pattern: (string) "",
           MaxItems: (*int64)(<nil>),
           MinItems: (*int64)(<nil>),
           UniqueItems: (bool) false,
           MultipleOf: (*float64)(<nil>),
           Enum: ([]interface {}) <nil>
          },
          SimpleSchema: (spec.SimpleSchema) {
           Type: (string) (len=6) "string",
           Format: (string) "",
           Items: (*spec.Items)(<nil>),
           CollectionFormat: (string) "",
           Default: (interface {}) <nil>,
           Example: (interface {}) <nil>
          },
          VendorExtensible: (spec.VendorExtensible) {
           Extensions: (spec.Extensions) <nil>
          },
          ParamProps: (spec.ParamProps) {
           Description: (string) "",
           Name: (string) (len=9) "shortname",
           In: (string) (len=4) "path",
           Required: (bool) true,
           Schema: (*spec.Schema)(<nil>),
           AllowEmptyValue: (bool) false
          }
         }
        },
        Responses: (*spec.Responses)(0xc000792f80)({
         VendorExtensible: (spec.VendorExtensible) {
          Extensions: (spec.Extensions) <nil>
         },
         ResponsesProps: (spec.ResponsesProps) {
          Default: (*spec.Response)(<nil>),
          StatusCodeResponses: (map[int]spec.Response) (len=2) {
           (int) 200: (spec.Response) {
            Refable: (spec.Refable) {
             Ref: (spec.Ref) 
            },
            ResponseProps: (spec.ResponseProps) {
             Description: (string) (len=11) "OK response",
             Schema: (*spec.Schema)(<nil>),
             Headers: (map[string]spec.Header) <nil>,
             Examples: (map[string]interface {}) <nil>
            },
            VendorExtensible: (spec.VendorExtensible) {
             Extensions: (spec.Extensions) <nil>
            }
           },
           (int) 404: (spec.Response) {
            Refable: (spec.Refable) {
             Ref: (spec.Ref) #/responses/NotFound
            },
            ResponseProps: (spec.ResponseProps) {
             Description: (string) "",
             Schema: (*spec.Schema)(<nil>),
             Headers: (map[string]spec.Header) <nil>,
             Examples: (map[string]interface {}) <nil>
            },
            VendorExtensible: (spec.VendorExtensible) {
             Extensions: (spec.Extensions) <nil>
            }
           }
          }
         }
        })
       }
      }),
      Options: (*spec.Operation)(<nil>),
      Head: (*spec.Operation)(<nil>),
      Patch: (*spec.Operation)(<nil>),
      Parameters: ([]spec.Parameter) <nil>
     }
    },
    (string) (len=27) "/v1/apps/{appID}/data_rules": (spec.PathItem) {
     Refable: (spec.Refable) {
      Ref: (spec.Ref) 
     },
     VendorExtensible: (spec.VendorExtensible) {
      Extensions: (spec.Extensions) <nil>
     },
     PathItemProps: (spec.PathItemProps) {
      Get: (*spec.Operation)(0xc0003aec40)({
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       OperationProps: (spec.OperationProps) {
        Description: (string) "",
        Consumes: ([]string) <nil>,
        Produces: ([]string) <nil>,
        Schemes: ([]string) <nil>,
        Tags: ([]string) <nil>,
        Summary: (string) (len=14) "Get data rules",
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        ID: (string) (len=12) "getDataRules",
        Deprecated: (bool) false,
        Security: ([]map[string][]string) <nil>,
        Parameters: ([]spec.Parameter) (len=1 cap=4) {
         (spec.Parameter) {
          Refable: (spec.Refable) {
           Ref: (spec.Ref) 
          },
          CommonValidations: (spec.CommonValidations) {
           Maximum: (*float64)(<nil>),
           ExclusiveMaximum: (bool) false,
           Minimum: (*float64)(<nil>),
           ExclusiveMinimum: (bool) false,
           MaxLength: (*int64)(<nil>),
           MinLength: (*int64)(<nil>),
           Pattern: (string) "",
           MaxItems: (*int64)(<nil>),
           MinItems: (*int64)(<nil>),
           UniqueItems: (bool) false,
           MultipleOf: (*float64)(<nil>),
           Enum: ([]interface {}) <nil>
          },
          SimpleSchema: (spec.SimpleSchema) {
           Type: (string) (len=6) "string",
           Format: (string) "",
           Items: (*spec.Items)(<nil>),
           CollectionFormat: (string) "",
           Default: (interface {}) <nil>,
           Example: (interface {}) <nil>
          },
          VendorExtensible: (spec.VendorExtensible) {
           Extensions: (spec.Extensions) <nil>
          },
          ParamProps: (spec.ParamProps) {
           Description: (string) "",
           Name: (string) (len=5) "appID",
           In: (string) (len=4) "path",
           Required: (bool) true,
           Schema: (*spec.Schema)(<nil>),
           AllowEmptyValue: (bool) false
          }
         }
        },
        Responses: (*spec.Responses)(0xc0008621c0)({
         VendorExtensible: (spec.VendorExtensible) {
          Extensions: (spec.Extensions) <nil>
         },
         ResponsesProps: (spec.ResponsesProps) {
          Default: (*spec.Response)(<nil>),
          StatusCodeResponses: (map[int]spec.Response) (len=2) {
           (int) 404: (spec.Response) {
            Refable: (spec.Refable) {
             Ref: (spec.Ref) #/responses/NotFound
            },
            ResponseProps: (spec.ResponseProps) {
             Description: (string) "",
             Schema: (*spec.Schema)(<nil>),
             Headers: (map[string]spec.Header) <nil>,
             Examples: (map[string]interface {}) <nil>
            },
            VendorExtensible: (spec.VendorExtensible) {
             Extensions: (spec.Extensions) <nil>
            }
           },
           (int) 200: (spec.Response) {
            Refable: (spec.Refable) {
             Ref: (spec.Ref) 
            },
            ResponseProps: (spec.ResponseProps) {
             Description: (string) (len=10) "Data rules",
             Schema: (*spec.Schema)(0xc000341680)({
              VendorExtensible: (spec.VendorExtensible) {
               Extensions: (spec.Extensions) <nil>
              },
              SchemaProps: (spec.SchemaProps) {
               ID: (string) "",
               Ref: (spec.Ref) ,
               Schema: (spec.SchemaURL) "",
               Description: (string) "",
               Type: (spec.StringOrArray) (len=1 cap=1) {
                (string) (len=5) "array"
               },
               Format: (string) "",
               Title: (string) "",
               Default: (interface {}) <nil>,
               Maximum: (*float64)(<nil>),
               ExclusiveMaximum: (bool) false,
               Minimum: (*float64)(<nil>),
               ExclusiveMinimum: (bool) false,
               MaxLength: (*int64)(<nil>),
               MinLength: (*int64)(<nil>),
               Pattern: (string) "",
               MaxItems: (*int64)(<nil>),
               MinItems: (*int64)(<nil>),
               UniqueItems: (bool) false,
               MultipleOf: (*float64)(<nil>),
               Enum: ([]interface {}) <nil>,
               MaxProperties: (*int64)(<nil>),
               MinProperties: (*int64)(<nil>),
               Required: ([]string) <nil>,
               Items: (*spec.SchemaOrArray)(0xc0008621e0)({
                Schema: (*spec.Schema)(0xc00032e480)({
                 VendorExtensible: (spec.VendorExtensible) {
                  Extensions: (spec.Extensions) <nil>
                 },
                 SchemaProps: (spec.SchemaProps) {
                  ID: (string) "",
                  Ref: (spec.Ref) #/definitions/DataRule,
                  Schema: (spec.SchemaURL) "",
                  Description: (string) "",
                  Type: (spec.StringOrArray) <nil>,
                  Format: (string) "",
                  Title: (string) "",
                  Default: (interface {}) <nil>,
                  Maximum: (*float64)(<nil>),
                  ExclusiveMaximum: (bool) false,
                  Minimum: (*float64)(<nil>),
                  ExclusiveMinimum: (bool) false,
                  MaxLength: (*int64)(<nil>),
                  MinLength: (*int64)(<nil>),
                  Pattern: (string) "",
                  MaxItems: (*int64)(<nil>),
                  MinItems: (*int64)(<nil>),
                  UniqueItems: (bool) false,
                  MultipleOf: (*float64)(<nil>),
                  Enum: ([]interface {}) <nil>,
                  MaxProperties: (*int64)(<nil>),
                  MinProperties: (*int64)(<nil>),
                  Required: ([]string) <nil>,
                  Items: (*spec.SchemaOrArray)(<nil>),
                  AllOf: ([]spec.Schema) <nil>,
                  OneOf: ([]spec.Schema) <nil>,
                  AnyOf: ([]spec.Schema) <nil>,
                  Not: (*spec.Schema)(<nil>),
                  Properties: (map[string]spec.Schema) <nil>,
                  AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
                  PatternProperties: (map[string]spec.Schema) <nil>,
                  Dependencies: (spec.Dependencies) <nil>,
                  AdditionalItems: (*spec.SchemaOrBool)(<nil>),
                  Definitions: (spec.Definitions) <nil>
                 },
                 SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
                  Discriminator: (string) "",
                  ReadOnly: (bool) false,
                  XML: (*spec.XMLObject)(<nil>),
                  ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
                  Example: (interface {}) <nil>
                 },
                 ExtraProps: (map[string]interface {}) <nil>
                }),
                Schemas: ([]spec.Schema) <nil>
               }),
               AllOf: ([]spec.Schema) <nil>,
               OneOf: ([]spec.Schema) <nil>,
               AnyOf: ([]spec.Schema) <nil>,
               Not: (*spec.Schema)(<nil>),
               Properties: (map[string]spec.Schema) <nil>,
               AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
               PatternProperties: (map[string]spec.Schema) <nil>,
               Dependencies: (spec.Dependencies) <nil>,
               AdditionalItems: (*spec.SchemaOrBool)(<nil>),
               Definitions: (spec.Definitions) <nil>
              },
              SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
               Discriminator: (string) "",
               ReadOnly: (bool) false,
               XML: (*spec.XMLObject)(<nil>),
               ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
               Example: (interface {}) <nil>
              },
              ExtraProps: (map[string]interface {}) <nil>
             }),
             Headers: (map[string]spec.Header) <nil>,
             Examples: (map[string]interface {}) <nil>
            },
            VendorExtensible: (spec.VendorExtensible) {
             Extensions: (spec.Extensions) <nil>
            }
           }
          }
         }
        })
       }
      }),
      Put: (*spec.Operation)(0xc0003aed20)({
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       OperationProps: (spec.OperationProps) {
        Description: (string) "",
        Consumes: ([]string) <nil>,
        Produces: ([]string) <nil>,
        Schemes: ([]string) <nil>,
        Tags: ([]string) <nil>,
        Summary: (string) (len=14) "Set data rules",
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        ID: (string) (len=12) "setDataRules",
        Deprecated: (bool) false,
        Security: ([]map[string][]string) <nil>,
        Parameters: ([]spec.Parameter) (len=2 cap=4) {
         (spec.Parameter) {
          Refable: (spec.Refable) {
           Ref: (spec.Ref) 
          },
          CommonValidations: (spec.CommonValidations) {
           Maximum: (*float64)(<nil>),
           ExclusiveMaximum: (bool) false,
           Minimum: (*float64)(<nil>),
           ExclusiveMinimum: (bool) false,
           MaxLength: (*int64)(<nil>),
           MinLength: (*int64)(<nil>),
           Pattern: (string) "",
           MaxItems: (*int64)(<nil>),
           MinItems: (*int64)(<nil>),
           UniqueItems: (bool) false,
           MultipleOf: (*float64)(<nil>),
           Enum: ([]interface {}) <nil>
          },
          SimpleSchema: (spec.SimpleSchema) {
           Type: (string) (len=6) "string",
           Format: (string) "",
           Items: (*spec.Items)(<nil>),
           CollectionFormat: (string) "",
           Default: (interface {}) <nil>,
           Example: (interface {}) <nil>
          },
          VendorExtensible: (spec.VendorExtensible) {
           Extensions: (spec.Extensions) <nil>
          },
          ParamProps: (spec.ParamProps) {
           Description: (string) "",
           Name: (string) (len=5) "appID",
           In: (string) (len=4) "path",
           Required: (bool) true,
           Schema: (*spec.Schema)(<nil>),
           AllowEmptyValue: (bool) false
          }
         },
         (spec.Parameter) {
          Refable: (spec.Refable) {
           Ref: (spec.Ref) 
          },
          CommonValidations: (spec.CommonValidations) {
           Maximum: (*float64)(<nil>),
           ExclusiveMaximum: (bool) false,
           Minimum: (*float64)(<nil>),
           ExclusiveMinimum: (bool) false,
           MaxLength: (*int64)(<nil>),
           MinLength: (*int64)(<nil>),
           Pattern: (string) "",
           MaxItems: (*int64)(<nil>),
           MinItems: (*int64)(<nil>),
           UniqueItems: (bool) false,
           MultipleOf: (*float64)(<nil>),
           Enum: ([]interface {}) <nil>
          },
          SimpleSchema: (spec.SimpleSchema) {
           Type: (string) "",
           Format: (string) "",
           Items: (*spec.Items)(<nil>),
           CollectionFormat: (string) "",
           Default: (interface {}) <nil>,
           Example: (interface {}) <nil>
          },
          VendorExtensible: (spec.VendorExtensible) {
           Extensions: (spec.Extensions) <nil>
          },
          ParamProps: (spec.ParamProps) {
           Description: (string) "",
           Name: (string) (len=5) "rules",
           In: (string) (len=4) "body",
           Required: (bool) false,
           Schema: (*spec.Schema)(0xc00032eb40)({
            VendorExtensible: (spec.VendorExtensible) {
             Extensions: (spec.Extensions) <nil>
            },
            SchemaProps: (spec.SchemaProps) {
             ID: (string) "",
             Ref: (spec.Ref) #/definitions/SetDataRulesRequest,
             Schema: (spec.SchemaURL) "",
             Description: (string) "",
             Type: (spec.StringOrArray) <nil>,
             Format: (string) "",
             Title: (string) "",
             Default: (interface {}) <nil>,
             Maximum: (*float64)(<nil>),
             ExclusiveMaximum: (bool) false,
             Minimum: (*float64)(<nil>),
             ExclusiveMinimum: (bool) false,
             MaxLength: (*int64)(<nil>),
             MinLength: (*int64)(<nil>),
             Pattern: (string) "",
             MaxItems: (*int64)(<nil>),
             MinItems: (*int64)(<nil>),
             UniqueItems: (bool) false,
             MultipleOf: (*float64)(<nil>),
             Enum: ([]interface {}) <nil>,
             MaxProperties: (*int64)(<nil>),
             MinProperties: (*int64)(<nil>),
             Required: ([]string) <nil>,
             Items: (*spec.SchemaOrArray)(<nil>),
             AllOf: ([]spec.Schema) <nil>,
             OneOf: ([]spec.Schema) <nil>,
             AnyOf: ([]spec.Schema) <nil>,
             Not: (*spec.Schema)(<nil>),
             Properties: (map[string]spec.Schema) <nil>,
             AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
             PatternProperties: (map[string]spec.Schema) <nil>,
             Dependencies: (spec.Dependencies) <nil>,
             AdditionalItems: (*spec.SchemaOrBool)(<nil>),
             Definitions: (spec.Definitions) <nil>
            },
            SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
             Discriminator: (string) "",
             ReadOnly: (bool) false,
             XML: (*spec.XMLObject)(<nil>),
             ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
             Example: (interface {}) <nil>
            },
            ExtraProps: (map[string]interface {}) <nil>
           }),
           AllowEmptyValue: (bool) false
          }
         }
        },
        Responses: (*spec.Responses)(0xc000862720)({
         VendorExtensible: (spec.VendorExtensible) {
          Extensions: (spec.Extensions) <nil>
         },
         ResponsesProps: (spec.ResponsesProps) {
          Default: (*spec.Response)(<nil>),
          StatusCodeResponses: (map[int]spec.Response) (len=2) {
           (int) 404: (spec.Response) {
            Refable: (spec.Refable) {
             Ref: (spec.Ref) #/responses/NotFound
            },
            ResponseProps: (spec.ResponseProps) {
             Description: (string) "",
             Schema: (*spec.Schema)(<nil>),
             Headers: (map[string]spec.Header) <nil>,
             Examples: (map[string]interface {}) <nil>
            },
            VendorExtensible: (spec.VendorExtensible) {
             Extensions: (spec.Extensions) <nil>
            }
           },
           (int) 200: (spec.Response) {
            Refable: (spec.Refable) {
             Ref: (spec.Ref) 
            },
            ResponseProps: (spec.ResponseProps) {
             Description: (string) (len=11) "OK Response",
             Schema: (*spec.Schema)(<nil>),
             Headers: (map[string]spec.Header) <nil>,
             Examples: (map[string]interface {}) <nil>
            },
            VendorExtensible: (spec.VendorExtensible) {
             Extensions: (spec.Extensions) <nil>
            }
           }
          }
         }
        })
       }
      }),
      Post: (*spec.Operation)(<nil>),
      Delete: (*spec.Operation)(<nil>),
      Options: (*spec.Operation)(<nil>),
      Head: (*spec.Operation)(<nil>),
      Patch: (*spec.Operation)(<nil>),
      Parameters: ([]spec.Parameter) <nil>
     }
    },
    (string) (len=28) "/v1/analytics/trackable_apps": (spec.PathItem) {
     Refable: (spec.Refable) {
      Ref: (spec.Ref) 
     },
     VendorExtensible: (spec.VendorExtensible) {
      Extensions: (spec.Extensions) <nil>
     },
     PathItemProps: (spec.PathItemProps) {
      Get: (*spec.Operation)(0xc0000e1ce0)({
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       OperationProps: (spec.OperationProps) {
        Description: (string) "",
        Consumes: ([]string) <nil>,
        Produces: ([]string) <nil>,
        Schemes: ([]string) <nil>,
        Tags: ([]string) <nil>,
        Summary: (string) (len=52) "Returns all apps that are used in analytics tracking",
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        ID: (string) (len=19) "getAllTrackableApps",
        Deprecated: (bool) false,
        Security: ([]map[string][]string) <nil>,
        Parameters: ([]spec.Parameter) <nil>,
        Responses: (*spec.Responses)(0xc000a5a5a0)({
         VendorExtensible: (spec.VendorExtensible) {
          Extensions: (spec.Extensions) <nil>
         },
         ResponsesProps: (spec.ResponsesProps) {
          Default: (*spec.Response)(<nil>),
          StatusCodeResponses: (map[int]spec.Response) (len=2) {
           (int) 200: (spec.Response) {
            Refable: (spec.Refable) {
             Ref: (spec.Ref) 
            },
            ResponseProps: (spec.ResponseProps) {
             Description: (string) (len=8) "All apps",
             Schema: (*spec.Schema)(0xc000363680)({
              VendorExtensible: (spec.VendorExtensible) {
               Extensions: (spec.Extensions) <nil>
              },
              SchemaProps: (spec.SchemaProps) {
               ID: (string) "",
               Ref: (spec.Ref) #/definitions/TrackableApps,
               Schema: (spec.SchemaURL) "",
               Description: (string) "",
               Type: (spec.StringOrArray) <nil>,
               Format: (string) "",
               Title: (string) "",
               Default: (interface {}) <nil>,
               Maximum: (*float64)(<nil>),
               ExclusiveMaximum: (bool) false,
               Minimum: (*float64)(<nil>),
               ExclusiveMinimum: (bool) false,
               MaxLength: (*int64)(<nil>),
               MinLength: (*int64)(<nil>),
               Pattern: (string) "",
               MaxItems: (*int64)(<nil>),
               MinItems: (*int64)(<nil>),
               UniqueItems: (bool) false,
               MultipleOf: (*float64)(<nil>),
               Enum: ([]interface {}) <nil>,
               MaxProperties: (*int64)(<nil>),
               MinProperties: (*int64)(<nil>),
               Required: ([]string) <nil>,
               Items: (*spec.SchemaOrArray)(<nil>),
               AllOf: ([]spec.Schema) <nil>,
               OneOf: ([]spec.Schema) <nil>,
               AnyOf: ([]spec.Schema) <nil>,
               Not: (*spec.Schema)(<nil>),
               Properties: (map[string]spec.Schema) <nil>,
               AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
               PatternProperties: (map[string]spec.Schema) <nil>,
               Dependencies: (spec.Dependencies) <nil>,
               AdditionalItems: (*spec.SchemaOrBool)(<nil>),
               Definitions: (spec.Definitions) <nil>
              },
              SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
               Discriminator: (string) "",
               ReadOnly: (bool) false,
               XML: (*spec.XMLObject)(<nil>),
               ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
               Example: (interface {}) <nil>
              },
              ExtraProps: (map[string]interface {}) <nil>
             }),
             Headers: (map[string]spec.Header) <nil>,
             Examples: (map[string]interface {}) <nil>
            },
            VendorExtensible: (spec.VendorExtensible) {
             Extensions: (spec.Extensions) <nil>
            }
           },
           (int) 404: (spec.Response) {
            Refable: (spec.Refable) {
             Ref: (spec.Ref) #/responses/NotFound
            },
            ResponseProps: (spec.ResponseProps) {
             Description: (string) "",
             Schema: (*spec.Schema)(<nil>),
             Headers: (map[string]spec.Header) <nil>,
             Examples: (map[string]interface {}) <nil>
            },
            VendorExtensible: (spec.VendorExtensible) {
             Extensions: (spec.Extensions) <nil>
            }
           }
          }
         }
        })
       }
      }),
      Put: (*spec.Operation)(<nil>),
      Post: (*spec.Operation)(<nil>),
      Delete: (*spec.Operation)(<nil>),
      Options: (*spec.Operation)(<nil>),
      Head: (*spec.Operation)(<nil>),
      Patch: (*spec.Operation)(<nil>),
      Parameters: ([]spec.Parameter) <nil>
     }
    },
    (string) (len=23) "/v1/analytics/usageUrls": (spec.PathItem) {
     Refable: (spec.Refable) {
      Ref: (spec.Ref) 
     },
     VendorExtensible: (spec.VendorExtensible) {
      Extensions: (spec.Extensions) <nil>
     },
     PathItemProps: (spec.PathItemProps) {
      Get: (*spec.Operation)(0xc0003ae620)({
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       OperationProps: (spec.OperationProps) {
        Description: (string) "",
        Consumes: ([]string) <nil>,
        Produces: ([]string) <nil>,
        Schemes: ([]string) <nil>,
        Tags: ([]string) <nil>,
        Summary: (string) (len=22) "Returns all usage urls",
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        ID: (string) (len=21) "getAnalyticsUsageUrls",
        Deprecated: (bool) false,
        Security: ([]map[string][]string) <nil>,
        Parameters: ([]spec.Parameter) <nil>,
        Responses: (*spec.Responses)(0xc0006bb460)({
         VendorExtensible: (spec.VendorExtensible) {
          Extensions: (spec.Extensions) <nil>
         },
         ResponsesProps: (spec.ResponsesProps) {
          Default: (*spec.Response)(<nil>),
          StatusCodeResponses: (map[int]spec.Response) (len=2) {
           (int) 404: (spec.Response) {
            Refable: (spec.Refable) {
             Ref: (spec.Ref) #/responses/NotFound
            },
            ResponseProps: (spec.ResponseProps) {
             Description: (string) "",
             Schema: (*spec.Schema)(<nil>),
             Headers: (map[string]spec.Header) <nil>,
             Examples: (map[string]interface {}) <nil>
            },
            VendorExtensible: (spec.VendorExtensible) {
             Extensions: (spec.Extensions) <nil>
            }
           },
           (int) 200: (spec.Response) {
            Refable: (spec.Refable) {
             Ref: (spec.Ref) 
            },
            ResponseProps: (spec.ResponseProps) {
             Description: (string) (len=14) "All usage urls",
             Schema: (*spec.Schema)(0xc00034d680)({
              VendorExtensible: (spec.VendorExtensible) {
               Extensions: (spec.Extensions) <nil>
              },
              SchemaProps: (spec.SchemaProps) {
               ID: (string) "",
               Ref: (spec.Ref) #/definitions/UsageUrls,
               Schema: (spec.SchemaURL) "",
               Description: (string) "",
               Type: (spec.StringOrArray) <nil>,
               Format: (string) "",
               Title: (string) "",
               Default: (interface {}) <nil>,
               Maximum: (*float64)(<nil>),
               ExclusiveMaximum: (bool) false,
               Minimum: (*float64)(<nil>),
               ExclusiveMinimum: (bool) false,
               MaxLength: (*int64)(<nil>),
               MinLength: (*int64)(<nil>),
               Pattern: (string) "",
               MaxItems: (*int64)(<nil>),
               MinItems: (*int64)(<nil>),
               UniqueItems: (bool) false,
               MultipleOf: (*float64)(<nil>),
               Enum: ([]interface {}) <nil>,
               MaxProperties: (*int64)(<nil>),
               MinProperties: (*int64)(<nil>),
               Required: ([]string) <nil>,
               Items: (*spec.SchemaOrArray)(<nil>),
               AllOf: ([]spec.Schema) <nil>,
               OneOf: ([]spec.Schema) <nil>,
               AnyOf: ([]spec.Schema) <nil>,
               Not: (*spec.Schema)(<nil>),
               Properties: (map[string]spec.Schema) <nil>,
               AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
               PatternProperties: (map[string]spec.Schema) <nil>,
               Dependencies: (spec.Dependencies) <nil>,
               AdditionalItems: (*spec.SchemaOrBool)(<nil>),
               Definitions: (spec.Definitions) <nil>
              },
              SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
               Discriminator: (string) "",
               ReadOnly: (bool) false,
               XML: (*spec.XMLObject)(<nil>),
               ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
               Example: (interface {}) <nil>
              },
              ExtraProps: (map[string]interface {}) <nil>
             }),
             Headers: (map[string]spec.Header) <nil>,
             Examples: (map[string]interface {}) <nil>
            },
            VendorExtensible: (spec.VendorExtensible) {
             Extensions: (spec.Extensions) <nil>
            }
           }
          }
         }
        })
       }
      }),
      Put: (*spec.Operation)(<nil>),
      Post: (*spec.Operation)(<nil>),
      Delete: (*spec.Operation)(<nil>),
      Options: (*spec.Operation)(<nil>),
      Head: (*spec.Operation)(<nil>),
      Patch: (*spec.Operation)(<nil>),
      Parameters: ([]spec.Parameter) <nil>
     }
    }
   }
  }),
  Definitions: (spec.Definitions) (len=82) {
   (string) (len=8) "NotFound": (spec.Schema) {
    VendorExtensible: (spec.VendorExtensible) {
     Extensions: (spec.Extensions) <nil>
    },
    SchemaProps: (spec.SchemaProps) {
     ID: (string) "",
     Ref: (spec.Ref) ,
     Schema: (spec.SchemaURL) "",
     Description: (string) "",
     Type: (spec.StringOrArray) (len=1 cap=1) {
      (string) (len=6) "object"
     },
     Format: (string) "",
     Title: (string) "",
     Default: (interface {}) <nil>,
     Maximum: (*float64)(<nil>),
     ExclusiveMaximum: (bool) false,
     Minimum: (*float64)(<nil>),
     ExclusiveMinimum: (bool) false,
     MaxLength: (*int64)(<nil>),
     MinLength: (*int64)(<nil>),
     Pattern: (string) "",
     MaxItems: (*int64)(<nil>),
     MinItems: (*int64)(<nil>),
     UniqueItems: (bool) false,
     MultipleOf: (*float64)(<nil>),
     Enum: ([]interface {}) <nil>,
     MaxProperties: (*int64)(<nil>),
     MinProperties: (*int64)(<nil>),
     Required: ([]string) <nil>,
     Items: (*spec.SchemaOrArray)(<nil>),
     AllOf: ([]spec.Schema) <nil>,
     OneOf: ([]spec.Schema) <nil>,
     AnyOf: ([]spec.Schema) <nil>,
     Not: (*spec.Schema)(<nil>),
     Properties: (map[string]spec.Schema) (len=2) {
      (string) (len=7) "message": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=4) "code": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) #/definitions/ErrorCode,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) <nil>,
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      }
     },
     AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
     PatternProperties: (map[string]spec.Schema) <nil>,
     Dependencies: (spec.Dependencies) <nil>,
     AdditionalItems: (*spec.SchemaOrBool)(<nil>),
     Definitions: (spec.Definitions) <nil>
    },
    SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
     Discriminator: (string) "",
     ReadOnly: (bool) false,
     XML: (*spec.XMLObject)(<nil>),
     ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
     Example: (interface {}) <nil>
    },
    ExtraProps: (map[string]interface {}) <nil>
   },
   (string) (len=17) "SharingConstraint": (spec.Schema) {
    VendorExtensible: (spec.VendorExtensible) {
     Extensions: (spec.Extensions) <nil>
    },
    SchemaProps: (spec.SchemaProps) {
     ID: (string) "",
     Ref: (spec.Ref) ,
     Schema: (spec.SchemaURL) "",
     Description: (string) "",
     Type: (spec.StringOrArray) (len=1 cap=1) {
      (string) (len=6) "object"
     },
     Format: (string) "",
     Title: (string) "",
     Default: (interface {}) <nil>,
     Maximum: (*float64)(<nil>),
     ExclusiveMaximum: (bool) false,
     Minimum: (*float64)(<nil>),
     ExclusiveMinimum: (bool) false,
     MaxLength: (*int64)(<nil>),
     MinLength: (*int64)(<nil>),
     Pattern: (string) "",
     MaxItems: (*int64)(<nil>),
     MinItems: (*int64)(<nil>),
     UniqueItems: (bool) false,
     MultipleOf: (*float64)(<nil>),
     Enum: ([]interface {}) <nil>,
     MaxProperties: (*int64)(<nil>),
     MinProperties: (*int64)(<nil>),
     Required: ([]string) <nil>,
     Items: (*spec.SchemaOrArray)(<nil>),
     AllOf: ([]spec.Schema) <nil>,
     OneOf: ([]spec.Schema) <nil>,
     AnyOf: ([]spec.Schema) <nil>,
     Not: (*spec.Schema)(<nil>),
     Properties: (map[string]spec.Schema) (len=4) {
      (string) (len=6) "values": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=5) "array"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(0xc0009f3f78)(1),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(0xc000a80a20)({
         Schema: (*spec.Schema)(0xc000a97680)({
          VendorExtensible: (spec.VendorExtensible) {
           Extensions: (spec.Extensions) <nil>
          },
          SchemaProps: (spec.SchemaProps) {
           ID: (string) "",
           Ref: (spec.Ref) ,
           Schema: (spec.SchemaURL) "",
           Description: (string) "",
           Type: (spec.StringOrArray) (len=1 cap=1) {
            (string) (len=6) "string"
           },
           Format: (string) "",
           Title: (string) "",
           Default: (interface {}) <nil>,
           Maximum: (*float64)(<nil>),
           ExclusiveMaximum: (bool) false,
           Minimum: (*float64)(<nil>),
           ExclusiveMinimum: (bool) false,
           MaxLength: (*int64)(<nil>),
           MinLength: (*int64)(0xc0009f3f98)(1),
           Pattern: (string) "",
           MaxItems: (*int64)(<nil>),
           MinItems: (*int64)(<nil>),
           UniqueItems: (bool) false,
           MultipleOf: (*float64)(<nil>),
           Enum: ([]interface {}) <nil>,
           MaxProperties: (*int64)(<nil>),
           MinProperties: (*int64)(<nil>),
           Required: ([]string) <nil>,
           Items: (*spec.SchemaOrArray)(<nil>),
           AllOf: ([]spec.Schema) <nil>,
           OneOf: ([]spec.Schema) <nil>,
           AnyOf: ([]spec.Schema) <nil>,
           Not: (*spec.Schema)(<nil>),
           Properties: (map[string]spec.Schema) <nil>,
           AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
           PatternProperties: (map[string]spec.Schema) <nil>,
           Dependencies: (spec.Dependencies) <nil>,
           AdditionalItems: (*spec.SchemaOrBool)(<nil>),
           Definitions: (spec.Definitions) <nil>
          },
          SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
           Discriminator: (string) "",
           ReadOnly: (bool) false,
           XML: (*spec.XMLObject)(<nil>),
           ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
           Example: (interface {}) <nil>
          },
          ExtraProps: (map[string]interface {}) <nil>
         }),
         Schemas: ([]spec.Schema) <nil>
        }),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=10) "collection": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) (len=4 cap=4) {
         (string) (len=8) "sections",
         (string) (len=8) "students",
         (string) (len=8) "teachers",
         (string) (len=12) "schooladmins"
        },
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=5) "field": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=8) "operator": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) (len=5 cap=6) {
         (string) (len=8) "Contains",
         (string) (len=11) "EqualsAnyOf",
         (string) (len=11) "NotContains",
         (string) (len=14) "NotEqualsAnyOf",
         (string) (len=10) "StartsWith"
        },
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      }
     },
     AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
     PatternProperties: (map[string]spec.Schema) <nil>,
     Dependencies: (spec.Dependencies) <nil>,
     AdditionalItems: (*spec.SchemaOrBool)(<nil>),
     Definitions: (spec.Definitions) <nil>
    },
    SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
     Discriminator: (string) "",
     ReadOnly: (bool) false,
     XML: (*spec.XMLObject)(<nil>),
     ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
     Example: (interface {}) <nil>
    },
    ExtraProps: (map[string]interface {}) <nil>
   },
   (string) (len=3) "App": (spec.Schema) {
    VendorExtensible: (spec.VendorExtensible) {
     Extensions: (spec.Extensions) <nil>
    },
    SchemaProps: (spec.SchemaProps) {
     ID: (string) "",
     Ref: (spec.Ref) ,
     Schema: (spec.SchemaURL) "",
     Description: (string) (len=54) "Represents an application returned by the app service.",
     Type: (spec.StringOrArray) (len=1 cap=1) {
      (string) (len=6) "object"
     },
     Format: (string) "",
     Title: (string) "",
     Default: (interface {}) <nil>,
     Maximum: (*float64)(<nil>),
     ExclusiveMaximum: (bool) false,
     Minimum: (*float64)(<nil>),
     ExclusiveMinimum: (bool) false,
     MaxLength: (*int64)(<nil>),
     MinLength: (*int64)(<nil>),
     Pattern: (string) "",
     MaxItems: (*int64)(<nil>),
     MinItems: (*int64)(<nil>),
     UniqueItems: (bool) false,
     MultipleOf: (*float64)(<nil>),
     Enum: ([]interface {}) <nil>,
     MaxProperties: (*int64)(<nil>),
     MinProperties: (*int64)(<nil>),
     Required: ([]string) <nil>,
     Items: (*spec.SchemaOrArray)(<nil>),
     AllOf: ([]spec.Schema) <nil>,
     OneOf: ([]spec.Schema) <nil>,
     AnyOf: ([]spec.Schema) <nil>,
     Not: (*spec.Schema)(<nil>),
     Properties: (map[string]spec.Schema) (len=24) {
      (string) (len=4) "tags": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=5) "array"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(0xc000929280)({
         Schema: (*spec.Schema)(0xc000247d40)({
          VendorExtensible: (spec.VendorExtensible) {
           Extensions: (spec.Extensions) <nil>
          },
          SchemaProps: (spec.SchemaProps) {
           ID: (string) "",
           Ref: (spec.Ref) ,
           Schema: (spec.SchemaURL) "",
           Description: (string) "",
           Type: (spec.StringOrArray) (len=1 cap=1) {
            (string) (len=6) "string"
           },
           Format: (string) "",
           Title: (string) "",
           Default: (interface {}) <nil>,
           Maximum: (*float64)(<nil>),
           ExclusiveMaximum: (bool) false,
           Minimum: (*float64)(<nil>),
           ExclusiveMinimum: (bool) false,
           MaxLength: (*int64)(<nil>),
           MinLength: (*int64)(<nil>),
           Pattern: (string) "",
           MaxItems: (*int64)(<nil>),
           MinItems: (*int64)(<nil>),
           UniqueItems: (bool) false,
           MultipleOf: (*float64)(<nil>),
           Enum: ([]interface {}) <nil>,
           MaxProperties: (*int64)(<nil>),
           MinProperties: (*int64)(<nil>),
           Required: ([]string) <nil>,
           Items: (*spec.SchemaOrArray)(<nil>),
           AllOf: ([]spec.Schema) <nil>,
           OneOf: ([]spec.Schema) <nil>,
           AnyOf: ([]spec.Schema) <nil>,
           Not: (*spec.Schema)(<nil>),
           Properties: (map[string]spec.Schema) <nil>,
           AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
           PatternProperties: (map[string]spec.Schema) <nil>,
           Dependencies: (spec.Dependencies) <nil>,
           AdditionalItems: (*spec.SchemaOrBool)(<nil>),
           Definitions: (spec.Definitions) <nil>
          },
          SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
           Discriminator: (string) "",
           ReadOnly: (bool) false,
           XML: (*spec.XMLObject)(<nil>),
           ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
           Example: (interface {}) <nil>
          },
          ExtraProps: (map[string]interface {}) <nil>
         }),
         Schemas: ([]spec.Schema) <nil>
        }),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=7) "created": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) (len=8) "datetime",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=2) "id": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=5) "image": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) #/definitions/Image,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) <nil>,
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=17) "defaultAccessTier": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=10) "websiteUrl": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(0xc000915ee0)(1),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=22) "customerSolutionsNotes": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=11) "description": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=12) "redirectUris": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=5) "array"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(0xc000928d20)({
         Schema: (*spec.Schema)(0xc000272480)({
          VendorExtensible: (spec.VendorExtensible) {
           Extensions: (spec.Extensions) <nil>
          },
          SchemaProps: (spec.SchemaProps) {
           ID: (string) "",
           Ref: (spec.Ref) ,
           Schema: (spec.SchemaURL) "",
           Description: (string) "",
           Type: (spec.StringOrArray) (len=1 cap=1) {
            (string) (len=6) "string"
           },
           Format: (string) "",
           Title: (string) "",
           Default: (interface {}) <nil>,
           Maximum: (*float64)(<nil>),
           ExclusiveMaximum: (bool) false,
           Minimum: (*float64)(<nil>),
           ExclusiveMinimum: (bool) false,
           MaxLength: (*int64)(<nil>),
           MinLength: (*int64)(<nil>),
           Pattern: (string) "",
           MaxItems: (*int64)(<nil>),
           MinItems: (*int64)(<nil>),
           UniqueItems: (bool) false,
           MultipleOf: (*float64)(<nil>),
           Enum: ([]interface {}) <nil>,
           MaxProperties: (*int64)(<nil>),
           MinProperties: (*int64)(<nil>),
           Required: ([]string) <nil>,
           Items: (*spec.SchemaOrArray)(<nil>),
           AllOf: ([]spec.Schema) <nil>,
           OneOf: ([]spec.Schema) <nil>,
           AnyOf: ([]spec.Schema) <nil>,
           Not: (*spec.Schema)(<nil>),
           Properties: (map[string]spec.Schema) <nil>,
           AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
           PatternProperties: (map[string]spec.Schema) <nil>,
           Dependencies: (spec.Dependencies) <nil>,
           AdditionalItems: (*spec.SchemaOrBool)(<nil>),
           Definitions: (spec.Definitions) <nil>
          },
          SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
           Discriminator: (string) "",
           ReadOnly: (bool) false,
           XML: (*spec.XMLObject)(<nil>),
           ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
           Example: (interface {}) <nil>
          },
          ExtraProps: (map[string]interface {}) <nil>
         }),
         Schemas: ([]spec.Schema) <nil>
        }),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=8) "versions": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) #/definitions/VersionSettings,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) <nil>,
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=12) "salesContact": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=18) "supportContactName": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=9) "shortname": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(0xc000915d40)(1),
        Pattern: (string) (len=14) "[0-9a-zA-Z_-]+",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=18) "supportedUserTypes": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=5) "array"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(0xc000929160)({
         Schema: (*spec.Schema)(0xc000246240)({
          VendorExtensible: (spec.VendorExtensible) {
           Extensions: (spec.Extensions) <nil>
          },
          SchemaProps: (spec.SchemaProps) {
           ID: (string) "",
           Ref: (spec.Ref) #/definitions/UserType,
           Schema: (spec.SchemaURL) "",
           Description: (string) "",
           Type: (spec.StringOrArray) <nil>,
           Format: (string) "",
           Title: (string) "",
           Default: (interface {}) <nil>,
           Maximum: (*float64)(<nil>),
           ExclusiveMaximum: (bool) false,
           Minimum: (*float64)(<nil>),
           ExclusiveMinimum: (bool) false,
           MaxLength: (*int64)(<nil>),
           MinLength: (*int64)(<nil>),
           Pattern: (string) "",
           MaxItems: (*int64)(<nil>),
           MinItems: (*int64)(<nil>),
           UniqueItems: (bool) false,
           MultipleOf: (*float64)(<nil>),
           Enum: ([]interface {}) <nil>,
           MaxProperties: (*int64)(<nil>),
           MinProperties: (*int64)(<nil>),
           Required: ([]string) <nil>,
           Items: (*spec.SchemaOrArray)(<nil>),
           AllOf: ([]spec.Schema) <nil>,
           OneOf: ([]spec.Schema) <nil>,
           AnyOf: ([]spec.Schema) <nil>,
           Not: (*spec.Schema)(<nil>),
           Properties: (map[string]spec.Schema) <nil>,
           AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
           PatternProperties: (map[string]spec.Schema) <nil>,
           Dependencies: (spec.Dependencies) <nil>,
           AdditionalItems: (*spec.SchemaOrBool)(<nil>),
           Definitions: (spec.Definitions) <nil>
          },
          SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
           Discriminator: (string) "",
           ReadOnly: (bool) false,
           XML: (*spec.XMLObject)(<nil>),
           ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
           Example: (interface {}) <nil>
          },
          ExtraProps: (map[string]interface {}) <nil>
         }),
         Schemas: ([]spec.Schema) <nil>
        }),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=10) "edsurgeUrl": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=14) "iosRedirectUri": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=4) "name": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(0xc000915ac0)(1),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=14) "requiredScopes": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=5) "array"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(0xc000915c38)(1),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(0xc000928e80)({
         Schema: (*spec.Schema)(0xc00026bb00)({
          VendorExtensible: (spec.VendorExtensible) {
           Extensions: (spec.Extensions) <nil>
          },
          SchemaProps: (spec.SchemaProps) {
           ID: (string) "",
           Ref: (spec.Ref) ,
           Schema: (spec.SchemaURL) "",
           Description: (string) "",
           Type: (spec.StringOrArray) (len=1 cap=1) {
            (string) (len=6) "string"
           },
           Format: (string) "",
           Title: (string) "",
           Default: (interface {}) <nil>,
           Maximum: (*float64)(<nil>),
           ExclusiveMaximum: (bool) false,
           Minimum: (*float64)(<nil>),
           ExclusiveMinimum: (bool) false,
           MaxLength: (*int64)(<nil>),
           MinLength: (*int64)(<nil>),
           Pattern: (string) "",
           MaxItems: (*int64)(<nil>),
           MinItems: (*int64)(<nil>),
           UniqueItems: (bool) false,
           MultipleOf: (*float64)(<nil>),
           Enum: ([]interface {}) <nil>,
           MaxProperties: (*int64)(<nil>),
           MinProperties: (*int64)(<nil>),
           Required: ([]string) <nil>,
           Items: (*spec.SchemaOrArray)(<nil>),
           AllOf: ([]spec.Schema) <nil>,
           OneOf: ([]spec.Schema) <nil>,
           AnyOf: ([]spec.Schema) <nil>,
           Not: (*spec.Schema)(<nil>),
           Properties: (map[string]spec.Schema) <nil>,
           AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
           PatternProperties: (map[string]spec.Schema) <nil>,
           Dependencies: (spec.Dependencies) <nil>,
           AdditionalItems: (*spec.SchemaOrBool)(<nil>),
           Definitions: (spec.Definitions) <nil>
          },
          SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
           Discriminator: (string) "",
           ReadOnly: (bool) false,
           XML: (*spec.XMLObject)(<nil>),
           ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
           Example: (interface {}) <nil>
          },
          ExtraProps: (map[string]interface {}) <nil>
         }),
         Schemas: ([]spec.Schema) <nil>
        }),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=29) "nonOwnerImpersonationDisabled": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=7) "boolean"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=14) "supportContact": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=8) "altNames": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=5) "array"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(0xc000928680)({
         Schema: (*spec.Schema)(0xc0002ccd80)({
          VendorExtensible: (spec.VendorExtensible) {
           Extensions: (spec.Extensions) <nil>
          },
          SchemaProps: (spec.SchemaProps) {
           ID: (string) "",
           Ref: (spec.Ref) ,
           Schema: (spec.SchemaURL) "",
           Description: (string) "",
           Type: (spec.StringOrArray) (len=1 cap=1) {
            (string) (len=6) "string"
           },
           Format: (string) "",
           Title: (string) "",
           Default: (interface {}) <nil>,
           Maximum: (*float64)(<nil>),
           ExclusiveMaximum: (bool) false,
           Minimum: (*float64)(<nil>),
           ExclusiveMinimum: (bool) false,
           MaxLength: (*int64)(<nil>),
           MinLength: (*int64)(<nil>),
           Pattern: (string) "",
           MaxItems: (*int64)(<nil>),
           MinItems: (*int64)(<nil>),
           UniqueItems: (bool) false,
           MultipleOf: (*float64)(<nil>),
           Enum: ([]interface {}) <nil>,
           MaxProperties: (*int64)(<nil>),
           MinProperties: (*int64)(<nil>),
           Required: ([]string) <nil>,
           Items: (*spec.SchemaOrArray)(<nil>),
           AllOf: ([]spec.Schema) <nil>,
           OneOf: ([]spec.Schema) <nil>,
           AnyOf: ([]spec.Schema) <nil>,
           Not: (*spec.Schema)(<nil>),
           Properties: (map[string]spec.Schema) <nil>,
           AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
           PatternProperties: (map[string]spec.Schema) <nil>,
           Dependencies: (spec.Dependencies) <nil>,
           AdditionalItems: (*spec.SchemaOrBool)(<nil>),
           Definitions: (spec.Definitions) <nil>
          },
          SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
           Discriminator: (string) "",
           ReadOnly: (bool) false,
           XML: (*spec.XMLObject)(<nil>),
           ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
           Example: (interface {}) <nil>
          },
          ExtraProps: (map[string]interface {}) <nil>
         }),
         Schemas: ([]spec.Schema) <nil>
        }),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=10) "categories": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=5) "array"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(0xc000928780)({
         Schema: (*spec.Schema)(0xc0002be480)({
          VendorExtensible: (spec.VendorExtensible) {
           Extensions: (spec.Extensions) <nil>
          },
          SchemaProps: (spec.SchemaProps) {
           ID: (string) "",
           Ref: (spec.Ref) ,
           Schema: (spec.SchemaURL) "",
           Description: (string) "",
           Type: (spec.StringOrArray) (len=1 cap=1) {
            (string) (len=6) "string"
           },
           Format: (string) "",
           Title: (string) "",
           Default: (interface {}) <nil>,
           Maximum: (*float64)(<nil>),
           ExclusiveMaximum: (bool) false,
           Minimum: (*float64)(<nil>),
           ExclusiveMinimum: (bool) false,
           MaxLength: (*int64)(<nil>),
           MinLength: (*int64)(<nil>),
           Pattern: (string) "",
           MaxItems: (*int64)(<nil>),
           MinItems: (*int64)(<nil>),
           UniqueItems: (bool) false,
           MultipleOf: (*float64)(<nil>),
           Enum: ([]interface {}) <nil>,
           MaxProperties: (*int64)(<nil>),
           MinProperties: (*int64)(<nil>),
           Required: ([]string) <nil>,
           Items: (*spec.SchemaOrArray)(<nil>),
           AllOf: ([]spec.Schema) <nil>,
           OneOf: ([]spec.Schema) <nil>,
           AnyOf: ([]spec.Schema) <nil>,
           Not: (*spec.Schema)(<nil>),
           Properties: (map[string]spec.Schema) <nil>,
           AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
           PatternProperties: (map[string]spec.Schema) <nil>,
           Dependencies: (spec.Dependencies) <nil>,
           AdditionalItems: (*spec.SchemaOrBool)(<nil>),
           Definitions: (spec.Definitions) <nil>
          },
          SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
           Discriminator: (string) "",
           ReadOnly: (bool) false,
           XML: (*spec.XMLObject)(<nil>),
           ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
           Example: (interface {}) <nil>
          },
          ExtraProps: (map[string]interface {}) <nil>
         }),
         Schemas: ([]spec.Schema) <nil>
        }),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=8) "clientId": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=13) "inviteMessage": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(0xc000915a28)(1000),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      }
     },
     AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
     PatternProperties: (map[string]spec.Schema) <nil>,
     Dependencies: (spec.Dependencies) <nil>,
     AdditionalItems: (*spec.SchemaOrBool)(<nil>),
     Definitions: (spec.Definitions) <nil>
    },
    SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
     Discriminator: (string) "",
     ReadOnly: (bool) false,
     XML: (*spec.XMLObject)(<nil>),
     ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
     Example: (interface {}) <nil>
    },
    ExtraProps: (map[string]interface {}) <nil>
   },
   (string) (len=20) "UpdateAppIconRequest": (spec.Schema) {
    VendorExtensible: (spec.VendorExtensible) {
     Extensions: (spec.Extensions) <nil>
    },
    SchemaProps: (spec.SchemaProps) {
     ID: (string) "",
     Ref: (spec.Ref) ,
     Schema: (spec.SchemaURL) "",
     Description: (string) (len=39) "The new S3 image to use for an app icon",
     Type: (spec.StringOrArray) (len=1 cap=1) {
      (string) (len=6) "object"
     },
     Format: (string) "",
     Title: (string) "",
     Default: (interface {}) <nil>,
     Maximum: (*float64)(<nil>),
     ExclusiveMaximum: (bool) false,
     Minimum: (*float64)(<nil>),
     ExclusiveMinimum: (bool) false,
     MaxLength: (*int64)(<nil>),
     MinLength: (*int64)(<nil>),
     Pattern: (string) "",
     MaxItems: (*int64)(<nil>),
     MinItems: (*int64)(<nil>),
     UniqueItems: (bool) false,
     MultipleOf: (*float64)(<nil>),
     Enum: ([]interface {}) <nil>,
     MaxProperties: (*int64)(<nil>),
     MinProperties: (*int64)(<nil>),
     Required: ([]string) <nil>,
     Items: (*spec.SchemaOrArray)(<nil>),
     AllOf: ([]spec.Schema) <nil>,
     OneOf: ([]spec.Schema) <nil>,
     AnyOf: ([]spec.Schema) <nil>,
     Not: (*spec.Schema)(<nil>),
     Properties: (map[string]spec.Schema) (len=1) {
      (string) (len=7) "newIcon": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      }
     },
     AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
     PatternProperties: (map[string]spec.Schema) <nil>,
     Dependencies: (spec.Dependencies) <nil>,
     AdditionalItems: (*spec.SchemaOrBool)(<nil>),
     Definitions: (spec.Definitions) <nil>
    },
    SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
     Discriminator: (string) "",
     ReadOnly: (bool) false,
     XML: (*spec.XMLObject)(<nil>),
     ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
     Example: (interface {}) <nil>
    },
    ExtraProps: (map[string]interface {}) <nil>
   },
   (string) (len=9) "AppSchema": (spec.Schema) {
    VendorExtensible: (spec.VendorExtensible) {
     Extensions: (spec.Extensions) <nil>
    },
    SchemaProps: (spec.SchemaProps) {
     ID: (string) "",
     Ref: (spec.Ref) ,
     Schema: (spec.SchemaURL) "",
     Description: (string) "",
     Type: (spec.StringOrArray) (len=1 cap=1) {
      (string) (len=6) "object"
     },
     Format: (string) "",
     Title: (string) "",
     Default: (interface {}) <nil>,
     Maximum: (*float64)(<nil>),
     ExclusiveMaximum: (bool) false,
     Minimum: (*float64)(<nil>),
     ExclusiveMinimum: (bool) false,
     MaxLength: (*int64)(<nil>),
     MinLength: (*int64)(<nil>),
     Pattern: (string) "",
     MaxItems: (*int64)(<nil>),
     MinItems: (*int64)(<nil>),
     UniqueItems: (bool) false,
     MultipleOf: (*float64)(<nil>),
     Enum: ([]interface {}) <nil>,
     MaxProperties: (*int64)(<nil>),
     MinProperties: (*int64)(<nil>),
     Required: ([]string) <nil>,
     Items: (*spec.SchemaOrArray)(<nil>),
     AllOf: ([]spec.Schema) <nil>,
     OneOf: ([]spec.Schema) <nil>,
     AnyOf: ([]spec.Schema) <nil>,
     Not: (*spec.Schema)(<nil>),
     Properties: (map[string]spec.Schema) (len=2) {
      (string) (len=17) "collectionSchemas": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=5) "array"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(0xc000983560)({
         Schema: (*spec.Schema)(0xc0002cbb00)({
          VendorExtensible: (spec.VendorExtensible) {
           Extensions: (spec.Extensions) <nil>
          },
          SchemaProps: (spec.SchemaProps) {
           ID: (string) "",
           Ref: (spec.Ref) #/definitions/CollectionSchema,
           Schema: (spec.SchemaURL) "",
           Description: (string) "",
           Type: (spec.StringOrArray) <nil>,
           Format: (string) "",
           Title: (string) "",
           Default: (interface {}) <nil>,
           Maximum: (*float64)(<nil>),
           ExclusiveMaximum: (bool) false,
           Minimum: (*float64)(<nil>),
           ExclusiveMinimum: (bool) false,
           MaxLength: (*int64)(<nil>),
           MinLength: (*int64)(<nil>),
           Pattern: (string) "",
           MaxItems: (*int64)(<nil>),
           MinItems: (*int64)(<nil>),
           UniqueItems: (bool) false,
           MultipleOf: (*float64)(<nil>),
           Enum: ([]interface {}) <nil>,
           MaxProperties: (*int64)(<nil>),
           MinProperties: (*int64)(<nil>),
           Required: ([]string) <nil>,
           Items: (*spec.SchemaOrArray)(<nil>),
           AllOf: ([]spec.Schema) <nil>,
           OneOf: ([]spec.Schema) <nil>,
           AnyOf: ([]spec.Schema) <nil>,
           Not: (*spec.Schema)(<nil>),
           Properties: (map[string]spec.Schema) <nil>,
           AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
           PatternProperties: (map[string]spec.Schema) <nil>,
           Dependencies: (spec.Dependencies) <nil>,
           AdditionalItems: (*spec.SchemaOrBool)(<nil>),
           Definitions: (spec.Definitions) <nil>
          },
          SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
           Discriminator: (string) "",
           ReadOnly: (bool) false,
           XML: (*spec.XMLObject)(<nil>),
           ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
           Example: (interface {}) <nil>
          },
          ExtraProps: (map[string]interface {}) <nil>
         }),
         Schemas: ([]spec.Schema) <nil>
        }),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=16) "needsPropagation": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=7) "boolean"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      }
     },
     AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
     PatternProperties: (map[string]spec.Schema) <nil>,
     Dependencies: (spec.Dependencies) <nil>,
     AdditionalItems: (*spec.SchemaOrBool)(<nil>),
     Definitions: (spec.Definitions) <nil>
    },
    SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
     Discriminator: (string) "",
     ReadOnly: (bool) false,
     XML: (*spec.XMLObject)(<nil>),
     ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
     Example: (interface {}) <nil>
    },
    ExtraProps: (map[string]interface {}) <nil>
   },
   (string) (len=9) "KnownHost": (spec.Schema) {
    VendorExtensible: (spec.VendorExtensible) {
     Extensions: (spec.Extensions) <nil>
    },
    SchemaProps: (spec.SchemaProps) {
     ID: (string) "",
     Ref: (spec.Ref) ,
     Schema: (spec.SchemaURL) "",
     Description: (string) "",
     Type: (spec.StringOrArray) (len=1 cap=1) {
      (string) (len=6) "object"
     },
     Format: (string) "",
     Title: (string) "",
     Default: (interface {}) <nil>,
     Maximum: (*float64)(<nil>),
     ExclusiveMaximum: (bool) false,
     Minimum: (*float64)(<nil>),
     ExclusiveMinimum: (bool) false,
     MaxLength: (*int64)(<nil>),
     MinLength: (*int64)(<nil>),
     Pattern: (string) "",
     MaxItems: (*int64)(<nil>),
     MinItems: (*int64)(<nil>),
     UniqueItems: (bool) false,
     MultipleOf: (*float64)(<nil>),
     Enum: ([]interface {}) <nil>,
     MaxProperties: (*int64)(<nil>),
     MinProperties: (*int64)(<nil>),
     Required: ([]string) <nil>,
     Items: (*spec.SchemaOrArray)(<nil>),
     AllOf: ([]spec.Schema) <nil>,
     OneOf: ([]spec.Schema) <nil>,
     AnyOf: ([]spec.Schema) <nil>,
     Not: (*spec.Schema)(<nil>),
     Properties: (map[string]spec.Schema) (len=5) {
      (string) (len=9) "ipAddress": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(0xc0009f2770)(1),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=11) "connectType": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) (len=2 cap=4) {
         (string) (len=7) "ssh-rsa",
         (string) (len=19) "ecdsa-sha2-nistp256"
        },
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=3) "key": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(0xc0009f2830)(1),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=5) "appId": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(0xc0009f26d8)(1),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=3) "url": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(0xc0009f2720)(1),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      }
     },
     AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
     PatternProperties: (map[string]spec.Schema) <nil>,
     Dependencies: (spec.Dependencies) <nil>,
     AdditionalItems: (*spec.SchemaOrBool)(<nil>),
     Definitions: (spec.Definitions) <nil>
    },
    SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
     Discriminator: (string) "",
     ReadOnly: (bool) false,
     XML: (*spec.XMLObject)(<nil>),
     ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
     Example: (interface {}) <nil>
    },
    ExtraProps: (map[string]interface {}) <nil>
   },
   (string) (len=14) "PermissionList": (spec.Schema) {
    VendorExtensible: (spec.VendorExtensible) {
     Extensions: (spec.Extensions) <nil>
    },
    SchemaProps: (spec.SchemaProps) {
     ID: (string) "",
     Ref: (spec.Ref) ,
     Schema: (spec.SchemaURL) "",
     Description: (string) "",
     Type: (spec.StringOrArray) (len=1 cap=1) {
      (string) (len=5) "array"
     },
     Format: (string) "",
     Title: (string) "",
     Default: (interface {}) <nil>,
     Maximum: (*float64)(<nil>),
     ExclusiveMaximum: (bool) false,
     Minimum: (*float64)(<nil>),
     ExclusiveMinimum: (bool) false,
     MaxLength: (*int64)(<nil>),
     MinLength: (*int64)(<nil>),
     Pattern: (string) "",
     MaxItems: (*int64)(<nil>),
     MinItems: (*int64)(<nil>),
     UniqueItems: (bool) false,
     MultipleOf: (*float64)(<nil>),
     Enum: ([]interface {}) <nil>,
     MaxProperties: (*int64)(<nil>),
     MinProperties: (*int64)(<nil>),
     Required: ([]string) <nil>,
     Items: (*spec.SchemaOrArray)(0xc000a039a0)({
      Schema: (*spec.Schema)(0xc000a6cd80)({
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) #/definitions/Permission,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) <nil>,
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      }),
      Schemas: ([]spec.Schema) <nil>
     }),
     AllOf: ([]spec.Schema) <nil>,
     OneOf: ([]spec.Schema) <nil>,
     AnyOf: ([]spec.Schema) <nil>,
     Not: (*spec.Schema)(<nil>),
     Properties: (map[string]spec.Schema) <nil>,
     AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
     PatternProperties: (map[string]spec.Schema) <nil>,
     Dependencies: (spec.Dependencies) <nil>,
     AdditionalItems: (*spec.SchemaOrBool)(<nil>),
     Definitions: (spec.Definitions) <nil>
    },
    SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
     Discriminator: (string) "",
     ReadOnly: (bool) false,
     XML: (*spec.XMLObject)(<nil>),
     ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
     Example: (interface {}) <nil>
    },
    ExtraProps: (map[string]interface {}) <nil>
   },
   (string) (len=19) "SetDataRulesRequest": (spec.Schema) {
    VendorExtensible: (spec.VendorExtensible) {
     Extensions: (spec.Extensions) <nil>
    },
    SchemaProps: (spec.SchemaProps) {
     ID: (string) "",
     Ref: (spec.Ref) ,
     Schema: (spec.SchemaURL) "",
     Description: (string) "",
     Type: (spec.StringOrArray) (len=1 cap=1) {
      (string) (len=5) "array"
     },
     Format: (string) "",
     Title: (string) "",
     Default: (interface {}) <nil>,
     Maximum: (*float64)(<nil>),
     ExclusiveMaximum: (bool) false,
     Minimum: (*float64)(<nil>),
     ExclusiveMinimum: (bool) false,
     MaxLength: (*int64)(<nil>),
     MinLength: (*int64)(<nil>),
     Pattern: (string) "",
     MaxItems: (*int64)(<nil>),
     MinItems: (*int64)(<nil>),
     UniqueItems: (bool) false,
     MultipleOf: (*float64)(<nil>),
     Enum: ([]interface {}) <nil>,
     MaxProperties: (*int64)(<nil>),
     MinProperties: (*int64)(<nil>),
     Required: ([]string) <nil>,
     Items: (*spec.SchemaOrArray)(0xc000a03de0)({
      Schema: (*spec.Schema)(0xc000a77200)({
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) #/definitions/DataRule,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) <nil>,
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      }),
      Schemas: ([]spec.Schema) <nil>
     }),
     AllOf: ([]spec.Schema) <nil>,
     OneOf: ([]spec.Schema) <nil>,
     AnyOf: ([]spec.Schema) <nil>,
     Not: (*spec.Schema)(<nil>),
     Properties: (map[string]spec.Schema) <nil>,
     AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
     PatternProperties: (map[string]spec.Schema) <nil>,
     Dependencies: (spec.Dependencies) <nil>,
     AdditionalItems: (*spec.SchemaOrBool)(<nil>),
     Definitions: (spec.Definitions) <nil>
    },
    SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
     Discriminator: (string) "",
     ReadOnly: (bool) false,
     XML: (*spec.XMLObject)(<nil>),
     ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
     Example: (interface {}) <nil>
    },
    ExtraProps: (map[string]interface {}) <nil>
   },
   (string) (len=22) "LibraryIntegrationType": (spec.Schema) {
    VendorExtensible: (spec.VendorExtensible) {
     Extensions: (spec.Extensions) <nil>
    },
    SchemaProps: (spec.SchemaProps) {
     ID: (string) "",
     Ref: (spec.Ref) ,
     Schema: (spec.SchemaURL) "",
     Description: (string) "",
     Type: (spec.StringOrArray) (len=1 cap=1) {
      (string) (len=6) "string"
     },
     Format: (string) "",
     Title: (string) "",
     Default: (interface {}) <nil>,
     Maximum: (*float64)(<nil>),
     ExclusiveMaximum: (bool) false,
     Minimum: (*float64)(<nil>),
     ExclusiveMinimum: (bool) false,
     MaxLength: (*int64)(<nil>),
     MinLength: (*int64)(<nil>),
     Pattern: (string) "",
     MaxItems: (*int64)(<nil>),
     MinItems: (*int64)(<nil>),
     UniqueItems: (bool) false,
     MultipleOf: (*float64)(<nil>),
     Enum: ([]interface {}) (len=2 cap=4) {
      (string) (len=4) "link",
      (string) (len=20) "partneredApplication"
     },
     MaxProperties: (*int64)(<nil>),
     MinProperties: (*int64)(<nil>),
     Required: ([]string) <nil>,
     Items: (*spec.SchemaOrArray)(<nil>),
     AllOf: ([]spec.Schema) <nil>,
     OneOf: ([]spec.Schema) <nil>,
     AnyOf: ([]spec.Schema) <nil>,
     Not: (*spec.Schema)(<nil>),
     Properties: (map[string]spec.Schema) <nil>,
     AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
     PatternProperties: (map[string]spec.Schema) <nil>,
     Dependencies: (spec.Dependencies) <nil>,
     AdditionalItems: (*spec.SchemaOrBool)(<nil>),
     Definitions: (spec.Definitions) <nil>
    },
    SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
     Discriminator: (string) "",
     ReadOnly: (bool) false,
     XML: (*spec.XMLObject)(<nil>),
     ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
     Example: (interface {}) <nil>
    },
    ExtraProps: (map[string]interface {}) <nil>
   },
   (string) (len=16) "LibraryResources": (spec.Schema) {
    VendorExtensible: (spec.VendorExtensible) {
     Extensions: (spec.Extensions) <nil>
    },
    SchemaProps: (spec.SchemaProps) {
     ID: (string) "",
     Ref: (spec.Ref) ,
     Schema: (spec.SchemaURL) "",
     Description: (string) "",
     Type: (spec.StringOrArray) (len=1 cap=1) {
      (string) (len=5) "array"
     },
     Format: (string) "",
     Title: (string) "",
     Default: (interface {}) <nil>,
     Maximum: (*float64)(<nil>),
     ExclusiveMaximum: (bool) false,
     Minimum: (*float64)(<nil>),
     ExclusiveMinimum: (bool) false,
     MaxLength: (*int64)(<nil>),
     MinLength: (*int64)(<nil>),
     Pattern: (string) "",
     MaxItems: (*int64)(<nil>),
     MinItems: (*int64)(<nil>),
     UniqueItems: (bool) false,
     MultipleOf: (*float64)(<nil>),
     Enum: ([]interface {}) <nil>,
     MaxProperties: (*int64)(<nil>),
     MinProperties: (*int64)(<nil>),
     Required: ([]string) <nil>,
     Items: (*spec.SchemaOrArray)(0xc000b1fd60)({
      Schema: (*spec.Schema)(0xc0002e4fc0)({
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) #/definitions/LibraryResource,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) <nil>,
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      }),
      Schemas: ([]spec.Schema) <nil>
     }),
     AllOf: ([]spec.Schema) <nil>,
     OneOf: ([]spec.Schema) <nil>,
     AnyOf: ([]spec.Schema) <nil>,
     Not: (*spec.Schema)(<nil>),
     Properties: (map[string]spec.Schema) <nil>,
     AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
     PatternProperties: (map[string]spec.Schema) <nil>,
     Dependencies: (spec.Dependencies) <nil>,
     AdditionalItems: (*spec.SchemaOrBool)(<nil>),
     Definitions: (spec.Definitions) <nil>
    },
    SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
     Discriminator: (string) "",
     ReadOnly: (bool) false,
     XML: (*spec.XMLObject)(<nil>),
     ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
     Example: (interface {}) <nil>
    },
    ExtraProps: (map[string]interface {}) <nil>
   },
   (string) (len=12) "AnalyticsApp": (spec.Schema) {
    VendorExtensible: (spec.VendorExtensible) {
     Extensions: (spec.Extensions) <nil>
    },
    SchemaProps: (spec.SchemaProps) {
     ID: (string) "",
     Ref: (spec.Ref) ,
     Schema: (spec.SchemaURL) "",
     Description: (string) (len=58) "App metadata for apps that don't exist on Clever (for p4a)",
     Type: (spec.StringOrArray) (len=1 cap=1) {
      (string) (len=6) "object"
     },
     Format: (string) "",
     Title: (string) "",
     Default: (interface {}) <nil>,
     Maximum: (*float64)(<nil>),
     ExclusiveMaximum: (bool) false,
     Minimum: (*float64)(<nil>),
     ExclusiveMinimum: (bool) false,
     MaxLength: (*int64)(<nil>),
     MinLength: (*int64)(<nil>),
     Pattern: (string) "",
     MaxItems: (*int64)(<nil>),
     MinItems: (*int64)(<nil>),
     UniqueItems: (bool) false,
     MultipleOf: (*float64)(<nil>),
     Enum: ([]interface {}) <nil>,
     MaxProperties: (*int64)(<nil>),
     MinProperties: (*int64)(<nil>),
     Required: ([]string) (len=1 cap=4) {
      (string) (len=2) "id"
     },
     Items: (*spec.SchemaOrArray)(<nil>),
     AllOf: ([]spec.Schema) <nil>,
     OneOf: ([]spec.Schema) <nil>,
     AnyOf: ([]spec.Schema) <nil>,
     Not: (*spec.Schema)(<nil>),
     Properties: (map[string]spec.Schema) (len=28) {
      (string) (len=4) "name": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=12) "stripeUserID": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=2) "id": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=9) "libraryID": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=18) "libraryIntegration": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) #/definitions/LibraryIntegrationType,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) <nil>,
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=25) "marketingCollateralStatus": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) (len=1) {
         (string) (len=10) "x-nullable": (bool) true
        }
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) #/definitions/MarketingCollateralStatus,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) <nil>,
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=8) "cleverID": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=6) "tosURL": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=16) "privacyPolicyURL": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=12) "installCount": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=7) "integer"
        },
        Format: (string) (len=5) "int32",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=9) "shortname": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=10) "categories": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) #/definitions/ResourceCategories,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) <nil>,
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=14) "certifications": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) #/definitions/ResourceCertifications,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) <nil>,
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=21) "universalDSASignatory": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=7) "boolean"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=7) "tagline": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=8) "features": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) #/definitions/ResourceFeatures,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) <nil>,
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=11) "description": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=7) "iconURL": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=7) "pricing": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) #/definitions/ResourcePricing,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) <nil>,
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=5) "tiers": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) #/definitions/Tiers,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) <nil>,
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=10) "searchTags": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=5) "array"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(0xc0009cc9e0)({
         Schema: (*spec.Schema)(0xc0003cb680)({
          VendorExtensible: (spec.VendorExtensible) {
           Extensions: (spec.Extensions) <nil>
          },
          SchemaProps: (spec.SchemaProps) {
           ID: (string) "",
           Ref: (spec.Ref) ,
           Schema: (spec.SchemaURL) "",
           Description: (string) "",
           Type: (spec.StringOrArray) (len=1 cap=1) {
            (string) (len=6) "string"
           },
           Format: (string) "",
           Title: (string) "",
           Default: (interface {}) <nil>,
           Maximum: (*float64)(<nil>),
           ExclusiveMaximum: (bool) false,
           Minimum: (*float64)(<nil>),
           ExclusiveMinimum: (bool) false,
           MaxLength: (*int64)(<nil>),
           MinLength: (*int64)(<nil>),
           Pattern: (string) "",
           MaxItems: (*int64)(<nil>),
           MinItems: (*int64)(<nil>),
           UniqueItems: (bool) false,
           MultipleOf: (*float64)(<nil>),
           Enum: ([]interface {}) <nil>,
           MaxProperties: (*int64)(<nil>),
           MinProperties: (*int64)(<nil>),
           Required: ([]string) <nil>,
           Items: (*spec.SchemaOrArray)(<nil>),
           AllOf: ([]spec.Schema) <nil>,
           OneOf: ([]spec.Schema) <nil>,
           AnyOf: ([]spec.Schema) <nil>,
           Not: (*spec.Schema)(<nil>),
           Properties: (map[string]spec.Schema) <nil>,
           AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
           PatternProperties: (map[string]spec.Schema) <nil>,
           Dependencies: (spec.Dependencies) <nil>,
           AdditionalItems: (*spec.SchemaOrBool)(<nil>),
           Definitions: (spec.Definitions) <nil>
          },
          SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
           Discriminator: (string) "",
           ReadOnly: (bool) false,
           XML: (*spec.XMLObject)(<nil>),
           ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
           Example: (interface {}) <nil>
          },
          ExtraProps: (map[string]interface {}) <nil>
         }),
         Schemas: ([]spec.Schema) <nil>
        }),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=3) "url": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=8) "featured": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=7) "integer"
        },
        Format: (string) (len=5) "int32",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=13) "showInLibrary": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=7) "boolean"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=13) "bannerIconURL": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=11) "gradeLevels": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) #/definitions/ResourceGradeLevels,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) <nil>,
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=7) "devices": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) #/definitions/ResourceDevices,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) <nil>,
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=8) "insights": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) #/definitions/InsightsMetadata,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) <nil>,
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      }
     },
     AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
     PatternProperties: (map[string]spec.Schema) <nil>,
     Dependencies: (spec.Dependencies) <nil>,
     AdditionalItems: (*spec.SchemaOrBool)(<nil>),
     Definitions: (spec.Definitions) <nil>
    },
    SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
     Discriminator: (string) "",
     ReadOnly: (bool) false,
     XML: (*spec.XMLObject)(<nil>),
     ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
     Example: (interface {}) <nil>
    },
    ExtraProps: (map[string]interface {}) <nil>
   },
   (string) (len=8) "UserType": (spec.Schema) {
    VendorExtensible: (spec.VendorExtensible) {
     Extensions: (spec.Extensions) <nil>
    },
    SchemaProps: (spec.SchemaProps) {
     ID: (string) "",
     Ref: (spec.Ref) ,
     Schema: (spec.SchemaURL) "",
     Description: (string) (len=16) "Valid user types",
     Type: (spec.StringOrArray) (len=1 cap=1) {
      (string) (len=6) "string"
     },
     Format: (string) "",
     Title: (string) "",
     Default: (interface {}) <nil>,
     Maximum: (*float64)(<nil>),
     ExclusiveMaximum: (bool) false,
     Minimum: (*float64)(<nil>),
     ExclusiveMinimum: (bool) false,
     MaxLength: (*int64)(<nil>),
     MinLength: (*int64)(<nil>),
     Pattern: (string) "",
     MaxItems: (*int64)(<nil>),
     MinItems: (*int64)(<nil>),
     UniqueItems: (bool) false,
     MultipleOf: (*float64)(<nil>),
     Enum: ([]interface {}) (len=5 cap=6) {
      (string) (len=8) "teachers",
      (string) (len=8) "students",
      (string) (len=15) "district_admins",
      (string) (len=13) "school_admins",
      (string) (len=12) "clever_users"
     },
     MaxProperties: (*int64)(<nil>),
     MinProperties: (*int64)(<nil>),
     Required: ([]string) <nil>,
     Items: (*spec.SchemaOrArray)(<nil>),
     AllOf: ([]spec.Schema) <nil>,
     OneOf: ([]spec.Schema) <nil>,
     AnyOf: ([]spec.Schema) <nil>,
     Not: (*spec.Schema)(<nil>),
     Properties: (map[string]spec.Schema) <nil>,
     AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
     PatternProperties: (map[string]spec.Schema) <nil>,
     Dependencies: (spec.Dependencies) <nil>,
     AdditionalItems: (*spec.SchemaOrBool)(<nil>),
     Definitions: (spec.Definitions) <nil>
    },
    SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
     Discriminator: (string) "",
     ReadOnly: (bool) false,
     XML: (*spec.XMLObject)(<nil>),
     ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
     Example: (interface {}) <nil>
    },
    ExtraProps: (map[string]interface {}) <nil>
   },
   (string) (len=16) "AppAdminResponse": (spec.Schema) {
    VendorExtensible: (spec.VendorExtensible) {
     Extensions: (spec.Extensions) <nil>
    },
    SchemaProps: (spec.SchemaProps) {
     ID: (string) "",
     Ref: (spec.Ref) ,
     Schema: (spec.SchemaURL) "",
     Description: (string) (len=48) "Admin with the data specific to a particular app",
     Type: (spec.StringOrArray) (len=1 cap=1) {
      (string) (len=6) "object"
     },
     Format: (string) "",
     Title: (string) "",
     Default: (interface {}) <nil>,
     Maximum: (*float64)(<nil>),
     ExclusiveMaximum: (bool) false,
     Minimum: (*float64)(<nil>),
     ExclusiveMinimum: (bool) false,
     MaxLength: (*int64)(<nil>),
     MinLength: (*int64)(<nil>),
     Pattern: (string) "",
     MaxItems: (*int64)(<nil>),
     MinItems: (*int64)(<nil>),
     UniqueItems: (bool) false,
     MultipleOf: (*float64)(<nil>),
     Enum: ([]interface {}) <nil>,
     MaxProperties: (*int64)(<nil>),
     MinProperties: (*int64)(<nil>),
     Required: ([]string) <nil>,
     Items: (*spec.SchemaOrArray)(<nil>),
     AllOf: ([]spec.Schema) <nil>,
     OneOf: ([]spec.Schema) <nil>,
     AnyOf: ([]spec.Schema) <nil>,
     Not: (*spec.Schema)(<nil>),
     Properties: (map[string]spec.Schema) (len=5) {
      (string) (len=9) "dateAdded": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) (len=8) "datetime",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=19) "verificationPending": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=7) "boolean"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=5) "admin": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) #/definitions/Admin,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) <nil>,
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=7) "isOwner": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=7) "boolean"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=11) "permissions": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) #/definitions/PermissionList,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) <nil>,
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      }
     },
     AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
     PatternProperties: (map[string]spec.Schema) <nil>,
     Dependencies: (spec.Dependencies) <nil>,
     AdditionalItems: (*spec.SchemaOrBool)(<nil>),
     Definitions: (spec.Definitions) <nil>
    },
    SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
     Discriminator: (string) "",
     ReadOnly: (bool) false,
     XML: (*spec.XMLObject)(<nil>),
     ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
     Example: (interface {}) <nil>
    },
    ExtraProps: (map[string]interface {}) <nil>
   },
   (string) (len=20) "OnboardingSurveyItem": (spec.Schema) {
    VendorExtensible: (spec.VendorExtensible) {
     Extensions: (spec.Extensions) <nil>
    },
    SchemaProps: (spec.SchemaProps) {
     ID: (string) "",
     Ref: (spec.Ref) ,
     Schema: (spec.SchemaURL) "",
     Description: (string) (len=56) "An app's response to a single onboarding survey question",
     Type: (spec.StringOrArray) (len=1 cap=1) {
      (string) (len=6) "object"
     },
     Format: (string) "",
     Title: (string) "",
     Default: (interface {}) <nil>,
     Maximum: (*float64)(<nil>),
     ExclusiveMaximum: (bool) false,
     Minimum: (*float64)(<nil>),
     ExclusiveMinimum: (bool) false,
     MaxLength: (*int64)(<nil>),
     MinLength: (*int64)(<nil>),
     Pattern: (string) "",
     MaxItems: (*int64)(<nil>),
     MinItems: (*int64)(<nil>),
     UniqueItems: (bool) false,
     MultipleOf: (*float64)(<nil>),
     Enum: ([]interface {}) <nil>,
     MaxProperties: (*int64)(<nil>),
     MinProperties: (*int64)(<nil>),
     Required: ([]string) <nil>,
     Items: (*spec.SchemaOrArray)(<nil>),
     AllOf: ([]spec.Schema) <nil>,
     OneOf: ([]spec.Schema) <nil>,
     AnyOf: ([]spec.Schema) <nil>,
     Not: (*spec.Schema)(<nil>),
     Properties: (map[string]spec.Schema) (len=2) {
      (string) (len=8) "question": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=8) "response": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      }
     },
     AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
     PatternProperties: (map[string]spec.Schema) <nil>,
     Dependencies: (spec.Dependencies) <nil>,
     AdditionalItems: (*spec.SchemaOrBool)(<nil>),
     Definitions: (spec.Definitions) <nil>
    },
    SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
     Discriminator: (string) "",
     ReadOnly: (bool) false,
     XML: (*spec.XMLObject)(<nil>),
     ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
     Example: (interface {}) <nil>
    },
    ExtraProps: (map[string]interface {}) <nil>
   },
   (string) (len=23) "UpdateOnboardingRequest": (spec.Schema) {
    VendorExtensible: (spec.VendorExtensible) {
     Extensions: (spec.Extensions) <nil>
    },
    SchemaProps: (spec.SchemaProps) {
     ID: (string) "",
     Ref: (spec.Ref) ,
     Schema: (spec.SchemaURL) "",
     Description: (string) (len=41) "An update to an app's onboarding progress",
     Type: (spec.StringOrArray) (len=1 cap=1) {
      (string) (len=6) "object"
     },
     Format: (string) "",
     Title: (string) "",
     Default: (interface {}) <nil>,
     Maximum: (*float64)(<nil>),
     ExclusiveMaximum: (bool) false,
     Minimum: (*float64)(<nil>),
     ExclusiveMinimum: (bool) false,
     MaxLength: (*int64)(<nil>),
     MinLength: (*int64)(<nil>),
     Pattern: (string) "",
     MaxItems: (*int64)(<nil>),
     MinItems: (*int64)(<nil>),
     UniqueItems: (bool) false,
     MultipleOf: (*float64)(<nil>),
     Enum: ([]interface {}) <nil>,
     MaxProperties: (*int64)(<nil>),
     MinProperties: (*int64)(<nil>),
     Required: ([]string) <nil>,
     Items: (*spec.SchemaOrArray)(<nil>),
     AllOf: ([]spec.Schema) <nil>,
     OneOf: ([]spec.Schema) <nil>,
     AnyOf: ([]spec.Schema) <nil>,
     Not: (*spec.Schema)(<nil>),
     Properties: (map[string]spec.Schema) (len=3) {
      (string) (len=15) "integrationType": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) #/definitions/OnboardingIntegrationType,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) <nil>,
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=9) "eventType": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) #/definitions/OnboardingEventType,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) <nil>,
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=6) "survey": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=5) "array"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(0xc000acc980)({
         Schema: (*spec.Schema)(0xc000adeb40)({
          VendorExtensible: (spec.VendorExtensible) {
           Extensions: (spec.Extensions) <nil>
          },
          SchemaProps: (spec.SchemaProps) {
           ID: (string) "",
           Ref: (spec.Ref) #/definitions/OnboardingSurveyItem,
           Schema: (spec.SchemaURL) "",
           Description: (string) "",
           Type: (spec.StringOrArray) <nil>,
           Format: (string) "",
           Title: (string) "",
           Default: (interface {}) <nil>,
           Maximum: (*float64)(<nil>),
           ExclusiveMaximum: (bool) false,
           Minimum: (*float64)(<nil>),
           ExclusiveMinimum: (bool) false,
           MaxLength: (*int64)(<nil>),
           MinLength: (*int64)(<nil>),
           Pattern: (string) "",
           MaxItems: (*int64)(<nil>),
           MinItems: (*int64)(<nil>),
           UniqueItems: (bool) false,
           MultipleOf: (*float64)(<nil>),
           Enum: ([]interface {}) <nil>,
           MaxProperties: (*int64)(<nil>),
           MinProperties: (*int64)(<nil>),
           Required: ([]string) <nil>,
           Items: (*spec.SchemaOrArray)(<nil>),
           AllOf: ([]spec.Schema) <nil>,
           OneOf: ([]spec.Schema) <nil>,
           AnyOf: ([]spec.Schema) <nil>,
           Not: (*spec.Schema)(<nil>),
           Properties: (map[string]spec.Schema) <nil>,
           AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
           PatternProperties: (map[string]spec.Schema) <nil>,
           Dependencies: (spec.Dependencies) <nil>,
           AdditionalItems: (*spec.SchemaOrBool)(<nil>),
           Definitions: (spec.Definitions) <nil>
          },
          SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
           Discriminator: (string) "",
           ReadOnly: (bool) false,
           XML: (*spec.XMLObject)(<nil>),
           ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
           Example: (interface {}) <nil>
          },
          ExtraProps: (map[string]interface {}) <nil>
         }),
         Schemas: ([]spec.Schema) <nil>
        }),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      }
     },
     AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
     PatternProperties: (map[string]spec.Schema) <nil>,
     Dependencies: (spec.Dependencies) <nil>,
     AdditionalItems: (*spec.SchemaOrBool)(<nil>),
     Definitions: (spec.Definitions) <nil>
    },
    SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
     Discriminator: (string) "",
     ReadOnly: (bool) false,
     XML: (*spec.XMLObject)(<nil>),
     ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
     Example: (interface {}) <nil>
    },
    ExtraProps: (map[string]interface {}) <nil>
   },
   (string) (len=24) "SetCertificationsRequest": (spec.Schema) {
    VendorExtensible: (spec.VendorExtensible) {
     Extensions: (spec.Extensions) <nil>
    },
    SchemaProps: (spec.SchemaProps) {
     ID: (string) "",
     Ref: (spec.Ref) ,
     Schema: (spec.SchemaURL) "",
     Description: (string) (len=66) "Integration certifications for an app, for a specific school year.",
     Type: (spec.StringOrArray) (len=1 cap=1) {
      (string) (len=6) "object"
     },
     Format: (string) "",
     Title: (string) "",
     Default: (interface {}) <nil>,
     Maximum: (*float64)(<nil>),
     ExclusiveMaximum: (bool) false,
     Minimum: (*float64)(<nil>),
     ExclusiveMinimum: (bool) false,
     MaxLength: (*int64)(<nil>),
     MinLength: (*int64)(<nil>),
     Pattern: (string) "",
     MaxItems: (*int64)(<nil>),
     MinItems: (*int64)(<nil>),
     UniqueItems: (bool) false,
     MultipleOf: (*float64)(<nil>),
     Enum: ([]interface {}) <nil>,
     MaxProperties: (*int64)(<nil>),
     MinProperties: (*int64)(<nil>),
     Required: ([]string) <nil>,
     Items: (*spec.SchemaOrArray)(<nil>),
     AllOf: ([]spec.Schema) <nil>,
     OneOf: ([]spec.Schema) <nil>,
     AnyOf: ([]spec.Schema) <nil>,
     Not: (*spec.Schema)(<nil>),
     Properties: (map[string]spec.Schema) (len=10) {
      (string) (len=6) "events": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=7) "boolean"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=7) "generic": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=7) "boolean"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=5) "goals": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=7) "boolean"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=10) "certS3Path": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) (len=116) "DEPRECATED - use certS3PathIntegration and certS3PathTradeshow instead. This field is mapped to certS3PathTradeshow.",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=21) "certS3PathIntegration": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=19) "certS3PathTradeshow": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=12) "instantLogin": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=7) "boolean"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=3) "ios": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) (len=84) "DEPRECATED - use nativeMobile instead. This field is mapped to nativeMobile for now.",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=7) "boolean"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=12) "nativeMobile": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=7) "boolean"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=10) "secureSync": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=7) "boolean"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      }
     },
     AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
     PatternProperties: (map[string]spec.Schema) <nil>,
     Dependencies: (spec.Dependencies) <nil>,
     AdditionalItems: (*spec.SchemaOrBool)(<nil>),
     Definitions: (spec.Definitions) <nil>
    },
    SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
     Discriminator: (string) "",
     ReadOnly: (bool) false,
     XML: (*spec.XMLObject)(<nil>),
     ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
     Example: (interface {}) <nil>
    },
    ExtraProps: (map[string]interface {}) <nil>
   },
   (string) (len=28) "CreateLibraryResourceRequest": (spec.Schema) {
    VendorExtensible: (spec.VendorExtensible) {
     Extensions: (spec.Extensions) <nil>
    },
    SchemaProps: (spec.SchemaProps) {
     ID: (string) "",
     Ref: (spec.Ref) ,
     Schema: (spec.SchemaURL) "",
     Description: (string) "",
     Type: (spec.StringOrArray) (len=1 cap=1) {
      (string) (len=6) "object"
     },
     Format: (string) "",
     Title: (string) "",
     Default: (interface {}) <nil>,
     Maximum: (*float64)(<nil>),
     ExclusiveMaximum: (bool) false,
     Minimum: (*float64)(<nil>),
     ExclusiveMinimum: (bool) false,
     MaxLength: (*int64)(<nil>),
     MinLength: (*int64)(<nil>),
     Pattern: (string) "",
     MaxItems: (*int64)(<nil>),
     MinItems: (*int64)(<nil>),
     UniqueItems: (bool) false,
     MultipleOf: (*float64)(<nil>),
     Enum: ([]interface {}) <nil>,
     MaxProperties: (*int64)(<nil>),
     MinProperties: (*int64)(<nil>),
     Required: ([]string) <nil>,
     Items: (*spec.SchemaOrArray)(<nil>),
     AllOf: ([]spec.Schema) <nil>,
     OneOf: ([]spec.Schema) <nil>,
     AnyOf: ([]spec.Schema) <nil>,
     Not: (*spec.Schema)(<nil>),
     Properties: (map[string]spec.Schema) (len=1) {
      (string) (len=8) "cleverID": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) (len=1) {
         (string) (len=10) "x-nullable": (bool) true
        }
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(0xc000b0ad50)(1),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      }
     },
     AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
     PatternProperties: (map[string]spec.Schema) <nil>,
     Dependencies: (spec.Dependencies) <nil>,
     AdditionalItems: (*spec.SchemaOrBool)(<nil>),
     Definitions: (spec.Definitions) <nil>
    },
    SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
     Discriminator: (string) "",
     ReadOnly: (bool) false,
     XML: (*spec.XMLObject)(<nil>),
     ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
     Example: (interface {}) <nil>
    },
    ExtraProps: (map[string]interface {}) <nil>
   },
   (string) (len=9) "SetupStep": (spec.Schema) {
    VendorExtensible: (spec.VendorExtensible) {
     Extensions: (spec.Extensions) (len=1) {
      (string) (len=4) "x-db": (map[string]interface {}) (len=2) {
       (string) (len=15) "AllowOverwrites": (bool) true,
       (string) (len=8) "DynamoDB": (map[string]interface {}) (len=1) {
        (string) (len=9) "KeySchema": ([]interface {}) (len=2 cap=2) {
         (map[string]interface {}) (len=2) {
          (string) (len=13) "AttributeName": (string) (len=6) "app_id",
          (string) (len=7) "KeyType": (string) (len=4) "HASH"
         },
         (map[string]interface {}) (len=2) {
          (string) (len=13) "AttributeName": (string) (len=2) "id",
          (string) (len=7) "KeyType": (string) (len=5) "RANGE"
         }
        }
       }
      }
     }
    },
    SchemaProps: (spec.SchemaProps) {
     ID: (string) "",
     Ref: (spec.Ref) ,
     Schema: (spec.SchemaURL) "",
     Description: (string) "",
     Type: (spec.StringOrArray) (len=1 cap=1) {
      (string) (len=6) "object"
     },
     Format: (string) "",
     Title: (string) "",
     Default: (interface {}) <nil>,
     Maximum: (*float64)(<nil>),
     ExclusiveMaximum: (bool) false,
     Minimum: (*float64)(<nil>),
     ExclusiveMinimum: (bool) false,
     MaxLength: (*int64)(<nil>),
     MinLength: (*int64)(<nil>),
     Pattern: (string) "",
     MaxItems: (*int64)(<nil>),
     MinItems: (*int64)(<nil>),
     UniqueItems: (bool) false,
     MultipleOf: (*float64)(<nil>),
     Enum: ([]interface {}) <nil>,
     MaxProperties: (*int64)(<nil>),
     MinProperties: (*int64)(<nil>),
     Required: ([]string) <nil>,
     Items: (*spec.SchemaOrArray)(<nil>),
     AllOf: ([]spec.Schema) <nil>,
     OneOf: ([]spec.Schema) <nil>,
     AnyOf: ([]spec.Schema) <nil>,
     Not: (*spec.Schema)(<nil>),
     Properties: (map[string]spec.Schema) (len=6) {
      (string) (len=2) "id": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=6) "app_id": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=7) "content": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=5) "title": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=9) "edit_date": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) (len=1) {
         (string) (len=10) "x-nullable": (bool) true
        }
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=7) "creator": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) (len=1) {
         (string) (len=10) "x-nullable": (bool) true
        }
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      }
     },
     AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
     PatternProperties: (map[string]spec.Schema) <nil>,
     Dependencies: (spec.Dependencies) <nil>,
     AdditionalItems: (*spec.SchemaOrBool)(<nil>),
     Definitions: (spec.Definitions) <nil>
    },
    SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
     Discriminator: (string) "",
     ReadOnly: (bool) false,
     XML: (*spec.XMLObject)(<nil>),
     ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
     Example: (interface {}) <nil>
    },
    ExtraProps: (map[string]interface {}) <nil>
   },
   (string) (len=15) "VersionSettings": (spec.Schema) {
    VendorExtensible: (spec.VendorExtensible) {
     Extensions: (spec.Extensions) <nil>
    },
    SchemaProps: (spec.SchemaProps) {
     ID: (string) "",
     Ref: (spec.Ref) ,
     Schema: (spec.SchemaURL) "",
     Description: (string) (len=35) "Version settings for an application",
     Type: (spec.StringOrArray) (len=1 cap=1) {
      (string) (len=6) "object"
     },
     Format: (string) "",
     Title: (string) "",
     Default: (interface {}) <nil>,
     Maximum: (*float64)(<nil>),
     ExclusiveMaximum: (bool) false,
     Minimum: (*float64)(<nil>),
     ExclusiveMinimum: (bool) false,
     MaxLength: (*int64)(<nil>),
     MinLength: (*int64)(<nil>),
     Pattern: (string) "",
     MaxItems: (*int64)(<nil>),
     MinItems: (*int64)(<nil>),
     UniqueItems: (bool) false,
     MultipleOf: (*float64)(<nil>),
     Enum: ([]interface {}) <nil>,
     MaxProperties: (*int64)(<nil>),
     MinProperties: (*int64)(<nil>),
     Required: ([]string) <nil>,
     Items: (*spec.SchemaOrArray)(<nil>),
     AllOf: ([]spec.Schema) <nil>,
     OneOf: ([]spec.Schema) <nil>,
     AnyOf: ([]spec.Schema) <nil>,
     Not: (*spec.Schema)(<nil>),
     Properties: (map[string]spec.Schema) (len=2) {
      (string) (len=7) "allowed": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=5) "array"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(0xc000982620)({
         Schema: (*spec.Schema)(0xc00017a240)({
          VendorExtensible: (spec.VendorExtensible) {
           Extensions: (spec.Extensions) <nil>
          },
          SchemaProps: (spec.SchemaProps) {
           ID: (string) "",
           Ref: (spec.Ref) #/definitions/Version,
           Schema: (spec.SchemaURL) "",
           Description: (string) "",
           Type: (spec.StringOrArray) <nil>,
           Format: (string) "",
           Title: (string) "",
           Default: (interface {}) <nil>,
           Maximum: (*float64)(<nil>),
           ExclusiveMaximum: (bool) false,
           Minimum: (*float64)(<nil>),
           ExclusiveMinimum: (bool) false,
           MaxLength: (*int64)(<nil>),
           MinLength: (*int64)(<nil>),
           Pattern: (string) "",
           MaxItems: (*int64)(<nil>),
           MinItems: (*int64)(<nil>),
           UniqueItems: (bool) false,
           MultipleOf: (*float64)(<nil>),
           Enum: ([]interface {}) <nil>,
           MaxProperties: (*int64)(<nil>),
           MinProperties: (*int64)(<nil>),
           Required: ([]string) <nil>,
           Items: (*spec.SchemaOrArray)(<nil>),
           AllOf: ([]spec.Schema) <nil>,
           OneOf: ([]spec.Schema) <nil>,
           AnyOf: ([]spec.Schema) <nil>,
           Not: (*spec.Schema)(<nil>),
           Properties: (map[string]spec.Schema) <nil>,
           AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
           PatternProperties: (map[string]spec.Schema) <nil>,
           Dependencies: (spec.Dependencies) <nil>,
           AdditionalItems: (*spec.SchemaOrBool)(<nil>),
           Definitions: (spec.Definitions) <nil>
          },
          SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
           Discriminator: (string) "",
           ReadOnly: (bool) false,
           XML: (*spec.XMLObject)(<nil>),
           ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
           Example: (interface {}) <nil>
          },
          ExtraProps: (map[string]interface {}) <nil>
         }),
         Schemas: ([]spec.Schema) <nil>
        }),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=7) "default": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) #/definitions/Version,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) <nil>,
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      }
     },
     AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
     PatternProperties: (map[string]spec.Schema) <nil>,
     Dependencies: (spec.Dependencies) <nil>,
     AdditionalItems: (*spec.SchemaOrBool)(<nil>),
     Definitions: (spec.Definitions) <nil>
    },
    SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
     Discriminator: (string) "",
     ReadOnly: (bool) false,
     XML: (*spec.XMLObject)(<nil>),
     ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
     Example: (interface {}) <nil>
    },
    ExtraProps: (map[string]interface {}) <nil>
   },
   (string) (len=15) "PatchAppRequest": (spec.Schema) {
    VendorExtensible: (spec.VendorExtensible) {
     Extensions: (spec.Extensions) <nil>
    },
    SchemaProps: (spec.SchemaProps) {
     ID: (string) "",
     Ref: (spec.Ref) ,
     Schema: (spec.SchemaURL) "",
     Description: (string) (len=19) "An update to an app",
     Type: (spec.StringOrArray) (len=1 cap=1) {
      (string) (len=6) "object"
     },
     Format: (string) "",
     Title: (string) "",
     Default: (interface {}) <nil>,
     Maximum: (*float64)(<nil>),
     ExclusiveMaximum: (bool) false,
     Minimum: (*float64)(<nil>),
     ExclusiveMinimum: (bool) false,
     MaxLength: (*int64)(<nil>),
     MinLength: (*int64)(<nil>),
     Pattern: (string) "",
     MaxItems: (*int64)(<nil>),
     MinItems: (*int64)(<nil>),
     UniqueItems: (bool) false,
     MultipleOf: (*float64)(<nil>),
     Enum: ([]interface {}) <nil>,
     MaxProperties: (*int64)(<nil>),
     MinProperties: (*int64)(<nil>),
     Required: ([]string) <nil>,
     Items: (*spec.SchemaOrArray)(<nil>),
     AllOf: ([]spec.Schema) <nil>,
     OneOf: ([]spec.Schema) <nil>,
     AnyOf: ([]spec.Schema) <nil>,
     Not: (*spec.Schema)(<nil>),
     Properties: (map[string]spec.Schema) (len=21) {
      (string) (len=29) "nonOwnerImpersonationDisabled": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) (len=1) {
         (string) (len=10) "x-nullable": (bool) true
        }
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=7) "boolean"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=14) "requiredScopes": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) (len=1) {
         (string) (len=10) "x-nullable": (bool) true
        }
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=5) "array"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(0xc000964718)(1),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(0xc000929d60)({
         Schema: (*spec.Schema)(0xc0001d7b00)({
          VendorExtensible: (spec.VendorExtensible) {
           Extensions: (spec.Extensions) <nil>
          },
          SchemaProps: (spec.SchemaProps) {
           ID: (string) "",
           Ref: (spec.Ref) ,
           Schema: (spec.SchemaURL) "",
           Description: (string) "",
           Type: (spec.StringOrArray) (len=1 cap=1) {
            (string) (len=6) "string"
           },
           Format: (string) "",
           Title: (string) "",
           Default: (interface {}) <nil>,
           Maximum: (*float64)(<nil>),
           ExclusiveMaximum: (bool) false,
           Minimum: (*float64)(<nil>),
           ExclusiveMinimum: (bool) false,
           MaxLength: (*int64)(<nil>),
           MinLength: (*int64)(<nil>),
           Pattern: (string) "",
           MaxItems: (*int64)(<nil>),
           MinItems: (*int64)(<nil>),
           UniqueItems: (bool) false,
           MultipleOf: (*float64)(<nil>),
           Enum: ([]interface {}) <nil>,
           MaxProperties: (*int64)(<nil>),
           MinProperties: (*int64)(<nil>),
           Required: ([]string) <nil>,
           Items: (*spec.SchemaOrArray)(<nil>),
           AllOf: ([]spec.Schema) <nil>,
           OneOf: ([]spec.Schema) <nil>,
           AnyOf: ([]spec.Schema) <nil>,
           Not: (*spec.Schema)(<nil>),
           Properties: (map[string]spec.Schema) <nil>,
           AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
           PatternProperties: (map[string]spec.Schema) <nil>,
           Dependencies: (spec.Dependencies) <nil>,
           AdditionalItems: (*spec.SchemaOrBool)(<nil>),
           Definitions: (spec.Definitions) <nil>
          },
          SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
           Discriminator: (string) "",
           ReadOnly: (bool) false,
           XML: (*spec.XMLObject)(<nil>),
           ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
           Example: (interface {}) <nil>
          },
          ExtraProps: (map[string]interface {}) <nil>
         }),
         Schemas: ([]spec.Schema) <nil>
        }),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=14) "supportContact": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) (len=1) {
         (string) (len=10) "x-nullable": (bool) true
        }
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=18) "supportContactName": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) (len=1) {
         (string) (len=10) "x-nullable": (bool) true
        }
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=10) "categories": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) (len=1) {
         (string) (len=10) "x-nullable": (bool) true
        }
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=5) "array"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(0xc000929640)({
         Schema: (*spec.Schema)(0xc00021ab40)({
          VendorExtensible: (spec.VendorExtensible) {
           Extensions: (spec.Extensions) <nil>
          },
          SchemaProps: (spec.SchemaProps) {
           ID: (string) "",
           Ref: (spec.Ref) ,
           Schema: (spec.SchemaURL) "",
           Description: (string) "",
           Type: (spec.StringOrArray) (len=1 cap=1) {
            (string) (len=6) "string"
           },
           Format: (string) "",
           Title: (string) "",
           Default: (interface {}) <nil>,
           Maximum: (*float64)(<nil>),
           ExclusiveMaximum: (bool) false,
           Minimum: (*float64)(<nil>),
           ExclusiveMinimum: (bool) false,
           MaxLength: (*int64)(<nil>),
           MinLength: (*int64)(<nil>),
           Pattern: (string) "",
           MaxItems: (*int64)(<nil>),
           MinItems: (*int64)(<nil>),
           UniqueItems: (bool) false,
           MultipleOf: (*float64)(<nil>),
           Enum: ([]interface {}) <nil>,
           MaxProperties: (*int64)(<nil>),
           MinProperties: (*int64)(<nil>),
           Required: ([]string) <nil>,
           Items: (*spec.SchemaOrArray)(<nil>),
           AllOf: ([]spec.Schema) <nil>,
           OneOf: ([]spec.Schema) <nil>,
           AnyOf: ([]spec.Schema) <nil>,
           Not: (*spec.Schema)(<nil>),
           Properties: (map[string]spec.Schema) <nil>,
           AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
           PatternProperties: (map[string]spec.Schema) <nil>,
           Dependencies: (spec.Dependencies) <nil>,
           AdditionalItems: (*spec.SchemaOrBool)(<nil>),
           Definitions: (spec.Definitions) <nil>
          },
          SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
           Discriminator: (string) "",
           ReadOnly: (bool) false,
           XML: (*spec.XMLObject)(<nil>),
           ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
           Example: (interface {}) <nil>
          },
          ExtraProps: (map[string]interface {}) <nil>
         }),
         Schemas: ([]spec.Schema) <nil>
        }),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=10) "edsurgeUrl": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) (len=1) {
         (string) (len=10) "x-nullable": (bool) true
        }
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=17) "defaultAccessTier": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) (len=1) {
         (string) (len=10) "x-nullable": (bool) true
        }
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=4) "tags": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) (len=1) {
         (string) (len=10) "x-nullable": (bool) true
        }
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=5) "array"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(0xc000982220)({
         Schema: (*spec.Schema)(0xc0001a0480)({
          VendorExtensible: (spec.VendorExtensible) {
           Extensions: (spec.Extensions) <nil>
          },
          SchemaProps: (spec.SchemaProps) {
           ID: (string) "",
           Ref: (spec.Ref) ,
           Schema: (spec.SchemaURL) "",
           Description: (string) "",
           Type: (spec.StringOrArray) (len=1 cap=1) {
            (string) (len=6) "string"
           },
           Format: (string) "",
           Title: (string) "",
           Default: (interface {}) <nil>,
           Maximum: (*float64)(<nil>),
           ExclusiveMaximum: (bool) false,
           Minimum: (*float64)(<nil>),
           ExclusiveMinimum: (bool) false,
           MaxLength: (*int64)(<nil>),
           MinLength: (*int64)(<nil>),
           Pattern: (string) "",
           MaxItems: (*int64)(<nil>),
           MinItems: (*int64)(<nil>),
           UniqueItems: (bool) false,
           MultipleOf: (*float64)(<nil>),
           Enum: ([]interface {}) <nil>,
           MaxProperties: (*int64)(<nil>),
           MinProperties: (*int64)(<nil>),
           Required: ([]string) <nil>,
           Items: (*spec.SchemaOrArray)(<nil>),
           AllOf: ([]spec.Schema) <nil>,
           OneOf: ([]spec.Schema) <nil>,
           AnyOf: ([]spec.Schema) <nil>,
           Not: (*spec.Schema)(<nil>),
           Properties: (map[string]spec.Schema) <nil>,
           AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
           PatternProperties: (map[string]spec.Schema) <nil>,
           Dependencies: (spec.Dependencies) <nil>,
           AdditionalItems: (*spec.SchemaOrBool)(<nil>),
           Definitions: (spec.Definitions) <nil>
          },
          SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
           Discriminator: (string) "",
           ReadOnly: (bool) false,
           XML: (*spec.XMLObject)(<nil>),
           ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
           Example: (interface {}) <nil>
          },
          ExtraProps: (map[string]interface {}) <nil>
         }),
         Schemas: ([]spec.Schema) <nil>
        }),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=8) "altNames": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) (len=1) {
         (string) (len=10) "x-nullable": (bool) true
        }
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=5) "array"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(0xc000929520)({
         Schema: (*spec.Schema)(0xc000226d80)({
          VendorExtensible: (spec.VendorExtensible) {
           Extensions: (spec.Extensions) <nil>
          },
          SchemaProps: (spec.SchemaProps) {
           ID: (string) "",
           Ref: (spec.Ref) ,
           Schema: (spec.SchemaURL) "",
           Description: (string) "",
           Type: (spec.StringOrArray) (len=1 cap=1) {
            (string) (len=6) "string"
           },
           Format: (string) "",
           Title: (string) "",
           Default: (interface {}) <nil>,
           Maximum: (*float64)(<nil>),
           ExclusiveMaximum: (bool) false,
           Minimum: (*float64)(<nil>),
           ExclusiveMinimum: (bool) false,
           MaxLength: (*int64)(<nil>),
           MinLength: (*int64)(<nil>),
           Pattern: (string) "",
           MaxItems: (*int64)(<nil>),
           MinItems: (*int64)(<nil>),
           UniqueItems: (bool) false,
           MultipleOf: (*float64)(<nil>),
           Enum: ([]interface {}) <nil>,
           MaxProperties: (*int64)(<nil>),
           MinProperties: (*int64)(<nil>),
           Required: ([]string) <nil>,
           Items: (*spec.SchemaOrArray)(<nil>),
           AllOf: ([]spec.Schema) <nil>,
           OneOf: ([]spec.Schema) <nil>,
           AnyOf: ([]spec.Schema) <nil>,
           Not: (*spec.Schema)(<nil>),
           Properties: (map[string]spec.Schema) <nil>,
           AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
           PatternProperties: (map[string]spec.Schema) <nil>,
           Dependencies: (spec.Dependencies) <nil>,
           AdditionalItems: (*spec.SchemaOrBool)(<nil>),
           Definitions: (spec.Definitions) <nil>
          },
          SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
           Discriminator: (string) "",
           ReadOnly: (bool) false,
           XML: (*spec.XMLObject)(<nil>),
           ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
           Example: (interface {}) <nil>
          },
          ExtraProps: (map[string]interface {}) <nil>
         }),
         Schemas: ([]spec.Schema) <nil>
        }),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=12) "redirectUris": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) (len=1) {
         (string) (len=10) "x-nullable": (bool) true
        }
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=5) "array"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(0xc000929bc0)({
         Schema: (*spec.Schema)(0xc0001de000)({
          VendorExtensible: (spec.VendorExtensible) {
           Extensions: (spec.Extensions) <nil>
          },
          SchemaProps: (spec.SchemaProps) {
           ID: (string) "",
           Ref: (spec.Ref) ,
           Schema: (spec.SchemaURL) "",
           Description: (string) "",
           Type: (spec.StringOrArray) (len=1 cap=1) {
            (string) (len=6) "string"
           },
           Format: (string) "",
           Title: (string) "",
           Default: (interface {}) <nil>,
           Maximum: (*float64)(<nil>),
           ExclusiveMaximum: (bool) false,
           Minimum: (*float64)(<nil>),
           ExclusiveMinimum: (bool) false,
           MaxLength: (*int64)(<nil>),
           MinLength: (*int64)(<nil>),
           Pattern: (string) "",
           MaxItems: (*int64)(<nil>),
           MinItems: (*int64)(<nil>),
           UniqueItems: (bool) false,
           MultipleOf: (*float64)(<nil>),
           Enum: ([]interface {}) <nil>,
           MaxProperties: (*int64)(<nil>),
           MinProperties: (*int64)(<nil>),
           Required: ([]string) <nil>,
           Items: (*spec.SchemaOrArray)(<nil>),
           AllOf: ([]spec.Schema) <nil>,
           OneOf: ([]spec.Schema) <nil>,
           AnyOf: ([]spec.Schema) <nil>,
           Not: (*spec.Schema)(<nil>),
           Properties: (map[string]spec.Schema) <nil>,
           AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
           PatternProperties: (map[string]spec.Schema) <nil>,
           Dependencies: (spec.Dependencies) <nil>,
           AdditionalItems: (*spec.SchemaOrBool)(<nil>),
           Definitions: (spec.Definitions) <nil>
          },
          SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
           Discriminator: (string) "",
           ReadOnly: (bool) false,
           XML: (*spec.XMLObject)(<nil>),
           ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
           Example: (interface {}) <nil>
          },
          ExtraProps: (map[string]interface {}) <nil>
         }),
         Schemas: ([]spec.Schema) <nil>
        }),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=13) "inviteMessage": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) (len=1) {
         (string) (len=10) "x-nullable": (bool) true
        }
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(0xc0009644b8)(1000),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=14) "iosRedirectUri": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) (len=1) {
         (string) (len=10) "x-nullable": (bool) true
        }
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=4) "name": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) (len=1) {
         (string) (len=10) "x-nullable": (bool) true
        }
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(0xc000964570)(1),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=9) "shortname": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) (len=1) {
         (string) (len=10) "x-nullable": (bool) true
        }
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(0xc000964840)(1),
        Pattern: (string) (len=14) "[0-9a-zA-Z_-]+",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=10) "websiteUrl": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) (len=1) {
         (string) (len=10) "x-nullable": (bool) true
        }
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(0xc000964a18)(1),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=22) "customerSolutionsNotes": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) (len=1) {
         (string) (len=10) "x-nullable": (bool) true
        }
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=11) "description": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) (len=1) {
         (string) (len=10) "x-nullable": (bool) true
        }
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=18) "supportedUserTypes": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) (len=1) {
         (string) (len=10) "x-nullable": (bool) true
        }
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=5) "array"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(0xc0009820e0)({
         Schema: (*spec.Schema)(0xc0001b3b00)({
          VendorExtensible: (spec.VendorExtensible) {
           Extensions: (spec.Extensions) <nil>
          },
          SchemaProps: (spec.SchemaProps) {
           ID: (string) "",
           Ref: (spec.Ref) #/definitions/UserType,
           Schema: (spec.SchemaURL) "",
           Description: (string) "",
           Type: (spec.StringOrArray) <nil>,
           Format: (string) "",
           Title: (string) "",
           Default: (interface {}) <nil>,
           Maximum: (*float64)(<nil>),
           ExclusiveMaximum: (bool) false,
           Minimum: (*float64)(<nil>),
           ExclusiveMinimum: (bool) false,
           MaxLength: (*int64)(<nil>),
           MinLength: (*int64)(<nil>),
           Pattern: (string) "",
           MaxItems: (*int64)(<nil>),
           MinItems: (*int64)(<nil>),
           UniqueItems: (bool) false,
           MultipleOf: (*float64)(<nil>),
           Enum: ([]interface {}) <nil>,
           MaxProperties: (*int64)(<nil>),
           MinProperties: (*int64)(<nil>),
           Required: ([]string) <nil>,
           Items: (*spec.SchemaOrArray)(<nil>),
           AllOf: ([]spec.Schema) <nil>,
           OneOf: ([]spec.Schema) <nil>,
           AnyOf: ([]spec.Schema) <nil>,
           Not: (*spec.Schema)(<nil>),
           Properties: (map[string]spec.Schema) <nil>,
           AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
           PatternProperties: (map[string]spec.Schema) <nil>,
           Dependencies: (spec.Dependencies) <nil>,
           AdditionalItems: (*spec.SchemaOrBool)(<nil>),
           Definitions: (spec.Definitions) <nil>
          },
          SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
           Discriminator: (string) "",
           ReadOnly: (bool) false,
           XML: (*spec.XMLObject)(<nil>),
           ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
           Example: (interface {}) <nil>
          },
          ExtraProps: (map[string]interface {}) <nil>
         }),
         Schemas: ([]spec.Schema) <nil>
        }),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=8) "versions": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) (len=1) {
         (string) (len=10) "x-nullable": (bool) true
        }
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) #/definitions/VersionSettings,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) <nil>,
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=5) "image": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) (len=1) {
         (string) (len=10) "x-nullable": (bool) true
        }
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) #/definitions/Image,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) <nil>,
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=12) "salesContact": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) (len=1) {
         (string) (len=10) "x-nullable": (bool) true
        }
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      }
     },
     AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
     PatternProperties: (map[string]spec.Schema) <nil>,
     Dependencies: (spec.Dependencies) <nil>,
     AdditionalItems: (*spec.SchemaOrBool)(<nil>),
     Definitions: (spec.Definitions) <nil>
    },
    SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
     Discriminator: (string) "",
     ReadOnly: (bool) false,
     XML: (*spec.XMLObject)(<nil>),
     ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
     Example: (interface {}) <nil>
    },
    ExtraProps: (map[string]interface {}) <nil>
   },
   (string) (len=5) "Admin": (spec.Schema) {
    VendorExtensible: (spec.VendorExtensible) {
     Extensions: (spec.Extensions) <nil>
    },
    SchemaProps: (spec.SchemaProps) {
     ID: (string) "",
     Ref: (spec.Ref) ,
     Schema: (spec.SchemaURL) "",
     Description: (string) "",
     Type: (spec.StringOrArray) (len=1 cap=1) {
      (string) (len=6) "object"
     },
     Format: (string) "",
     Title: (string) "",
     Default: (interface {}) <nil>,
     Maximum: (*float64)(<nil>),
     ExclusiveMaximum: (bool) false,
     Minimum: (*float64)(<nil>),
     ExclusiveMinimum: (bool) false,
     MaxLength: (*int64)(<nil>),
     MinLength: (*int64)(<nil>),
     Pattern: (string) "",
     MaxItems: (*int64)(<nil>),
     MinItems: (*int64)(<nil>),
     UniqueItems: (bool) false,
     MultipleOf: (*float64)(<nil>),
     Enum: ([]interface {}) <nil>,
     MaxProperties: (*int64)(<nil>),
     MinProperties: (*int64)(<nil>),
     Required: ([]string) <nil>,
     Items: (*spec.SchemaOrArray)(<nil>),
     AllOf: ([]spec.Schema) <nil>,
     OneOf: ([]spec.Schema) <nil>,
     AnyOf: ([]spec.Schema) <nil>,
     Not: (*spec.Schema)(<nil>),
     Properties: (map[string]spec.Schema) (len=6) {
      (string) (len=9) "twoFactor": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) #/definitions/TwoFactor,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) <nil>,
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=2) "id": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=4) "name": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(0xc0009f24b8)(1),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=5) "email": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(0xc0009f2500)(1),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=13) "verifiedEmail": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=5) "phone": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      }
     },
     AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
     PatternProperties: (map[string]spec.Schema) <nil>,
     Dependencies: (spec.Dependencies) <nil>,
     AdditionalItems: (*spec.SchemaOrBool)(<nil>),
     Definitions: (spec.Definitions) <nil>
    },
    SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
     Discriminator: (string) "",
     ReadOnly: (bool) false,
     XML: (*spec.XMLObject)(<nil>),
     ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
     Example: (interface {}) <nil>
    },
    ExtraProps: (map[string]interface {}) <nil>
   },
   (string) (len=10) "Permission": (spec.Schema) {
    VendorExtensible: (spec.VendorExtensible) {
     Extensions: (spec.Extensions) <nil>
    },
    SchemaProps: (spec.SchemaProps) {
     ID: (string) "",
     Ref: (spec.Ref) ,
     Schema: (spec.SchemaURL) "",
     Description: (string) (len=30) "A permission for an app admin.",
     Type: (spec.StringOrArray) (len=1 cap=1) {
      (string) (len=6) "object"
     },
     Format: (string) "",
     Title: (string) "",
     Default: (interface {}) <nil>,
     Maximum: (*float64)(<nil>),
     ExclusiveMaximum: (bool) false,
     Minimum: (*float64)(<nil>),
     ExclusiveMinimum: (bool) false,
     MaxLength: (*int64)(<nil>),
     MinLength: (*int64)(<nil>),
     Pattern: (string) "",
     MaxItems: (*int64)(<nil>),
     MinItems: (*int64)(<nil>),
     UniqueItems: (bool) false,
     MultipleOf: (*float64)(<nil>),
     Enum: ([]interface {}) <nil>,
     MaxProperties: (*int64)(<nil>),
     MinProperties: (*int64)(<nil>),
     Required: ([]string) <nil>,
     Items: (*spec.SchemaOrArray)(<nil>),
     AllOf: ([]spec.Schema) <nil>,
     OneOf: ([]spec.Schema) <nil>,
     AnyOf: ([]spec.Schema) <nil>,
     Not: (*spec.Schema)(<nil>),
     Properties: (map[string]spec.Schema) (len=2) {
      (string) (len=8) "resource": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) (len=7 cap=9) {
         (string) (len=5) "admin",
         (string) (len=19) "disconnect_district",
         (string) (len=17) "district_requests",
         (string) (len=10) "data_tools",
         (string) (len=12) "app_settings",
         (string) (len=11) "app_secrets",
         (string) (len=11) "app_filters"
        },
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=6) "action": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) (len=3 cap=4) {
         (string) (len=4) "view",
         (string) (len=4) "edit",
         (string) (len=4) "none"
        },
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      }
     },
     AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
     PatternProperties: (map[string]spec.Schema) <nil>,
     Dependencies: (spec.Dependencies) <nil>,
     AdditionalItems: (*spec.SchemaOrBool)(<nil>),
     Definitions: (spec.Definitions) <nil>
    },
    SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
     Discriminator: (string) "",
     ReadOnly: (bool) false,
     XML: (*spec.XMLObject)(<nil>),
     ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
     Example: (interface {}) <nil>
    },
    ExtraProps: (map[string]interface {}) <nil>
   },
   (string) (len=14) "Certifications": (spec.Schema) {
    VendorExtensible: (spec.VendorExtensible) {
     Extensions: (spec.Extensions) <nil>
    },
    SchemaProps: (spec.SchemaProps) {
     ID: (string) "",
     Ref: (spec.Ref) ,
     Schema: (spec.SchemaURL) "",
     Description: (string) (len=66) "Integration certifications for an app, for a specific school year.",
     Type: (spec.StringOrArray) (len=1 cap=1) {
      (string) (len=6) "object"
     },
     Format: (string) "",
     Title: (string) "",
     Default: (interface {}) <nil>,
     Maximum: (*float64)(<nil>),
     ExclusiveMaximum: (bool) false,
     Minimum: (*float64)(<nil>),
     ExclusiveMinimum: (bool) false,
     MaxLength: (*int64)(<nil>),
     MinLength: (*int64)(<nil>),
     Pattern: (string) "",
     MaxItems: (*int64)(<nil>),
     MinItems: (*int64)(<nil>),
     UniqueItems: (bool) false,
     MultipleOf: (*float64)(<nil>),
     Enum: ([]interface {}) <nil>,
     MaxProperties: (*int64)(<nil>),
     MinProperties: (*int64)(<nil>),
     Required: ([]string) <nil>,
     Items: (*spec.SchemaOrArray)(<nil>),
     AllOf: ([]spec.Schema) <nil>,
     OneOf: ([]spec.Schema) <nil>,
     AnyOf: ([]spec.Schema) <nil>,
     Not: (*spec.Schema)(<nil>),
     Properties: (map[string]spec.Schema) (len=13) {
      (string) (len=12) "instantLogin": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=7) "boolean"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=3) "ios": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) (len=84) "DEPRECATED - use nativeMobile instead. This field is mapped to nativeMobile for now.",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=7) "boolean"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=15) "schoolYearStart": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) (len=31) "Start year for the school year.",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=7) "integer"
        },
        Format: (string) (len=5) "int32",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=10) "secureSync": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=7) "boolean"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=10) "certS3Path": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) (len=116) "DEPRECATED - use certS3PathIntegration and certS3PathTradeshow instead. This field is mapped to certS3PathTradeshow.",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=5) "goals": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=7) "boolean"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=19) "certS3PathTradeshow": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=11) "dateUpdated": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) (len=8) "datetime",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=6) "events": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=7) "boolean"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=7) "generic": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=7) "boolean"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=12) "nativeMobile": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=7) "boolean"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=5) "appID": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) (len=8) "mongo-id",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=21) "certS3PathIntegration": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      }
     },
     AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
     PatternProperties: (map[string]spec.Schema) <nil>,
     Dependencies: (spec.Dependencies) <nil>,
     AdditionalItems: (*spec.SchemaOrBool)(<nil>),
     Definitions: (spec.Definitions) <nil>
    },
    SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
     Discriminator: (string) "",
     ReadOnly: (bool) false,
     XML: (*spec.XMLObject)(<nil>),
     ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
     Example: (interface {}) <nil>
    },
    ExtraProps: (map[string]interface {}) <nil>
   },
   (string) (len=13) "RelatedAppsV2": (spec.Schema) {
    VendorExtensible: (spec.VendorExtensible) {
     Extensions: (spec.Extensions) <nil>
    },
    SchemaProps: (spec.SchemaProps) {
     ID: (string) "",
     Ref: (spec.Ref) ,
     Schema: (spec.SchemaURL) "",
     Description: (string) "",
     Type: (spec.StringOrArray) (len=1 cap=1) {
      (string) (len=6) "object"
     },
     Format: (string) "",
     Title: (string) "",
     Default: (interface {}) <nil>,
     Maximum: (*float64)(<nil>),
     ExclusiveMaximum: (bool) false,
     Minimum: (*float64)(<nil>),
     ExclusiveMinimum: (bool) false,
     MaxLength: (*int64)(<nil>),
     MinLength: (*int64)(<nil>),
     Pattern: (string) "",
     MaxItems: (*int64)(<nil>),
     MinItems: (*int64)(<nil>),
     UniqueItems: (bool) false,
     MultipleOf: (*float64)(<nil>),
     Enum: ([]interface {}) <nil>,
     MaxProperties: (*int64)(<nil>),
     MinProperties: (*int64)(<nil>),
     Required: ([]string) <nil>,
     Items: (*spec.SchemaOrArray)(<nil>),
     AllOf: ([]spec.Schema) <nil>,
     OneOf: ([]spec.Schema) <nil>,
     AnyOf: ([]spec.Schema) <nil>,
     Not: (*spec.Schema)(<nil>),
     Properties: (map[string]spec.Schema) (len=5) {
      (string) (len=9) "analytics": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) (len=1) {
         (string) (len=10) "x-nullable": (bool) true
        }
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=16) "districtPartners": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=5) "array"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(0xc0009cdd20)({
         Schema: (*spec.Schema)(0xc000af1200)({
          VendorExtensible: (spec.VendorExtensible) {
           Extensions: (spec.Extensions) <nil>
          },
          SchemaProps: (spec.SchemaProps) {
           ID: (string) "",
           Ref: (spec.Ref) ,
           Schema: (spec.SchemaURL) "",
           Description: (string) "",
           Type: (spec.StringOrArray) (len=1 cap=1) {
            (string) (len=6) "string"
           },
           Format: (string) "",
           Title: (string) "",
           Default: (interface {}) <nil>,
           Maximum: (*float64)(<nil>),
           ExclusiveMaximum: (bool) false,
           Minimum: (*float64)(<nil>),
           ExclusiveMinimum: (bool) false,
           MaxLength: (*int64)(<nil>),
           MinLength: (*int64)(<nil>),
           Pattern: (string) "",
           MaxItems: (*int64)(<nil>),
           MinItems: (*int64)(<nil>),
           UniqueItems: (bool) false,
           MultipleOf: (*float64)(<nil>),
           Enum: ([]interface {}) <nil>,
           MaxProperties: (*int64)(<nil>),
           MinProperties: (*int64)(<nil>),
           Required: ([]string) <nil>,
           Items: (*spec.SchemaOrArray)(<nil>),
           AllOf: ([]spec.Schema) <nil>,
           OneOf: ([]spec.Schema) <nil>,
           AnyOf: ([]spec.Schema) <nil>,
           Not: (*spec.Schema)(<nil>),
           Properties: (map[string]spec.Schema) <nil>,
           AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
           PatternProperties: (map[string]spec.Schema) <nil>,
           Dependencies: (spec.Dependencies) <nil>,
           AdditionalItems: (*spec.SchemaOrBool)(<nil>),
           Definitions: (spec.Definitions) <nil>
          },
          SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
           Discriminator: (string) "",
           ReadOnly: (bool) false,
           XML: (*spec.XMLObject)(<nil>),
           ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
           Example: (interface {}) <nil>
          },
          ExtraProps: (map[string]interface {}) <nil>
         }),
         Schemas: ([]spec.Schema) <nil>
        }),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=14) "savedPasswords": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=5) "array"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(0xc0009cde40)({
         Schema: (*spec.Schema)(0xc000af4000)({
          VendorExtensible: (spec.VendorExtensible) {
           Extensions: (spec.Extensions) <nil>
          },
          SchemaProps: (spec.SchemaProps) {
           ID: (string) "",
           Ref: (spec.Ref) ,
           Schema: (spec.SchemaURL) "",
           Description: (string) "",
           Type: (spec.StringOrArray) (len=1 cap=1) {
            (string) (len=6) "string"
           },
           Format: (string) "",
           Title: (string) "",
           Default: (interface {}) <nil>,
           Maximum: (*float64)(<nil>),
           ExclusiveMaximum: (bool) false,
           Minimum: (*float64)(<nil>),
           ExclusiveMinimum: (bool) false,
           MaxLength: (*int64)(<nil>),
           MinLength: (*int64)(<nil>),
           Pattern: (string) "",
           MaxItems: (*int64)(<nil>),
           MinItems: (*int64)(<nil>),
           UniqueItems: (bool) false,
           MultipleOf: (*float64)(<nil>),
           Enum: ([]interface {}) <nil>,
           MaxProperties: (*int64)(<nil>),
           MinProperties: (*int64)(<nil>),
           Required: ([]string) <nil>,
           Items: (*spec.SchemaOrArray)(<nil>),
           AllOf: ([]spec.Schema) <nil>,
           OneOf: ([]spec.Schema) <nil>,
           AnyOf: ([]spec.Schema) <nil>,
           Not: (*spec.Schema)(<nil>),
           Properties: (map[string]spec.Schema) <nil>,
           AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
           PatternProperties: (map[string]spec.Schema) <nil>,
           Dependencies: (spec.Dependencies) <nil>,
           AdditionalItems: (*spec.SchemaOrBool)(<nil>),
           Definitions: (spec.Definitions) <nil>
          },
          SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
           Discriminator: (string) "",
           ReadOnly: (bool) false,
           XML: (*spec.XMLObject)(<nil>),
           ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
           Example: (interface {}) <nil>
          },
          ExtraProps: (map[string]interface {}) <nil>
         }),
         Schemas: ([]spec.Schema) <nil>
        }),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=7) "library": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=5) "array"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(0xc0009cdf40)({
         Schema: (*spec.Schema)(0xc000af4d80)({
          VendorExtensible: (spec.VendorExtensible) {
           Extensions: (spec.Extensions) <nil>
          },
          SchemaProps: (spec.SchemaProps) {
           ID: (string) "",
           Ref: (spec.Ref) ,
           Schema: (spec.SchemaURL) "",
           Description: (string) "",
           Type: (spec.StringOrArray) (len=1 cap=1) {
            (string) (len=6) "string"
           },
           Format: (string) "",
           Title: (string) "",
           Default: (interface {}) <nil>,
           Maximum: (*float64)(<nil>),
           ExclusiveMaximum: (bool) false,
           Minimum: (*float64)(<nil>),
           ExclusiveMinimum: (bool) false,
           MaxLength: (*int64)(<nil>),
           MinLength: (*int64)(<nil>),
           Pattern: (string) "",
           MaxItems: (*int64)(<nil>),
           MinItems: (*int64)(<nil>),
           UniqueItems: (bool) false,
           MultipleOf: (*float64)(<nil>),
           Enum: ([]interface {}) <nil>,
           MaxProperties: (*int64)(<nil>),
           MinProperties: (*int64)(<nil>),
           Required: ([]string) <nil>,
           Items: (*spec.SchemaOrArray)(<nil>),
           AllOf: ([]spec.Schema) <nil>,
           OneOf: ([]spec.Schema) <nil>,
           AnyOf: ([]spec.Schema) <nil>,
           Not: (*spec.Schema)(<nil>),
           Properties: (map[string]spec.Schema) <nil>,
           AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
           PatternProperties: (map[string]spec.Schema) <nil>,
           Dependencies: (spec.Dependencies) <nil>,
           AdditionalItems: (*spec.SchemaOrBool)(<nil>),
           Definitions: (spec.Definitions) <nil>
          },
          SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
           Discriminator: (string) "",
           ReadOnly: (bool) false,
           XML: (*spec.XMLObject)(<nil>),
           ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
           Example: (interface {}) <nil>
          },
          ExtraProps: (map[string]interface {}) <nil>
         }),
         Schemas: ([]spec.Schema) <nil>
        }),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=4) "saml": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=5) "array"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(0xc0003c6280)({
         Schema: (*spec.Schema)(0xc000af5b00)({
          VendorExtensible: (spec.VendorExtensible) {
           Extensions: (spec.Extensions) <nil>
          },
          SchemaProps: (spec.SchemaProps) {
           ID: (string) "",
           Ref: (spec.Ref) ,
           Schema: (spec.SchemaURL) "",
           Description: (string) "",
           Type: (spec.StringOrArray) (len=1 cap=1) {
            (string) (len=6) "string"
           },
           Format: (string) "",
           Title: (string) "",
           Default: (interface {}) <nil>,
           Maximum: (*float64)(<nil>),
           ExclusiveMaximum: (bool) false,
           Minimum: (*float64)(<nil>),
           ExclusiveMinimum: (bool) false,
           MaxLength: (*int64)(<nil>),
           MinLength: (*int64)(<nil>),
           Pattern: (string) "",
           MaxItems: (*int64)(<nil>),
           MinItems: (*int64)(<nil>),
           UniqueItems: (bool) false,
           MultipleOf: (*float64)(<nil>),
           Enum: ([]interface {}) <nil>,
           MaxProperties: (*int64)(<nil>),
           MinProperties: (*int64)(<nil>),
           Required: ([]string) <nil>,
           Items: (*spec.SchemaOrArray)(<nil>),
           AllOf: ([]spec.Schema) <nil>,
           OneOf: ([]spec.Schema) <nil>,
           AnyOf: ([]spec.Schema) <nil>,
           Not: (*spec.Schema)(<nil>),
           Properties: (map[string]spec.Schema) <nil>,
           AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
           PatternProperties: (map[string]spec.Schema) <nil>,
           Dependencies: (spec.Dependencies) <nil>,
           AdditionalItems: (*spec.SchemaOrBool)(<nil>),
           Definitions: (spec.Definitions) <nil>
          },
          SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
           Discriminator: (string) "",
           ReadOnly: (bool) false,
           XML: (*spec.XMLObject)(<nil>),
           ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
           Example: (interface {}) <nil>
          },
          ExtraProps: (map[string]interface {}) <nil>
         }),
         Schemas: ([]spec.Schema) <nil>
        }),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      }
     },
     AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
     PatternProperties: (map[string]spec.Schema) <nil>,
     Dependencies: (spec.Dependencies) <nil>,
     AdditionalItems: (*spec.SchemaOrBool)(<nil>),
     Definitions: (spec.Definitions) <nil>
    },
    SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
     Discriminator: (string) "",
     ReadOnly: (bool) false,
     XML: (*spec.XMLObject)(<nil>),
     ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
     Example: (interface {}) <nil>
    },
    ExtraProps: (map[string]interface {}) <nil>
   },
   (string) (len=16) "CollectionSchema": (spec.Schema) {
    VendorExtensible: (spec.VendorExtensible) {
     Extensions: (spec.Extensions) <nil>
    },
    SchemaProps: (spec.SchemaProps) {
     ID: (string) "",
     Ref: (spec.Ref) ,
     Schema: (spec.SchemaURL) "",
     Description: (string) "",
     Type: (spec.StringOrArray) (len=1 cap=1) {
      (string) (len=6) "object"
     },
     Format: (string) "",
     Title: (string) "",
     Default: (interface {}) <nil>,
     Maximum: (*float64)(<nil>),
     ExclusiveMaximum: (bool) false,
     Minimum: (*float64)(<nil>),
     ExclusiveMinimum: (bool) false,
     MaxLength: (*int64)(<nil>),
     MinLength: (*int64)(<nil>),
     Pattern: (string) "",
     MaxItems: (*int64)(<nil>),
     MinItems: (*int64)(<nil>),
     UniqueItems: (bool) false,
     MultipleOf: (*float64)(<nil>),
     Enum: ([]interface {}) <nil>,
     MaxProperties: (*int64)(<nil>),
     MinProperties: (*int64)(<nil>),
     Required: ([]string) <nil>,
     Items: (*spec.SchemaOrArray)(<nil>),
     AllOf: ([]spec.Schema) <nil>,
     OneOf: ([]spec.Schema) <nil>,
     AnyOf: ([]spec.Schema) <nil>,
     Not: (*spec.Schema)(<nil>),
     Properties: (map[string]spec.Schema) (len=4) {
      (string) (len=4) "name": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=11) "optInStatus": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) (len=3 cap=4) {
         (string) (len=2) "in",
         (string) (len=3) "out",
         (string) (len=15) "clever_required"
        },
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=21) "extensionFieldsStatus": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) (len=3 cap=4) {
         (string) (len=4) "none",
         (string) (len=8) "required",
         (string) (len=8) "optional"
        },
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=12) "fieldSchemas": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=5) "array"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(0xc000983980)({
         Schema: (*spec.Schema)(0xc0002f1440)({
          VendorExtensible: (spec.VendorExtensible) {
           Extensions: (spec.Extensions) <nil>
          },
          SchemaProps: (spec.SchemaProps) {
           ID: (string) "",
           Ref: (spec.Ref) #/definitions/FieldSchema,
           Schema: (spec.SchemaURL) "",
           Description: (string) "",
           Type: (spec.StringOrArray) <nil>,
           Format: (string) "",
           Title: (string) "",
           Default: (interface {}) <nil>,
           Maximum: (*float64)(<nil>),
           ExclusiveMaximum: (bool) false,
           Minimum: (*float64)(<nil>),
           ExclusiveMinimum: (bool) false,
           MaxLength: (*int64)(<nil>),
           MinLength: (*int64)(<nil>),
           Pattern: (string) "",
           MaxItems: (*int64)(<nil>),
           MinItems: (*int64)(<nil>),
           UniqueItems: (bool) false,
           MultipleOf: (*float64)(<nil>),
           Enum: ([]interface {}) <nil>,
           MaxProperties: (*int64)(<nil>),
           MinProperties: (*int64)(<nil>),
           Required: ([]string) <nil>,
           Items: (*spec.SchemaOrArray)(<nil>),
           AllOf: ([]spec.Schema) <nil>,
           OneOf: ([]spec.Schema) <nil>,
           AnyOf: ([]spec.Schema) <nil>,
           Not: (*spec.Schema)(<nil>),
           Properties: (map[string]spec.Schema) <nil>,
           AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
           PatternProperties: (map[string]spec.Schema) <nil>,
           Dependencies: (spec.Dependencies) <nil>,
           AdditionalItems: (*spec.SchemaOrBool)(<nil>),
           Definitions: (spec.Definitions) <nil>
          },
          SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
           Discriminator: (string) "",
           ReadOnly: (bool) false,
           XML: (*spec.XMLObject)(<nil>),
           ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
           Example: (interface {}) <nil>
          },
          ExtraProps: (map[string]interface {}) <nil>
         }),
         Schemas: ([]spec.Schema) <nil>
        }),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      }
     },
     AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
     PatternProperties: (map[string]spec.Schema) <nil>,
     Dependencies: (spec.Dependencies) <nil>,
     AdditionalItems: (*spec.SchemaOrBool)(<nil>),
     Definitions: (spec.Definitions) <nil>
    },
    SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
     Discriminator: (string) "",
     ReadOnly: (bool) false,
     XML: (*spec.XMLObject)(<nil>),
     ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
     Example: (interface {}) <nil>
    },
    ExtraProps: (map[string]interface {}) <nil>
   },
   (string) (len=9) "TwoFactor": (spec.Schema) {
    VendorExtensible: (spec.VendorExtensible) {
     Extensions: (spec.Extensions) <nil>
    },
    SchemaProps: (spec.SchemaProps) {
     ID: (string) "",
     Ref: (spec.Ref) ,
     Schema: (spec.SchemaURL) "",
     Description: (string) "",
     Type: (spec.StringOrArray) (len=1 cap=1) {
      (string) (len=6) "object"
     },
     Format: (string) "",
     Title: (string) "",
     Default: (interface {}) <nil>,
     Maximum: (*float64)(<nil>),
     ExclusiveMaximum: (bool) false,
     Minimum: (*float64)(<nil>),
     ExclusiveMinimum: (bool) false,
     MaxLength: (*int64)(<nil>),
     MinLength: (*int64)(<nil>),
     Pattern: (string) "",
     MaxItems: (*int64)(<nil>),
     MinItems: (*int64)(<nil>),
     UniqueItems: (bool) false,
     MultipleOf: (*float64)(<nil>),
     Enum: ([]interface {}) <nil>,
     MaxProperties: (*int64)(<nil>),
     MinProperties: (*int64)(<nil>),
     Required: ([]string) <nil>,
     Items: (*spec.SchemaOrArray)(<nil>),
     AllOf: ([]spec.Schema) <nil>,
     OneOf: ([]spec.Schema) <nil>,
     AnyOf: ([]spec.Schema) <nil>,
     Not: (*spec.Schema)(<nil>),
     Properties: (map[string]spec.Schema) (len=4) {
      (string) (len=7) "authyId": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=9) "confirmed": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=7) "boolean"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=8) "authType": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=13) "rememberMeKey": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      }
     },
     AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
     PatternProperties: (map[string]spec.Schema) <nil>,
     Dependencies: (spec.Dependencies) <nil>,
     AdditionalItems: (*spec.SchemaOrBool)(<nil>),
     Definitions: (spec.Definitions) <nil>
    },
    SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
     Discriminator: (string) "",
     ReadOnly: (bool) false,
     XML: (*spec.XMLObject)(<nil>),
     ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
     Example: (interface {}) <nil>
    },
    ExtraProps: (map[string]interface {}) <nil>
   },
   (string) (len=17) "PatchAdminRequest": (spec.Schema) {
    VendorExtensible: (spec.VendorExtensible) {
     Extensions: (spec.Extensions) <nil>
    },
    SchemaProps: (spec.SchemaProps) {
     ID: (string) "",
     Ref: (spec.Ref) ,
     Schema: (spec.SchemaURL) "",
     Description: (string) "",
     Type: (spec.StringOrArray) (len=1 cap=1) {
      (string) (len=6) "object"
     },
     Format: (string) "",
     Title: (string) "",
     Default: (interface {}) <nil>,
     Maximum: (*float64)(<nil>),
     ExclusiveMaximum: (bool) false,
     Minimum: (*float64)(<nil>),
     ExclusiveMinimum: (bool) false,
     MaxLength: (*int64)(<nil>),
     MinLength: (*int64)(<nil>),
     Pattern: (string) "",
     MaxItems: (*int64)(<nil>),
     MinItems: (*int64)(<nil>),
     UniqueItems: (bool) false,
     MultipleOf: (*float64)(<nil>),
     Enum: ([]interface {}) <nil>,
     MaxProperties: (*int64)(<nil>),
     MinProperties: (*int64)(<nil>),
     Required: ([]string) <nil>,
     Items: (*spec.SchemaOrArray)(<nil>),
     AllOf: ([]spec.Schema) <nil>,
     OneOf: ([]spec.Schema) <nil>,
     AnyOf: ([]spec.Schema) <nil>,
     Not: (*spec.Schema)(<nil>),
     Properties: (map[string]spec.Schema) (len=5) {
      (string) (len=4) "name": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) (len=1) {
         (string) (len=10) "x-nullable": (bool) true
        }
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(0xc0009f29a8)(1),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=5) "email": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) (len=1) {
         (string) (len=10) "x-nullable": (bool) true
        }
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(0xc0009f2a00)(1),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=5) "phone": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) (len=1) {
         (string) (len=10) "x-nullable": (bool) true
        }
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=8) "password": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) (len=1) {
         (string) (len=10) "x-nullable": (bool) true
        }
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=9) "twoFactor": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) (len=1) {
         (string) (len=10) "x-nullable": (bool) true
        }
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) #/definitions/TwoFactor,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) <nil>,
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      }
     },
     AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
     PatternProperties: (map[string]spec.Schema) <nil>,
     Dependencies: (spec.Dependencies) <nil>,
     AdditionalItems: (*spec.SchemaOrBool)(<nil>),
     Definitions: (spec.Definitions) <nil>
    },
    SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
     Discriminator: (string) "",
     ReadOnly: (bool) false,
     XML: (*spec.XMLObject)(<nil>),
     ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
     Example: (interface {}) <nil>
    },
    ExtraProps: (map[string]interface {}) <nil>
   },
   (string) (len=27) "GetValidPermissionsResponse": (spec.Schema) {
    VendorExtensible: (spec.VendorExtensible) {
     Extensions: (spec.Extensions) <nil>
    },
    SchemaProps: (spec.SchemaProps) {
     ID: (string) "",
     Ref: (spec.Ref) ,
     Schema: (spec.SchemaURL) "",
     Description: (string) (len=25) "Set of valid permissions.",
     Type: (spec.StringOrArray) (len=1 cap=1) {
      (string) (len=5) "array"
     },
     Format: (string) "",
     Title: (string) "",
     Default: (interface {}) <nil>,
     Maximum: (*float64)(<nil>),
     ExclusiveMaximum: (bool) false,
     Minimum: (*float64)(<nil>),
     ExclusiveMinimum: (bool) false,
     MaxLength: (*int64)(<nil>),
     MinLength: (*int64)(<nil>),
     Pattern: (string) "",
     MaxItems: (*int64)(<nil>),
     MinItems: (*int64)(<nil>),
     UniqueItems: (bool) false,
     MultipleOf: (*float64)(<nil>),
     Enum: ([]interface {}) <nil>,
     MaxProperties: (*int64)(<nil>),
     MinProperties: (*int64)(<nil>),
     Required: ([]string) <nil>,
     Items: (*spec.SchemaOrArray)(0xc000a03860)({
      Schema: (*spec.Schema)(0xc000a6c6c0)({
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) #/definitions/ValidPermission,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) <nil>,
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      }),
      Schemas: ([]spec.Schema) <nil>
     }),
     AllOf: ([]spec.Schema) <nil>,
     OneOf: ([]spec.Schema) <nil>,
     AnyOf: ([]spec.Schema) <nil>,
     Not: (*spec.Schema)(<nil>),
     Properties: (map[string]spec.Schema) <nil>,
     AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
     PatternProperties: (map[string]spec.Schema) <nil>,
     Dependencies: (spec.Dependencies) <nil>,
     AdditionalItems: (*spec.SchemaOrBool)(<nil>),
     Definitions: (spec.Definitions) <nil>
    },
    SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
     Discriminator: (string) "",
     ReadOnly: (bool) false,
     XML: (*spec.XMLObject)(<nil>),
     ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
     Example: (interface {}) <nil>
    },
    ExtraProps: (map[string]interface {}) <nil>
   },
   (string) (len=18) "CreateAdminRequest": (spec.Schema) {
    VendorExtensible: (spec.VendorExtensible) {
     Extensions: (spec.Extensions) <nil>
    },
    SchemaProps: (spec.SchemaProps) {
     ID: (string) "",
     Ref: (spec.Ref) ,
     Schema: (spec.SchemaURL) "",
     Description: (string) "",
     Type: (spec.StringOrArray) (len=1 cap=1) {
      (string) (len=6) "object"
     },
     Format: (string) "",
     Title: (string) "",
     Default: (interface {}) <nil>,
     Maximum: (*float64)(<nil>),
     ExclusiveMaximum: (bool) false,
     Minimum: (*float64)(<nil>),
     ExclusiveMinimum: (bool) false,
     MaxLength: (*int64)(<nil>),
     MinLength: (*int64)(<nil>),
     Pattern: (string) "",
     MaxItems: (*int64)(<nil>),
     MinItems: (*int64)(<nil>),
     UniqueItems: (bool) false,
     MultipleOf: (*float64)(<nil>),
     Enum: ([]interface {}) <nil>,
     MaxProperties: (*int64)(<nil>),
     MinProperties: (*int64)(<nil>),
     Required: ([]string) <nil>,
     Items: (*spec.SchemaOrArray)(<nil>),
     AllOf: ([]spec.Schema) <nil>,
     OneOf: ([]spec.Schema) <nil>,
     AnyOf: ([]spec.Schema) <nil>,
     Not: (*spec.Schema)(<nil>),
     Properties: (map[string]spec.Schema) (len=2) {
      (string) (len=5) "admin": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) #/definitions/Admin,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) <nil>,
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=8) "password": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(0xc0009f3ca0)(1),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      }
     },
     AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
     PatternProperties: (map[string]spec.Schema) <nil>,
     Dependencies: (spec.Dependencies) <nil>,
     AdditionalItems: (*spec.SchemaOrBool)(<nil>),
     Definitions: (spec.Definitions) <nil>
    },
    SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
     Discriminator: (string) "",
     ReadOnly: (bool) false,
     XML: (*spec.XMLObject)(<nil>),
     ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
     Example: (interface {}) <nil>
    },
    ExtraProps: (map[string]interface {}) <nil>
   },
   (string) (len=8) "Platform": (spec.Schema) {
    VendorExtensible: (spec.VendorExtensible) {
     Extensions: (spec.Extensions) <nil>
    },
    SchemaProps: (spec.SchemaProps) {
     ID: (string) "",
     Ref: (spec.Ref) ,
     Schema: (spec.SchemaURL) "",
     Description: (string) (len=112) "Platforms are a way of distinguishing the different software clients of an app (e.g. iOS app, Desktop App, etc.)",
     Type: (spec.StringOrArray) (len=1 cap=1) {
      (string) (len=6) "object"
     },
     Format: (string) "",
     Title: (string) "",
     Default: (interface {}) <nil>,
     Maximum: (*float64)(<nil>),
     ExclusiveMaximum: (bool) false,
     Minimum: (*float64)(<nil>),
     ExclusiveMinimum: (bool) false,
     MaxLength: (*int64)(<nil>),
     MinLength: (*int64)(<nil>),
     Pattern: (string) "",
     MaxItems: (*int64)(<nil>),
     MinItems: (*int64)(<nil>),
     UniqueItems: (bool) false,
     MultipleOf: (*float64)(<nil>),
     Enum: ([]interface {}) <nil>,
     MaxProperties: (*int64)(<nil>),
     MinProperties: (*int64)(<nil>),
     Required: ([]string) <nil>,
     Items: (*spec.SchemaOrArray)(<nil>),
     AllOf: ([]spec.Schema) <nil>,
     OneOf: ([]spec.Schema) <nil>,
     AnyOf: ([]spec.Schema) <nil>,
     Not: (*spec.Schema)(<nil>),
     Properties: (map[string]spec.Schema) (len=5) {
      (string) (len=5) "appId": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=8) "clientId": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=12) "redirectUris": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=5) "array"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(0xc000a81300)({
         Schema: (*spec.Schema)(0xc000aaab40)({
          VendorExtensible: (spec.VendorExtensible) {
           Extensions: (spec.Extensions) <nil>
          },
          SchemaProps: (spec.SchemaProps) {
           ID: (string) "",
           Ref: (spec.Ref) #/definitions/RedirectUri,
           Schema: (spec.SchemaURL) "",
           Description: (string) "",
           Type: (spec.StringOrArray) <nil>,
           Format: (string) "",
           Title: (string) "",
           Default: (interface {}) <nil>,
           Maximum: (*float64)(<nil>),
           ExclusiveMaximum: (bool) false,
           Minimum: (*float64)(<nil>),
           ExclusiveMinimum: (bool) false,
           MaxLength: (*int64)(<nil>),
           MinLength: (*int64)(<nil>),
           Pattern: (string) "",
           MaxItems: (*int64)(<nil>),
           MinItems: (*int64)(<nil>),
           UniqueItems: (bool) false,
           MultipleOf: (*float64)(<nil>),
           Enum: ([]interface {}) <nil>,
           MaxProperties: (*int64)(<nil>),
           MinProperties: (*int64)(<nil>),
           Required: ([]string) <nil>,
           Items: (*spec.SchemaOrArray)(<nil>),
           AllOf: ([]spec.Schema) <nil>,
           OneOf: ([]spec.Schema) <nil>,
           AnyOf: ([]spec.Schema) <nil>,
           Not: (*spec.Schema)(<nil>),
           Properties: (map[string]spec.Schema) <nil>,
           AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
           PatternProperties: (map[string]spec.Schema) <nil>,
           Dependencies: (spec.Dependencies) <nil>,
           AdditionalItems: (*spec.SchemaOrBool)(<nil>),
           Definitions: (spec.Definitions) <nil>
          },
          SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
           Discriminator: (string) "",
           ReadOnly: (bool) false,
           XML: (*spec.XMLObject)(<nil>),
           ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
           Example: (interface {}) <nil>
          },
          ExtraProps: (map[string]interface {}) <nil>
         }),
         Schemas: ([]spec.Schema) <nil>
        }),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=8) "disabled": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=7) "boolean"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=4) "name": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) (len=3 cap=4) {
         (string) (len=3) "ios",
         (string) (len=7) "android",
         (string) (len=7) "desktop"
        },
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      }
     },
     AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
     PatternProperties: (map[string]spec.Schema) <nil>,
     Dependencies: (spec.Dependencies) <nil>,
     AdditionalItems: (*spec.SchemaOrBool)(<nil>),
     Definitions: (spec.Definitions) <nil>
    },
    SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
     Discriminator: (string) "",
     ReadOnly: (bool) false,
     XML: (*spec.XMLObject)(<nil>),
     ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
     Example: (interface {}) <nil>
    },
    ExtraProps: (map[string]interface {}) <nil>
   },
   (string) (len=5) "Image": (spec.Schema) {
    VendorExtensible: (spec.VendorExtensible) {
     Extensions: (spec.Extensions) <nil>
    },
    SchemaProps: (spec.SchemaProps) {
     ID: (string) "",
     Ref: (spec.Ref) ,
     Schema: (spec.SchemaURL) "",
     Description: (string) "",
     Type: (spec.StringOrArray) (len=1 cap=1) {
      (string) (len=6) "object"
     },
     Format: (string) "",
     Title: (string) "",
     Default: (interface {}) <nil>,
     Maximum: (*float64)(<nil>),
     ExclusiveMaximum: (bool) false,
     Minimum: (*float64)(<nil>),
     ExclusiveMinimum: (bool) false,
     MaxLength: (*int64)(<nil>),
     MinLength: (*int64)(<nil>),
     Pattern: (string) "",
     MaxItems: (*int64)(<nil>),
     MinItems: (*int64)(<nil>),
     UniqueItems: (bool) false,
     MultipleOf: (*float64)(<nil>),
     Enum: ([]interface {}) <nil>,
     MaxProperties: (*int64)(<nil>),
     MinProperties: (*int64)(<nil>),
     Required: ([]string) <nil>,
     Items: (*spec.SchemaOrArray)(<nil>),
     AllOf: ([]spec.Schema) <nil>,
     OneOf: ([]spec.Schema) <nil>,
     AnyOf: ([]spec.Schema) <nil>,
     Not: (*spec.Schema)(<nil>),
     Properties: (map[string]spec.Schema) (len=2) {
      (string) (len=4) "icon": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=4) "logo": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      }
     },
     AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
     PatternProperties: (map[string]spec.Schema) <nil>,
     Dependencies: (spec.Dependencies) <nil>,
     AdditionalItems: (*spec.SchemaOrBool)(<nil>),
     Definitions: (spec.Definitions) <nil>
    },
    SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
     Discriminator: (string) "",
     ReadOnly: (bool) false,
     XML: (*spec.XMLObject)(<nil>),
     ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
     Example: (interface {}) <nil>
    },
    ExtraProps: (map[string]interface {}) <nil>
   },
   (string) (len=16) "ResourceFeatures": (spec.Schema) {
    VendorExtensible: (spec.VendorExtensible) {
     Extensions: (spec.Extensions) <nil>
    },
    SchemaProps: (spec.SchemaProps) {
     ID: (string) "",
     Ref: (spec.Ref) ,
     Schema: (spec.SchemaURL) "",
     Description: (string) "",
     Type: (spec.StringOrArray) (len=1 cap=1) {
      (string) (len=5) "array"
     },
     Format: (string) "",
     Title: (string) "",
     Default: (interface {}) <nil>,
     Maximum: (*float64)(<nil>),
     ExclusiveMaximum: (bool) false,
     Minimum: (*float64)(<nil>),
     ExclusiveMinimum: (bool) false,
     MaxLength: (*int64)(<nil>),
     MinLength: (*int64)(<nil>),
     Pattern: (string) "",
     MaxItems: (*int64)(<nil>),
     MinItems: (*int64)(<nil>),
     UniqueItems: (bool) false,
     MultipleOf: (*float64)(<nil>),
     Enum: ([]interface {}) <nil>,
     MaxProperties: (*int64)(<nil>),
     MinProperties: (*int64)(<nil>),
     Required: ([]string) <nil>,
     Items: (*spec.SchemaOrArray)(0xc000b1f5a0)({
      Schema: (*spec.Schema)(0xc0001966c0)({
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) #/definitions/ResourceFeature,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) <nil>,
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      }),
      Schemas: ([]spec.Schema) <nil>
     }),
     AllOf: ([]spec.Schema) <nil>,
     OneOf: ([]spec.Schema) <nil>,
     AnyOf: ([]spec.Schema) <nil>,
     Not: (*spec.Schema)(<nil>),
     Properties: (map[string]spec.Schema) <nil>,
     AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
     PatternProperties: (map[string]spec.Schema) <nil>,
     Dependencies: (spec.Dependencies) <nil>,
     AdditionalItems: (*spec.SchemaOrBool)(<nil>),
     Definitions: (spec.Definitions) <nil>
    },
    SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
     Discriminator: (string) "",
     ReadOnly: (bool) false,
     XML: (*spec.XMLObject)(<nil>),
     ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
     Example: (interface {}) <nil>
    },
    ExtraProps: (map[string]interface {}) <nil>
   },
   (string) (len=25) "OnboardingIntegrationType": (spec.Schema) {
    VendorExtensible: (spec.VendorExtensible) {
     Extensions: (spec.Extensions) <nil>
    },
    SchemaProps: (spec.SchemaProps) {
     ID: (string) "",
     Ref: (spec.Ref) ,
     Schema: (spec.SchemaURL) "",
     Description: (string) "",
     Type: (spec.StringOrArray) (len=1 cap=1) {
      (string) (len=6) "string"
     },
     Format: (string) "",
     Title: (string) "",
     Default: (interface {}) <nil>,
     Maximum: (*float64)(<nil>),
     ExclusiveMaximum: (bool) false,
     Minimum: (*float64)(<nil>),
     ExclusiveMinimum: (bool) false,
     MaxLength: (*int64)(<nil>),
     MinLength: (*int64)(<nil>),
     Pattern: (string) "",
     MaxItems: (*int64)(<nil>),
     MinItems: (*int64)(<nil>),
     UniqueItems: (bool) false,
     MultipleOf: (*float64)(<nil>),
     Enum: ([]interface {}) (len=5 cap=6) {
      (string) (len=12) "instantLogin",
      (string) (len=3) "ios",
      (string) (len=14) "secureSyncLite",
      (string) (len=10) "secureSync",
      (string) (len=6) "events"
     },
     MaxProperties: (*int64)(<nil>),
     MinProperties: (*int64)(<nil>),
     Required: ([]string) <nil>,
     Items: (*spec.SchemaOrArray)(<nil>),
     AllOf: ([]spec.Schema) <nil>,
     OneOf: ([]spec.Schema) <nil>,
     AnyOf: ([]spec.Schema) <nil>,
     Not: (*spec.Schema)(<nil>),
     Properties: (map[string]spec.Schema) <nil>,
     AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
     PatternProperties: (map[string]spec.Schema) <nil>,
     Dependencies: (spec.Dependencies) <nil>,
     AdditionalItems: (*spec.SchemaOrBool)(<nil>),
     Definitions: (spec.Definitions) <nil>
    },
    SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
     Discriminator: (string) "",
     ReadOnly: (bool) false,
     XML: (*spec.XMLObject)(<nil>),
     ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
     Example: (interface {}) <nil>
    },
    ExtraProps: (map[string]interface {}) <nil>
   },
   (string) (len=13) "AppOnboarding": (spec.Schema) {
    VendorExtensible: (spec.VendorExtensible) {
     Extensions: (spec.Extensions) <nil>
    },
    SchemaProps: (spec.SchemaProps) {
     ID: (string) "",
     Ref: (spec.Ref) ,
     Schema: (spec.SchemaURL) "",
     Description: (string) (len=43) "Tracks app onboarding data for library apps",
     Type: (spec.StringOrArray) (len=1 cap=1) {
      (string) (len=6) "object"
     },
     Format: (string) "",
     Title: (string) "",
     Default: (interface {}) <nil>,
     Maximum: (*float64)(<nil>),
     ExclusiveMaximum: (bool) false,
     Minimum: (*float64)(<nil>),
     ExclusiveMinimum: (bool) false,
     MaxLength: (*int64)(<nil>),
     MinLength: (*int64)(<nil>),
     Pattern: (string) "",
     MaxItems: (*int64)(<nil>),
     MinItems: (*int64)(<nil>),
     UniqueItems: (bool) false,
     MultipleOf: (*float64)(<nil>),
     Enum: ([]interface {}) <nil>,
     MaxProperties: (*int64)(<nil>),
     MinProperties: (*int64)(<nil>),
     Required: ([]string) <nil>,
     Items: (*spec.SchemaOrArray)(<nil>),
     AllOf: ([]spec.Schema) <nil>,
     OneOf: ([]spec.Schema) <nil>,
     AnyOf: ([]spec.Schema) <nil>,
     Not: (*spec.Schema)(<nil>),
     Properties: (map[string]spec.Schema) (len=1) {
      (string) (len=9) "announced": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) (len=3 cap=4) {
         (string) (len=12) "notScheduled",
         (string) (len=9) "scheduled",
         (string) (len=9) "announced"
        },
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      }
     },
     AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
     PatternProperties: (map[string]spec.Schema) <nil>,
     Dependencies: (spec.Dependencies) <nil>,
     AdditionalItems: (*spec.SchemaOrBool)(<nil>),
     Definitions: (spec.Definitions) <nil>
    },
    SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
     Discriminator: (string) "",
     ReadOnly: (bool) false,
     XML: (*spec.XMLObject)(<nil>),
     ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
     Example: (interface {}) <nil>
    },
    ExtraProps: (map[string]interface {}) <nil>
   },
   (string) (len=13) "AnalyticsApps": (spec.Schema) {
    VendorExtensible: (spec.VendorExtensible) {
     Extensions: (spec.Extensions) <nil>
    },
    SchemaProps: (spec.SchemaProps) {
     ID: (string) "",
     Ref: (spec.Ref) ,
     Schema: (spec.SchemaURL) "",
     Description: (string) "",
     Type: (spec.StringOrArray) (len=1 cap=1) {
      (string) (len=5) "array"
     },
     Format: (string) "",
     Title: (string) "",
     Default: (interface {}) <nil>,
     Maximum: (*float64)(<nil>),
     ExclusiveMaximum: (bool) false,
     Minimum: (*float64)(<nil>),
     ExclusiveMinimum: (bool) false,
     MaxLength: (*int64)(<nil>),
     MinLength: (*int64)(<nil>),
     Pattern: (string) "",
     MaxItems: (*int64)(<nil>),
     MinItems: (*int64)(<nil>),
     UniqueItems: (bool) false,
     MultipleOf: (*float64)(<nil>),
     Enum: ([]interface {}) <nil>,
     MaxProperties: (*int64)(<nil>),
     MinProperties: (*int64)(<nil>),
     Required: ([]string) <nil>,
     Items: (*spec.SchemaOrArray)(0xc0009ccc40)({
      Schema: (*spec.Schema)(0xc000a96fc0)({
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) #/definitions/AnalyticsApp,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) <nil>,
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      }),
      Schemas: ([]spec.Schema) <nil>
     }),
     AllOf: ([]spec.Schema) <nil>,
     OneOf: ([]spec.Schema) <nil>,
     AnyOf: ([]spec.Schema) <nil>,
     Not: (*spec.Schema)(<nil>),
     Properties: (map[string]spec.Schema) <nil>,
     AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
     PatternProperties: (map[string]spec.Schema) <nil>,
     Dependencies: (spec.Dependencies) <nil>,
     AdditionalItems: (*spec.SchemaOrBool)(<nil>),
     Definitions: (spec.Definitions) <nil>
    },
    SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
     Discriminator: (string) "",
     ReadOnly: (bool) false,
     XML: (*spec.XMLObject)(<nil>),
     ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
     Example: (interface {}) <nil>
    },
    ExtraProps: (map[string]interface {}) <nil>
   },
   (string) (len=21) "TeacherSetupGuideStep": (spec.Schema) {
    VendorExtensible: (spec.VendorExtensible) {
     Extensions: (spec.Extensions) <nil>
    },
    SchemaProps: (spec.SchemaProps) {
     ID: (string) "",
     Ref: (spec.Ref) ,
     Schema: (spec.SchemaURL) "",
     Description: (string) "",
     Type: (spec.StringOrArray) (len=1 cap=1) {
      (string) (len=6) "object"
     },
     Format: (string) "",
     Title: (string) "",
     Default: (interface {}) <nil>,
     Maximum: (*float64)(<nil>),
     ExclusiveMaximum: (bool) false,
     Minimum: (*float64)(<nil>),
     ExclusiveMinimum: (bool) false,
     MaxLength: (*int64)(<nil>),
     MinLength: (*int64)(<nil>),
     Pattern: (string) "",
     MaxItems: (*int64)(<nil>),
     MinItems: (*int64)(<nil>),
     UniqueItems: (bool) false,
     MultipleOf: (*float64)(<nil>),
     Enum: ([]interface {}) <nil>,
     MaxProperties: (*int64)(<nil>),
     MinProperties: (*int64)(<nil>),
     Required: ([]string) <nil>,
     Items: (*spec.SchemaOrArray)(<nil>),
     AllOf: ([]spec.Schema) <nil>,
     OneOf: ([]spec.Schema) <nil>,
     AnyOf: ([]spec.Schema) <nil>,
     Not: (*spec.Schema)(<nil>),
     Properties: (map[string]spec.Schema) (len=4) {
      (string) (len=6) "header": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=7) "content": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=4) "type": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) (len=2 cap=4) {
         (string) (len=14) "accountSyncing",
         (string) (len=8) "howToUse"
        },
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=13) "screenshotURL": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      }
     },
     AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
     PatternProperties: (map[string]spec.Schema) <nil>,
     Dependencies: (spec.Dependencies) <nil>,
     AdditionalItems: (*spec.SchemaOrBool)(<nil>),
     Definitions: (spec.Definitions) <nil>
    },
    SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
     Discriminator: (string) "",
     ReadOnly: (bool) false,
     XML: (*spec.XMLObject)(<nil>),
     ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
     Example: (interface {}) <nil>
    },
    ExtraProps: (map[string]interface {}) <nil>
   },
   (string) (len=11) "RelatedApps": (spec.Schema) {
    VendorExtensible: (spec.VendorExtensible) {
     Extensions: (spec.Extensions) <nil>
    },
    SchemaProps: (spec.SchemaProps) {
     ID: (string) "",
     Ref: (spec.Ref) ,
     Schema: (spec.SchemaURL) "",
     Description: (string) "",
     Type: (spec.StringOrArray) (len=1 cap=1) {
      (string) (len=6) "object"
     },
     Format: (string) "",
     Title: (string) "",
     Default: (interface {}) <nil>,
     Maximum: (*float64)(<nil>),
     ExclusiveMaximum: (bool) false,
     Minimum: (*float64)(<nil>),
     ExclusiveMinimum: (bool) false,
     MaxLength: (*int64)(<nil>),
     MinLength: (*int64)(<nil>),
     Pattern: (string) "",
     MaxItems: (*int64)(<nil>),
     MinItems: (*int64)(<nil>),
     UniqueItems: (bool) false,
     MultipleOf: (*float64)(<nil>),
     Enum: ([]interface {}) <nil>,
     MaxProperties: (*int64)(<nil>),
     MinProperties: (*int64)(<nil>),
     Required: ([]string) <nil>,
     Items: (*spec.SchemaOrArray)(<nil>),
     AllOf: ([]spec.Schema) <nil>,
     OneOf: ([]spec.Schema) <nil>,
     AnyOf: ([]spec.Schema) <nil>,
     Not: (*spec.Schema)(<nil>),
     Properties: (map[string]spec.Schema) (len=5) {
      (string) (len=9) "connector": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) (len=1) {
         (string) (len=10) "x-nullable": (bool) true
        }
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=4) "saml": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) (len=1) {
         (string) (len=10) "x-nullable": (bool) true
        }
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=9) "analytics": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) (len=1) {
         (string) (len=10) "x-nullable": (bool) true
        }
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=15) "districtPartner": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) (len=1) {
         (string) (len=10) "x-nullable": (bool) true
        }
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=7) "library": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) (len=1) {
         (string) (len=10) "x-nullable": (bool) true
        }
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      }
     },
     AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
     PatternProperties: (map[string]spec.Schema) <nil>,
     Dependencies: (spec.Dependencies) <nil>,
     AdditionalItems: (*spec.SchemaOrBool)(<nil>),
     Definitions: (spec.Definitions) <nil>
    },
    SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
     Discriminator: (string) "",
     ReadOnly: (bool) false,
     XML: (*spec.XMLObject)(<nil>),
     ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
     Example: (interface {}) <nil>
    },
    ExtraProps: (map[string]interface {}) <nil>
   },
   (string) (len=13) "TrackableApps": (spec.Schema) {
    VendorExtensible: (spec.VendorExtensible) {
     Extensions: (spec.Extensions) <nil>
    },
    SchemaProps: (spec.SchemaProps) {
     ID: (string) "",
     Ref: (spec.Ref) ,
     Schema: (spec.SchemaURL) "",
     Description: (string) "",
     Type: (spec.StringOrArray) (len=1 cap=1) {
      (string) (len=6) "object"
     },
     Format: (string) "",
     Title: (string) "",
     Default: (interface {}) <nil>,
     Maximum: (*float64)(<nil>),
     ExclusiveMaximum: (bool) false,
     Minimum: (*float64)(<nil>),
     ExclusiveMinimum: (bool) false,
     MaxLength: (*int64)(<nil>),
     MinLength: (*int64)(<nil>),
     Pattern: (string) "",
     MaxItems: (*int64)(<nil>),
     MinItems: (*int64)(<nil>),
     UniqueItems: (bool) false,
     MultipleOf: (*float64)(<nil>),
     Enum: ([]interface {}) <nil>,
     MaxProperties: (*int64)(<nil>),
     MinProperties: (*int64)(<nil>),
     Required: ([]string) <nil>,
     Items: (*spec.SchemaOrArray)(<nil>),
     AllOf: ([]spec.Schema) <nil>,
     OneOf: ([]spec.Schema) <nil>,
     AnyOf: ([]spec.Schema) <nil>,
     Not: (*spec.Schema)(<nil>),
     Properties: (map[string]spec.Schema) <nil>,
     AdditionalProperties: (*spec.SchemaOrBool)(0xc0001af300)({
      Allows: (bool) true,
      Schema: (*spec.Schema)(0xc000b14fc0)({
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) #/definitions/TrackableApp,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) <nil>,
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      })
     }),
     PatternProperties: (map[string]spec.Schema) <nil>,
     Dependencies: (spec.Dependencies) <nil>,
     AdditionalItems: (*spec.SchemaOrBool)(<nil>),
     Definitions: (spec.Definitions) <nil>
    },
    SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
     Discriminator: (string) "",
     ReadOnly: (bool) false,
     XML: (*spec.XMLObject)(<nil>),
     ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
     Example: (interface {}) <nil>
    },
    ExtraProps: (map[string]interface {}) <nil>
   },
   (string) (len=17) "TeacherSetupGuide": (spec.Schema) {
    VendorExtensible: (spec.VendorExtensible) {
     Extensions: (spec.Extensions) <nil>
    },
    SchemaProps: (spec.SchemaProps) {
     ID: (string) "",
     Ref: (spec.Ref) ,
     Schema: (spec.SchemaURL) "",
     Description: (string) "",
     Type: (spec.StringOrArray) (len=1 cap=1) {
      (string) (len=6) "object"
     },
     Format: (string) "",
     Title: (string) "",
     Default: (interface {}) <nil>,
     Maximum: (*float64)(<nil>),
     ExclusiveMaximum: (bool) false,
     Minimum: (*float64)(<nil>),
     ExclusiveMinimum: (bool) false,
     MaxLength: (*int64)(<nil>),
     MinLength: (*int64)(<nil>),
     Pattern: (string) "",
     MaxItems: (*int64)(<nil>),
     MinItems: (*int64)(<nil>),
     UniqueItems: (bool) false,
     MultipleOf: (*float64)(<nil>),
     Enum: ([]interface {}) <nil>,
     MaxProperties: (*int64)(<nil>),
     MinProperties: (*int64)(<nil>),
     Required: ([]string) <nil>,
     Items: (*spec.SchemaOrArray)(<nil>),
     AllOf: ([]spec.Schema) <nil>,
     OneOf: ([]spec.Schema) <nil>,
     AnyOf: ([]spec.Schema) <nil>,
     Not: (*spec.Schema)(<nil>),
     Properties: (map[string]spec.Schema) (len=1) {
      (string) (len=5) "steps": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=5) "array"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(0xc0009cd020)({
         Schema: (*spec.Schema)(0xc000aab440)({
          VendorExtensible: (spec.VendorExtensible) {
           Extensions: (spec.Extensions) <nil>
          },
          SchemaProps: (spec.SchemaProps) {
           ID: (string) "",
           Ref: (spec.Ref) #/definitions/TeacherSetupGuideStep,
           Schema: (spec.SchemaURL) "",
           Description: (string) "",
           Type: (spec.StringOrArray) <nil>,
           Format: (string) "",
           Title: (string) "",
           Default: (interface {}) <nil>,
           Maximum: (*float64)(<nil>),
           ExclusiveMaximum: (bool) false,
           Minimum: (*float64)(<nil>),
           ExclusiveMinimum: (bool) false,
           MaxLength: (*int64)(<nil>),
           MinLength: (*int64)(<nil>),
           Pattern: (string) "",
           MaxItems: (*int64)(<nil>),
           MinItems: (*int64)(<nil>),
           UniqueItems: (bool) false,
           MultipleOf: (*float64)(<nil>),
           Enum: ([]interface {}) <nil>,
           MaxProperties: (*int64)(<nil>),
           MinProperties: (*int64)(<nil>),
           Required: ([]string) <nil>,
           Items: (*spec.SchemaOrArray)(<nil>),
           AllOf: ([]spec.Schema) <nil>,
           OneOf: ([]spec.Schema) <nil>,
           AnyOf: ([]spec.Schema) <nil>,
           Not: (*spec.Schema)(<nil>),
           Properties: (map[string]spec.Schema) <nil>,
           AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
           PatternProperties: (map[string]spec.Schema) <nil>,
           Dependencies: (spec.Dependencies) <nil>,
           AdditionalItems: (*spec.SchemaOrBool)(<nil>),
           Definitions: (spec.Definitions) <nil>
          },
          SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
           Discriminator: (string) "",
           ReadOnly: (bool) false,
           XML: (*spec.XMLObject)(<nil>),
           ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
           Example: (interface {}) <nil>
          },
          ExtraProps: (map[string]interface {}) <nil>
         }),
         Schemas: ([]spec.Schema) <nil>
        }),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      }
     },
     AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
     PatternProperties: (map[string]spec.Schema) <nil>,
     Dependencies: (spec.Dependencies) <nil>,
     AdditionalItems: (*spec.SchemaOrBool)(<nil>),
     Definitions: (spec.Definitions) <nil>
    },
    SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
     Discriminator: (string) "",
     ReadOnly: (bool) false,
     XML: (*spec.XMLObject)(<nil>),
     ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
     Example: (interface {}) <nil>
    },
    ExtraProps: (map[string]interface {}) <nil>
   },
   (string) (len=12) "TrackableApp": (spec.Schema) {
    VendorExtensible: (spec.VendorExtensible) {
     Extensions: (spec.Extensions) <nil>
    },
    SchemaProps: (spec.SchemaProps) {
     ID: (string) "",
     Ref: (spec.Ref) ,
     Schema: (spec.SchemaURL) "",
     Description: (string) (len=28) "An app being tracked for P4A",
     Type: (spec.StringOrArray) (len=1 cap=1) {
      (string) (len=6) "object"
     },
     Format: (string) "",
     Title: (string) "",
     Default: (interface {}) <nil>,
     Maximum: (*float64)(<nil>),
     ExclusiveMaximum: (bool) false,
     Minimum: (*float64)(<nil>),
     ExclusiveMinimum: (bool) false,
     MaxLength: (*int64)(<nil>),
     MinLength: (*int64)(<nil>),
     Pattern: (string) "",
     MaxItems: (*int64)(<nil>),
     MinItems: (*int64)(<nil>),
     UniqueItems: (bool) false,
     MultipleOf: (*float64)(<nil>),
     Enum: ([]interface {}) <nil>,
     MaxProperties: (*int64)(<nil>),
     MinProperties: (*int64)(<nil>),
     Required: ([]string) (len=1 cap=4) {
      (string) (len=2) "id"
     },
     Items: (*spec.SchemaOrArray)(<nil>),
     AllOf: ([]spec.Schema) <nil>,
     OneOf: ([]spec.Schema) <nil>,
     AnyOf: ([]spec.Schema) <nil>,
     Not: (*spec.Schema)(<nil>),
     Properties: (map[string]spec.Schema) (len=6) {
      (string) (len=2) "id": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=5) "_name": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=10) "isAppGroup": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=7) "boolean"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=11) "relatedApps": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) #/definitions/RelatedApps,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) <nil>,
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=13) "relatedAppsV2": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) #/definitions/RelatedAppsV2,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) <nil>,
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=17) "trackingWhitelist": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) #/definitions/TrackingWhitelist,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) <nil>,
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      }
     },
     AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
     PatternProperties: (map[string]spec.Schema) <nil>,
     Dependencies: (spec.Dependencies) <nil>,
     AdditionalItems: (*spec.SchemaOrBool)(<nil>),
     Definitions: (spec.Definitions) <nil>
    },
    SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
     Discriminator: (string) "",
     ReadOnly: (bool) false,
     XML: (*spec.XMLObject)(<nil>),
     ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
     Example: (interface {}) <nil>
    },
    ExtraProps: (map[string]interface {}) <nil>
   },
   (string) (len=11) "GuideConfig": (spec.Schema) {
    VendorExtensible: (spec.VendorExtensible) {
     Extensions: (spec.Extensions) <nil>
    },
    SchemaProps: (spec.SchemaProps) {
     ID: (string) "",
     Ref: (spec.Ref) ,
     Schema: (spec.SchemaURL) "",
     Description: (string) "",
     Type: (spec.StringOrArray) (len=1 cap=1) {
      (string) (len=6) "object"
     },
     Format: (string) "",
     Title: (string) "",
     Default: (interface {}) <nil>,
     Maximum: (*float64)(<nil>),
     ExclusiveMaximum: (bool) false,
     Minimum: (*float64)(<nil>),
     ExclusiveMinimum: (bool) false,
     MaxLength: (*int64)(<nil>),
     MinLength: (*int64)(<nil>),
     Pattern: (string) "",
     MaxItems: (*int64)(<nil>),
     MinItems: (*int64)(<nil>),
     UniqueItems: (bool) false,
     MultipleOf: (*float64)(<nil>),
     Enum: ([]interface {}) <nil>,
     MaxProperties: (*int64)(<nil>),
     MinProperties: (*int64)(<nil>),
     Required: ([]string) <nil>,
     Items: (*spec.SchemaOrArray)(<nil>),
     AllOf: ([]spec.Schema) <nil>,
     OneOf: ([]spec.Schema) <nil>,
     AnyOf: ([]spec.Schema) <nil>,
     Not: (*spec.Schema)(<nil>),
     Properties: (map[string]spec.Schema) (len=2) {
      (string) (len=5) "stage": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=9) "guideData": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) #/definitions/GuideData,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) <nil>,
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      }
     },
     AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
     PatternProperties: (map[string]spec.Schema) <nil>,
     Dependencies: (spec.Dependencies) <nil>,
     AdditionalItems: (*spec.SchemaOrBool)(<nil>),
     Definitions: (spec.Definitions) <nil>
    },
    SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
     Discriminator: (string) "",
     ReadOnly: (bool) false,
     XML: (*spec.XMLObject)(<nil>),
     ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
     Example: (interface {}) <nil>
    },
    ExtraProps: (map[string]interface {}) <nil>
   },
   (string) (len=15) "ResourceDevices": (spec.Schema) {
    VendorExtensible: (spec.VendorExtensible) {
     Extensions: (spec.Extensions) <nil>
    },
    SchemaProps: (spec.SchemaProps) {
     ID: (string) "",
     Ref: (spec.Ref) ,
     Schema: (spec.SchemaURL) "",
     Description: (string) "",
     Type: (spec.StringOrArray) (len=1 cap=1) {
      (string) (len=6) "object"
     },
     Format: (string) "",
     Title: (string) "",
     Default: (interface {}) <nil>,
     Maximum: (*float64)(<nil>),
     ExclusiveMaximum: (bool) false,
     Minimum: (*float64)(<nil>),
     ExclusiveMinimum: (bool) false,
     MaxLength: (*int64)(<nil>),
     MinLength: (*int64)(<nil>),
     Pattern: (string) "",
     MaxItems: (*int64)(<nil>),
     MinItems: (*int64)(<nil>),
     UniqueItems: (bool) false,
     MultipleOf: (*float64)(<nil>),
     Enum: ([]interface {}) <nil>,
     MaxProperties: (*int64)(<nil>),
     MinProperties: (*int64)(<nil>),
     Required: ([]string) <nil>,
     Items: (*spec.SchemaOrArray)(<nil>),
     AllOf: ([]spec.Schema) <nil>,
     OneOf: ([]spec.Schema) <nil>,
     AnyOf: ([]spec.Schema) <nil>,
     Not: (*spec.Schema)(<nil>),
     Properties: (map[string]spec.Schema) (len=5) {
      (string) (len=7) "windows": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=7) "boolean"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=5) "macOS": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=7) "boolean"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=3) "iOS": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=7) "boolean"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=7) "android": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=7) "boolean"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=7) "browser": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=7) "boolean"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      }
     },
     AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
     PatternProperties: (map[string]spec.Schema) <nil>,
     Dependencies: (spec.Dependencies) <nil>,
     AdditionalItems: (*spec.SchemaOrBool)(<nil>),
     Definitions: (spec.Definitions) <nil>
    },
    SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
     Discriminator: (string) "",
     ReadOnly: (bool) false,
     XML: (*spec.XMLObject)(<nil>),
     ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
     Example: (interface {}) <nil>
    },
    ExtraProps: (map[string]interface {}) <nil>
   },
   (string) (len=15) "ResourcePricing": (spec.Schema) {
    VendorExtensible: (spec.VendorExtensible) {
     Extensions: (spec.Extensions) <nil>
    },
    SchemaProps: (spec.SchemaProps) {
     ID: (string) "",
     Ref: (spec.Ref) ,
     Schema: (spec.SchemaURL) "",
     Description: (string) "",
     Type: (spec.StringOrArray) (len=1 cap=1) {
      (string) (len=6) "string"
     },
     Format: (string) "",
     Title: (string) "",
     Default: (interface {}) <nil>,
     Maximum: (*float64)(<nil>),
     ExclusiveMaximum: (bool) false,
     Minimum: (*float64)(<nil>),
     ExclusiveMinimum: (bool) false,
     MaxLength: (*int64)(<nil>),
     MinLength: (*int64)(<nil>),
     Pattern: (string) "",
     MaxItems: (*int64)(<nil>),
     MinItems: (*int64)(<nil>),
     UniqueItems: (bool) false,
     MultipleOf: (*float64)(<nil>),
     Enum: ([]interface {}) (len=4 cap=4) {
      (string) (len=4) "free",
      (string) (len=8) "freemium",
      (string) (len=10) "free_trial",
      (string) (len=12) "subscription"
     },
     MaxProperties: (*int64)(<nil>),
     MinProperties: (*int64)(<nil>),
     Required: ([]string) <nil>,
     Items: (*spec.SchemaOrArray)(<nil>),
     AllOf: ([]spec.Schema) <nil>,
     OneOf: ([]spec.Schema) <nil>,
     AnyOf: ([]spec.Schema) <nil>,
     Not: (*spec.Schema)(<nil>),
     Properties: (map[string]spec.Schema) <nil>,
     AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
     PatternProperties: (map[string]spec.Schema) <nil>,
     Dependencies: (spec.Dependencies) <nil>,
     AdditionalItems: (*spec.SchemaOrBool)(<nil>),
     Definitions: (spec.Definitions) <nil>
    },
    SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
     Discriminator: (string) "",
     ReadOnly: (bool) false,
     XML: (*spec.XMLObject)(<nil>),
     ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
     Example: (interface {}) <nil>
    },
    ExtraProps: (map[string]interface {}) <nil>
   },
   (string) (len=9) "UsageUrls": (spec.Schema) {
    VendorExtensible: (spec.VendorExtensible) {
     Extensions: (spec.Extensions) <nil>
    },
    SchemaProps: (spec.SchemaProps) {
     ID: (string) "",
     Ref: (spec.Ref) ,
     Schema: (spec.SchemaURL) "",
     Description: (string) "",
     Type: (spec.StringOrArray) (len=1 cap=1) {
      (string) (len=5) "array"
     },
     Format: (string) "",
     Title: (string) "",
     Default: (interface {}) <nil>,
     Maximum: (*float64)(<nil>),
     ExclusiveMaximum: (bool) false,
     Minimum: (*float64)(<nil>),
     ExclusiveMinimum: (bool) false,
     MaxLength: (*int64)(<nil>),
     MinLength: (*int64)(<nil>),
     Pattern: (string) "",
     MaxItems: (*int64)(<nil>),
     MinItems: (*int64)(<nil>),
     UniqueItems: (bool) false,
     MultipleOf: (*float64)(<nil>),
     Enum: ([]interface {}) <nil>,
     MaxProperties: (*int64)(<nil>),
     MinProperties: (*int64)(<nil>),
     Required: ([]string) <nil>,
     Items: (*spec.SchemaOrArray)(0xc0009cd4a0)({
      Schema: (*spec.Schema)(0xc000aca000)({
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      }),
      Schemas: ([]spec.Schema) <nil>
     }),
     AllOf: ([]spec.Schema) <nil>,
     OneOf: ([]spec.Schema) <nil>,
     AnyOf: ([]spec.Schema) <nil>,
     Not: (*spec.Schema)(<nil>),
     Properties: (map[string]spec.Schema) <nil>,
     AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
     PatternProperties: (map[string]spec.Schema) <nil>,
     Dependencies: (spec.Dependencies) <nil>,
     AdditionalItems: (*spec.SchemaOrBool)(<nil>),
     Definitions: (spec.Definitions) <nil>
    },
    SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
     Discriminator: (string) "",
     ReadOnly: (bool) false,
     XML: (*spec.XMLObject)(<nil>),
     ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
     Example: (interface {}) <nil>
    },
    ExtraProps: (map[string]interface {}) <nil>
   },
   (string) (len=10) "Onboarding": (spec.Schema) {
    VendorExtensible: (spec.VendorExtensible) {
     Extensions: (spec.Extensions) <nil>
    },
    SchemaProps: (spec.SchemaProps) {
     ID: (string) "",
     Ref: (spec.Ref) ,
     Schema: (spec.SchemaURL) "",
     Description: (string) (len=87) "A data structure used to track an app's progress through the self-serve onboarding flow",
     Type: (spec.StringOrArray) (len=1 cap=1) {
      (string) (len=6) "object"
     },
     Format: (string) "",
     Title: (string) "",
     Default: (interface {}) <nil>,
     Maximum: (*float64)(<nil>),
     ExclusiveMaximum: (bool) false,
     Minimum: (*float64)(<nil>),
     ExclusiveMinimum: (bool) false,
     MaxLength: (*int64)(<nil>),
     MinLength: (*int64)(<nil>),
     Pattern: (string) "",
     MaxItems: (*int64)(<nil>),
     MinItems: (*int64)(<nil>),
     UniqueItems: (bool) false,
     MultipleOf: (*float64)(<nil>),
     Enum: ([]interface {}) <nil>,
     MaxProperties: (*int64)(<nil>),
     MinProperties: (*int64)(<nil>),
     Required: ([]string) <nil>,
     Items: (*spec.SchemaOrArray)(<nil>),
     AllOf: ([]spec.Schema) <nil>,
     OneOf: ([]spec.Schema) <nil>,
     AnyOf: ([]spec.Schema) <nil>,
     Not: (*spec.Schema)(<nil>),
     Properties: (map[string]spec.Schema) (len=5) {
      (string) (len=3) "ios": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=5) "array"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(0xc000a81e60)({
         Schema: (*spec.Schema)(0xc000abfb00)({
          VendorExtensible: (spec.VendorExtensible) {
           Extensions: (spec.Extensions) <nil>
          },
          SchemaProps: (spec.SchemaProps) {
           ID: (string) "",
           Ref: (spec.Ref) #/definitions/OnboardingEvent,
           Schema: (spec.SchemaURL) "",
           Description: (string) "",
           Type: (spec.StringOrArray) <nil>,
           Format: (string) "",
           Title: (string) "",
           Default: (interface {}) <nil>,
           Maximum: (*float64)(<nil>),
           ExclusiveMaximum: (bool) false,
           Minimum: (*float64)(<nil>),
           ExclusiveMinimum: (bool) false,
           MaxLength: (*int64)(<nil>),
           MinLength: (*int64)(<nil>),
           Pattern: (string) "",
           MaxItems: (*int64)(<nil>),
           MinItems: (*int64)(<nil>),
           UniqueItems: (bool) false,
           MultipleOf: (*float64)(<nil>),
           Enum: ([]interface {}) <nil>,
           MaxProperties: (*int64)(<nil>),
           MinProperties: (*int64)(<nil>),
           Required: ([]string) <nil>,
           Items: (*spec.SchemaOrArray)(<nil>),
           AllOf: ([]spec.Schema) <nil>,
           OneOf: ([]spec.Schema) <nil>,
           AnyOf: ([]spec.Schema) <nil>,
           Not: (*spec.Schema)(<nil>),
           Properties: (map[string]spec.Schema) <nil>,
           AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
           PatternProperties: (map[string]spec.Schema) <nil>,
           Dependencies: (spec.Dependencies) <nil>,
           AdditionalItems: (*spec.SchemaOrBool)(<nil>),
           Definitions: (spec.Definitions) <nil>
          },
          SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
           Discriminator: (string) "",
           ReadOnly: (bool) false,
           XML: (*spec.XMLObject)(<nil>),
           ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
           Example: (interface {}) <nil>
          },
          ExtraProps: (map[string]interface {}) <nil>
         }),
         Schemas: ([]spec.Schema) <nil>
        }),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=14) "secureSyncLite": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=5) "array"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(0xc000a81f80)({
         Schema: (*spec.Schema)(0xc000aca240)({
          VendorExtensible: (spec.VendorExtensible) {
           Extensions: (spec.Extensions) <nil>
          },
          SchemaProps: (spec.SchemaProps) {
           ID: (string) "",
           Ref: (spec.Ref) #/definitions/OnboardingEvent,
           Schema: (spec.SchemaURL) "",
           Description: (string) "",
           Type: (spec.StringOrArray) <nil>,
           Format: (string) "",
           Title: (string) "",
           Default: (interface {}) <nil>,
           Maximum: (*float64)(<nil>),
           ExclusiveMaximum: (bool) false,
           Minimum: (*float64)(<nil>),
           ExclusiveMinimum: (bool) false,
           MaxLength: (*int64)(<nil>),
           MinLength: (*int64)(<nil>),
           Pattern: (string) "",
           MaxItems: (*int64)(<nil>),
           MinItems: (*int64)(<nil>),
           UniqueItems: (bool) false,
           MultipleOf: (*float64)(<nil>),
           Enum: ([]interface {}) <nil>,
           MaxProperties: (*int64)(<nil>),
           MinProperties: (*int64)(<nil>),
           Required: ([]string) <nil>,
           Items: (*spec.SchemaOrArray)(<nil>),
           AllOf: ([]spec.Schema) <nil>,
           OneOf: ([]spec.Schema) <nil>,
           AnyOf: ([]spec.Schema) <nil>,
           Not: (*spec.Schema)(<nil>),
           Properties: (map[string]spec.Schema) <nil>,
           AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
           PatternProperties: (map[string]spec.Schema) <nil>,
           Dependencies: (spec.Dependencies) <nil>,
           AdditionalItems: (*spec.SchemaOrBool)(<nil>),
           Definitions: (spec.Definitions) <nil>
          },
          SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
           Discriminator: (string) "",
           ReadOnly: (bool) false,
           XML: (*spec.XMLObject)(<nil>),
           ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
           Example: (interface {}) <nil>
          },
          ExtraProps: (map[string]interface {}) <nil>
         }),
         Schemas: ([]spec.Schema) <nil>
        }),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=10) "secureSync": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=5) "array"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(0xc000acc0a0)({
         Schema: (*spec.Schema)(0xc000aca900)({
          VendorExtensible: (spec.VendorExtensible) {
           Extensions: (spec.Extensions) <nil>
          },
          SchemaProps: (spec.SchemaProps) {
           ID: (string) "",
           Ref: (spec.Ref) #/definitions/OnboardingEvent,
           Schema: (spec.SchemaURL) "",
           Description: (string) "",
           Type: (spec.StringOrArray) <nil>,
           Format: (string) "",
           Title: (string) "",
           Default: (interface {}) <nil>,
           Maximum: (*float64)(<nil>),
           ExclusiveMaximum: (bool) false,
           Minimum: (*float64)(<nil>),
           ExclusiveMinimum: (bool) false,
           MaxLength: (*int64)(<nil>),
           MinLength: (*int64)(<nil>),
           Pattern: (string) "",
           MaxItems: (*int64)(<nil>),
           MinItems: (*int64)(<nil>),
           UniqueItems: (bool) false,
           MultipleOf: (*float64)(<nil>),
           Enum: ([]interface {}) <nil>,
           MaxProperties: (*int64)(<nil>),
           MinProperties: (*int64)(<nil>),
           Required: ([]string) <nil>,
           Items: (*spec.SchemaOrArray)(<nil>),
           AllOf: ([]spec.Schema) <nil>,
           OneOf: ([]spec.Schema) <nil>,
           AnyOf: ([]spec.Schema) <nil>,
           Not: (*spec.Schema)(<nil>),
           Properties: (map[string]spec.Schema) <nil>,
           AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
           PatternProperties: (map[string]spec.Schema) <nil>,
           Dependencies: (spec.Dependencies) <nil>,
           AdditionalItems: (*spec.SchemaOrBool)(<nil>),
           Definitions: (spec.Definitions) <nil>
          },
          SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
           Discriminator: (string) "",
           ReadOnly: (bool) false,
           XML: (*spec.XMLObject)(<nil>),
           ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
           Example: (interface {}) <nil>
          },
          ExtraProps: (map[string]interface {}) <nil>
         }),
         Schemas: ([]spec.Schema) <nil>
        }),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=6) "events": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=5) "array"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(0xc000acc1c0)({
         Schema: (*spec.Schema)(0xc000acafc0)({
          VendorExtensible: (spec.VendorExtensible) {
           Extensions: (spec.Extensions) <nil>
          },
          SchemaProps: (spec.SchemaProps) {
           ID: (string) "",
           Ref: (spec.Ref) #/definitions/OnboardingEvent,
           Schema: (spec.SchemaURL) "",
           Description: (string) "",
           Type: (spec.StringOrArray) <nil>,
           Format: (string) "",
           Title: (string) "",
           Default: (interface {}) <nil>,
           Maximum: (*float64)(<nil>),
           ExclusiveMaximum: (bool) false,
           Minimum: (*float64)(<nil>),
           ExclusiveMinimum: (bool) false,
           MaxLength: (*int64)(<nil>),
           MinLength: (*int64)(<nil>),
           Pattern: (string) "",
           MaxItems: (*int64)(<nil>),
           MinItems: (*int64)(<nil>),
           UniqueItems: (bool) false,
           MultipleOf: (*float64)(<nil>),
           Enum: ([]interface {}) <nil>,
           MaxProperties: (*int64)(<nil>),
           MinProperties: (*int64)(<nil>),
           Required: ([]string) <nil>,
           Items: (*spec.SchemaOrArray)(<nil>),
           AllOf: ([]spec.Schema) <nil>,
           OneOf: ([]spec.Schema) <nil>,
           AnyOf: ([]spec.Schema) <nil>,
           Not: (*spec.Schema)(<nil>),
           Properties: (map[string]spec.Schema) <nil>,
           AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
           PatternProperties: (map[string]spec.Schema) <nil>,
           Dependencies: (spec.Dependencies) <nil>,
           AdditionalItems: (*spec.SchemaOrBool)(<nil>),
           Definitions: (spec.Definitions) <nil>
          },
          SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
           Discriminator: (string) "",
           ReadOnly: (bool) false,
           XML: (*spec.XMLObject)(<nil>),
           ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
           Example: (interface {}) <nil>
          },
          ExtraProps: (map[string]interface {}) <nil>
         }),
         Schemas: ([]spec.Schema) <nil>
        }),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=12) "instantLogin": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=5) "array"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(0xc000a81d40)({
         Schema: (*spec.Schema)(0xc000abf440)({
          VendorExtensible: (spec.VendorExtensible) {
           Extensions: (spec.Extensions) <nil>
          },
          SchemaProps: (spec.SchemaProps) {
           ID: (string) "",
           Ref: (spec.Ref) #/definitions/OnboardingEvent,
           Schema: (spec.SchemaURL) "",
           Description: (string) "",
           Type: (spec.StringOrArray) <nil>,
           Format: (string) "",
           Title: (string) "",
           Default: (interface {}) <nil>,
           Maximum: (*float64)(<nil>),
           ExclusiveMaximum: (bool) false,
           Minimum: (*float64)(<nil>),
           ExclusiveMinimum: (bool) false,
           MaxLength: (*int64)(<nil>),
           MinLength: (*int64)(<nil>),
           Pattern: (string) "",
           MaxItems: (*int64)(<nil>),
           MinItems: (*int64)(<nil>),
           UniqueItems: (bool) false,
           MultipleOf: (*float64)(<nil>),
           Enum: ([]interface {}) <nil>,
           MaxProperties: (*int64)(<nil>),
           MinProperties: (*int64)(<nil>),
           Required: ([]string) <nil>,
           Items: (*spec.SchemaOrArray)(<nil>),
           AllOf: ([]spec.Schema) <nil>,
           OneOf: ([]spec.Schema) <nil>,
           AnyOf: ([]spec.Schema) <nil>,
           Not: (*spec.Schema)(<nil>),
           Properties: (map[string]spec.Schema) <nil>,
           AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
           PatternProperties: (map[string]spec.Schema) <nil>,
           Dependencies: (spec.Dependencies) <nil>,
           AdditionalItems: (*spec.SchemaOrBool)(<nil>),
           Definitions: (spec.Definitions) <nil>
          },
          SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
           Discriminator: (string) "",
           ReadOnly: (bool) false,
           XML: (*spec.XMLObject)(<nil>),
           ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
           Example: (interface {}) <nil>
          },
          ExtraProps: (map[string]interface {}) <nil>
         }),
         Schemas: ([]spec.Schema) <nil>
        }),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      }
     },
     AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
     PatternProperties: (map[string]spec.Schema) <nil>,
     Dependencies: (spec.Dependencies) <nil>,
     AdditionalItems: (*spec.SchemaOrBool)(<nil>),
     Definitions: (spec.Definitions) <nil>
    },
    SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
     Discriminator: (string) "",
     ReadOnly: (bool) false,
     XML: (*spec.XMLObject)(<nil>),
     ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
     Example: (interface {}) <nil>
    },
    ExtraProps: (map[string]interface {}) <nil>
   },
   (string) (len=16) "InsightsMetadata": (spec.Schema) {
    VendorExtensible: (spec.VendorExtensible) {
     Extensions: (spec.Extensions) <nil>
    },
    SchemaProps: (spec.SchemaProps) {
     ID: (string) "",
     Ref: (spec.Ref) ,
     Schema: (spec.SchemaURL) "",
     Description: (string) "",
     Type: (spec.StringOrArray) (len=1 cap=1) {
      (string) (len=6) "object"
     },
     Format: (string) "",
     Title: (string) "",
     Default: (interface {}) <nil>,
     Maximum: (*float64)(<nil>),
     ExclusiveMaximum: (bool) false,
     Minimum: (*float64)(<nil>),
     ExclusiveMinimum: (bool) false,
     MaxLength: (*int64)(<nil>),
     MinLength: (*int64)(<nil>),
     Pattern: (string) "",
     MaxItems: (*int64)(<nil>),
     MinItems: (*int64)(<nil>),
     UniqueItems: (bool) false,
     MultipleOf: (*float64)(<nil>),
     Enum: ([]interface {}) <nil>,
     MaxProperties: (*int64)(<nil>),
     MinProperties: (*int64)(<nil>),
     Required: ([]string) <nil>,
     Items: (*spec.SchemaOrArray)(<nil>),
     AllOf: ([]spec.Schema) <nil>,
     OneOf: ([]spec.Schema) <nil>,
     AnyOf: ([]spec.Schema) <nil>,
     Not: (*spec.Schema)(<nil>),
     Properties: (map[string]spec.Schema) (len=2) {
      (string) (len=7) "enabled": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=7) "boolean"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=9) "usageUrls": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=5) "array"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(0xc0009ccdc0)({
         Schema: (*spec.Schema)(0xc000aa0fc0)({
          VendorExtensible: (spec.VendorExtensible) {
           Extensions: (spec.Extensions) <nil>
          },
          SchemaProps: (spec.SchemaProps) {
           ID: (string) "",
           Ref: (spec.Ref) ,
           Schema: (spec.SchemaURL) "",
           Description: (string) "",
           Type: (spec.StringOrArray) (len=1 cap=1) {
            (string) (len=6) "string"
           },
           Format: (string) "",
           Title: (string) "",
           Default: (interface {}) <nil>,
           Maximum: (*float64)(<nil>),
           ExclusiveMaximum: (bool) false,
           Minimum: (*float64)(<nil>),
           ExclusiveMinimum: (bool) false,
           MaxLength: (*int64)(<nil>),
           MinLength: (*int64)(<nil>),
           Pattern: (string) "",
           MaxItems: (*int64)(<nil>),
           MinItems: (*int64)(<nil>),
           UniqueItems: (bool) false,
           MultipleOf: (*float64)(<nil>),
           Enum: ([]interface {}) <nil>,
           MaxProperties: (*int64)(<nil>),
           MinProperties: (*int64)(<nil>),
           Required: ([]string) <nil>,
           Items: (*spec.SchemaOrArray)(<nil>),
           AllOf: ([]spec.Schema) <nil>,
           OneOf: ([]spec.Schema) <nil>,
           AnyOf: ([]spec.Schema) <nil>,
           Not: (*spec.Schema)(<nil>),
           Properties: (map[string]spec.Schema) <nil>,
           AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
           PatternProperties: (map[string]spec.Schema) <nil>,
           Dependencies: (spec.Dependencies) <nil>,
           AdditionalItems: (*spec.SchemaOrBool)(<nil>),
           Definitions: (spec.Definitions) <nil>
          },
          SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
           Discriminator: (string) "",
           ReadOnly: (bool) false,
           XML: (*spec.XMLObject)(<nil>),
           ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
           Example: (interface {}) <nil>
          },
          ExtraProps: (map[string]interface {}) <nil>
         }),
         Schemas: ([]spec.Schema) <nil>
        }),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      }
     },
     AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
     PatternProperties: (map[string]spec.Schema) <nil>,
     Dependencies: (spec.Dependencies) <nil>,
     AdditionalItems: (*spec.SchemaOrBool)(<nil>),
     Definitions: (spec.Definitions) <nil>
    },
    SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
     Discriminator: (string) "",
     ReadOnly: (bool) false,
     XML: (*spec.XMLObject)(<nil>),
     ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
     Example: (interface {}) <nil>
    },
    ExtraProps: (map[string]interface {}) <nil>
   },
   (string) (len=15) "ValidPermission": (spec.Schema) {
    VendorExtensible: (spec.VendorExtensible) {
     Extensions: (spec.Extensions) <nil>
    },
    SchemaProps: (spec.SchemaProps) {
     ID: (string) "",
     Ref: (spec.Ref) ,
     Schema: (spec.SchemaURL) "",
     Description: (string) "",
     Type: (spec.StringOrArray) (len=1 cap=1) {
      (string) (len=6) "object"
     },
     Format: (string) "",
     Title: (string) "",
     Default: (interface {}) <nil>,
     Maximum: (*float64)(<nil>),
     ExclusiveMaximum: (bool) false,
     Minimum: (*float64)(<nil>),
     ExclusiveMinimum: (bool) false,
     MaxLength: (*int64)(<nil>),
     MinLength: (*int64)(<nil>),
     Pattern: (string) "",
     MaxItems: (*int64)(<nil>),
     MinItems: (*int64)(<nil>),
     UniqueItems: (bool) false,
     MultipleOf: (*float64)(<nil>),
     Enum: ([]interface {}) <nil>,
     MaxProperties: (*int64)(<nil>),
     MinProperties: (*int64)(<nil>),
     Required: ([]string) <nil>,
     Items: (*spec.SchemaOrArray)(<nil>),
     AllOf: ([]spec.Schema) <nil>,
     OneOf: ([]spec.Schema) <nil>,
     AnyOf: ([]spec.Schema) <nil>,
     Not: (*spec.Schema)(<nil>),
     Properties: (map[string]spec.Schema) (len=2) {
      (string) (len=5) "value": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) #/definitions/Permission,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) <nil>,
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=11) "description": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      }
     },
     AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
     PatternProperties: (map[string]spec.Schema) <nil>,
     Dependencies: (spec.Dependencies) <nil>,
     AdditionalItems: (*spec.SchemaOrBool)(<nil>),
     Definitions: (spec.Definitions) <nil>
    },
    SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
     Discriminator: (string) "",
     ReadOnly: (bool) false,
     XML: (*spec.XMLObject)(<nil>),
     ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
     Example: (interface {}) <nil>
    },
    ExtraProps: (map[string]interface {}) <nil>
   },
   (string) (len=9) "Forbidden": (spec.Schema) {
    VendorExtensible: (spec.VendorExtensible) {
     Extensions: (spec.Extensions) <nil>
    },
    SchemaProps: (spec.SchemaProps) {
     ID: (string) "",
     Ref: (spec.Ref) ,
     Schema: (spec.SchemaURL) "",
     Description: (string) "",
     Type: (spec.StringOrArray) (len=1 cap=1) {
      (string) (len=6) "object"
     },
     Format: (string) "",
     Title: (string) "",
     Default: (interface {}) <nil>,
     Maximum: (*float64)(<nil>),
     ExclusiveMaximum: (bool) false,
     Minimum: (*float64)(<nil>),
     ExclusiveMinimum: (bool) false,
     MaxLength: (*int64)(<nil>),
     MinLength: (*int64)(<nil>),
     Pattern: (string) "",
     MaxItems: (*int64)(<nil>),
     MinItems: (*int64)(<nil>),
     UniqueItems: (bool) false,
     MultipleOf: (*float64)(<nil>),
     Enum: ([]interface {}) <nil>,
     MaxProperties: (*int64)(<nil>),
     MinProperties: (*int64)(<nil>),
     Required: ([]string) <nil>,
     Items: (*spec.SchemaOrArray)(<nil>),
     AllOf: ([]spec.Schema) <nil>,
     OneOf: ([]spec.Schema) <nil>,
     AnyOf: ([]spec.Schema) <nil>,
     Not: (*spec.Schema)(<nil>),
     Properties: (map[string]spec.Schema) (len=1) {
      (string) (len=7) "message": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      }
     },
     AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
     PatternProperties: (map[string]spec.Schema) <nil>,
     Dependencies: (spec.Dependencies) <nil>,
     AdditionalItems: (*spec.SchemaOrBool)(<nil>),
     Definitions: (spec.Definitions) <nil>
    },
    SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
     Discriminator: (string) "",
     ReadOnly: (bool) false,
     XML: (*spec.XMLObject)(<nil>),
     ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
     Example: (interface {}) <nil>
    },
    ExtraProps: (map[string]interface {}) <nil>
   },
   (string) (len=19) "UnprocessableEntity": (spec.Schema) {
    VendorExtensible: (spec.VendorExtensible) {
     Extensions: (spec.Extensions) <nil>
    },
    SchemaProps: (spec.SchemaProps) {
     ID: (string) "",
     Ref: (spec.Ref) ,
     Schema: (spec.SchemaURL) "",
     Description: (string) "",
     Type: (spec.StringOrArray) (len=1 cap=1) {
      (string) (len=6) "object"
     },
     Format: (string) "",
     Title: (string) "",
     Default: (interface {}) <nil>,
     Maximum: (*float64)(<nil>),
     ExclusiveMaximum: (bool) false,
     Minimum: (*float64)(<nil>),
     ExclusiveMinimum: (bool) false,
     MaxLength: (*int64)(<nil>),
     MinLength: (*int64)(<nil>),
     Pattern: (string) "",
     MaxItems: (*int64)(<nil>),
     MinItems: (*int64)(<nil>),
     UniqueItems: (bool) false,
     MultipleOf: (*float64)(<nil>),
     Enum: ([]interface {}) <nil>,
     MaxProperties: (*int64)(<nil>),
     MinProperties: (*int64)(<nil>),
     Required: ([]string) <nil>,
     Items: (*spec.SchemaOrArray)(<nil>),
     AllOf: ([]spec.Schema) <nil>,
     OneOf: ([]spec.Schema) <nil>,
     AnyOf: ([]spec.Schema) <nil>,
     Not: (*spec.Schema)(<nil>),
     Properties: (map[string]spec.Schema) (len=1) {
      (string) (len=7) "message": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      }
     },
     AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
     PatternProperties: (map[string]spec.Schema) <nil>,
     Dependencies: (spec.Dependencies) <nil>,
     AdditionalItems: (*spec.SchemaOrBool)(<nil>),
     Definitions: (spec.Definitions) <nil>
    },
    SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
     Discriminator: (string) "",
     ReadOnly: (bool) false,
     XML: (*spec.XMLObject)(<nil>),
     ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
     Example: (interface {}) <nil>
    },
    ExtraProps: (map[string]interface {}) <nil>
   },
   (string) (len=22) "SharingRecommendations": (spec.Schema) {
    VendorExtensible: (spec.VendorExtensible) {
     Extensions: (spec.Extensions) <nil>
    },
    SchemaProps: (spec.SchemaProps) {
     ID: (string) "",
     Ref: (spec.Ref) ,
     Schema: (spec.SchemaURL) "",
     Description: (string) (len=103) "The sharing recommendations for an application. Should match the schema used in District Authorizations",
     Type: (spec.StringOrArray) (len=1 cap=1) {
      (string) (len=6) "object"
     },
     Format: (string) "",
     Title: (string) "",
     Default: (interface {}) <nil>,
     Maximum: (*float64)(<nil>),
     ExclusiveMaximum: (bool) false,
     Minimum: (*float64)(<nil>),
     ExclusiveMinimum: (bool) false,
     MaxLength: (*int64)(<nil>),
     MinLength: (*int64)(<nil>),
     Pattern: (string) "",
     MaxItems: (*int64)(<nil>),
     MinItems: (*int64)(<nil>),
     UniqueItems: (bool) false,
     MultipleOf: (*float64)(<nil>),
     Enum: ([]interface {}) <nil>,
     MaxProperties: (*int64)(<nil>),
     MinProperties: (*int64)(<nil>),
     Required: ([]string) <nil>,
     Items: (*spec.SchemaOrArray)(<nil>),
     AllOf: ([]spec.Schema) <nil>,
     OneOf: ([]spec.Schema) <nil>,
     AnyOf: ([]spec.Schema) <nil>,
     Not: (*spec.Schema)(<nil>),
     Properties: (map[string]spec.Schema) (len=2) {
      (string) (len=11) "sharingType": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) (len=5 cap=6) {
         (string) (len=4) "none",
         (string) (len=8) "district",
         (string) (len=7) "schools",
         (string) (len=8) "sections",
         (string) (len=5) "rules"
        },
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=5) "rules": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=5) "array"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(0xc000a81040)({
         Schema: (*spec.Schema)(0xc000aa1680)({
          VendorExtensible: (spec.VendorExtensible) {
           Extensions: (spec.Extensions) <nil>
          },
          SchemaProps: (spec.SchemaProps) {
           ID: (string) "",
           Ref: (spec.Ref) #/definitions/SharingRule,
           Schema: (spec.SchemaURL) "",
           Description: (string) "",
           Type: (spec.StringOrArray) <nil>,
           Format: (string) "",
           Title: (string) "",
           Default: (interface {}) <nil>,
           Maximum: (*float64)(<nil>),
           ExclusiveMaximum: (bool) false,
           Minimum: (*float64)(<nil>),
           ExclusiveMinimum: (bool) false,
           MaxLength: (*int64)(<nil>),
           MinLength: (*int64)(<nil>),
           Pattern: (string) "",
           MaxItems: (*int64)(<nil>),
           MinItems: (*int64)(<nil>),
           UniqueItems: (bool) false,
           MultipleOf: (*float64)(<nil>),
           Enum: ([]interface {}) <nil>,
           MaxProperties: (*int64)(<nil>),
           MinProperties: (*int64)(<nil>),
           Required: ([]string) <nil>,
           Items: (*spec.SchemaOrArray)(<nil>),
           AllOf: ([]spec.Schema) <nil>,
           OneOf: ([]spec.Schema) <nil>,
           AnyOf: ([]spec.Schema) <nil>,
           Not: (*spec.Schema)(<nil>),
           Properties: (map[string]spec.Schema) <nil>,
           AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
           PatternProperties: (map[string]spec.Schema) <nil>,
           Dependencies: (spec.Dependencies) <nil>,
           AdditionalItems: (*spec.SchemaOrBool)(<nil>),
           Definitions: (spec.Definitions) <nil>
          },
          SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
           Discriminator: (string) "",
           ReadOnly: (bool) false,
           XML: (*spec.XMLObject)(<nil>),
           ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
           Example: (interface {}) <nil>
          },
          ExtraProps: (map[string]interface {}) <nil>
         }),
         Schemas: ([]spec.Schema) <nil>
        }),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      }
     },
     AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
     PatternProperties: (map[string]spec.Schema) <nil>,
     Dependencies: (spec.Dependencies) <nil>,
     AdditionalItems: (*spec.SchemaOrBool)(<nil>),
     Definitions: (spec.Definitions) <nil>
    },
    SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
     Discriminator: (string) "",
     ReadOnly: (bool) false,
     XML: (*spec.XMLObject)(<nil>),
     ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
     Example: (interface {}) <nil>
    },
    ExtraProps: (map[string]interface {}) <nil>
   },
   (string) (len=19) "OnboardingEventType": (spec.Schema) {
    VendorExtensible: (spec.VendorExtensible) {
     Extensions: (spec.Extensions) <nil>
    },
    SchemaProps: (spec.SchemaProps) {
     ID: (string) "",
     Ref: (spec.Ref) ,
     Schema: (spec.SchemaURL) "",
     Description: (string) "",
     Type: (spec.StringOrArray) (len=1 cap=1) {
      (string) (len=6) "string"
     },
     Format: (string) "",
     Title: (string) "",
     Default: (interface {}) <nil>,
     Maximum: (*float64)(<nil>),
     ExclusiveMaximum: (bool) false,
     Minimum: (*float64)(<nil>),
     ExclusiveMinimum: (bool) false,
     MaxLength: (*int64)(<nil>),
     MinLength: (*int64)(<nil>),
     Pattern: (string) "",
     MaxItems: (*int64)(<nil>),
     MinItems: (*int64)(<nil>),
     UniqueItems: (bool) false,
     MultipleOf: (*float64)(<nil>),
     Enum: ([]interface {}) (len=4 cap=4) {
      (string) (len=7) "started",
      (string) (len=9) "submitted",
      (string) (len=8) "approved",
      (string) (len=8) "rejected"
     },
     MaxProperties: (*int64)(<nil>),
     MinProperties: (*int64)(<nil>),
     Required: ([]string) <nil>,
     Items: (*spec.SchemaOrArray)(<nil>),
     AllOf: ([]spec.Schema) <nil>,
     OneOf: ([]spec.Schema) <nil>,
     AnyOf: ([]spec.Schema) <nil>,
     Not: (*spec.Schema)(<nil>),
     Properties: (map[string]spec.Schema) <nil>,
     AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
     PatternProperties: (map[string]spec.Schema) <nil>,
     Dependencies: (spec.Dependencies) <nil>,
     AdditionalItems: (*spec.SchemaOrBool)(<nil>),
     Definitions: (spec.Definitions) <nil>
    },
    SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
     Discriminator: (string) "",
     ReadOnly: (bool) false,
     XML: (*spec.XMLObject)(<nil>),
     ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
     Example: (interface {}) <nil>
    },
    ExtraProps: (map[string]interface {}) <nil>
   },
   (string) (len=19) "ResourceGradeLevels": (spec.Schema) {
    VendorExtensible: (spec.VendorExtensible) {
     Extensions: (spec.Extensions) <nil>
    },
    SchemaProps: (spec.SchemaProps) {
     ID: (string) "",
     Ref: (spec.Ref) ,
     Schema: (spec.SchemaURL) "",
     Description: (string) "",
     Type: (spec.StringOrArray) (len=1 cap=1) {
      (string) (len=6) "object"
     },
     Format: (string) "",
     Title: (string) "",
     Default: (interface {}) <nil>,
     Maximum: (*float64)(<nil>),
     ExclusiveMaximum: (bool) false,
     Minimum: (*float64)(<nil>),
     ExclusiveMinimum: (bool) false,
     MaxLength: (*int64)(<nil>),
     MinLength: (*int64)(<nil>),
     Pattern: (string) "",
     MaxItems: (*int64)(<nil>),
     MinItems: (*int64)(<nil>),
     UniqueItems: (bool) false,
     MultipleOf: (*float64)(<nil>),
     Enum: ([]interface {}) <nil>,
     MaxProperties: (*int64)(<nil>),
     MinProperties: (*int64)(<nil>),
     Required: ([]string) <nil>,
     Items: (*spec.SchemaOrArray)(<nil>),
     AllOf: ([]spec.Schema) <nil>,
     OneOf: ([]spec.Schema) <nil>,
     AnyOf: ([]spec.Schema) <nil>,
     Not: (*spec.Schema)(<nil>),
     Properties: (map[string]spec.Schema) (len=5) {
      (string) (len=2) "k2": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=7) "boolean"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=9) "threeFive": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=7) "boolean"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=8) "sixEight": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=7) "boolean"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=10) "nineTwelve": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=7) "boolean"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=5) "staff": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=7) "boolean"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      }
     },
     AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
     PatternProperties: (map[string]spec.Schema) <nil>,
     Dependencies: (spec.Dependencies) <nil>,
     AdditionalItems: (*spec.SchemaOrBool)(<nil>),
     Definitions: (spec.Definitions) <nil>
    },
    SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
     Discriminator: (string) "",
     ReadOnly: (bool) false,
     XML: (*spec.XMLObject)(<nil>),
     ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
     Example: (interface {}) <nil>
    },
    ExtraProps: (map[string]interface {}) <nil>
   },
   (string) (len=12) "SetDataRules": (spec.Schema) {
    VendorExtensible: (spec.VendorExtensible) {
     Extensions: (spec.Extensions) <nil>
    },
    SchemaProps: (spec.SchemaProps) {
     ID: (string) "",
     Ref: (spec.Ref) ,
     Schema: (spec.SchemaURL) "",
     Description: (string) "",
     Type: (spec.StringOrArray) (len=1 cap=1) {
      (string) (len=6) "object"
     },
     Format: (string) "",
     Title: (string) "",
     Default: (interface {}) <nil>,
     Maximum: (*float64)(<nil>),
     ExclusiveMaximum: (bool) false,
     Minimum: (*float64)(<nil>),
     ExclusiveMinimum: (bool) false,
     MaxLength: (*int64)(<nil>),
     MinLength: (*int64)(<nil>),
     Pattern: (string) "",
     MaxItems: (*int64)(<nil>),
     MinItems: (*int64)(<nil>),
     UniqueItems: (bool) false,
     MultipleOf: (*float64)(<nil>),
     Enum: ([]interface {}) <nil>,
     MaxProperties: (*int64)(<nil>),
     MinProperties: (*int64)(<nil>),
     Required: ([]string) <nil>,
     Items: (*spec.SchemaOrArray)(<nil>),
     AllOf: ([]spec.Schema) <nil>,
     OneOf: ([]spec.Schema) <nil>,
     AnyOf: ([]spec.Schema) <nil>,
     Not: (*spec.Schema)(<nil>),
     Properties: (map[string]spec.Schema) (len=1) {
      (string) (len=5) "rules": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=5) "array"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(0xc0009833c0)({
         Schema: (*spec.Schema)(0xc0002ca240)({
          VendorExtensible: (spec.VendorExtensible) {
           Extensions: (spec.Extensions) <nil>
          },
          SchemaProps: (spec.SchemaProps) {
           ID: (string) "",
           Ref: (spec.Ref) #/definitions/DataRule,
           Schema: (spec.SchemaURL) "",
           Description: (string) "",
           Type: (spec.StringOrArray) <nil>,
           Format: (string) "",
           Title: (string) "",
           Default: (interface {}) <nil>,
           Maximum: (*float64)(<nil>),
           ExclusiveMaximum: (bool) false,
           Minimum: (*float64)(<nil>),
           ExclusiveMinimum: (bool) false,
           MaxLength: (*int64)(<nil>),
           MinLength: (*int64)(<nil>),
           Pattern: (string) "",
           MaxItems: (*int64)(<nil>),
           MinItems: (*int64)(<nil>),
           UniqueItems: (bool) false,
           MultipleOf: (*float64)(<nil>),
           Enum: ([]interface {}) <nil>,
           MaxProperties: (*int64)(<nil>),
           MinProperties: (*int64)(<nil>),
           Required: ([]string) <nil>,
           Items: (*spec.SchemaOrArray)(<nil>),
           AllOf: ([]spec.Schema) <nil>,
           OneOf: ([]spec.Schema) <nil>,
           AnyOf: ([]spec.Schema) <nil>,
           Not: (*spec.Schema)(<nil>),
           Properties: (map[string]spec.Schema) <nil>,
           AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
           PatternProperties: (map[string]spec.Schema) <nil>,
           Dependencies: (spec.Dependencies) <nil>,
           AdditionalItems: (*spec.SchemaOrBool)(<nil>),
           Definitions: (spec.Definitions) <nil>
          },
          SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
           Discriminator: (string) "",
           ReadOnly: (bool) false,
           XML: (*spec.XMLObject)(<nil>),
           ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
           Example: (interface {}) <nil>
          },
          ExtraProps: (map[string]interface {}) <nil>
         }),
         Schemas: ([]spec.Schema) <nil>
        }),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      }
     },
     AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
     PatternProperties: (map[string]spec.Schema) <nil>,
     Dependencies: (spec.Dependencies) <nil>,
     AdditionalItems: (*spec.SchemaOrBool)(<nil>),
     Definitions: (spec.Definitions) <nil>
    },
    SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
     Discriminator: (string) "",
     ReadOnly: (bool) false,
     XML: (*spec.XMLObject)(<nil>),
     ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
     Example: (interface {}) <nil>
    },
    ExtraProps: (map[string]interface {}) <nil>
   },
   (string) (len=9) "ErrorCode": (spec.Schema) {
    VendorExtensible: (spec.VendorExtensible) {
     Extensions: (spec.Extensions) <nil>
    },
    SchemaProps: (spec.SchemaProps) {
     ID: (string) "",
     Ref: (spec.Ref) ,
     Schema: (spec.SchemaURL) "",
     Description: (string) (len=11) "Error Codes",
     Type: (spec.StringOrArray) (len=1 cap=1) {
      (string) (len=6) "string"
     },
     Format: (string) "",
     Title: (string) "",
     Default: (interface {}) <nil>,
     Maximum: (*float64)(<nil>),
     ExclusiveMaximum: (bool) false,
     Minimum: (*float64)(<nil>),
     ExclusiveMinimum: (bool) false,
     MaxLength: (*int64)(<nil>),
     MinLength: (*int64)(<nil>),
     Pattern: (string) "",
     MaxItems: (*int64)(<nil>),
     MinItems: (*int64)(<nil>),
     UniqueItems: (bool) false,
     MultipleOf: (*float64)(<nil>),
     Enum: ([]interface {}) (len=22 cap=28) {
      (string) (len=7) "Unknown",
      (string) (len=18) "AdminAlreadyExists",
      (string) (len=11) "AppNotFound",
      (string) (len=20) "DuplicateRedirectURI",
      (string) (len=18) "DuplicateShortname",
      (string) (len=25) "EmailExistsAsDistrictUser",
      (string) (len=17) "InvalidAccessTier",
      (string) (len=15) "InvalidCategory",
      (string) (len=12) "InvalidEmail",
      (string) (len=14) "InvalidIconURL",
      (string) (len=9) "InvalidID",
      (string) (len=14) "InvalidLogoURL",
      (string) (len=15) "InvalidPassword",
      (string) (len=18) "InvalidRedirectURI",
      (string) (len=12) "InvalidScope",
      (string) (len=22) "InvalidVersionSettings",
      (string) (len=17) "InvalidWebsiteURL",
      (string) (len=19) "LastAdminPermission",
      (string) (len=18) "OnboardingNotFound",
      (string) (len=28) "ScopeNotAllowedForAccessTier",
      (string) (len=16) "InvalidShortname",
      (string) (len=16) "InvalidAppSchema"
     },
     MaxProperties: (*int64)(<nil>),
     MinProperties: (*int64)(<nil>),
     Required: ([]string) <nil>,
     Items: (*spec.SchemaOrArray)(<nil>),
     AllOf: ([]spec.Schema) <nil>,
     OneOf: ([]spec.Schema) <nil>,
     AnyOf: ([]spec.Schema) <nil>,
     Not: (*spec.Schema)(<nil>),
     Properties: (map[string]spec.Schema) <nil>,
     AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
     PatternProperties: (map[string]spec.Schema) <nil>,
     Dependencies: (spec.Dependencies) <nil>,
     AdditionalItems: (*spec.SchemaOrBool)(<nil>),
     Definitions: (spec.Definitions) <nil>
    },
    SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
     Discriminator: (string) "",
     ReadOnly: (bool) false,
     XML: (*spec.XMLObject)(<nil>),
     ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
     Example: (interface {}) <nil>
    },
    ExtraProps: (map[string]interface {}) <nil>
   },
   (string) (len=24) "VerificationCodeResponse": (spec.Schema) {
    VendorExtensible: (spec.VendorExtensible) {
     Extensions: (spec.Extensions) <nil>
    },
    SchemaProps: (spec.SchemaProps) {
     ID: (string) "",
     Ref: (spec.Ref) ,
     Schema: (spec.SchemaURL) "",
     Description: (string) "",
     Type: (spec.StringOrArray) (len=1 cap=1) {
      (string) (len=6) "string"
     },
     Format: (string) "",
     Title: (string) "",
     Default: (interface {}) <nil>,
     Maximum: (*float64)(<nil>),
     ExclusiveMaximum: (bool) false,
     Minimum: (*float64)(<nil>),
     ExclusiveMinimum: (bool) false,
     MaxLength: (*int64)(<nil>),
     MinLength: (*int64)(<nil>),
     Pattern: (string) "",
     MaxItems: (*int64)(<nil>),
     MinItems: (*int64)(<nil>),
     UniqueItems: (bool) false,
     MultipleOf: (*float64)(<nil>),
     Enum: ([]interface {}) <nil>,
     MaxProperties: (*int64)(<nil>),
     MinProperties: (*int64)(<nil>),
     Required: ([]string) <nil>,
     Items: (*spec.SchemaOrArray)(<nil>),
     AllOf: ([]spec.Schema) <nil>,
     OneOf: ([]spec.Schema) <nil>,
     AnyOf: ([]spec.Schema) <nil>,
     Not: (*spec.Schema)(<nil>),
     Properties: (map[string]spec.Schema) <nil>,
     AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
     PatternProperties: (map[string]spec.Schema) <nil>,
     Dependencies: (spec.Dependencies) <nil>,
     AdditionalItems: (*spec.SchemaOrBool)(<nil>),
     Definitions: (spec.Definitions) <nil>
    },
    SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
     Discriminator: (string) "",
     ReadOnly: (bool) false,
     XML: (*spec.XMLObject)(<nil>),
     ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
     Example: (interface {}) <nil>
    },
    ExtraProps: (map[string]interface {}) <nil>
   },
   (string) (len=8) "DataRule": (spec.Schema) {
    VendorExtensible: (spec.VendorExtensible) {
     Extensions: (spec.Extensions) <nil>
    },
    SchemaProps: (spec.SchemaProps) {
     ID: (string) "",
     Ref: (spec.Ref) ,
     Schema: (spec.SchemaURL) "",
     Description: (string) (len=806) "DataRule represents a rule on district configured by an app. The results of the rule are displayed on the data warnings page. Requirements for Rule Validity: - id is auto-generated by the app service when a rule is first created - simple rules apply validation on a document by document basis for a single field. They must have field set and can have field_required, max_length and regex set. - uniqueness rules validate that a field is unique across the entire data set. They only have a field set - custom rules exist for a College Board special case and don't have any of the other fields set. Severity of Rule Type: - warn indicates data may be not correct, but failing records are passed as is to app. - remove indicates app will not work for failing records and they will not be passed on to the app.",
     Type: (spec.StringOrArray) (len=1 cap=1) {
      (string) (len=6) "object"
     },
     Format: (string) "",
     Title: (string) "",
     Default: (interface {}) <nil>,
     Maximum: (*float64)(<nil>),
     ExclusiveMaximum: (bool) false,
     Minimum: (*float64)(<nil>),
     ExclusiveMinimum: (bool) false,
     MaxLength: (*int64)(<nil>),
     MinLength: (*int64)(<nil>),
     Pattern: (string) "",
     MaxItems: (*int64)(<nil>),
     MinItems: (*int64)(<nil>),
     UniqueItems: (bool) false,
     MultipleOf: (*float64)(<nil>),
     Enum: ([]interface {}) <nil>,
     MaxProperties: (*int64)(<nil>),
     MinProperties: (*int64)(<nil>),
     Required: ([]string) <nil>,
     Items: (*spec.SchemaOrArray)(<nil>),
     AllOf: ([]spec.Schema) <nil>,
     OneOf: ([]spec.Schema) <nil>,
     AnyOf: ([]spec.Schema) <nil>,
     Not: (*spec.Schema)(<nil>),
     Properties: (map[string]spec.Schema) (len=10) {
      (string) (len=8) "severity": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) (len=2 cap=4) {
         (string) (len=4) "warn",
         (string) (len=6) "remove"
        },
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=8) "ruleType": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) (len=14 cap=19) {
         (string) (len=6) "simple",
         (string) (len=10) "uniqueness",
         (string) (len=6) "custom",
         (string) (len=16) "custom_dob_valid",
         (string) (len=16) "custom_dob_range",
         (string) (len=15) "dualenrollments",
         (string) (len=14) "hasenrollments",
         (string) (len=17) "uniqueenrollments",
         (string) (len=18) "hasstudentcontacts",
         (string) (len=12) "emptyschools",
         (string) (len=11) "hascontacts",
         (string) (len=14) "unlinkedadmins",
         (string) (len=24) "teacher_staff_uniqueness",
         (string) (len=16) "sectionhasschool"
        },
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=9) "maxLength": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=7) "integer"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=11) "description": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=13) "groupByFields": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=5) "array"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(0xc000983160)({
         Schema: (*spec.Schema)(0xc0002a8240)({
          VendorExtensible: (spec.VendorExtensible) {
           Extensions: (spec.Extensions) <nil>
          },
          SchemaProps: (spec.SchemaProps) {
           ID: (string) "",
           Ref: (spec.Ref) ,
           Schema: (spec.SchemaURL) "",
           Description: (string) "",
           Type: (spec.StringOrArray) (len=1 cap=1) {
            (string) (len=6) "string"
           },
           Format: (string) "",
           Title: (string) "",
           Default: (interface {}) <nil>,
           Maximum: (*float64)(<nil>),
           ExclusiveMaximum: (bool) false,
           Minimum: (*float64)(<nil>),
           ExclusiveMinimum: (bool) false,
           MaxLength: (*int64)(<nil>),
           MinLength: (*int64)(<nil>),
           Pattern: (string) "",
           MaxItems: (*int64)(<nil>),
           MinItems: (*int64)(<nil>),
           UniqueItems: (bool) false,
           MultipleOf: (*float64)(<nil>),
           Enum: ([]interface {}) <nil>,
           MaxProperties: (*int64)(<nil>),
           MinProperties: (*int64)(<nil>),
           Required: ([]string) <nil>,
           Items: (*spec.SchemaOrArray)(<nil>),
           AllOf: ([]spec.Schema) <nil>,
           OneOf: ([]spec.Schema) <nil>,
           AnyOf: ([]spec.Schema) <nil>,
           Not: (*spec.Schema)(<nil>),
           Properties: (map[string]spec.Schema) <nil>,
           AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
           PatternProperties: (map[string]spec.Schema) <nil>,
           Dependencies: (spec.Dependencies) <nil>,
           AdditionalItems: (*spec.SchemaOrBool)(<nil>),
           Definitions: (spec.Definitions) <nil>
          },
          SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
           Discriminator: (string) "",
           ReadOnly: (bool) false,
           XML: (*spec.XMLObject)(<nil>),
           ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
           Example: (interface {}) <nil>
          },
          ExtraProps: (map[string]interface {}) <nil>
         }),
         Schemas: ([]spec.Schema) <nil>
        }),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=2) "id": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=10) "collection": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) (len=9 cap=9) {
         (string) (len=8) "students",
         (string) (len=8) "teachers",
         (string) (len=7) "schools",
         (string) (len=8) "sections",
         (string) (len=15) "studentcontacts",
         (string) (len=12) "schooladmins",
         (string) (len=7) "courses",
         (string) (len=8) "contacts",
         (string) (len=5) "terms"
        },
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=5) "regex": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=5) "field": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=13) "fieldRequired": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=7) "boolean"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      }
     },
     AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
     PatternProperties: (map[string]spec.Schema) <nil>,
     Dependencies: (spec.Dependencies) <nil>,
     AdditionalItems: (*spec.SchemaOrBool)(<nil>),
     Definitions: (spec.Definitions) <nil>
    },
    SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
     Discriminator: (string) "",
     ReadOnly: (bool) false,
     XML: (*spec.XMLObject)(<nil>),
     ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
     Example: (interface {}) <nil>
    },
    ExtraProps: (map[string]interface {}) <nil>
   },
   (string) (len=15) "LibraryResource": (spec.Schema) {
    VendorExtensible: (spec.VendorExtensible) {
     Extensions: (spec.Extensions) <nil>
    },
    SchemaProps: (spec.SchemaProps) {
     ID: (string) "",
     Ref: (spec.Ref) ,
     Schema: (spec.SchemaURL) "",
     Description: (string) (len=40) "A resource to show in the Clever Library",
     Type: (spec.StringOrArray) (len=1 cap=1) {
      (string) (len=6) "object"
     },
     Format: (string) "",
     Title: (string) "",
     Default: (interface {}) <nil>,
     Maximum: (*float64)(<nil>),
     ExclusiveMaximum: (bool) false,
     Minimum: (*float64)(<nil>),
     ExclusiveMinimum: (bool) false,
     MaxLength: (*int64)(<nil>),
     MinLength: (*int64)(<nil>),
     Pattern: (string) "",
     MaxItems: (*int64)(<nil>),
     MinItems: (*int64)(<nil>),
     UniqueItems: (bool) false,
     MultipleOf: (*float64)(<nil>),
     Enum: ([]interface {}) <nil>,
     MaxProperties: (*int64)(<nil>),
     MinProperties: (*int64)(<nil>),
     Required: ([]string) <nil>,
     Items: (*spec.SchemaOrArray)(<nil>),
     AllOf: ([]spec.Schema) <nil>,
     OneOf: ([]spec.Schema) <nil>,
     AnyOf: ([]spec.Schema) <nil>,
     Not: (*spec.Schema)(<nil>),
     Properties: (map[string]spec.Schema) (len=31) {
      (string) (len=8) "featured": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=7) "integer"
        },
        Format: (string) (len=5) "int32",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=8) "insights": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) #/definitions/InsightsMetadata,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) <nil>,
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=23) "teacherSetupGuideStatus": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) #/definitions/TeacherSetupGuideStatus,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) <nil>,
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=8) "features": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) #/definitions/ResourceFeatures,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) <nil>,
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=18) "libraryIntegration": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) #/definitions/LibraryIntegrationType,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) <nil>,
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=13) "showInLibrary": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=7) "boolean"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=25) "marketingCollateralStatus": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) (len=1) {
         (string) (len=10) "x-nullable": (bool) true
        }
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) #/definitions/MarketingCollateralStatus,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) <nil>,
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=7) "pricing": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) #/definitions/ResourcePricing,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) <nil>,
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=12) "stripeUserID": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=14) "covidPromotion": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=2) "id": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=7) "iconURL": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=13) "bannerIconURL": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=10) "categories": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) #/definitions/ResourceCategories,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) <nil>,
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=12) "installCount": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=7) "integer"
        },
        Format: (string) (len=5) "int32",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=7) "devices": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) #/definitions/ResourceDevices,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) <nil>,
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=14) "certifications": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) #/definitions/ResourceCertifications,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) <nil>,
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=6) "tosURL": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=10) "searchTags": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=5) "array"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(0xc000b1e460)({
         Schema: (*spec.Schema)(0xc000b25200)({
          VendorExtensible: (spec.VendorExtensible) {
           Extensions: (spec.Extensions) <nil>
          },
          SchemaProps: (spec.SchemaProps) {
           ID: (string) "",
           Ref: (spec.Ref) ,
           Schema: (spec.SchemaURL) "",
           Description: (string) "",
           Type: (spec.StringOrArray) (len=1 cap=1) {
            (string) (len=6) "string"
           },
           Format: (string) "",
           Title: (string) "",
           Default: (interface {}) <nil>,
           Maximum: (*float64)(<nil>),
           ExclusiveMaximum: (bool) false,
           Minimum: (*float64)(<nil>),
           ExclusiveMinimum: (bool) false,
           MaxLength: (*int64)(<nil>),
           MinLength: (*int64)(<nil>),
           Pattern: (string) "",
           MaxItems: (*int64)(<nil>),
           MinItems: (*int64)(<nil>),
           UniqueItems: (bool) false,
           MultipleOf: (*float64)(<nil>),
           Enum: ([]interface {}) <nil>,
           MaxProperties: (*int64)(<nil>),
           MinProperties: (*int64)(<nil>),
           Required: ([]string) <nil>,
           Items: (*spec.SchemaOrArray)(<nil>),
           AllOf: ([]spec.Schema) <nil>,
           OneOf: ([]spec.Schema) <nil>,
           AnyOf: ([]spec.Schema) <nil>,
           Not: (*spec.Schema)(<nil>),
           Properties: (map[string]spec.Schema) <nil>,
           AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
           PatternProperties: (map[string]spec.Schema) <nil>,
           Dependencies: (spec.Dependencies) <nil>,
           AdditionalItems: (*spec.SchemaOrBool)(<nil>),
           Definitions: (spec.Definitions) <nil>
          },
          SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
           Discriminator: (string) "",
           ReadOnly: (bool) false,
           XML: (*spec.XMLObject)(<nil>),
           ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
           Example: (interface {}) <nil>
          },
          ExtraProps: (map[string]interface {}) <nil>
         }),
         Schemas: ([]spec.Schema) <nil>
        }),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=3) "url": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=5) "tiers": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) #/definitions/Tiers,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) <nil>,
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=16) "privacyPolicyURL": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=8) "cleverID": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=7) "tagline": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=11) "description": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=13) "appOnboarding": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) #/definitions/AppOnboarding,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) <nil>,
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=17) "teacherSetupGuide": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) #/definitions/TeacherSetupGuide,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) <nil>,
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=9) "shortname": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=4) "name": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=11) "gradeLevels": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) #/definitions/ResourceGradeLevels,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) <nil>,
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=21) "universalDSASignatory": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=7) "boolean"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      }
     },
     AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
     PatternProperties: (map[string]spec.Schema) <nil>,
     Dependencies: (spec.Dependencies) <nil>,
     AdditionalItems: (*spec.SchemaOrBool)(<nil>),
     Definitions: (spec.Definitions) <nil>
    },
    SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
     Discriminator: (string) "",
     ReadOnly: (bool) false,
     XML: (*spec.XMLObject)(<nil>),
     ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
     Example: (interface {}) <nil>
    },
    ExtraProps: (map[string]interface {}) <nil>
   },
   (string) (len=25) "MarketingCollateralStatus": (spec.Schema) {
    VendorExtensible: (spec.VendorExtensible) {
     Extensions: (spec.Extensions) <nil>
    },
    SchemaProps: (spec.SchemaProps) {
     ID: (string) "",
     Ref: (spec.Ref) ,
     Schema: (spec.SchemaURL) "",
     Description: (string) "",
     Type: (spec.StringOrArray) (len=1 cap=1) {
      (string) (len=6) "string"
     },
     Format: (string) "",
     Title: (string) "",
     Default: (interface {}) <nil>,
     Maximum: (*float64)(<nil>),
     ExclusiveMaximum: (bool) false,
     Minimum: (*float64)(<nil>),
     ExclusiveMinimum: (bool) false,
     MaxLength: (*int64)(<nil>),
     MinLength: (*int64)(<nil>),
     Pattern: (string) "",
     MaxItems: (*int64)(<nil>),
     MinItems: (*int64)(<nil>),
     UniqueItems: (bool) false,
     MultipleOf: (*float64)(<nil>),
     Enum: ([]interface {}) (len=3 cap=4) {
      (string) (len=10) "notStarted",
      (string) (len=7) "started",
      (string) (len=9) "completed"
     },
     MaxProperties: (*int64)(<nil>),
     MinProperties: (*int64)(<nil>),
     Required: ([]string) <nil>,
     Items: (*spec.SchemaOrArray)(<nil>),
     AllOf: ([]spec.Schema) <nil>,
     OneOf: ([]spec.Schema) <nil>,
     AnyOf: ([]spec.Schema) <nil>,
     Not: (*spec.Schema)(<nil>),
     Properties: (map[string]spec.Schema) <nil>,
     AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
     PatternProperties: (map[string]spec.Schema) <nil>,
     Dependencies: (spec.Dependencies) <nil>,
     AdditionalItems: (*spec.SchemaOrBool)(<nil>),
     Definitions: (spec.Definitions) <nil>
    },
    SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
     Discriminator: (string) "",
     ReadOnly: (bool) false,
     XML: (*spec.XMLObject)(<nil>),
     ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
     Example: (interface {}) <nil>
    },
    ExtraProps: (map[string]interface {}) <nil>
   },
   (string) (len=22) "ResourceCertifications": (spec.Schema) {
    VendorExtensible: (spec.VendorExtensible) {
     Extensions: (spec.Extensions) <nil>
    },
    SchemaProps: (spec.SchemaProps) {
     ID: (string) "",
     Ref: (spec.Ref) ,
     Schema: (spec.SchemaURL) "",
     Description: (string) "",
     Type: (spec.StringOrArray) (len=1 cap=1) {
      (string) (len=6) "object"
     },
     Format: (string) "",
     Title: (string) "",
     Default: (interface {}) <nil>,
     Maximum: (*float64)(<nil>),
     ExclusiveMaximum: (bool) false,
     Minimum: (*float64)(<nil>),
     ExclusiveMinimum: (bool) false,
     MaxLength: (*int64)(<nil>),
     MinLength: (*int64)(<nil>),
     Pattern: (string) "",
     MaxItems: (*int64)(<nil>),
     MinItems: (*int64)(<nil>),
     UniqueItems: (bool) false,
     MultipleOf: (*float64)(<nil>),
     Enum: ([]interface {}) <nil>,
     MaxProperties: (*int64)(<nil>),
     MinProperties: (*int64)(<nil>),
     Required: ([]string) <nil>,
     Items: (*spec.SchemaOrArray)(<nil>),
     AllOf: ([]spec.Schema) <nil>,
     OneOf: ([]spec.Schema) <nil>,
     AnyOf: ([]spec.Schema) <nil>,
     Not: (*spec.Schema)(<nil>),
     Properties: (map[string]spec.Schema) (len=4) {
      (string) (len=22) "student_privacy_pledge": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=7) "boolean"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=25) "commonsensemedia_reviewed": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=7) "boolean"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=15) "ikeepsafe_ferpa": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=7) "boolean"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=15) "ikeepsafe_coppa": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=7) "boolean"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      }
     },
     AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
     PatternProperties: (map[string]spec.Schema) <nil>,
     Dependencies: (spec.Dependencies) <nil>,
     AdditionalItems: (*spec.SchemaOrBool)(<nil>),
     Definitions: (spec.Definitions) <nil>
    },
    SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
     Discriminator: (string) "",
     ReadOnly: (bool) false,
     XML: (*spec.XMLObject)(<nil>),
     ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
     Example: (interface {}) <nil>
    },
    ExtraProps: (map[string]interface {}) <nil>
   },
   (string) (len=15) "ResourceFeature": (spec.Schema) {
    VendorExtensible: (spec.VendorExtensible) {
     Extensions: (spec.Extensions) <nil>
    },
    SchemaProps: (spec.SchemaProps) {
     ID: (string) "",
     Ref: (spec.Ref) ,
     Schema: (spec.SchemaURL) "",
     Description: (string) "",
     Type: (spec.StringOrArray) (len=1 cap=1) {
      (string) (len=6) "object"
     },
     Format: (string) "",
     Title: (string) "",
     Default: (interface {}) <nil>,
     Maximum: (*float64)(<nil>),
     ExclusiveMaximum: (bool) false,
     Minimum: (*float64)(<nil>),
     ExclusiveMinimum: (bool) false,
     MaxLength: (*int64)(<nil>),
     MinLength: (*int64)(<nil>),
     Pattern: (string) "",
     MaxItems: (*int64)(<nil>),
     MinItems: (*int64)(<nil>),
     UniqueItems: (bool) false,
     MultipleOf: (*float64)(<nil>),
     Enum: ([]interface {}) <nil>,
     MaxProperties: (*int64)(<nil>),
     MinProperties: (*int64)(<nil>),
     Required: ([]string) <nil>,
     Items: (*spec.SchemaOrArray)(<nil>),
     AllOf: ([]spec.Schema) <nil>,
     OneOf: ([]spec.Schema) <nil>,
     AnyOf: ([]spec.Schema) <nil>,
     Not: (*spec.Schema)(<nil>),
     Properties: (map[string]spec.Schema) (len=2) {
      (string) (len=13) "screenshotURL": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=11) "description": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      }
     },
     AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
     PatternProperties: (map[string]spec.Schema) <nil>,
     Dependencies: (spec.Dependencies) <nil>,
     AdditionalItems: (*spec.SchemaOrBool)(<nil>),
     Definitions: (spec.Definitions) <nil>
    },
    SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
     Discriminator: (string) "",
     ReadOnly: (bool) false,
     XML: (*spec.XMLObject)(<nil>),
     ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
     Example: (interface {}) <nil>
    },
    ExtraProps: (map[string]interface {}) <nil>
   },
   (string) (len=17) "TrackingWhitelist": (spec.Schema) {
    VendorExtensible: (spec.VendorExtensible) {
     Extensions: (spec.Extensions) <nil>
    },
    SchemaProps: (spec.SchemaProps) {
     ID: (string) "",
     Ref: (spec.Ref) ,
     Schema: (spec.SchemaURL) "",
     Description: (string) "",
     Type: (spec.StringOrArray) (len=1 cap=1) {
      (string) (len=6) "object"
     },
     Format: (string) "",
     Title: (string) "",
     Default: (interface {}) <nil>,
     Maximum: (*float64)(<nil>),
     ExclusiveMaximum: (bool) false,
     Minimum: (*float64)(<nil>),
     ExclusiveMinimum: (bool) false,
     MaxLength: (*int64)(<nil>),
     MinLength: (*int64)(<nil>),
     Pattern: (string) "",
     MaxItems: (*int64)(<nil>),
     MinItems: (*int64)(<nil>),
     UniqueItems: (bool) false,
     MultipleOf: (*float64)(<nil>),
     Enum: ([]interface {}) <nil>,
     MaxProperties: (*int64)(<nil>),
     MinProperties: (*int64)(<nil>),
     Required: ([]string) <nil>,
     Items: (*spec.SchemaOrArray)(<nil>),
     AllOf: ([]spec.Schema) <nil>,
     OneOf: ([]spec.Schema) <nil>,
     AnyOf: ([]spec.Schema) <nil>,
     Not: (*spec.Schema)(<nil>),
     Properties: (map[string]spec.Schema) (len=3) {
      (string) (len=14) "enableTracking": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=7) "boolean"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=8) "hideInUI": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=7) "boolean"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=11) "urlMatchers": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=5) "array"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(0xc0003c7180)({
         Schema: (*spec.Schema)(0xc000b09d40)({
          VendorExtensible: (spec.VendorExtensible) {
           Extensions: (spec.Extensions) <nil>
          },
          SchemaProps: (spec.SchemaProps) {
           ID: (string) "",
           Ref: (spec.Ref) ,
           Schema: (spec.SchemaURL) "",
           Description: (string) "",
           Type: (spec.StringOrArray) (len=1 cap=1) {
            (string) (len=6) "string"
           },
           Format: (string) "",
           Title: (string) "",
           Default: (interface {}) <nil>,
           Maximum: (*float64)(<nil>),
           ExclusiveMaximum: (bool) false,
           Minimum: (*float64)(<nil>),
           ExclusiveMinimum: (bool) false,
           MaxLength: (*int64)(<nil>),
           MinLength: (*int64)(<nil>),
           Pattern: (string) "",
           MaxItems: (*int64)(<nil>),
           MinItems: (*int64)(<nil>),
           UniqueItems: (bool) false,
           MultipleOf: (*float64)(<nil>),
           Enum: ([]interface {}) <nil>,
           MaxProperties: (*int64)(<nil>),
           MinProperties: (*int64)(<nil>),
           Required: ([]string) <nil>,
           Items: (*spec.SchemaOrArray)(<nil>),
           AllOf: ([]spec.Schema) <nil>,
           OneOf: ([]spec.Schema) <nil>,
           AnyOf: ([]spec.Schema) <nil>,
           Not: (*spec.Schema)(<nil>),
           Properties: (map[string]spec.Schema) <nil>,
           AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
           PatternProperties: (map[string]spec.Schema) <nil>,
           Dependencies: (spec.Dependencies) <nil>,
           AdditionalItems: (*spec.SchemaOrBool)(<nil>),
           Definitions: (spec.Definitions) <nil>
          },
          SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
           Discriminator: (string) "",
           ReadOnly: (bool) false,
           XML: (*spec.XMLObject)(<nil>),
           ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
           Example: (interface {}) <nil>
          },
          ExtraProps: (map[string]interface {}) <nil>
         }),
         Schemas: ([]spec.Schema) <nil>
        }),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      }
     },
     AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
     PatternProperties: (map[string]spec.Schema) <nil>,
     Dependencies: (spec.Dependencies) <nil>,
     AdditionalItems: (*spec.SchemaOrBool)(<nil>),
     Definitions: (spec.Definitions) <nil>
    },
    SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
     Discriminator: (string) "",
     ReadOnly: (bool) false,
     XML: (*spec.XMLObject)(<nil>),
     ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
     Example: (interface {}) <nil>
    },
    ExtraProps: (map[string]interface {}) <nil>
   },
   (string) (len=18) "ResourceCategories": (spec.Schema) {
    VendorExtensible: (spec.VendorExtensible) {
     Extensions: (spec.Extensions) <nil>
    },
    SchemaProps: (spec.SchemaProps) {
     ID: (string) "",
     Ref: (spec.Ref) ,
     Schema: (spec.SchemaURL) "",
     Description: (string) "",
     Type: (spec.StringOrArray) (len=1 cap=1) {
      (string) (len=6) "object"
     },
     Format: (string) "",
     Title: (string) "",
     Default: (interface {}) <nil>,
     Maximum: (*float64)(<nil>),
     ExclusiveMaximum: (bool) false,
     Minimum: (*float64)(<nil>),
     ExclusiveMinimum: (bool) false,
     MaxLength: (*int64)(<nil>),
     MinLength: (*int64)(<nil>),
     Pattern: (string) "",
     MaxItems: (*int64)(<nil>),
     MinItems: (*int64)(<nil>),
     UniqueItems: (bool) false,
     MultipleOf: (*float64)(<nil>),
     Enum: ([]interface {}) <nil>,
     MaxProperties: (*int64)(<nil>),
     MinProperties: (*int64)(<nil>),
     Required: ([]string) <nil>,
     Items: (*spec.SchemaOrArray)(<nil>),
     AllOf: ([]spec.Schema) <nil>,
     OneOf: ([]spec.Schema) <nil>,
     AnyOf: ([]spec.Schema) <nil>,
     Not: (*spec.Schema)(<nil>),
     Properties: (map[string]spec.Schema) (len=10) {
      (string) (len=7) "english": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=7) "boolean"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=14) "social_studies": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=7) "boolean"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=10) "assessment": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=7) "boolean"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=20) "classroom_management": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=7) "boolean"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=9) "authoring": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=7) "boolean"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=5) "other": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=7) "boolean"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=4) "math": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=7) "boolean"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=7) "science": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=7) "boolean"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=10) "technology": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=7) "boolean"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=12) "presentation": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=7) "boolean"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      }
     },
     AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
     PatternProperties: (map[string]spec.Schema) <nil>,
     Dependencies: (spec.Dependencies) <nil>,
     AdditionalItems: (*spec.SchemaOrBool)(<nil>),
     Definitions: (spec.Definitions) <nil>
    },
    SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
     Discriminator: (string) "",
     ReadOnly: (bool) false,
     XML: (*spec.XMLObject)(<nil>),
     ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
     Example: (interface {}) <nil>
    },
    ExtraProps: (map[string]interface {}) <nil>
   },
   (string) (len=23) "TeacherSetupGuideStatus": (spec.Schema) {
    VendorExtensible: (spec.VendorExtensible) {
     Extensions: (spec.Extensions) <nil>
    },
    SchemaProps: (spec.SchemaProps) {
     ID: (string) "",
     Ref: (spec.Ref) ,
     Schema: (spec.SchemaURL) "",
     Description: (string) "",
     Type: (spec.StringOrArray) (len=1 cap=1) {
      (string) (len=6) "string"
     },
     Format: (string) "",
     Title: (string) "",
     Default: (interface {}) <nil>,
     Maximum: (*float64)(<nil>),
     ExclusiveMaximum: (bool) false,
     Minimum: (*float64)(<nil>),
     ExclusiveMinimum: (bool) false,
     MaxLength: (*int64)(<nil>),
     MinLength: (*int64)(<nil>),
     Pattern: (string) "",
     MaxItems: (*int64)(<nil>),
     MinItems: (*int64)(<nil>),
     UniqueItems: (bool) false,
     MultipleOf: (*float64)(<nil>),
     Enum: ([]interface {}) (len=3 cap=4) {
      (string) (len=10) "notStarted",
      (string) (len=7) "started",
      (string) (len=9) "completed"
     },
     MaxProperties: (*int64)(<nil>),
     MinProperties: (*int64)(<nil>),
     Required: ([]string) <nil>,
     Items: (*spec.SchemaOrArray)(<nil>),
     AllOf: ([]spec.Schema) <nil>,
     OneOf: ([]spec.Schema) <nil>,
     AnyOf: ([]spec.Schema) <nil>,
     Not: (*spec.Schema)(<nil>),
     Properties: (map[string]spec.Schema) <nil>,
     AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
     PatternProperties: (map[string]spec.Schema) <nil>,
     Dependencies: (spec.Dependencies) <nil>,
     AdditionalItems: (*spec.SchemaOrBool)(<nil>),
     Definitions: (spec.Definitions) <nil>
    },
    SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
     Discriminator: (string) "",
     ReadOnly: (bool) false,
     XML: (*spec.XMLObject)(<nil>),
     ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
     Example: (interface {}) <nil>
    },
    ExtraProps: (map[string]interface {}) <nil>
   },
   (string) (len=23) "VerifyAdminEmailRequest": (spec.Schema) {
    VendorExtensible: (spec.VendorExtensible) {
     Extensions: (spec.Extensions) <nil>
    },
    SchemaProps: (spec.SchemaProps) {
     ID: (string) "",
     Ref: (spec.Ref) ,
     Schema: (spec.SchemaURL) "",
     Description: (string) "",
     Type: (spec.StringOrArray) (len=1 cap=1) {
      (string) (len=6) "object"
     },
     Format: (string) "",
     Title: (string) "",
     Default: (interface {}) <nil>,
     Maximum: (*float64)(<nil>),
     ExclusiveMaximum: (bool) false,
     Minimum: (*float64)(<nil>),
     ExclusiveMinimum: (bool) false,
     MaxLength: (*int64)(<nil>),
     MinLength: (*int64)(<nil>),
     Pattern: (string) "",
     MaxItems: (*int64)(<nil>),
     MinItems: (*int64)(<nil>),
     UniqueItems: (bool) false,
     MultipleOf: (*float64)(<nil>),
     Enum: ([]interface {}) <nil>,
     MaxProperties: (*int64)(<nil>),
     MinProperties: (*int64)(<nil>),
     Required: ([]string) <nil>,
     Items: (*spec.SchemaOrArray)(<nil>),
     AllOf: ([]spec.Schema) <nil>,
     OneOf: ([]spec.Schema) <nil>,
     AnyOf: ([]spec.Schema) <nil>,
     Not: (*spec.Schema)(<nil>),
     Properties: (map[string]spec.Schema) (len=1) {
      (string) (len=5) "email": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      }
     },
     AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
     PatternProperties: (map[string]spec.Schema) <nil>,
     Dependencies: (spec.Dependencies) <nil>,
     AdditionalItems: (*spec.SchemaOrBool)(<nil>),
     Definitions: (spec.Definitions) <nil>
    },
    SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
     Discriminator: (string) "",
     ReadOnly: (bool) false,
     XML: (*spec.XMLObject)(<nil>),
     ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
     Example: (interface {}) <nil>
    },
    ExtraProps: (map[string]interface {}) <nil>
   },
   (string) (len=13) "InternalError": (spec.Schema) {
    VendorExtensible: (spec.VendorExtensible) {
     Extensions: (spec.Extensions) <nil>
    },
    SchemaProps: (spec.SchemaProps) {
     ID: (string) "",
     Ref: (spec.Ref) ,
     Schema: (spec.SchemaURL) "",
     Description: (string) "",
     Type: (spec.StringOrArray) (len=1 cap=1) {
      (string) (len=6) "object"
     },
     Format: (string) "",
     Title: (string) "",
     Default: (interface {}) <nil>,
     Maximum: (*float64)(<nil>),
     ExclusiveMaximum: (bool) false,
     Minimum: (*float64)(<nil>),
     ExclusiveMinimum: (bool) false,
     MaxLength: (*int64)(<nil>),
     MinLength: (*int64)(<nil>),
     Pattern: (string) "",
     MaxItems: (*int64)(<nil>),
     MinItems: (*int64)(<nil>),
     UniqueItems: (bool) false,
     MultipleOf: (*float64)(<nil>),
     Enum: ([]interface {}) <nil>,
     MaxProperties: (*int64)(<nil>),
     MinProperties: (*int64)(<nil>),
     Required: ([]string) <nil>,
     Items: (*spec.SchemaOrArray)(<nil>),
     AllOf: ([]spec.Schema) <nil>,
     OneOf: ([]spec.Schema) <nil>,
     AnyOf: ([]spec.Schema) <nil>,
     Not: (*spec.Schema)(<nil>),
     Properties: (map[string]spec.Schema) (len=1) {
      (string) (len=7) "message": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      }
     },
     AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
     PatternProperties: (map[string]spec.Schema) <nil>,
     Dependencies: (spec.Dependencies) <nil>,
     AdditionalItems: (*spec.SchemaOrBool)(<nil>),
     Definitions: (spec.Definitions) <nil>
    },
    SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
     Discriminator: (string) "",
     ReadOnly: (bool) false,
     XML: (*spec.XMLObject)(<nil>),
     ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
     Example: (interface {}) <nil>
    },
    ExtraProps: (map[string]interface {}) <nil>
   },
   (string) (len=10) "BadRequest": (spec.Schema) {
    VendorExtensible: (spec.VendorExtensible) {
     Extensions: (spec.Extensions) <nil>
    },
    SchemaProps: (spec.SchemaProps) {
     ID: (string) "",
     Ref: (spec.Ref) ,
     Schema: (spec.SchemaURL) "",
     Description: (string) "",
     Type: (spec.StringOrArray) (len=1 cap=1) {
      (string) (len=6) "object"
     },
     Format: (string) "",
     Title: (string) "",
     Default: (interface {}) <nil>,
     Maximum: (*float64)(<nil>),
     ExclusiveMaximum: (bool) false,
     Minimum: (*float64)(<nil>),
     ExclusiveMinimum: (bool) false,
     MaxLength: (*int64)(<nil>),
     MinLength: (*int64)(<nil>),
     Pattern: (string) "",
     MaxItems: (*int64)(<nil>),
     MinItems: (*int64)(<nil>),
     UniqueItems: (bool) false,
     MultipleOf: (*float64)(<nil>),
     Enum: ([]interface {}) <nil>,
     MaxProperties: (*int64)(<nil>),
     MinProperties: (*int64)(<nil>),
     Required: ([]string) <nil>,
     Items: (*spec.SchemaOrArray)(<nil>),
     AllOf: ([]spec.Schema) <nil>,
     OneOf: ([]spec.Schema) <nil>,
     AnyOf: ([]spec.Schema) <nil>,
     Not: (*spec.Schema)(<nil>),
     Properties: (map[string]spec.Schema) (len=2) {
      (string) (len=7) "message": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=4) "code": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) #/definitions/ErrorCode,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) <nil>,
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      }
     },
     AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
     PatternProperties: (map[string]spec.Schema) <nil>,
     Dependencies: (spec.Dependencies) <nil>,
     AdditionalItems: (*spec.SchemaOrBool)(<nil>),
     Definitions: (spec.Definitions) <nil>
    },
    SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
     Discriminator: (string) "",
     ReadOnly: (bool) false,
     XML: (*spec.XMLObject)(<nil>),
     ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
     Example: (interface {}) <nil>
    },
    ExtraProps: (map[string]interface {}) <nil>
   },
   (string) (len=11) "RedirectUri": (spec.Schema) {
    VendorExtensible: (spec.VendorExtensible) {
     Extensions: (spec.Extensions) <nil>
    },
    SchemaProps: (spec.SchemaProps) {
     ID: (string) "",
     Ref: (spec.Ref) ,
     Schema: (spec.SchemaURL) "",
     Description: (string) (len=77) "Redirect URIs specify where codes and tokens should be sent in an OAuth flow.",
     Type: (spec.StringOrArray) (len=1 cap=1) {
      (string) (len=6) "object"
     },
     Format: (string) "",
     Title: (string) "",
     Default: (interface {}) <nil>,
     Maximum: (*float64)(<nil>),
     ExclusiveMaximum: (bool) false,
     Minimum: (*float64)(<nil>),
     ExclusiveMinimum: (bool) false,
     MaxLength: (*int64)(<nil>),
     MinLength: (*int64)(<nil>),
     Pattern: (string) "",
     MaxItems: (*int64)(<nil>),
     MinItems: (*int64)(<nil>),
     UniqueItems: (bool) false,
     MultipleOf: (*float64)(<nil>),
     Enum: ([]interface {}) <nil>,
     MaxProperties: (*int64)(<nil>),
     MinProperties: (*int64)(<nil>),
     Required: ([]string) <nil>,
     Items: (*spec.SchemaOrArray)(<nil>),
     AllOf: ([]spec.Schema) <nil>,
     OneOf: ([]spec.Schema) <nil>,
     AnyOf: ([]spec.Schema) <nil>,
     Not: (*spec.Schema)(<nil>),
     Properties: (map[string]spec.Schema) (len=2) {
      (string) (len=3) "uri": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=4) "tags": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) (len=107) "Tags describe the purpose of the redirect URI, to distinguish it from other redirect URIs for the platform.",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=5) "array"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(0xc000a816a0)({
         Schema: (*spec.Schema)(0xc000ab4480)({
          VendorExtensible: (spec.VendorExtensible) {
           Extensions: (spec.Extensions) <nil>
          },
          SchemaProps: (spec.SchemaProps) {
           ID: (string) "",
           Ref: (spec.Ref) ,
           Schema: (spec.SchemaURL) "",
           Description: (string) "",
           Type: (spec.StringOrArray) (len=1 cap=1) {
            (string) (len=6) "string"
           },
           Format: (string) "",
           Title: (string) "",
           Default: (interface {}) <nil>,
           Maximum: (*float64)(<nil>),
           ExclusiveMaximum: (bool) false,
           Minimum: (*float64)(<nil>),
           ExclusiveMinimum: (bool) false,
           MaxLength: (*int64)(<nil>),
           MinLength: (*int64)(<nil>),
           Pattern: (string) "",
           MaxItems: (*int64)(<nil>),
           MinItems: (*int64)(<nil>),
           UniqueItems: (bool) false,
           MultipleOf: (*float64)(<nil>),
           Enum: ([]interface {}) <nil>,
           MaxProperties: (*int64)(<nil>),
           MinProperties: (*int64)(<nil>),
           Required: ([]string) <nil>,
           Items: (*spec.SchemaOrArray)(<nil>),
           AllOf: ([]spec.Schema) <nil>,
           OneOf: ([]spec.Schema) <nil>,
           AnyOf: ([]spec.Schema) <nil>,
           Not: (*spec.Schema)(<nil>),
           Properties: (map[string]spec.Schema) <nil>,
           AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
           PatternProperties: (map[string]spec.Schema) <nil>,
           Dependencies: (spec.Dependencies) <nil>,
           AdditionalItems: (*spec.SchemaOrBool)(<nil>),
           Definitions: (spec.Definitions) <nil>
          },
          SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
           Discriminator: (string) "",
           ReadOnly: (bool) false,
           XML: (*spec.XMLObject)(<nil>),
           ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
           Example: (interface {}) <nil>
          },
          ExtraProps: (map[string]interface {}) <nil>
         }),
         Schemas: ([]spec.Schema) <nil>
        }),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      }
     },
     AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
     PatternProperties: (map[string]spec.Schema) <nil>,
     Dependencies: (spec.Dependencies) <nil>,
     AdditionalItems: (*spec.SchemaOrBool)(<nil>),
     Definitions: (spec.Definitions) <nil>
    },
    SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
     Discriminator: (string) "",
     ReadOnly: (bool) false,
     XML: (*spec.XMLObject)(<nil>),
     ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
     Example: (interface {}) <nil>
    },
    ExtraProps: (map[string]interface {}) <nil>
   },
   (string) (len=20) "PatchPlatformRequest": (spec.Schema) {
    VendorExtensible: (spec.VendorExtensible) {
     Extensions: (spec.Extensions) <nil>
    },
    SchemaProps: (spec.SchemaProps) {
     ID: (string) "",
     Ref: (spec.Ref) ,
     Schema: (spec.SchemaURL) "",
     Description: (string) (len=32) "Used for an update to a platform",
     Type: (spec.StringOrArray) (len=1 cap=1) {
      (string) (len=6) "object"
     },
     Format: (string) "",
     Title: (string) "",
     Default: (interface {}) <nil>,
     Maximum: (*float64)(<nil>),
     ExclusiveMaximum: (bool) false,
     Minimum: (*float64)(<nil>),
     ExclusiveMinimum: (bool) false,
     MaxLength: (*int64)(<nil>),
     MinLength: (*int64)(<nil>),
     Pattern: (string) "",
     MaxItems: (*int64)(<nil>),
     MinItems: (*int64)(<nil>),
     UniqueItems: (bool) false,
     MultipleOf: (*float64)(<nil>),
     Enum: ([]interface {}) <nil>,
     MaxProperties: (*int64)(<nil>),
     MinProperties: (*int64)(<nil>),
     Required: ([]string) <nil>,
     Items: (*spec.SchemaOrArray)(<nil>),
     AllOf: ([]spec.Schema) <nil>,
     OneOf: ([]spec.Schema) <nil>,
     AnyOf: ([]spec.Schema) <nil>,
     Not: (*spec.Schema)(<nil>),
     Properties: (map[string]spec.Schema) (len=2) {
      (string) (len=12) "redirectUris": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) (len=1) {
         (string) (len=10) "x-nullable": (bool) true
        }
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=5) "array"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(0xc000a81b00)({
         Schema: (*spec.Schema)(0xc000abe480)({
          VendorExtensible: (spec.VendorExtensible) {
           Extensions: (spec.Extensions) <nil>
          },
          SchemaProps: (spec.SchemaProps) {
           ID: (string) "",
           Ref: (spec.Ref) #/definitions/RedirectUri,
           Schema: (spec.SchemaURL) "",
           Description: (string) "",
           Type: (spec.StringOrArray) <nil>,
           Format: (string) "",
           Title: (string) "",
           Default: (interface {}) <nil>,
           Maximum: (*float64)(<nil>),
           ExclusiveMaximum: (bool) false,
           Minimum: (*float64)(<nil>),
           ExclusiveMinimum: (bool) false,
           MaxLength: (*int64)(<nil>),
           MinLength: (*int64)(<nil>),
           Pattern: (string) "",
           MaxItems: (*int64)(<nil>),
           MinItems: (*int64)(<nil>),
           UniqueItems: (bool) false,
           MultipleOf: (*float64)(<nil>),
           Enum: ([]interface {}) <nil>,
           MaxProperties: (*int64)(<nil>),
           MinProperties: (*int64)(<nil>),
           Required: ([]string) <nil>,
           Items: (*spec.SchemaOrArray)(<nil>),
           AllOf: ([]spec.Schema) <nil>,
           OneOf: ([]spec.Schema) <nil>,
           AnyOf: ([]spec.Schema) <nil>,
           Not: (*spec.Schema)(<nil>),
           Properties: (map[string]spec.Schema) <nil>,
           AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
           PatternProperties: (map[string]spec.Schema) <nil>,
           Dependencies: (spec.Dependencies) <nil>,
           AdditionalItems: (*spec.SchemaOrBool)(<nil>),
           Definitions: (spec.Definitions) <nil>
          },
          SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
           Discriminator: (string) "",
           ReadOnly: (bool) false,
           XML: (*spec.XMLObject)(<nil>),
           ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
           Example: (interface {}) <nil>
          },
          ExtraProps: (map[string]interface {}) <nil>
         }),
         Schemas: ([]spec.Schema) <nil>
        }),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=8) "disabled": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=7) "boolean"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      }
     },
     AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
     PatternProperties: (map[string]spec.Schema) <nil>,
     Dependencies: (spec.Dependencies) <nil>,
     AdditionalItems: (*spec.SchemaOrBool)(<nil>),
     Definitions: (spec.Definitions) <nil>
    },
    SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
     Discriminator: (string) "",
     ReadOnly: (bool) false,
     XML: (*spec.XMLObject)(<nil>),
     ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
     Example: (interface {}) <nil>
    },
    ExtraProps: (map[string]interface {}) <nil>
   },
   (string) (len=27) "PatchLibraryResourceRequest": (spec.Schema) {
    VendorExtensible: (spec.VendorExtensible) {
     Extensions: (spec.Extensions) <nil>
    },
    SchemaProps: (spec.SchemaProps) {
     ID: (string) "",
     Ref: (spec.Ref) ,
     Schema: (spec.SchemaURL) "",
     Description: (string) "",
     Type: (spec.StringOrArray) (len=1 cap=1) {
      (string) (len=6) "object"
     },
     Format: (string) "",
     Title: (string) "",
     Default: (interface {}) <nil>,
     Maximum: (*float64)(<nil>),
     ExclusiveMaximum: (bool) false,
     Minimum: (*float64)(<nil>),
     ExclusiveMinimum: (bool) false,
     MaxLength: (*int64)(<nil>),
     MinLength: (*int64)(<nil>),
     Pattern: (string) "",
     MaxItems: (*int64)(<nil>),
     MinItems: (*int64)(<nil>),
     UniqueItems: (bool) false,
     MultipleOf: (*float64)(<nil>),
     Enum: ([]interface {}) <nil>,
     MaxProperties: (*int64)(<nil>),
     MinProperties: (*int64)(<nil>),
     Required: ([]string) <nil>,
     Items: (*spec.SchemaOrArray)(<nil>),
     AllOf: ([]spec.Schema) <nil>,
     OneOf: ([]spec.Schema) <nil>,
     AnyOf: ([]spec.Schema) <nil>,
     Not: (*spec.Schema)(<nil>),
     Properties: (map[string]spec.Schema) (len=29) {
      (string) (len=8) "featured": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) (len=1) {
         (string) (len=10) "x-nullable": (bool) true
        }
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=7) "integer"
        },
        Format: (string) (len=5) "int32",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=12) "installCount": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) (len=1) {
         (string) (len=10) "x-nullable": (bool) true
        }
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=7) "integer"
        },
        Format: (string) (len=5) "int32",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=9) "shortname": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) (len=1) {
         (string) (len=10) "x-nullable": (bool) true
        }
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(0xc000b0a808)(1),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=10) "categories": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) (len=1) {
         (string) (len=10) "x-nullable": (bool) true
        }
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) #/definitions/ResourceCategories,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) <nil>,
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=11) "description": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) (len=1) {
         (string) (len=10) "x-nullable": (bool) true
        }
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(0xc000b52110)(1),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=25) "marketingCollateralStatus": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) (len=1) {
         (string) (len=10) "x-nullable": (bool) true
        }
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) #/definitions/MarketingCollateralStatus,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) <nil>,
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=23) "teacherSetupGuideStatus": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) (len=1) {
         (string) (len=10) "x-nullable": (bool) true
        }
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) #/definitions/TeacherSetupGuideStatus,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) <nil>,
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=7) "devices": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) (len=1) {
         (string) (len=10) "x-nullable": (bool) true
        }
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) #/definitions/ResourceDevices,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) <nil>,
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=13) "showInLibrary": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) (len=1) {
         (string) (len=10) "x-nullable": (bool) true
        }
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=7) "boolean"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=7) "tagline": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) (len=1) {
         (string) (len=10) "x-nullable": (bool) true
        }
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(0xc000b520b0)(1),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=14) "certifications": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) (len=1) {
         (string) (len=10) "x-nullable": (bool) true
        }
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) #/definitions/ResourceCertifications,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) <nil>,
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=6) "tosURL": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) (len=1) {
         (string) (len=10) "x-nullable": (bool) true
        }
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(0xc000b52410)(1),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=14) "covidPromotion": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) (len=1) {
         (string) (len=10) "x-nullable": (bool) true
        }
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(0xc000b0a2e8)(1),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=8) "cleverID": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) (len=1) {
         (string) (len=10) "x-nullable": (bool) true
        }
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(0xc000b0a870)(1),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=4) "name": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) (len=1) {
         (string) (len=10) "x-nullable": (bool) true
        }
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(0xc000b52058)(1),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=7) "iconURL": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) (len=1) {
         (string) (len=10) "x-nullable": (bool) true
        }
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(0xc000b521d0)(1),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=17) "teacherSetupGuide": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) (len=1) {
         (string) (len=10) "x-nullable": (bool) true
        }
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) #/definitions/TeacherSetupGuide,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) <nil>,
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=8) "insights": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) (len=1) {
         (string) (len=10) "x-nullable": (bool) true
        }
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) #/definitions/InsightsMetadata,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) <nil>,
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=13) "bannerIconURL": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) (len=1) {
         (string) (len=10) "x-nullable": (bool) true
        }
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(0xc000b52230)(1),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=16) "privacyPolicyURL": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) (len=1) {
         (string) (len=10) "x-nullable": (bool) true
        }
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(0xc000b52470)(1),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=18) "libraryIntegration": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) (len=1) {
         (string) (len=10) "x-nullable": (bool) true
        }
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) #/definitions/LibraryIntegrationType,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) <nil>,
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=13) "appOnboarding": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) (len=1) {
         (string) (len=10) "x-nullable": (bool) true
        }
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) #/definitions/AppOnboarding,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) <nil>,
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=21) "universalDSASignatory": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) (len=1) {
         (string) (len=10) "x-nullable": (bool) true
        }
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=7) "boolean"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=3) "url": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) (len=1) {
         (string) (len=10) "x-nullable": (bool) true
        }
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(0xc000b52178)(1),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=8) "features": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) (len=1) {
         (string) (len=10) "x-nullable": (bool) true
        }
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) #/definitions/ResourceFeatures,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) <nil>,
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=12) "stripeUserID": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=10) "searchTags": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) (len=1) {
         (string) (len=10) "x-nullable": (bool) true
        }
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=5) "array"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(0xc000b0a0f0)(10),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) true,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(0xc000b1e0c0)({
         Schema: (*spec.Schema)(0xc000b25680)({
          VendorExtensible: (spec.VendorExtensible) {
           Extensions: (spec.Extensions) <nil>
          },
          SchemaProps: (spec.SchemaProps) {
           ID: (string) "",
           Ref: (spec.Ref) ,
           Schema: (spec.SchemaURL) "",
           Description: (string) "",
           Type: (spec.StringOrArray) (len=1 cap=1) {
            (string) (len=6) "string"
           },
           Format: (string) "",
           Title: (string) "",
           Default: (interface {}) <nil>,
           Maximum: (*float64)(<nil>),
           ExclusiveMaximum: (bool) false,
           Minimum: (*float64)(<nil>),
           ExclusiveMinimum: (bool) false,
           MaxLength: (*int64)(<nil>),
           MinLength: (*int64)(<nil>),
           Pattern: (string) "",
           MaxItems: (*int64)(<nil>),
           MinItems: (*int64)(<nil>),
           UniqueItems: (bool) false,
           MultipleOf: (*float64)(<nil>),
           Enum: ([]interface {}) <nil>,
           MaxProperties: (*int64)(<nil>),
           MinProperties: (*int64)(<nil>),
           Required: ([]string) <nil>,
           Items: (*spec.SchemaOrArray)(<nil>),
           AllOf: ([]spec.Schema) <nil>,
           OneOf: ([]spec.Schema) <nil>,
           AnyOf: ([]spec.Schema) <nil>,
           Not: (*spec.Schema)(<nil>),
           Properties: (map[string]spec.Schema) <nil>,
           AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
           PatternProperties: (map[string]spec.Schema) <nil>,
           Dependencies: (spec.Dependencies) <nil>,
           AdditionalItems: (*spec.SchemaOrBool)(<nil>),
           Definitions: (spec.Definitions) <nil>
          },
          SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
           Discriminator: (string) "",
           ReadOnly: (bool) false,
           XML: (*spec.XMLObject)(<nil>),
           ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
           Example: (interface {}) <nil>
          },
          ExtraProps: (map[string]interface {}) <nil>
         }),
         Schemas: ([]spec.Schema) <nil>
        }),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=11) "gradeLevels": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) (len=1) {
         (string) (len=10) "x-nullable": (bool) true
        }
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) #/definitions/ResourceGradeLevels,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) <nil>,
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=7) "pricing": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) (len=1) {
         (string) (len=10) "x-nullable": (bool) true
        }
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) #/definitions/ResourcePricing,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) <nil>,
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      }
     },
     AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
     PatternProperties: (map[string]spec.Schema) <nil>,
     Dependencies: (spec.Dependencies) <nil>,
     AdditionalItems: (*spec.SchemaOrBool)(<nil>),
     Definitions: (spec.Definitions) <nil>
    },
    SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
     Discriminator: (string) "",
     ReadOnly: (bool) false,
     XML: (*spec.XMLObject)(<nil>),
     ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
     Example: (interface {}) <nil>
    },
    ExtraProps: (map[string]interface {}) <nil>
   },
   (string) (len=10) "RelatedApp": (spec.Schema) {
    VendorExtensible: (spec.VendorExtensible) {
     Extensions: (spec.Extensions) <nil>
    },
    SchemaProps: (spec.SchemaProps) {
     ID: (string) "",
     Ref: (spec.Ref) ,
     Schema: (spec.SchemaURL) "",
     Description: (string) "",
     Type: (spec.StringOrArray) (len=1 cap=1) {
      (string) (len=6) "object"
     },
     Format: (string) "",
     Title: (string) "",
     Default: (interface {}) <nil>,
     Maximum: (*float64)(<nil>),
     ExclusiveMaximum: (bool) false,
     Minimum: (*float64)(<nil>),
     ExclusiveMinimum: (bool) false,
     MaxLength: (*int64)(<nil>),
     MinLength: (*int64)(<nil>),
     Pattern: (string) "",
     MaxItems: (*int64)(<nil>),
     MinItems: (*int64)(<nil>),
     UniqueItems: (bool) false,
     MultipleOf: (*float64)(<nil>),
     Enum: ([]interface {}) <nil>,
     MaxProperties: (*int64)(<nil>),
     MinProperties: (*int64)(<nil>),
     Required: ([]string) <nil>,
     Items: (*spec.SchemaOrArray)(<nil>),
     AllOf: ([]spec.Schema) <nil>,
     OneOf: ([]spec.Schema) <nil>,
     AnyOf: ([]spec.Schema) <nil>,
     Not: (*spec.Schema)(<nil>),
     Properties: (map[string]spec.Schema) (len=1) {
      (string) (len=8) "cleverID": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      }
     },
     AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
     PatternProperties: (map[string]spec.Schema) <nil>,
     Dependencies: (spec.Dependencies) <nil>,
     AdditionalItems: (*spec.SchemaOrBool)(<nil>),
     Definitions: (spec.Definitions) <nil>
    },
    SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
     Discriminator: (string) "",
     ReadOnly: (bool) false,
     XML: (*spec.XMLObject)(<nil>),
     ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
     Example: (interface {}) <nil>
    },
    ExtraProps: (map[string]interface {}) <nil>
   },
   (string) (len=8) "Managers": (spec.Schema) {
    VendorExtensible: (spec.VendorExtensible) {
     Extensions: (spec.Extensions) <nil>
    },
    SchemaProps: (spec.SchemaProps) {
     ID: (string) "",
     Ref: (spec.Ref) ,
     Schema: (spec.SchemaURL) "",
     Description: (string) "",
     Type: (spec.StringOrArray) (len=1 cap=1) {
      (string) (len=6) "object"
     },
     Format: (string) "",
     Title: (string) "",
     Default: (interface {}) <nil>,
     Maximum: (*float64)(<nil>),
     ExclusiveMaximum: (bool) false,
     Minimum: (*float64)(<nil>),
     ExclusiveMinimum: (bool) false,
     MaxLength: (*int64)(<nil>),
     MinLength: (*int64)(<nil>),
     Pattern: (string) "",
     MaxItems: (*int64)(<nil>),
     MinItems: (*int64)(<nil>),
     UniqueItems: (bool) false,
     MultipleOf: (*float64)(<nil>),
     Enum: ([]interface {}) <nil>,
     MaxProperties: (*int64)(<nil>),
     MinProperties: (*int64)(<nil>),
     Required: ([]string) <nil>,
     Items: (*spec.SchemaOrArray)(<nil>),
     AllOf: ([]spec.Schema) <nil>,
     OneOf: ([]spec.Schema) <nil>,
     AnyOf: ([]spec.Schema) <nil>,
     Not: (*spec.Schema)(<nil>),
     Properties: (map[string]spec.Schema) (len=2) {
      (string) (len=14) "accountManager": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=19) "relationshipManager": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      }
     },
     AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
     PatternProperties: (map[string]spec.Schema) <nil>,
     Dependencies: (spec.Dependencies) <nil>,
     AdditionalItems: (*spec.SchemaOrBool)(<nil>),
     Definitions: (spec.Definitions) <nil>
    },
    SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
     Discriminator: (string) "",
     ReadOnly: (bool) false,
     XML: (*spec.XMLObject)(<nil>),
     ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
     Example: (interface {}) <nil>
    },
    ExtraProps: (map[string]interface {}) <nil>
   },
   (string) (len=19) "AppForAdminResponse": (spec.Schema) {
    VendorExtensible: (spec.VendorExtensible) {
     Extensions: (spec.Extensions) <nil>
    },
    SchemaProps: (spec.SchemaProps) {
     ID: (string) "",
     Ref: (spec.Ref) ,
     Schema: (spec.SchemaURL) "",
     Description: (string) (len=48) "App with the data specific to a particular admin",
     Type: (spec.StringOrArray) (len=1 cap=1) {
      (string) (len=6) "object"
     },
     Format: (string) "",
     Title: (string) "",
     Default: (interface {}) <nil>,
     Maximum: (*float64)(<nil>),
     ExclusiveMaximum: (bool) false,
     Minimum: (*float64)(<nil>),
     ExclusiveMinimum: (bool) false,
     MaxLength: (*int64)(<nil>),
     MinLength: (*int64)(<nil>),
     Pattern: (string) "",
     MaxItems: (*int64)(<nil>),
     MinItems: (*int64)(<nil>),
     UniqueItems: (bool) false,
     MultipleOf: (*float64)(<nil>),
     Enum: ([]interface {}) <nil>,
     MaxProperties: (*int64)(<nil>),
     MinProperties: (*int64)(<nil>),
     Required: ([]string) <nil>,
     Items: (*spec.SchemaOrArray)(<nil>),
     AllOf: ([]spec.Schema) <nil>,
     OneOf: ([]spec.Schema) <nil>,
     AnyOf: ([]spec.Schema) <nil>,
     Not: (*spec.Schema)(<nil>),
     Properties: (map[string]spec.Schema) (len=5) {
      (string) (len=7) "isOwner": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=7) "boolean"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=11) "permissions": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) #/definitions/PermissionList,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) <nil>,
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=9) "dateAdded": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) (len=8) "datetime",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=19) "verificationPending": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=7) "boolean"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=3) "app": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) #/definitions/App,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) <nil>,
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      }
     },
     AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
     PatternProperties: (map[string]spec.Schema) <nil>,
     Dependencies: (spec.Dependencies) <nil>,
     AdditionalItems: (*spec.SchemaOrBool)(<nil>),
     Definitions: (spec.Definitions) <nil>
    },
    SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
     Discriminator: (string) "",
     ReadOnly: (bool) false,
     XML: (*spec.XMLObject)(<nil>),
     ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
     Example: (interface {}) <nil>
    },
    ExtraProps: (map[string]interface {}) <nil>
   },
   (string) (len=10) "Categories": (spec.Schema) {
    VendorExtensible: (spec.VendorExtensible) {
     Extensions: (spec.Extensions) <nil>
    },
    SchemaProps: (spec.SchemaProps) {
     ID: (string) "",
     Ref: (spec.Ref) ,
     Schema: (spec.SchemaURL) "",
     Description: (string) "",
     Type: (spec.StringOrArray) (len=1 cap=1) {
      (string) (len=5) "array"
     },
     Format: (string) "",
     Title: (string) "",
     Default: (interface {}) <nil>,
     Maximum: (*float64)(<nil>),
     ExclusiveMaximum: (bool) false,
     Minimum: (*float64)(<nil>),
     ExclusiveMinimum: (bool) false,
     MaxLength: (*int64)(<nil>),
     MinLength: (*int64)(<nil>),
     Pattern: (string) "",
     MaxItems: (*int64)(<nil>),
     MinItems: (*int64)(<nil>),
     UniqueItems: (bool) false,
     MultipleOf: (*float64)(<nil>),
     Enum: ([]interface {}) <nil>,
     MaxProperties: (*int64)(<nil>),
     MinProperties: (*int64)(<nil>),
     Required: ([]string) <nil>,
     Items: (*spec.SchemaOrArray)(0xc000a03ce0)({
      Schema: (*spec.Schema)(0xc000a76b40)({
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      }),
      Schemas: ([]spec.Schema) <nil>
     }),
     AllOf: ([]spec.Schema) <nil>,
     OneOf: ([]spec.Schema) <nil>,
     AnyOf: ([]spec.Schema) <nil>,
     Not: (*spec.Schema)(<nil>),
     Properties: (map[string]spec.Schema) <nil>,
     AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
     PatternProperties: (map[string]spec.Schema) <nil>,
     Dependencies: (spec.Dependencies) <nil>,
     AdditionalItems: (*spec.SchemaOrBool)(<nil>),
     Definitions: (spec.Definitions) <nil>
    },
    SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
     Discriminator: (string) "",
     ReadOnly: (bool) false,
     XML: (*spec.XMLObject)(<nil>),
     ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
     Example: (interface {}) <nil>
    },
    ExtraProps: (map[string]interface {}) <nil>
   },
   (string) (len=11) "SharingRule": (spec.Schema) {
    VendorExtensible: (spec.VendorExtensible) {
     Extensions: (spec.Extensions) <nil>
    },
    SchemaProps: (spec.SchemaProps) {
     ID: (string) "",
     Ref: (spec.Ref) ,
     Schema: (spec.SchemaURL) "",
     Description: (string) "",
     Type: (spec.StringOrArray) (len=1 cap=1) {
      (string) (len=6) "object"
     },
     Format: (string) "",
     Title: (string) "",
     Default: (interface {}) <nil>,
     Maximum: (*float64)(<nil>),
     ExclusiveMaximum: (bool) false,
     Minimum: (*float64)(<nil>),
     ExclusiveMinimum: (bool) false,
     MaxLength: (*int64)(<nil>),
     MinLength: (*int64)(<nil>),
     Pattern: (string) "",
     MaxItems: (*int64)(<nil>),
     MinItems: (*int64)(<nil>),
     UniqueItems: (bool) false,
     MultipleOf: (*float64)(<nil>),
     Enum: ([]interface {}) <nil>,
     MaxProperties: (*int64)(<nil>),
     MinProperties: (*int64)(<nil>),
     Required: ([]string) <nil>,
     Items: (*spec.SchemaOrArray)(<nil>),
     AllOf: ([]spec.Schema) <nil>,
     OneOf: ([]spec.Schema) <nil>,
     AnyOf: ([]spec.Schema) <nil>,
     Not: (*spec.Schema)(<nil>),
     Properties: (map[string]spec.Schema) (len=2) {
      (string) (len=10) "collection": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) (len=4 cap=4) {
         (string) (len=8) "sections",
         (string) (len=8) "students",
         (string) (len=8) "teachers",
         (string) (len=12) "schooladmins"
        },
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=11) "constraints": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=5) "array"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(0xc000a9c280)(1),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(0xc000a80d40)({
         Schema: (*spec.Schema)(0xc000aa06c0)({
          VendorExtensible: (spec.VendorExtensible) {
           Extensions: (spec.Extensions) <nil>
          },
          SchemaProps: (spec.SchemaProps) {
           ID: (string) "",
           Ref: (spec.Ref) #/definitions/SharingConstraint,
           Schema: (spec.SchemaURL) "",
           Description: (string) "",
           Type: (spec.StringOrArray) <nil>,
           Format: (string) "",
           Title: (string) "",
           Default: (interface {}) <nil>,
           Maximum: (*float64)(<nil>),
           ExclusiveMaximum: (bool) false,
           Minimum: (*float64)(<nil>),
           ExclusiveMinimum: (bool) false,
           MaxLength: (*int64)(<nil>),
           MinLength: (*int64)(<nil>),
           Pattern: (string) "",
           MaxItems: (*int64)(<nil>),
           MinItems: (*int64)(<nil>),
           UniqueItems: (bool) false,
           MultipleOf: (*float64)(<nil>),
           Enum: ([]interface {}) <nil>,
           MaxProperties: (*int64)(<nil>),
           MinProperties: (*int64)(<nil>),
           Required: ([]string) <nil>,
           Items: (*spec.SchemaOrArray)(<nil>),
           AllOf: ([]spec.Schema) <nil>,
           OneOf: ([]spec.Schema) <nil>,
           AnyOf: ([]spec.Schema) <nil>,
           Not: (*spec.Schema)(<nil>),
           Properties: (map[string]spec.Schema) <nil>,
           AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
           PatternProperties: (map[string]spec.Schema) <nil>,
           Dependencies: (spec.Dependencies) <nil>,
           AdditionalItems: (*spec.SchemaOrBool)(<nil>),
           Definitions: (spec.Definitions) <nil>
          },
          SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
           Discriminator: (string) "",
           ReadOnly: (bool) false,
           XML: (*spec.XMLObject)(<nil>),
           ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
           Example: (interface {}) <nil>
          },
          ExtraProps: (map[string]interface {}) <nil>
         }),
         Schemas: ([]spec.Schema) <nil>
        }),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      }
     },
     AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
     PatternProperties: (map[string]spec.Schema) <nil>,
     Dependencies: (spec.Dependencies) <nil>,
     AdditionalItems: (*spec.SchemaOrBool)(<nil>),
     Definitions: (spec.Definitions) <nil>
    },
    SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
     Discriminator: (string) "",
     ReadOnly: (bool) false,
     XML: (*spec.XMLObject)(<nil>),
     ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
     Example: (interface {}) <nil>
    },
    ExtraProps: (map[string]interface {}) <nil>
   },
   (string) (len=21) "CreatePlatformRequest": (spec.Schema) {
    VendorExtensible: (spec.VendorExtensible) {
     Extensions: (spec.Extensions) <nil>
    },
    SchemaProps: (spec.SchemaProps) {
     ID: (string) "",
     Ref: (spec.Ref) ,
     Schema: (spec.SchemaURL) "",
     Description: (string) (len=35) "Used for the creation of a platform",
     Type: (spec.StringOrArray) (len=1 cap=1) {
      (string) (len=6) "object"
     },
     Format: (string) "",
     Title: (string) "",
     Default: (interface {}) <nil>,
     Maximum: (*float64)(<nil>),
     ExclusiveMaximum: (bool) false,
     Minimum: (*float64)(<nil>),
     ExclusiveMinimum: (bool) false,
     MaxLength: (*int64)(<nil>),
     MinLength: (*int64)(<nil>),
     Pattern: (string) "",
     MaxItems: (*int64)(<nil>),
     MinItems: (*int64)(<nil>),
     UniqueItems: (bool) false,
     MultipleOf: (*float64)(<nil>),
     Enum: ([]interface {}) <nil>,
     MaxProperties: (*int64)(<nil>),
     MinProperties: (*int64)(<nil>),
     Required: ([]string) <nil>,
     Items: (*spec.SchemaOrArray)(<nil>),
     AllOf: ([]spec.Schema) <nil>,
     OneOf: ([]spec.Schema) <nil>,
     AnyOf: ([]spec.Schema) <nil>,
     Not: (*spec.Schema)(<nil>),
     Properties: (map[string]spec.Schema) (len=3) {
      (string) (len=4) "name": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=12) "redirectUris": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) (len=1) {
         (string) (len=10) "x-nullable": (bool) true
        }
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=5) "array"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(0xc000a818c0)({
         Schema: (*spec.Schema)(0xc000ab5440)({
          VendorExtensible: (spec.VendorExtensible) {
           Extensions: (spec.Extensions) <nil>
          },
          SchemaProps: (spec.SchemaProps) {
           ID: (string) "",
           Ref: (spec.Ref) #/definitions/RedirectUri,
           Schema: (spec.SchemaURL) "",
           Description: (string) "",
           Type: (spec.StringOrArray) <nil>,
           Format: (string) "",
           Title: (string) "",
           Default: (interface {}) <nil>,
           Maximum: (*float64)(<nil>),
           ExclusiveMaximum: (bool) false,
           Minimum: (*float64)(<nil>),
           ExclusiveMinimum: (bool) false,
           MaxLength: (*int64)(<nil>),
           MinLength: (*int64)(<nil>),
           Pattern: (string) "",
           MaxItems: (*int64)(<nil>),
           MinItems: (*int64)(<nil>),
           UniqueItems: (bool) false,
           MultipleOf: (*float64)(<nil>),
           Enum: ([]interface {}) <nil>,
           MaxProperties: (*int64)(<nil>),
           MinProperties: (*int64)(<nil>),
           Required: ([]string) <nil>,
           Items: (*spec.SchemaOrArray)(<nil>),
           AllOf: ([]spec.Schema) <nil>,
           OneOf: ([]spec.Schema) <nil>,
           AnyOf: ([]spec.Schema) <nil>,
           Not: (*spec.Schema)(<nil>),
           Properties: (map[string]spec.Schema) <nil>,
           AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
           PatternProperties: (map[string]spec.Schema) <nil>,
           Dependencies: (spec.Dependencies) <nil>,
           AdditionalItems: (*spec.SchemaOrBool)(<nil>),
           Definitions: (spec.Definitions) <nil>
          },
          SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
           Discriminator: (string) "",
           ReadOnly: (bool) false,
           XML: (*spec.XMLObject)(<nil>),
           ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
           Example: (interface {}) <nil>
          },
          ExtraProps: (map[string]interface {}) <nil>
         }),
         Schemas: ([]spec.Schema) <nil>
        }),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=8) "disabled": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=7) "boolean"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      }
     },
     AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
     PatternProperties: (map[string]spec.Schema) <nil>,
     Dependencies: (spec.Dependencies) <nil>,
     AdditionalItems: (*spec.SchemaOrBool)(<nil>),
     Definitions: (spec.Definitions) <nil>
    },
    SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
     Discriminator: (string) "",
     ReadOnly: (bool) false,
     XML: (*spec.XMLObject)(<nil>),
     ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
     Example: (interface {}) <nil>
    },
    ExtraProps: (map[string]interface {}) <nil>
   },
   (string) (len=15) "OnboardingEvent": (spec.Schema) {
    VendorExtensible: (spec.VendorExtensible) {
     Extensions: (spec.Extensions) <nil>
    },
    SchemaProps: (spec.SchemaProps) {
     ID: (string) "",
     Ref: (spec.Ref) ,
     Schema: (spec.SchemaURL) "",
     Description: (string) (len=202) "An event representing one of the following: an app starting its integration, an app submitting its integration for review, Clever approving an app's integration, or Clever rejecting an app's integration",
     Type: (spec.StringOrArray) (len=1 cap=1) {
      (string) (len=6) "object"
     },
     Format: (string) "",
     Title: (string) "",
     Default: (interface {}) <nil>,
     Maximum: (*float64)(<nil>),
     ExclusiveMaximum: (bool) false,
     Minimum: (*float64)(<nil>),
     ExclusiveMinimum: (bool) false,
     MaxLength: (*int64)(<nil>),
     MinLength: (*int64)(<nil>),
     Pattern: (string) "",
     MaxItems: (*int64)(<nil>),
     MinItems: (*int64)(<nil>),
     UniqueItems: (bool) false,
     MultipleOf: (*float64)(<nil>),
     Enum: ([]interface {}) <nil>,
     MaxProperties: (*int64)(<nil>),
     MinProperties: (*int64)(<nil>),
     Required: ([]string) <nil>,
     Items: (*spec.SchemaOrArray)(<nil>),
     AllOf: ([]spec.Schema) <nil>,
     OneOf: ([]spec.Schema) <nil>,
     AnyOf: ([]spec.Schema) <nil>,
     Not: (*spec.Schema)(<nil>),
     Properties: (map[string]spec.Schema) (len=3) {
      (string) (len=9) "eventType": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) #/definitions/OnboardingEventType,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) <nil>,
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=9) "timestamp": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) (len=8) "datetime",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=6) "survey": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=5) "array"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(0xc000acc480)({
         Schema: (*spec.Schema)(0xc000ad4480)({
          VendorExtensible: (spec.VendorExtensible) {
           Extensions: (spec.Extensions) <nil>
          },
          SchemaProps: (spec.SchemaProps) {
           ID: (string) "",
           Ref: (spec.Ref) #/definitions/OnboardingSurveyItem,
           Schema: (spec.SchemaURL) "",
           Description: (string) "",
           Type: (spec.StringOrArray) <nil>,
           Format: (string) "",
           Title: (string) "",
           Default: (interface {}) <nil>,
           Maximum: (*float64)(<nil>),
           ExclusiveMaximum: (bool) false,
           Minimum: (*float64)(<nil>),
           ExclusiveMinimum: (bool) false,
           MaxLength: (*int64)(<nil>),
           MinLength: (*int64)(<nil>),
           Pattern: (string) "",
           MaxItems: (*int64)(<nil>),
           MinItems: (*int64)(<nil>),
           UniqueItems: (bool) false,
           MultipleOf: (*float64)(<nil>),
           Enum: ([]interface {}) <nil>,
           MaxProperties: (*int64)(<nil>),
           MinProperties: (*int64)(<nil>),
           Required: ([]string) <nil>,
           Items: (*spec.SchemaOrArray)(<nil>),
           AllOf: ([]spec.Schema) <nil>,
           OneOf: ([]spec.Schema) <nil>,
           AnyOf: ([]spec.Schema) <nil>,
           Not: (*spec.Schema)(<nil>),
           Properties: (map[string]spec.Schema) <nil>,
           AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
           PatternProperties: (map[string]spec.Schema) <nil>,
           Dependencies: (spec.Dependencies) <nil>,
           AdditionalItems: (*spec.SchemaOrBool)(<nil>),
           Definitions: (spec.Definitions) <nil>
          },
          SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
           Discriminator: (string) "",
           ReadOnly: (bool) false,
           XML: (*spec.XMLObject)(<nil>),
           ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
           Example: (interface {}) <nil>
          },
          ExtraProps: (map[string]interface {}) <nil>
         }),
         Schemas: ([]spec.Schema) <nil>
        }),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      }
     },
     AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
     PatternProperties: (map[string]spec.Schema) <nil>,
     Dependencies: (spec.Dependencies) <nil>,
     AdditionalItems: (*spec.SchemaOrBool)(<nil>),
     Definitions: (spec.Definitions) <nil>
    },
    SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
     Discriminator: (string) "",
     ReadOnly: (bool) false,
     XML: (*spec.XMLObject)(<nil>),
     ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
     Example: (interface {}) <nil>
    },
    ExtraProps: (map[string]interface {}) <nil>
   },
   (string) (len=7) "Version": (spec.Schema) {
    VendorExtensible: (spec.VendorExtensible) {
     Extensions: (spec.Extensions) <nil>
    },
    SchemaProps: (spec.SchemaProps) {
     ID: (string) "",
     Ref: (spec.Ref) ,
     Schema: (spec.SchemaURL) "",
     Description: (string) (len=14) "Valid versions",
     Type: (spec.StringOrArray) (len=1 cap=1) {
      (string) (len=6) "string"
     },
     Format: (string) "",
     Title: (string) "",
     Default: (interface {}) <nil>,
     Maximum: (*float64)(<nil>),
     ExclusiveMaximum: (bool) false,
     Minimum: (*float64)(<nil>),
     ExclusiveMinimum: (bool) false,
     MaxLength: (*int64)(<nil>),
     MinLength: (*int64)(<nil>),
     Pattern: (string) "",
     MaxItems: (*int64)(<nil>),
     MinItems: (*int64)(<nil>),
     UniqueItems: (bool) false,
     MultipleOf: (*float64)(<nil>),
     Enum: ([]interface {}) (len=4 cap=4) {
      (string) (len=4) "v1.1",
      (string) (len=4) "v1.2",
      (string) (len=4) "v2.0",
      (string) (len=4) "v2.1"
     },
     MaxProperties: (*int64)(<nil>),
     MinProperties: (*int64)(<nil>),
     Required: ([]string) <nil>,
     Items: (*spec.SchemaOrArray)(<nil>),
     AllOf: ([]spec.Schema) <nil>,
     OneOf: ([]spec.Schema) <nil>,
     AnyOf: ([]spec.Schema) <nil>,
     Not: (*spec.Schema)(<nil>),
     Properties: (map[string]spec.Schema) <nil>,
     AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
     PatternProperties: (map[string]spec.Schema) <nil>,
     Dependencies: (spec.Dependencies) <nil>,
     AdditionalItems: (*spec.SchemaOrBool)(<nil>),
     Definitions: (spec.Definitions) <nil>
    },
    SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
     Discriminator: (string) "",
     ReadOnly: (bool) false,
     XML: (*spec.XMLObject)(<nil>),
     ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
     Example: (interface {}) <nil>
    },
    ExtraProps: (map[string]interface {}) <nil>
   },
   (string) (len=11) "FieldSchema": (spec.Schema) {
    VendorExtensible: (spec.VendorExtensible) {
     Extensions: (spec.Extensions) <nil>
    },
    SchemaProps: (spec.SchemaProps) {
     ID: (string) "",
     Ref: (spec.Ref) ,
     Schema: (spec.SchemaURL) "",
     Description: (string) "",
     Type: (spec.StringOrArray) (len=1 cap=1) {
      (string) (len=6) "object"
     },
     Format: (string) "",
     Title: (string) "",
     Default: (interface {}) <nil>,
     Maximum: (*float64)(<nil>),
     ExclusiveMaximum: (bool) false,
     Minimum: (*float64)(<nil>),
     ExclusiveMinimum: (bool) false,
     MaxLength: (*int64)(<nil>),
     MinLength: (*int64)(<nil>),
     Pattern: (string) "",
     MaxItems: (*int64)(<nil>),
     MinItems: (*int64)(<nil>),
     UniqueItems: (bool) false,
     MultipleOf: (*float64)(<nil>),
     Enum: ([]interface {}) <nil>,
     MaxProperties: (*int64)(<nil>),
     MinProperties: (*int64)(<nil>),
     Required: ([]string) <nil>,
     Items: (*spec.SchemaOrArray)(<nil>),
     AllOf: ([]spec.Schema) <nil>,
     OneOf: ([]spec.Schema) <nil>,
     AnyOf: ([]spec.Schema) <nil>,
     Not: (*spec.Schema)(<nil>),
     Properties: (map[string]spec.Schema) (len=2) {
      (string) (len=4) "name": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=10) "accessType": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) (len=5 cap=6) {
         (string) (len=8) "required",
         (string) (len=8) "optional",
         (string) (len=9) "available",
         (string) (len=15) "clever_required",
         (string) (len=16) "clever_generated"
        },
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      }
     },
     AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
     PatternProperties: (map[string]spec.Schema) <nil>,
     Dependencies: (spec.Dependencies) <nil>,
     AdditionalItems: (*spec.SchemaOrBool)(<nil>),
     Definitions: (spec.Definitions) <nil>
    },
    SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
     Discriminator: (string) "",
     ReadOnly: (bool) false,
     XML: (*spec.XMLObject)(<nil>),
     ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
     Example: (interface {}) <nil>
    },
    ExtraProps: (map[string]interface {}) <nil>
   },
   (string) (len=9) "GuideData": (spec.Schema) {
    VendorExtensible: (spec.VendorExtensible) {
     Extensions: (spec.Extensions) <nil>
    },
    SchemaProps: (spec.SchemaProps) {
     ID: (string) "",
     Ref: (spec.Ref) ,
     Schema: (spec.SchemaURL) "",
     Description: (string) "",
     Type: (spec.StringOrArray) (len=1 cap=1) {
      (string) (len=6) "object"
     },
     Format: (string) "",
     Title: (string) "",
     Default: (interface {}) <nil>,
     Maximum: (*float64)(<nil>),
     ExclusiveMaximum: (bool) false,
     Minimum: (*float64)(<nil>),
     ExclusiveMinimum: (bool) false,
     MaxLength: (*int64)(<nil>),
     MinLength: (*int64)(<nil>),
     Pattern: (string) "",
     MaxItems: (*int64)(<nil>),
     MinItems: (*int64)(<nil>),
     UniqueItems: (bool) false,
     MultipleOf: (*float64)(<nil>),
     Enum: ([]interface {}) <nil>,
     MaxProperties: (*int64)(<nil>),
     MinProperties: (*int64)(<nil>),
     Required: ([]string) <nil>,
     Items: (*spec.SchemaOrArray)(<nil>),
     AllOf: ([]spec.Schema) <nil>,
     OneOf: ([]spec.Schema) <nil>,
     AnyOf: ([]spec.Schema) <nil>,
     Not: (*spec.Schema)(<nil>),
     Properties: (map[string]spec.Schema) <nil>,
     AdditionalProperties: (*spec.SchemaOrBool)(0xc0009a97e0)({
      Allows: (bool) true,
      Schema: (*spec.Schema)(0xc00033a900)({
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "object"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      })
     }),
     PatternProperties: (map[string]spec.Schema) <nil>,
     Dependencies: (spec.Dependencies) <nil>,
     AdditionalItems: (*spec.SchemaOrBool)(<nil>),
     Definitions: (spec.Definitions) <nil>
    },
    SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
     Discriminator: (string) "",
     ReadOnly: (bool) false,
     XML: (*spec.XMLObject)(<nil>),
     ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
     Example: (interface {}) <nil>
    },
    ExtraProps: (map[string]interface {}) <nil>
   },
   (string) (len=12) "SecretConfig": (spec.Schema) {
    VendorExtensible: (spec.VendorExtensible) {
     Extensions: (spec.Extensions) <nil>
    },
    SchemaProps: (spec.SchemaProps) {
     ID: (string) "",
     Ref: (spec.Ref) ,
     Schema: (spec.SchemaURL) "",
     Description: (string) "",
     Type: (spec.StringOrArray) (len=1 cap=1) {
      (string) (len=6) "object"
     },
     Format: (string) "",
     Title: (string) "",
     Default: (interface {}) <nil>,
     Maximum: (*float64)(<nil>),
     ExclusiveMaximum: (bool) false,
     Minimum: (*float64)(<nil>),
     ExclusiveMinimum: (bool) false,
     MaxLength: (*int64)(<nil>),
     MinLength: (*int64)(<nil>),
     Pattern: (string) "",
     MaxItems: (*int64)(<nil>),
     MinItems: (*int64)(<nil>),
     UniqueItems: (bool) false,
     MultipleOf: (*float64)(<nil>),
     Enum: ([]interface {}) <nil>,
     MaxProperties: (*int64)(<nil>),
     MinProperties: (*int64)(<nil>),
     Required: ([]string) <nil>,
     Items: (*spec.SchemaOrArray)(<nil>),
     AllOf: ([]spec.Schema) <nil>,
     OneOf: ([]spec.Schema) <nil>,
     AnyOf: ([]spec.Schema) <nil>,
     Not: (*spec.Schema)(<nil>),
     Properties: (map[string]spec.Schema) (len=4) {
      (string) (len=13) "currentSecret": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=9) "oldSecret": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=16) "oldSecretExpires": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) (len=8) "datetime",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=13) "businessToken": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      }
     },
     AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
     PatternProperties: (map[string]spec.Schema) <nil>,
     Dependencies: (spec.Dependencies) <nil>,
     AdditionalItems: (*spec.SchemaOrBool)(<nil>),
     Definitions: (spec.Definitions) <nil>
    },
    SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
     Discriminator: (string) "",
     ReadOnly: (bool) false,
     XML: (*spec.XMLObject)(<nil>),
     ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
     Example: (interface {}) <nil>
    },
    ExtraProps: (map[string]interface {}) <nil>
   },
   (string) (len=5) "Tiers": (spec.Schema) {
    VendorExtensible: (spec.VendorExtensible) {
     Extensions: (spec.Extensions) <nil>
    },
    SchemaProps: (spec.SchemaProps) {
     ID: (string) "",
     Ref: (spec.Ref) ,
     Schema: (spec.SchemaURL) "",
     Description: (string) "",
     Type: (spec.StringOrArray) (len=1 cap=1) {
      (string) (len=5) "array"
     },
     Format: (string) "",
     Title: (string) "",
     Default: (interface {}) <nil>,
     Maximum: (*float64)(<nil>),
     ExclusiveMaximum: (bool) false,
     Minimum: (*float64)(<nil>),
     ExclusiveMinimum: (bool) false,
     MaxLength: (*int64)(<nil>),
     MinLength: (*int64)(<nil>),
     Pattern: (string) "",
     MaxItems: (*int64)(<nil>),
     MinItems: (*int64)(<nil>),
     UniqueItems: (bool) false,
     MultipleOf: (*float64)(<nil>),
     Enum: ([]interface {}) <nil>,
     MaxProperties: (*int64)(<nil>),
     MinProperties: (*int64)(<nil>),
     Required: ([]string) <nil>,
     Items: (*spec.SchemaOrArray)(0xc000b1f800)({
      Schema: (*spec.Schema)(0xc00026ed80)({
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) #/definitions/Tier,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) <nil>,
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      }),
      Schemas: ([]spec.Schema) <nil>
     }),
     AllOf: ([]spec.Schema) <nil>,
     OneOf: ([]spec.Schema) <nil>,
     AnyOf: ([]spec.Schema) <nil>,
     Not: (*spec.Schema)(<nil>),
     Properties: (map[string]spec.Schema) <nil>,
     AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
     PatternProperties: (map[string]spec.Schema) <nil>,
     Dependencies: (spec.Dependencies) <nil>,
     AdditionalItems: (*spec.SchemaOrBool)(<nil>),
     Definitions: (spec.Definitions) <nil>
    },
    SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
     Discriminator: (string) "",
     ReadOnly: (bool) false,
     XML: (*spec.XMLObject)(<nil>),
     ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
     Example: (interface {}) <nil>
    },
    ExtraProps: (map[string]interface {}) <nil>
   },
   (string) (len=4) "Tier": (spec.Schema) {
    VendorExtensible: (spec.VendorExtensible) {
     Extensions: (spec.Extensions) <nil>
    },
    SchemaProps: (spec.SchemaProps) {
     ID: (string) "",
     Ref: (spec.Ref) ,
     Schema: (spec.SchemaURL) "",
     Description: (string) "",
     Type: (spec.StringOrArray) (len=1 cap=1) {
      (string) (len=6) "object"
     },
     Format: (string) "",
     Title: (string) "",
     Default: (interface {}) <nil>,
     Maximum: (*float64)(<nil>),
     ExclusiveMaximum: (bool) false,
     Minimum: (*float64)(<nil>),
     ExclusiveMinimum: (bool) false,
     MaxLength: (*int64)(<nil>),
     MinLength: (*int64)(<nil>),
     Pattern: (string) "",
     MaxItems: (*int64)(<nil>),
     MinItems: (*int64)(<nil>),
     UniqueItems: (bool) false,
     MultipleOf: (*float64)(<nil>),
     Enum: ([]interface {}) <nil>,
     MaxProperties: (*int64)(<nil>),
     MinProperties: (*int64)(<nil>),
     Required: ([]string) <nil>,
     Items: (*spec.SchemaOrArray)(<nil>),
     AllOf: ([]spec.Schema) <nil>,
     OneOf: ([]spec.Schema) <nil>,
     AnyOf: ([]spec.Schema) <nil>,
     Not: (*spec.Schema)(<nil>),
     Properties: (map[string]spec.Schema) (len=7) {
      (string) (len=12) "studentLimit": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=7) "integer"
        },
        Format: (string) (len=5) "int32",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=8) "duration": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=7) "integer"
        },
        Format: (string) (len=5) "int32",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=12) "tierFeatures": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=5) "array"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(0xc000b1fbe0)({
         Schema: (*spec.Schema)(0xc0002a9b00)({
          VendorExtensible: (spec.VendorExtensible) {
           Extensions: (spec.Extensions) <nil>
          },
          SchemaProps: (spec.SchemaProps) {
           ID: (string) "",
           Ref: (spec.Ref) ,
           Schema: (spec.SchemaURL) "",
           Description: (string) "",
           Type: (spec.StringOrArray) (len=1 cap=1) {
            (string) (len=6) "string"
           },
           Format: (string) "",
           Title: (string) "",
           Default: (interface {}) <nil>,
           Maximum: (*float64)(<nil>),
           ExclusiveMaximum: (bool) false,
           Minimum: (*float64)(<nil>),
           ExclusiveMinimum: (bool) false,
           MaxLength: (*int64)(<nil>),
           MinLength: (*int64)(<nil>),
           Pattern: (string) "",
           MaxItems: (*int64)(<nil>),
           MinItems: (*int64)(<nil>),
           UniqueItems: (bool) false,
           MultipleOf: (*float64)(<nil>),
           Enum: ([]interface {}) <nil>,
           MaxProperties: (*int64)(<nil>),
           MinProperties: (*int64)(<nil>),
           Required: ([]string) <nil>,
           Items: (*spec.SchemaOrArray)(<nil>),
           AllOf: ([]spec.Schema) <nil>,
           OneOf: ([]spec.Schema) <nil>,
           AnyOf: ([]spec.Schema) <nil>,
           Not: (*spec.Schema)(<nil>),
           Properties: (map[string]spec.Schema) <nil>,
           AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
           PatternProperties: (map[string]spec.Schema) <nil>,
           Dependencies: (spec.Dependencies) <nil>,
           AdditionalItems: (*spec.SchemaOrBool)(<nil>),
           Definitions: (spec.Definitions) <nil>
          },
          SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
           Discriminator: (string) "",
           ReadOnly: (bool) false,
           XML: (*spec.XMLObject)(<nil>),
           ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
           Example: (interface {}) <nil>
          },
          ExtraProps: (map[string]interface {}) <nil>
         }),
         Schemas: ([]spec.Schema) <nil>
        }),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=4) "name": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=5) "price": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "number"
        },
        Format: (string) (len=6) "double",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=5) "limit": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=7) "integer"
        },
        Format: (string) (len=5) "int32",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      },
      (string) (len=9) "limitType": (spec.Schema) {
       VendorExtensible: (spec.VendorExtensible) {
        Extensions: (spec.Extensions) <nil>
       },
       SchemaProps: (spec.SchemaProps) {
        ID: (string) "",
        Ref: (spec.Ref) ,
        Schema: (spec.SchemaURL) "",
        Description: (string) "",
        Type: (spec.StringOrArray) (len=1 cap=1) {
         (string) (len=6) "string"
        },
        Format: (string) "",
        Title: (string) "",
        Default: (interface {}) <nil>,
        Maximum: (*float64)(<nil>),
        ExclusiveMaximum: (bool) false,
        Minimum: (*float64)(<nil>),
        ExclusiveMinimum: (bool) false,
        MaxLength: (*int64)(<nil>),
        MinLength: (*int64)(<nil>),
        Pattern: (string) "",
        MaxItems: (*int64)(<nil>),
        MinItems: (*int64)(<nil>),
        UniqueItems: (bool) false,
        MultipleOf: (*float64)(<nil>),
        Enum: ([]interface {}) <nil>,
        MaxProperties: (*int64)(<nil>),
        MinProperties: (*int64)(<nil>),
        Required: ([]string) <nil>,
        Items: (*spec.SchemaOrArray)(<nil>),
        AllOf: ([]spec.Schema) <nil>,
        OneOf: ([]spec.Schema) <nil>,
        AnyOf: ([]spec.Schema) <nil>,
        Not: (*spec.Schema)(<nil>),
        Properties: (map[string]spec.Schema) <nil>,
        AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
        PatternProperties: (map[string]spec.Schema) <nil>,
        Dependencies: (spec.Dependencies) <nil>,
        AdditionalItems: (*spec.SchemaOrBool)(<nil>),
        Definitions: (spec.Definitions) <nil>
       },
       SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
        Discriminator: (string) "",
        ReadOnly: (bool) false,
        XML: (*spec.XMLObject)(<nil>),
        ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
        Example: (interface {}) <nil>
       },
       ExtraProps: (map[string]interface {}) <nil>
      }
     },
     AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
     PatternProperties: (map[string]spec.Schema) <nil>,
     Dependencies: (spec.Dependencies) <nil>,
     AdditionalItems: (*spec.SchemaOrBool)(<nil>),
     Definitions: (spec.Definitions) <nil>
    },
    SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
     Discriminator: (string) "",
     ReadOnly: (bool) false,
     XML: (*spec.XMLObject)(<nil>),
     ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
     Example: (interface {}) <nil>
    },
    ExtraProps: (map[string]interface {}) <nil>
   }
  },
  Parameters: (map[string]spec.Parameter) <nil>,
  Responses: (map[string]spec.Response) (len=5) {
   (string) (len=10) "BadRequest": (spec.Response) {
    Refable: (spec.Refable) {
     Ref: (spec.Ref) 
    },
    ResponseProps: (spec.ResponseProps) {
     Description: (string) (len=11) "Bad Request",
     Schema: (*spec.Schema)(0xc000422000)({
      VendorExtensible: (spec.VendorExtensible) {
       Extensions: (spec.Extensions) <nil>
      },
      SchemaProps: (spec.SchemaProps) {
       ID: (string) "",
       Ref: (spec.Ref) #/definitions/BadRequest,
       Schema: (spec.SchemaURL) "",
       Description: (string) "",
       Type: (spec.StringOrArray) <nil>,
       Format: (string) "",
       Title: (string) "",
       Default: (interface {}) <nil>,
       Maximum: (*float64)(<nil>),
       ExclusiveMaximum: (bool) false,
       Minimum: (*float64)(<nil>),
       ExclusiveMinimum: (bool) false,
       MaxLength: (*int64)(<nil>),
       MinLength: (*int64)(<nil>),
       Pattern: (string) "",
       MaxItems: (*int64)(<nil>),
       MinItems: (*int64)(<nil>),
       UniqueItems: (bool) false,
       MultipleOf: (*float64)(<nil>),
       Enum: ([]interface {}) <nil>,
       MaxProperties: (*int64)(<nil>),
       MinProperties: (*int64)(<nil>),
       Required: ([]string) <nil>,
       Items: (*spec.SchemaOrArray)(<nil>),
       AllOf: ([]spec.Schema) <nil>,
       OneOf: ([]spec.Schema) <nil>,
       AnyOf: ([]spec.Schema) <nil>,
       Not: (*spec.Schema)(<nil>),
       Properties: (map[string]spec.Schema) <nil>,
       AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
       PatternProperties: (map[string]spec.Schema) <nil>,
       Dependencies: (spec.Dependencies) <nil>,
       AdditionalItems: (*spec.SchemaOrBool)(<nil>),
       Definitions: (spec.Definitions) <nil>
      },
      SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
       Discriminator: (string) "",
       ReadOnly: (bool) false,
       XML: (*spec.XMLObject)(<nil>),
       ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
       Example: (interface {}) <nil>
      },
      ExtraProps: (map[string]interface {}) <nil>
     }),
     Headers: (map[string]spec.Header) <nil>,
     Examples: (map[string]interface {}) <nil>
    },
    VendorExtensible: (spec.VendorExtensible) {
     Extensions: (spec.Extensions) <nil>
    }
   },
   (string) (len=19) "UnprocessableEntity": (spec.Response) {
    Refable: (spec.Refable) {
     Ref: (spec.Ref) 
    },
    ResponseProps: (spec.ResponseProps) {
     Description: (string) (len=20) "Unprocessable Entity",
     Schema: (*spec.Schema)(0xc000422b40)({
      VendorExtensible: (spec.VendorExtensible) {
       Extensions: (spec.Extensions) <nil>
      },
      SchemaProps: (spec.SchemaProps) {
       ID: (string) "",
       Ref: (spec.Ref) #/definitions/UnprocessableEntity,
       Schema: (spec.SchemaURL) "",
       Description: (string) "",
       Type: (spec.StringOrArray) <nil>,
       Format: (string) "",
       Title: (string) "",
       Default: (interface {}) <nil>,
       Maximum: (*float64)(<nil>),
       ExclusiveMaximum: (bool) false,
       Minimum: (*float64)(<nil>),
       ExclusiveMinimum: (bool) false,
       MaxLength: (*int64)(<nil>),
       MinLength: (*int64)(<nil>),
       Pattern: (string) "",
       MaxItems: (*int64)(<nil>),
       MinItems: (*int64)(<nil>),
       UniqueItems: (bool) false,
       MultipleOf: (*float64)(<nil>),
       Enum: ([]interface {}) <nil>,
       MaxProperties: (*int64)(<nil>),
       MinProperties: (*int64)(<nil>),
       Required: ([]string) <nil>,
       Items: (*spec.SchemaOrArray)(<nil>),
       AllOf: ([]spec.Schema) <nil>,
       OneOf: ([]spec.Schema) <nil>,
       AnyOf: ([]spec.Schema) <nil>,
       Not: (*spec.Schema)(<nil>),
       Properties: (map[string]spec.Schema) <nil>,
       AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
       PatternProperties: (map[string]spec.Schema) <nil>,
       Dependencies: (spec.Dependencies) <nil>,
       AdditionalItems: (*spec.SchemaOrBool)(<nil>),
       Definitions: (spec.Definitions) <nil>
      },
      SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
       Discriminator: (string) "",
       ReadOnly: (bool) false,
       XML: (*spec.XMLObject)(<nil>),
       ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
       Example: (interface {}) <nil>
      },
      ExtraProps: (map[string]interface {}) <nil>
     }),
     Headers: (map[string]spec.Header) <nil>,
     Examples: (map[string]interface {}) <nil>
    },
    VendorExtensible: (spec.VendorExtensible) {
     Extensions: (spec.Extensions) <nil>
    }
   },
   (string) (len=13) "InternalError": (spec.Response) {
    Refable: (spec.Refable) {
     Ref: (spec.Ref) 
    },
    ResponseProps: (spec.ResponseProps) {
     Description: (string) (len=14) "Internal Error",
     Schema: (*spec.Schema)(0xc000423440)({
      VendorExtensible: (spec.VendorExtensible) {
       Extensions: (spec.Extensions) <nil>
      },
      SchemaProps: (spec.SchemaProps) {
       ID: (string) "",
       Ref: (spec.Ref) #/definitions/InternalError,
       Schema: (spec.SchemaURL) "",
       Description: (string) "",
       Type: (spec.StringOrArray) <nil>,
       Format: (string) "",
       Title: (string) "",
       Default: (interface {}) <nil>,
       Maximum: (*float64)(<nil>),
       ExclusiveMaximum: (bool) false,
       Minimum: (*float64)(<nil>),
       ExclusiveMinimum: (bool) false,
       MaxLength: (*int64)(<nil>),
       MinLength: (*int64)(<nil>),
       Pattern: (string) "",
       MaxItems: (*int64)(<nil>),
       MinItems: (*int64)(<nil>),
       UniqueItems: (bool) false,
       MultipleOf: (*float64)(<nil>),
       Enum: ([]interface {}) <nil>,
       MaxProperties: (*int64)(<nil>),
       MinProperties: (*int64)(<nil>),
       Required: ([]string) <nil>,
       Items: (*spec.SchemaOrArray)(<nil>),
       AllOf: ([]spec.Schema) <nil>,
       OneOf: ([]spec.Schema) <nil>,
       AnyOf: ([]spec.Schema) <nil>,
       Not: (*spec.Schema)(<nil>),
       Properties: (map[string]spec.Schema) <nil>,
       AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
       PatternProperties: (map[string]spec.Schema) <nil>,
       Dependencies: (spec.Dependencies) <nil>,
       AdditionalItems: (*spec.SchemaOrBool)(<nil>),
       Definitions: (spec.Definitions) <nil>
      },
      SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
       Discriminator: (string) "",
       ReadOnly: (bool) false,
       XML: (*spec.XMLObject)(<nil>),
       ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
       Example: (interface {}) <nil>
      },
      ExtraProps: (map[string]interface {}) <nil>
     }),
     Headers: (map[string]spec.Header) <nil>,
     Examples: (map[string]interface {}) <nil>
    },
    VendorExtensible: (spec.VendorExtensible) {
     Extensions: (spec.Extensions) <nil>
    }
   },
   (string) (len=9) "Forbidden": (spec.Response) {
    Refable: (spec.Refable) {
     Ref: (spec.Ref) 
    },
    ResponseProps: (spec.ResponseProps) {
     Description: (string) (len=9) "Forbidden",
     Schema: (*spec.Schema)(0xc000450480)({
      VendorExtensible: (spec.VendorExtensible) {
       Extensions: (spec.Extensions) <nil>
      },
      SchemaProps: (spec.SchemaProps) {
       ID: (string) "",
       Ref: (spec.Ref) #/definitions/Forbidden,
       Schema: (spec.SchemaURL) "",
       Description: (string) "",
       Type: (spec.StringOrArray) <nil>,
       Format: (string) "",
       Title: (string) "",
       Default: (interface {}) <nil>,
       Maximum: (*float64)(<nil>),
       ExclusiveMaximum: (bool) false,
       Minimum: (*float64)(<nil>),
       ExclusiveMinimum: (bool) false,
       MaxLength: (*int64)(<nil>),
       MinLength: (*int64)(<nil>),
       Pattern: (string) "",
       MaxItems: (*int64)(<nil>),
       MinItems: (*int64)(<nil>),
       UniqueItems: (bool) false,
       MultipleOf: (*float64)(<nil>),
       Enum: ([]interface {}) <nil>,
       MaxProperties: (*int64)(<nil>),
       MinProperties: (*int64)(<nil>),
       Required: ([]string) <nil>,
       Items: (*spec.SchemaOrArray)(<nil>),
       AllOf: ([]spec.Schema) <nil>,
       OneOf: ([]spec.Schema) <nil>,
       AnyOf: ([]spec.Schema) <nil>,
       Not: (*spec.Schema)(<nil>),
       Properties: (map[string]spec.Schema) <nil>,
       AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
       PatternProperties: (map[string]spec.Schema) <nil>,
       Dependencies: (spec.Dependencies) <nil>,
       AdditionalItems: (*spec.SchemaOrBool)(<nil>),
       Definitions: (spec.Definitions) <nil>
      },
      SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
       Discriminator: (string) "",
       ReadOnly: (bool) false,
       XML: (*spec.XMLObject)(<nil>),
       ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
       Example: (interface {}) <nil>
      },
      ExtraProps: (map[string]interface {}) <nil>
     }),
     Headers: (map[string]spec.Header) <nil>,
     Examples: (map[string]interface {}) <nil>
    },
    VendorExtensible: (spec.VendorExtensible) {
     Extensions: (spec.Extensions) <nil>
    }
   },
   (string) (len=8) "NotFound": (spec.Response) {
    Refable: (spec.Refable) {
     Ref: (spec.Ref) 
    },
    ResponseProps: (spec.ResponseProps) {
     Description: (string) (len=16) "Entity Not Found",
     Schema: (*spec.Schema)(0xc000450d80)({
      VendorExtensible: (spec.VendorExtensible) {
       Extensions: (spec.Extensions) <nil>
      },
      SchemaProps: (spec.SchemaProps) {
       ID: (string) "",
       Ref: (spec.Ref) #/definitions/NotFound,
       Schema: (spec.SchemaURL) "",
       Description: (string) "",
       Type: (spec.StringOrArray) <nil>,
       Format: (string) "",
       Title: (string) "",
       Default: (interface {}) <nil>,
       Maximum: (*float64)(<nil>),
       ExclusiveMaximum: (bool) false,
       Minimum: (*float64)(<nil>),
       ExclusiveMinimum: (bool) false,
       MaxLength: (*int64)(<nil>),
       MinLength: (*int64)(<nil>),
       Pattern: (string) "",
       MaxItems: (*int64)(<nil>),
       MinItems: (*int64)(<nil>),
       UniqueItems: (bool) false,
       MultipleOf: (*float64)(<nil>),
       Enum: ([]interface {}) <nil>,
       MaxProperties: (*int64)(<nil>),
       MinProperties: (*int64)(<nil>),
       Required: ([]string) <nil>,
       Items: (*spec.SchemaOrArray)(<nil>),
       AllOf: ([]spec.Schema) <nil>,
       OneOf: ([]spec.Schema) <nil>,
       AnyOf: ([]spec.Schema) <nil>,
       Not: (*spec.Schema)(<nil>),
       Properties: (map[string]spec.Schema) <nil>,
       AdditionalProperties: (*spec.SchemaOrBool)(<nil>),
       PatternProperties: (map[string]spec.Schema) <nil>,
       Dependencies: (spec.Dependencies) <nil>,
       AdditionalItems: (*spec.SchemaOrBool)(<nil>),
       Definitions: (spec.Definitions) <nil>
      },
      SwaggerSchemaProps: (spec.SwaggerSchemaProps) {
       Discriminator: (string) "",
       ReadOnly: (bool) false,
       XML: (*spec.XMLObject)(<nil>),
       ExternalDocs: (*spec.ExternalDocumentation)(<nil>),
       Example: (interface {}) <nil>
      },
      ExtraProps: (map[string]interface {}) <nil>
     }),
     Headers: (map[string]spec.Header) <nil>,
     Examples: (map[string]interface {}) <nil>
    },
    VendorExtensible: (spec.VendorExtensible) {
     Extensions: (spec.Extensions) <nil>
    }
   }
  },
  SecurityDefinitions: (spec.SecurityDefinitions) <nil>,
  Security: ([]map[string][]string) <nil>,
  Tags: ([]spec.Tag) <nil>,
  ExternalDocs: (*spec.ExternalDocumentation)(<nil>)
 }
}
cd /Users/adamvictor/go/src/github.com/Clever/wag/samples/gen-js-app-service && jsdoc2md index.js types.js > ./README.md
go generate github.com/Clever/wag/samples/gen-go-app-service...
