// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

package client

import (
	context "context"
	models "github.com/Clever/wag/samples/gen-go/models"
	gomock "github.com/golang/mock/gomock"
)

// MockClient is a mock of Client interface
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockClient) EXPECT() *MockClientMockRecorder {
	return _m.recorder
}

// GetAuthors mocks base method
func (_m *MockClient) GetAuthors(ctx context.Context, i *models.GetAuthorsInput) (*models.AuthorsResponse, error) {
	ret := _m.ctrl.Call(_m, "GetAuthors", ctx, i)
	ret0, _ := ret[0].(*models.AuthorsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthors indicates an expected call of GetAuthors
func (_mr *MockClientMockRecorder) GetAuthors(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetAuthors", arg0, arg1)
}

// NewGetAuthorsIter mocks base method
func (_m *MockClient) NewGetAuthorsIter(ctx context.Context, i *models.GetAuthorsInput) (GetAuthorsIter, error) {
	ret := _m.ctrl.Call(_m, "NewGetAuthorsIter", ctx, i)
	ret0, _ := ret[0].(GetAuthorsIter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewGetAuthorsIter indicates an expected call of NewGetAuthorsIter
func (_mr *MockClientMockRecorder) NewGetAuthorsIter(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "NewGetAuthorsIter", arg0, arg1)
}

// GetAuthorsWithPut mocks base method
func (_m *MockClient) GetAuthorsWithPut(ctx context.Context, i *models.GetAuthorsWithPutInput) (*models.AuthorsResponse, error) {
	ret := _m.ctrl.Call(_m, "GetAuthorsWithPut", ctx, i)
	ret0, _ := ret[0].(*models.AuthorsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthorsWithPut indicates an expected call of GetAuthorsWithPut
func (_mr *MockClientMockRecorder) GetAuthorsWithPut(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetAuthorsWithPut", arg0, arg1)
}

// NewGetAuthorsWithPutIter mocks base method
func (_m *MockClient) NewGetAuthorsWithPutIter(ctx context.Context, i *models.GetAuthorsWithPutInput) (GetAuthorsWithPutIter, error) {
	ret := _m.ctrl.Call(_m, "NewGetAuthorsWithPutIter", ctx, i)
	ret0, _ := ret[0].(GetAuthorsWithPutIter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewGetAuthorsWithPutIter indicates an expected call of NewGetAuthorsWithPutIter
func (_mr *MockClientMockRecorder) NewGetAuthorsWithPutIter(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "NewGetAuthorsWithPutIter", arg0, arg1)
}

// GetBooks mocks base method
func (_m *MockClient) GetBooks(ctx context.Context, i *models.GetBooksInput) ([]models.Book, error) {
	ret := _m.ctrl.Call(_m, "GetBooks", ctx, i)
	ret0, _ := ret[0].([]models.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBooks indicates an expected call of GetBooks
func (_mr *MockClientMockRecorder) GetBooks(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetBooks", arg0, arg1)
}

// NewGetBooksIter mocks base method
func (_m *MockClient) NewGetBooksIter(ctx context.Context, i *models.GetBooksInput) (GetBooksIter, error) {
	ret := _m.ctrl.Call(_m, "NewGetBooksIter", ctx, i)
	ret0, _ := ret[0].(GetBooksIter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewGetBooksIter indicates an expected call of NewGetBooksIter
func (_mr *MockClientMockRecorder) NewGetBooksIter(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "NewGetBooksIter", arg0, arg1)
}

// CreateBook mocks base method
func (_m *MockClient) CreateBook(ctx context.Context, i *models.Book) (*models.Book, error) {
	ret := _m.ctrl.Call(_m, "CreateBook", ctx, i)
	ret0, _ := ret[0].(*models.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBook indicates an expected call of CreateBook
func (_mr *MockClientMockRecorder) CreateBook(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateBook", arg0, arg1)
}

// PutBook mocks base method
func (_m *MockClient) PutBook(ctx context.Context, i *models.Book) (*models.Book, error) {
	ret := _m.ctrl.Call(_m, "PutBook", ctx, i)
	ret0, _ := ret[0].(*models.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutBook indicates an expected call of PutBook
func (_mr *MockClientMockRecorder) PutBook(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "PutBook", arg0, arg1)
}

// GetBookByID mocks base method
func (_m *MockClient) GetBookByID(ctx context.Context, i *models.GetBookByIDInput) (*models.Book, error) {
	ret := _m.ctrl.Call(_m, "GetBookByID", ctx, i)
	ret0, _ := ret[0].(*models.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBookByID indicates an expected call of GetBookByID
func (_mr *MockClientMockRecorder) GetBookByID(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetBookByID", arg0, arg1)
}

// GetBookByID2 mocks base method
func (_m *MockClient) GetBookByID2(ctx context.Context, id string) (*models.Book, error) {
	ret := _m.ctrl.Call(_m, "GetBookByID2", ctx, id)
	ret0, _ := ret[0].(*models.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBookByID2 indicates an expected call of GetBookByID2
func (_mr *MockClientMockRecorder) GetBookByID2(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetBookByID2", arg0, arg1)
}

// HealthCheck mocks base method
func (_m *MockClient) HealthCheck(ctx context.Context) error {
	ret := _m.ctrl.Call(_m, "HealthCheck", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// HealthCheck indicates an expected call of HealthCheck
func (_mr *MockClientMockRecorder) HealthCheck(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "HealthCheck", arg0)
}

// MockGetAuthorsIter is a mock of GetAuthorsIter interface
type MockGetAuthorsIter struct {
	ctrl     *gomock.Controller
	recorder *MockGetAuthorsIterMockRecorder
}

// MockGetAuthorsIterMockRecorder is the mock recorder for MockGetAuthorsIter
type MockGetAuthorsIterMockRecorder struct {
	mock *MockGetAuthorsIter
}

// NewMockGetAuthorsIter creates a new mock instance
func NewMockGetAuthorsIter(ctrl *gomock.Controller) *MockGetAuthorsIter {
	mock := &MockGetAuthorsIter{ctrl: ctrl}
	mock.recorder = &MockGetAuthorsIterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockGetAuthorsIter) EXPECT() *MockGetAuthorsIterMockRecorder {
	return _m.recorder
}

// Next mocks base method
func (_m *MockGetAuthorsIter) Next(_param0 *models.Author) bool {
	ret := _m.ctrl.Call(_m, "Next", _param0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Next indicates an expected call of Next
func (_mr *MockGetAuthorsIterMockRecorder) Next(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Next", arg0)
}

// Err mocks base method
func (_m *MockGetAuthorsIter) Err() error {
	ret := _m.ctrl.Call(_m, "Err")
	ret0, _ := ret[0].(error)
	return ret0
}

// Err indicates an expected call of Err
func (_mr *MockGetAuthorsIterMockRecorder) Err() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Err")
}

// MockGetAuthorsWithPutIter is a mock of GetAuthorsWithPutIter interface
type MockGetAuthorsWithPutIter struct {
	ctrl     *gomock.Controller
	recorder *MockGetAuthorsWithPutIterMockRecorder
}

// MockGetAuthorsWithPutIterMockRecorder is the mock recorder for MockGetAuthorsWithPutIter
type MockGetAuthorsWithPutIterMockRecorder struct {
	mock *MockGetAuthorsWithPutIter
}

// NewMockGetAuthorsWithPutIter creates a new mock instance
func NewMockGetAuthorsWithPutIter(ctrl *gomock.Controller) *MockGetAuthorsWithPutIter {
	mock := &MockGetAuthorsWithPutIter{ctrl: ctrl}
	mock.recorder = &MockGetAuthorsWithPutIterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockGetAuthorsWithPutIter) EXPECT() *MockGetAuthorsWithPutIterMockRecorder {
	return _m.recorder
}

// Next mocks base method
func (_m *MockGetAuthorsWithPutIter) Next(_param0 *models.Author) bool {
	ret := _m.ctrl.Call(_m, "Next", _param0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Next indicates an expected call of Next
func (_mr *MockGetAuthorsWithPutIterMockRecorder) Next(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Next", arg0)
}

// Err mocks base method
func (_m *MockGetAuthorsWithPutIter) Err() error {
	ret := _m.ctrl.Call(_m, "Err")
	ret0, _ := ret[0].(error)
	return ret0
}

// Err indicates an expected call of Err
func (_mr *MockGetAuthorsWithPutIterMockRecorder) Err() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Err")
}

// MockGetBooksIter is a mock of GetBooksIter interface
type MockGetBooksIter struct {
	ctrl     *gomock.Controller
	recorder *MockGetBooksIterMockRecorder
}

// MockGetBooksIterMockRecorder is the mock recorder for MockGetBooksIter
type MockGetBooksIterMockRecorder struct {
	mock *MockGetBooksIter
}

// NewMockGetBooksIter creates a new mock instance
func NewMockGetBooksIter(ctrl *gomock.Controller) *MockGetBooksIter {
	mock := &MockGetBooksIter{ctrl: ctrl}
	mock.recorder = &MockGetBooksIterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockGetBooksIter) EXPECT() *MockGetBooksIterMockRecorder {
	return _m.recorder
}

// Next mocks base method
func (_m *MockGetBooksIter) Next(_param0 *models.Book) bool {
	ret := _m.ctrl.Call(_m, "Next", _param0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Next indicates an expected call of Next
func (_mr *MockGetBooksIterMockRecorder) Next(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Next", arg0)
}

// Err mocks base method
func (_m *MockGetBooksIter) Err() error {
	ret := _m.ctrl.Call(_m, "Err")
	ret0, _ := ret[0].(error)
	return ret0
}

// Err indicates an expected call of Err
func (_mr *MockGetBooksIterMockRecorder) Err() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Err")
}
