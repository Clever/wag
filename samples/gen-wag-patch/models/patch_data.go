package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

/*PatchData patch data

swagger:model PatchData
*/
type PatchData struct {

	/* array field

	Required: true
	*/
	ArrayField []string `json:"arrayField"`

	/* id

	Required: true
	*/
	ID *string `json:"id"`

	/* nested

	Required: true
	*/
	Nested interface{} `json:"nested"`

	/* num

	Required: true
	*/
	Num *int64 `json:"num"`
}

// Validate validates this patch data
func (m *PatchData) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateArrayField(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateNested(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateNum(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PatchData) validateArrayField(formats strfmt.Registry) error {

	if err := validate.Required("arrayField", "body", m.ArrayField); err != nil {
		return err
	}

	return nil
}

func (m *PatchData) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *PatchData) validateNested(formats strfmt.Registry) error {

	return nil
}

func (m *PatchData) validateNum(formats strfmt.Registry) error {

	if err := validate.Required("num", "body", m.Num); err != nil {
		return err
	}

	return nil
}
