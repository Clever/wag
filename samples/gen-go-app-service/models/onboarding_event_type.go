// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// OnboardingEventType onboarding event type
// swagger:model OnboardingEventType
type OnboardingEventType string

const (
	// OnboardingEventTypeStarted captures enum value "started"
	OnboardingEventTypeStarted OnboardingEventType = "started"
	// OnboardingEventTypeSubmitted captures enum value "submitted"
	OnboardingEventTypeSubmitted OnboardingEventType = "submitted"
	// OnboardingEventTypeApproved captures enum value "approved"
	OnboardingEventTypeApproved OnboardingEventType = "approved"
	// OnboardingEventTypeRejected captures enum value "rejected"
	OnboardingEventTypeRejected OnboardingEventType = "rejected"
)

// for schema
var onboardingEventTypeEnum []interface{}

func init() {
	var res []OnboardingEventType
	if err := json.Unmarshal([]byte(`["started","submitted","approved","rejected"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		onboardingEventTypeEnum = append(onboardingEventTypeEnum, v)
	}
}

func (m OnboardingEventType) validateOnboardingEventTypeEnum(path, location string, value OnboardingEventType) error {
	if err := validate.Enum(path, location, value, onboardingEventTypeEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this onboarding event type
func (m OnboardingEventType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateOnboardingEventTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
