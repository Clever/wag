// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Permission A permission for an app admin.
// swagger:model Permission
type Permission struct {

	// action
	Action string `json:"action,omitempty"`

	// resource
	Resource string `json:"resource,omitempty"`
}

// Validate validates this permission
func (m *Permission) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAction(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateResource(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var permissionTypeActionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["view","edit","none"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		permissionTypeActionPropEnum = append(permissionTypeActionPropEnum, v)
	}
}

const (
	// PermissionActionView captures enum value "view"
	PermissionActionView string = "view"
	// PermissionActionEdit captures enum value "edit"
	PermissionActionEdit string = "edit"
	// PermissionActionNone captures enum value "none"
	PermissionActionNone string = "none"
)

// prop value enum
func (m *Permission) validateActionEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, permissionTypeActionPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Permission) validateAction(formats strfmt.Registry) error {

	if swag.IsZero(m.Action) { // not required
		return nil
	}

	// value enum
	if err := m.validateActionEnum("action", "body", m.Action); err != nil {
		return err
	}

	return nil
}

var permissionTypeResourcePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["admin","disconnect_district","district_requests","data_tools","app_settings","app_secrets","app_filters"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		permissionTypeResourcePropEnum = append(permissionTypeResourcePropEnum, v)
	}
}

const (
	// PermissionResourceAdmin captures enum value "admin"
	PermissionResourceAdmin string = "admin"
	// PermissionResourceDisconnectDistrict captures enum value "disconnect_district"
	PermissionResourceDisconnectDistrict string = "disconnect_district"
	// PermissionResourceDistrictRequests captures enum value "district_requests"
	PermissionResourceDistrictRequests string = "district_requests"
	// PermissionResourceDataTools captures enum value "data_tools"
	PermissionResourceDataTools string = "data_tools"
	// PermissionResourceAppSettings captures enum value "app_settings"
	PermissionResourceAppSettings string = "app_settings"
	// PermissionResourceAppSecrets captures enum value "app_secrets"
	PermissionResourceAppSecrets string = "app_secrets"
	// PermissionResourceAppFilters captures enum value "app_filters"
	PermissionResourceAppFilters string = "app_filters"
)

// prop value enum
func (m *Permission) validateResourceEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, permissionTypeResourcePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Permission) validateResource(formats strfmt.Registry) error {

	if swag.IsZero(m.Resource) { // not required
		return nil
	}

	// value enum
	if err := m.validateResourceEnum("resource", "body", m.Resource); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Permission) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Permission) UnmarshalBinary(b []byte) error {
	var res Permission
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
