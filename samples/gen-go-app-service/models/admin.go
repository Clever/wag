// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Admin admin
// swagger:model Admin
type Admin struct {

	// email
	// Min Length: 1
	Email string `json:"email,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// name
	// Min Length: 1
	Name string `json:"name,omitempty"`

	// phone
	Phone string `json:"phone,omitempty"`

	// two factor
	TwoFactor *TwoFactor `json:"twoFactor,omitempty"`

	// verified email
	VerifiedEmail string `json:"verifiedEmail,omitempty"`
}

// Validate validates this admin
func (m *Admin) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEmail(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTwoFactor(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Admin) validateEmail(formats strfmt.Registry) error {

	if swag.IsZero(m.Email) { // not required
		return nil
	}

	if err := validate.MinLength("email", "body", string(m.Email), 1); err != nil {
		return err
	}

	return nil
}

func (m *Admin) validateName(formats strfmt.Registry) error {

	if swag.IsZero(m.Name) { // not required
		return nil
	}

	if err := validate.MinLength("name", "body", string(m.Name), 1); err != nil {
		return err
	}

	return nil
}

func (m *Admin) validateTwoFactor(formats strfmt.Registry) error {

	if swag.IsZero(m.TwoFactor) { // not required
		return nil
	}

	if m.TwoFactor != nil {

		if err := m.TwoFactor.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("twoFactor")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Admin) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Admin) UnmarshalBinary(b []byte) error {
	var res Admin
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
