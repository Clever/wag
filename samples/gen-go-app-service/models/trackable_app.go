// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TrackableApp An app being tracked for P4A
// swagger:model TrackableApp
type TrackableApp struct {

	// name
	Name string `json:"_name,omitempty"`

	// id
	// Required: true
	ID *string `json:"id"`

	// is app group
	IsAppGroup bool `json:"isAppGroup,omitempty"`

	// related apps
	RelatedApps *RelatedApps `json:"relatedApps,omitempty"`

	// related apps v2
	RelatedAppsV2 *RelatedAppsV2 `json:"relatedAppsV2,omitempty"`

	// tracking whitelist
	TrackingWhitelist *TrackingWhitelist `json:"trackingWhitelist,omitempty"`
}

// Validate validates this trackable app
func (m *TrackableApp) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateRelatedApps(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateRelatedAppsV2(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTrackingWhitelist(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TrackableApp) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *TrackableApp) validateRelatedApps(formats strfmt.Registry) error {

	if swag.IsZero(m.RelatedApps) { // not required
		return nil
	}

	if m.RelatedApps != nil {

		if err := m.RelatedApps.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("relatedApps")
			}
			return err
		}
	}

	return nil
}

func (m *TrackableApp) validateRelatedAppsV2(formats strfmt.Registry) error {

	if swag.IsZero(m.RelatedAppsV2) { // not required
		return nil
	}

	if m.RelatedAppsV2 != nil {

		if err := m.RelatedAppsV2.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("relatedAppsV2")
			}
			return err
		}
	}

	return nil
}

func (m *TrackableApp) validateTrackingWhitelist(formats strfmt.Registry) error {

	if swag.IsZero(m.TrackingWhitelist) { // not required
		return nil
	}

	if m.TrackingWhitelist != nil {

		if err := m.TrackingWhitelist.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("trackingWhitelist")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TrackableApp) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TrackableApp) UnmarshalBinary(b []byte) error {
	var res TrackableApp
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
