// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// OnboardingEvent An event representing one of the following: an app starting its integration, an app submitting its integration for review, Clever approving an app's integration, or Clever rejecting an app's integration
// swagger:model OnboardingEvent
type OnboardingEvent struct {

	// event type
	EventType OnboardingEventType `json:"eventType,omitempty"`

	// survey
	Survey []*OnboardingSurveyItem `json:"survey"`

	// timestamp
	Timestamp strfmt.DateTime `json:"timestamp,omitempty"`
}

// Validate validates this onboarding event
func (m *OnboardingEvent) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEventType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSurvey(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OnboardingEvent) validateEventType(formats strfmt.Registry) error {

	if swag.IsZero(m.EventType) { // not required
		return nil
	}

	if err := m.EventType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("eventType")
		}
		return err
	}

	return nil
}

func (m *OnboardingEvent) validateSurvey(formats strfmt.Registry) error {

	if swag.IsZero(m.Survey) { // not required
		return nil
	}

	for i := 0; i < len(m.Survey); i++ {

		if swag.IsZero(m.Survey[i]) { // not required
			continue
		}

		if m.Survey[i] != nil {

			if err := m.Survey[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("survey" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *OnboardingEvent) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OnboardingEvent) UnmarshalBinary(b []byte) error {
	var res OnboardingEvent
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
