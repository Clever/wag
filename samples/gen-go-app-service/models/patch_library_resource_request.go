// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PatchLibraryResourceRequest patch library resource request
// swagger:model PatchLibraryResourceRequest
type PatchLibraryResourceRequest struct {

	// app onboarding
	AppOnboarding *AppOnboarding `json:"appOnboarding,omitempty"`

	// banner icon URL
	// Min Length: 1
	BannerIconURL *string `json:"bannerIconURL,omitempty"`

	// categories
	Categories *ResourceCategories `json:"categories,omitempty"`

	// certifications
	Certifications *ResourceCertifications `json:"certifications,omitempty"`

	// clever ID
	// Min Length: 1
	CleverID *string `json:"cleverID,omitempty"`

	// covid promotion
	// Min Length: 1
	CovidPromotion *string `json:"covidPromotion,omitempty"`

	// description
	// Min Length: 1
	Description *string `json:"description,omitempty"`

	// devices
	Devices *ResourceDevices `json:"devices,omitempty"`

	// featured
	Featured *int32 `json:"featured,omitempty"`

	// features
	Features ResourceFeatures `json:"features"`

	// grade levels
	GradeLevels *ResourceGradeLevels `json:"gradeLevels,omitempty"`

	// icon URL
	// Min Length: 1
	IconURL *string `json:"iconURL,omitempty"`

	// insights
	Insights *InsightsMetadata `json:"insights,omitempty"`

	// install count
	InstallCount *int32 `json:"installCount,omitempty"`

	// library integration
	LibraryIntegration LibraryIntegrationType `json:"libraryIntegration,omitempty"`

	// marketing collateral status
	MarketingCollateralStatus MarketingCollateralStatus `json:"marketingCollateralStatus,omitempty"`

	// name
	// Min Length: 1
	Name *string `json:"name,omitempty"`

	// pricing
	Pricing ResourcePricing `json:"pricing,omitempty"`

	// privacy policy URL
	// Min Length: 1
	PrivacyPolicyURL *string `json:"privacyPolicyURL,omitempty"`

	// search tags
	// Max Items: 10
	// Unique: true
	SearchTags []string `json:"searchTags"`

	// shortname
	// Min Length: 1
	Shortname *string `json:"shortname,omitempty"`

	// show in library
	ShowInLibrary *bool `json:"showInLibrary,omitempty"`

	// stripe user ID
	StripeUserID string `json:"stripeUserID,omitempty"`

	// tagline
	// Min Length: 1
	Tagline *string `json:"tagline,omitempty"`

	// teacher setup guide
	TeacherSetupGuide *TeacherSetupGuide `json:"teacherSetupGuide,omitempty"`

	// teacher setup guide status
	TeacherSetupGuideStatus TeacherSetupGuideStatus `json:"teacherSetupGuideStatus,omitempty"`

	// tos URL
	// Min Length: 1
	TosURL *string `json:"tosURL,omitempty"`

	// universal d s a signatory
	UniversalDSASignatory *bool `json:"universalDSASignatory,omitempty"`

	// url
	// Min Length: 1
	URL *string `json:"url,omitempty"`
}

// Validate validates this patch library resource request
func (m *PatchLibraryResourceRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAppOnboarding(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateBannerIconURL(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCategories(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCertifications(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCleverID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCovidPromotion(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateDevices(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateGradeLevels(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateIconURL(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateInsights(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateLibraryIntegration(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateMarketingCollateralStatus(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePricing(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePrivacyPolicyURL(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSearchTags(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateShortname(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTagline(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTeacherSetupGuide(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTeacherSetupGuideStatus(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTosURL(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateURL(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PatchLibraryResourceRequest) validateAppOnboarding(formats strfmt.Registry) error {

	if swag.IsZero(m.AppOnboarding) { // not required
		return nil
	}

	if m.AppOnboarding != nil {

		if err := m.AppOnboarding.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("appOnboarding")
			}
			return err
		}
	}

	return nil
}

func (m *PatchLibraryResourceRequest) validateBannerIconURL(formats strfmt.Registry) error {

	if swag.IsZero(m.BannerIconURL) { // not required
		return nil
	}

	if err := validate.MinLength("bannerIconURL", "body", string(*m.BannerIconURL), 1); err != nil {
		return err
	}

	return nil
}

func (m *PatchLibraryResourceRequest) validateCategories(formats strfmt.Registry) error {

	if swag.IsZero(m.Categories) { // not required
		return nil
	}

	if m.Categories != nil {

		if err := m.Categories.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("categories")
			}
			return err
		}
	}

	return nil
}

func (m *PatchLibraryResourceRequest) validateCertifications(formats strfmt.Registry) error {

	if swag.IsZero(m.Certifications) { // not required
		return nil
	}

	if m.Certifications != nil {

		if err := m.Certifications.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("certifications")
			}
			return err
		}
	}

	return nil
}

func (m *PatchLibraryResourceRequest) validateCleverID(formats strfmt.Registry) error {

	if swag.IsZero(m.CleverID) { // not required
		return nil
	}

	if err := validate.MinLength("cleverID", "body", string(*m.CleverID), 1); err != nil {
		return err
	}

	return nil
}

func (m *PatchLibraryResourceRequest) validateCovidPromotion(formats strfmt.Registry) error {

	if swag.IsZero(m.CovidPromotion) { // not required
		return nil
	}

	if err := validate.MinLength("covidPromotion", "body", string(*m.CovidPromotion), 1); err != nil {
		return err
	}

	return nil
}

func (m *PatchLibraryResourceRequest) validateDescription(formats strfmt.Registry) error {

	if swag.IsZero(m.Description) { // not required
		return nil
	}

	if err := validate.MinLength("description", "body", string(*m.Description), 1); err != nil {
		return err
	}

	return nil
}

func (m *PatchLibraryResourceRequest) validateDevices(formats strfmt.Registry) error {

	if swag.IsZero(m.Devices) { // not required
		return nil
	}

	if m.Devices != nil {

		if err := m.Devices.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("devices")
			}
			return err
		}
	}

	return nil
}

func (m *PatchLibraryResourceRequest) validateGradeLevels(formats strfmt.Registry) error {

	if swag.IsZero(m.GradeLevels) { // not required
		return nil
	}

	if m.GradeLevels != nil {

		if err := m.GradeLevels.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("gradeLevels")
			}
			return err
		}
	}

	return nil
}

func (m *PatchLibraryResourceRequest) validateIconURL(formats strfmt.Registry) error {

	if swag.IsZero(m.IconURL) { // not required
		return nil
	}

	if err := validate.MinLength("iconURL", "body", string(*m.IconURL), 1); err != nil {
		return err
	}

	return nil
}

func (m *PatchLibraryResourceRequest) validateInsights(formats strfmt.Registry) error {

	if swag.IsZero(m.Insights) { // not required
		return nil
	}

	if m.Insights != nil {

		if err := m.Insights.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("insights")
			}
			return err
		}
	}

	return nil
}

func (m *PatchLibraryResourceRequest) validateLibraryIntegration(formats strfmt.Registry) error {

	if swag.IsZero(m.LibraryIntegration) { // not required
		return nil
	}

	if err := m.LibraryIntegration.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("libraryIntegration")
		}
		return err
	}

	return nil
}

func (m *PatchLibraryResourceRequest) validateMarketingCollateralStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.MarketingCollateralStatus) { // not required
		return nil
	}

	if err := m.MarketingCollateralStatus.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("marketingCollateralStatus")
		}
		return err
	}

	return nil
}

func (m *PatchLibraryResourceRequest) validateName(formats strfmt.Registry) error {

	if swag.IsZero(m.Name) { // not required
		return nil
	}

	if err := validate.MinLength("name", "body", string(*m.Name), 1); err != nil {
		return err
	}

	return nil
}

func (m *PatchLibraryResourceRequest) validatePricing(formats strfmt.Registry) error {

	if swag.IsZero(m.Pricing) { // not required
		return nil
	}

	if err := m.Pricing.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("pricing")
		}
		return err
	}

	return nil
}

func (m *PatchLibraryResourceRequest) validatePrivacyPolicyURL(formats strfmt.Registry) error {

	if swag.IsZero(m.PrivacyPolicyURL) { // not required
		return nil
	}

	if err := validate.MinLength("privacyPolicyURL", "body", string(*m.PrivacyPolicyURL), 1); err != nil {
		return err
	}

	return nil
}

func (m *PatchLibraryResourceRequest) validateSearchTags(formats strfmt.Registry) error {

	if swag.IsZero(m.SearchTags) { // not required
		return nil
	}

	iSearchTagsSize := int64(len(m.SearchTags))

	if err := validate.MaxItems("searchTags", "body", iSearchTagsSize, 10); err != nil {
		return err
	}

	if err := validate.UniqueItems("searchTags", "body", m.SearchTags); err != nil {
		return err
	}

	return nil
}

func (m *PatchLibraryResourceRequest) validateShortname(formats strfmt.Registry) error {

	if swag.IsZero(m.Shortname) { // not required
		return nil
	}

	if err := validate.MinLength("shortname", "body", string(*m.Shortname), 1); err != nil {
		return err
	}

	return nil
}

func (m *PatchLibraryResourceRequest) validateTagline(formats strfmt.Registry) error {

	if swag.IsZero(m.Tagline) { // not required
		return nil
	}

	if err := validate.MinLength("tagline", "body", string(*m.Tagline), 1); err != nil {
		return err
	}

	return nil
}

func (m *PatchLibraryResourceRequest) validateTeacherSetupGuide(formats strfmt.Registry) error {

	if swag.IsZero(m.TeacherSetupGuide) { // not required
		return nil
	}

	if m.TeacherSetupGuide != nil {

		if err := m.TeacherSetupGuide.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("teacherSetupGuide")
			}
			return err
		}
	}

	return nil
}

func (m *PatchLibraryResourceRequest) validateTeacherSetupGuideStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.TeacherSetupGuideStatus) { // not required
		return nil
	}

	if err := m.TeacherSetupGuideStatus.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("teacherSetupGuideStatus")
		}
		return err
	}

	return nil
}

func (m *PatchLibraryResourceRequest) validateTosURL(formats strfmt.Registry) error {

	if swag.IsZero(m.TosURL) { // not required
		return nil
	}

	if err := validate.MinLength("tosURL", "body", string(*m.TosURL), 1); err != nil {
		return err
	}

	return nil
}

func (m *PatchLibraryResourceRequest) validateURL(formats strfmt.Registry) error {

	if swag.IsZero(m.URL) { // not required
		return nil
	}

	if err := validate.MinLength("url", "body", string(*m.URL), 1); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PatchLibraryResourceRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PatchLibraryResourceRequest) UnmarshalBinary(b []byte) error {
	var res PatchLibraryResourceRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
