// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Platform Platforms are a way of distinguishing the different software clients of an app (e.g. iOS app, Desktop App, etc.)
// swagger:model Platform
type Platform struct {

	// app Id
	AppID string `json:"appId,omitempty"`

	// client Id
	ClientID string `json:"clientId,omitempty"`

	// disabled
	Disabled bool `json:"disabled,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// redirect uris
	RedirectUris []*RedirectURI `json:"redirectUris"`
}

// Validate validates this platform
func (m *Platform) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateRedirectUris(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var platformTypeNamePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ios","android","desktop"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		platformTypeNamePropEnum = append(platformTypeNamePropEnum, v)
	}
}

const (
	// PlatformNameIos captures enum value "ios"
	PlatformNameIos string = "ios"
	// PlatformNameAndroid captures enum value "android"
	PlatformNameAndroid string = "android"
	// PlatformNameDesktop captures enum value "desktop"
	PlatformNameDesktop string = "desktop"
)

// prop value enum
func (m *Platform) validateNameEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, platformTypeNamePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Platform) validateName(formats strfmt.Registry) error {

	if swag.IsZero(m.Name) { // not required
		return nil
	}

	// value enum
	if err := m.validateNameEnum("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *Platform) validateRedirectUris(formats strfmt.Registry) error {

	if swag.IsZero(m.RedirectUris) { // not required
		return nil
	}

	for i := 0; i < len(m.RedirectUris); i++ {

		if swag.IsZero(m.RedirectUris[i]) { // not required
			continue
		}

		if m.RedirectUris[i] != nil {

			if err := m.RedirectUris[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("redirectUris" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Platform) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Platform) UnmarshalBinary(b []byte) error {
	var res Platform
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
