// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CollectionSchema collection schema
// swagger:model CollectionSchema
type CollectionSchema struct {

	// extension fields status
	ExtensionFieldsStatus string `json:"extensionFieldsStatus,omitempty"`

	// field schemas
	FieldSchemas []*FieldSchema `json:"fieldSchemas"`

	// name
	Name string `json:"name,omitempty"`

	// opt in status
	OptInStatus string `json:"optInStatus,omitempty"`
}

// Validate validates this collection schema
func (m *CollectionSchema) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateExtensionFieldsStatus(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateFieldSchemas(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateOptInStatus(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var collectionSchemaTypeExtensionFieldsStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["none","required","optional"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		collectionSchemaTypeExtensionFieldsStatusPropEnum = append(collectionSchemaTypeExtensionFieldsStatusPropEnum, v)
	}
}

const (
	// CollectionSchemaExtensionFieldsStatusNone captures enum value "none"
	CollectionSchemaExtensionFieldsStatusNone string = "none"
	// CollectionSchemaExtensionFieldsStatusRequired captures enum value "required"
	CollectionSchemaExtensionFieldsStatusRequired string = "required"
	// CollectionSchemaExtensionFieldsStatusOptional captures enum value "optional"
	CollectionSchemaExtensionFieldsStatusOptional string = "optional"
)

// prop value enum
func (m *CollectionSchema) validateExtensionFieldsStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, collectionSchemaTypeExtensionFieldsStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *CollectionSchema) validateExtensionFieldsStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.ExtensionFieldsStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validateExtensionFieldsStatusEnum("extensionFieldsStatus", "body", m.ExtensionFieldsStatus); err != nil {
		return err
	}

	return nil
}

func (m *CollectionSchema) validateFieldSchemas(formats strfmt.Registry) error {

	if swag.IsZero(m.FieldSchemas) { // not required
		return nil
	}

	for i := 0; i < len(m.FieldSchemas); i++ {

		if swag.IsZero(m.FieldSchemas[i]) { // not required
			continue
		}

		if m.FieldSchemas[i] != nil {

			if err := m.FieldSchemas[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("fieldSchemas" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var collectionSchemaTypeOptInStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["in","out","clever_required"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		collectionSchemaTypeOptInStatusPropEnum = append(collectionSchemaTypeOptInStatusPropEnum, v)
	}
}

const (
	// CollectionSchemaOptInStatusIn captures enum value "in"
	CollectionSchemaOptInStatusIn string = "in"
	// CollectionSchemaOptInStatusOut captures enum value "out"
	CollectionSchemaOptInStatusOut string = "out"
	// CollectionSchemaOptInStatusCleverRequired captures enum value "clever_required"
	CollectionSchemaOptInStatusCleverRequired string = "clever_required"
)

// prop value enum
func (m *CollectionSchema) validateOptInStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, collectionSchemaTypeOptInStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *CollectionSchema) validateOptInStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.OptInStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validateOptInStatusEnum("optInStatus", "body", m.OptInStatus); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CollectionSchema) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CollectionSchema) UnmarshalBinary(b []byte) error {
	var res CollectionSchema
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
