// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// KnownHost known host
// swagger:model KnownHost
type KnownHost struct {

	// app Id
	// Min Length: 1
	AppID string `json:"appId,omitempty"`

	// connect type
	ConnectType string `json:"connectType,omitempty"`

	// ip address
	// Min Length: 1
	IPAddress string `json:"ipAddress,omitempty"`

	// key
	// Min Length: 1
	Key string `json:"key,omitempty"`

	// url
	// Min Length: 1
	URL string `json:"url,omitempty"`
}

// Validate validates this known host
func (m *KnownHost) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAppID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateConnectType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateIPAddress(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateKey(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateURL(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *KnownHost) validateAppID(formats strfmt.Registry) error {

	if swag.IsZero(m.AppID) { // not required
		return nil
	}

	if err := validate.MinLength("appId", "body", string(m.AppID), 1); err != nil {
		return err
	}

	return nil
}

var knownHostTypeConnectTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ssh-rsa","ecdsa-sha2-nistp256"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		knownHostTypeConnectTypePropEnum = append(knownHostTypeConnectTypePropEnum, v)
	}
}

const (
	// KnownHostConnectTypeSSHRsa captures enum value "ssh-rsa"
	KnownHostConnectTypeSSHRsa string = "ssh-rsa"
	// KnownHostConnectTypeEcdsaSha2Nistp256 captures enum value "ecdsa-sha2-nistp256"
	KnownHostConnectTypeEcdsaSha2Nistp256 string = "ecdsa-sha2-nistp256"
)

// prop value enum
func (m *KnownHost) validateConnectTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, knownHostTypeConnectTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *KnownHost) validateConnectType(formats strfmt.Registry) error {

	if swag.IsZero(m.ConnectType) { // not required
		return nil
	}

	// value enum
	if err := m.validateConnectTypeEnum("connectType", "body", m.ConnectType); err != nil {
		return err
	}

	return nil
}

func (m *KnownHost) validateIPAddress(formats strfmt.Registry) error {

	if swag.IsZero(m.IPAddress) { // not required
		return nil
	}

	if err := validate.MinLength("ipAddress", "body", string(m.IPAddress), 1); err != nil {
		return err
	}

	return nil
}

func (m *KnownHost) validateKey(formats strfmt.Registry) error {

	if swag.IsZero(m.Key) { // not required
		return nil
	}

	if err := validate.MinLength("key", "body", string(m.Key), 1); err != nil {
		return err
	}

	return nil
}

func (m *KnownHost) validateURL(formats strfmt.Registry) error {

	if swag.IsZero(m.URL) { // not required
		return nil
	}

	if err := validate.MinLength("url", "body", string(m.URL), 1); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *KnownHost) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *KnownHost) UnmarshalBinary(b []byte) error {
	var res KnownHost
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
