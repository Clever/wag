// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// Onboarding A data structure used to track an app's progress through the self-serve onboarding flow
// swagger:model Onboarding
type Onboarding struct {

	// events
	Events []*OnboardingEvent `json:"events"`

	// instant login
	InstantLogin []*OnboardingEvent `json:"instantLogin"`

	// ios
	Ios []*OnboardingEvent `json:"ios"`

	// secure sync
	SecureSync []*OnboardingEvent `json:"secureSync"`

	// secure sync lite
	SecureSyncLite []*OnboardingEvent `json:"secureSyncLite"`
}

// Validate validates this onboarding
func (m *Onboarding) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEvents(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateInstantLogin(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateIos(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSecureSync(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSecureSyncLite(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Onboarding) validateEvents(formats strfmt.Registry) error {

	if swag.IsZero(m.Events) { // not required
		return nil
	}

	for i := 0; i < len(m.Events); i++ {

		if swag.IsZero(m.Events[i]) { // not required
			continue
		}

		if m.Events[i] != nil {

			if err := m.Events[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("events" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Onboarding) validateInstantLogin(formats strfmt.Registry) error {

	if swag.IsZero(m.InstantLogin) { // not required
		return nil
	}

	for i := 0; i < len(m.InstantLogin); i++ {

		if swag.IsZero(m.InstantLogin[i]) { // not required
			continue
		}

		if m.InstantLogin[i] != nil {

			if err := m.InstantLogin[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("instantLogin" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Onboarding) validateIos(formats strfmt.Registry) error {

	if swag.IsZero(m.Ios) { // not required
		return nil
	}

	for i := 0; i < len(m.Ios); i++ {

		if swag.IsZero(m.Ios[i]) { // not required
			continue
		}

		if m.Ios[i] != nil {

			if err := m.Ios[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ios" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Onboarding) validateSecureSync(formats strfmt.Registry) error {

	if swag.IsZero(m.SecureSync) { // not required
		return nil
	}

	for i := 0; i < len(m.SecureSync); i++ {

		if swag.IsZero(m.SecureSync[i]) { // not required
			continue
		}

		if m.SecureSync[i] != nil {

			if err := m.SecureSync[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("secureSync" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Onboarding) validateSecureSyncLite(formats strfmt.Registry) error {

	if swag.IsZero(m.SecureSyncLite) { // not required
		return nil
	}

	for i := 0; i < len(m.SecureSyncLite); i++ {

		if swag.IsZero(m.SecureSyncLite[i]) { // not required
			continue
		}

		if m.SecureSyncLite[i] != nil {

			if err := m.SecureSyncLite[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("secureSyncLite" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Onboarding) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Onboarding) UnmarshalBinary(b []byte) error {
	var res Onboarding
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
