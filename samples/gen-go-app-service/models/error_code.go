// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// ErrorCode Error Codes
// swagger:model ErrorCode
type ErrorCode string

const (
	// ErrorCodeUnknown captures enum value "Unknown"
	ErrorCodeUnknown ErrorCode = "Unknown"
	// ErrorCodeAdminAlreadyExists captures enum value "AdminAlreadyExists"
	ErrorCodeAdminAlreadyExists ErrorCode = "AdminAlreadyExists"
	// ErrorCodeAppNotFound captures enum value "AppNotFound"
	ErrorCodeAppNotFound ErrorCode = "AppNotFound"
	// ErrorCodeDuplicateRedirectURI captures enum value "DuplicateRedirectURI"
	ErrorCodeDuplicateRedirectURI ErrorCode = "DuplicateRedirectURI"
	// ErrorCodeDuplicateShortname captures enum value "DuplicateShortname"
	ErrorCodeDuplicateShortname ErrorCode = "DuplicateShortname"
	// ErrorCodeEmailExistsAsDistrictUser captures enum value "EmailExistsAsDistrictUser"
	ErrorCodeEmailExistsAsDistrictUser ErrorCode = "EmailExistsAsDistrictUser"
	// ErrorCodeInvalidAccessTier captures enum value "InvalidAccessTier"
	ErrorCodeInvalidAccessTier ErrorCode = "InvalidAccessTier"
	// ErrorCodeInvalidCategory captures enum value "InvalidCategory"
	ErrorCodeInvalidCategory ErrorCode = "InvalidCategory"
	// ErrorCodeInvalidEmail captures enum value "InvalidEmail"
	ErrorCodeInvalidEmail ErrorCode = "InvalidEmail"
	// ErrorCodeInvalidIconURL captures enum value "InvalidIconURL"
	ErrorCodeInvalidIconURL ErrorCode = "InvalidIconURL"
	// ErrorCodeInvalidID captures enum value "InvalidID"
	ErrorCodeInvalidID ErrorCode = "InvalidID"
	// ErrorCodeInvalidLogoURL captures enum value "InvalidLogoURL"
	ErrorCodeInvalidLogoURL ErrorCode = "InvalidLogoURL"
	// ErrorCodeInvalidPassword captures enum value "InvalidPassword"
	ErrorCodeInvalidPassword ErrorCode = "InvalidPassword"
	// ErrorCodeInvalidRedirectURI captures enum value "InvalidRedirectURI"
	ErrorCodeInvalidRedirectURI ErrorCode = "InvalidRedirectURI"
	// ErrorCodeInvalidScope captures enum value "InvalidScope"
	ErrorCodeInvalidScope ErrorCode = "InvalidScope"
	// ErrorCodeInvalidVersionSettings captures enum value "InvalidVersionSettings"
	ErrorCodeInvalidVersionSettings ErrorCode = "InvalidVersionSettings"
	// ErrorCodeInvalidWebsiteURL captures enum value "InvalidWebsiteURL"
	ErrorCodeInvalidWebsiteURL ErrorCode = "InvalidWebsiteURL"
	// ErrorCodeLastAdminPermission captures enum value "LastAdminPermission"
	ErrorCodeLastAdminPermission ErrorCode = "LastAdminPermission"
	// ErrorCodeOnboardingNotFound captures enum value "OnboardingNotFound"
	ErrorCodeOnboardingNotFound ErrorCode = "OnboardingNotFound"
	// ErrorCodeScopeNotAllowedForAccessTier captures enum value "ScopeNotAllowedForAccessTier"
	ErrorCodeScopeNotAllowedForAccessTier ErrorCode = "ScopeNotAllowedForAccessTier"
	// ErrorCodeInvalidShortname captures enum value "InvalidShortname"
	ErrorCodeInvalidShortname ErrorCode = "InvalidShortname"
	// ErrorCodeInvalidAppSchema captures enum value "InvalidAppSchema"
	ErrorCodeInvalidAppSchema ErrorCode = "InvalidAppSchema"
)

// for schema
var errorCodeEnum []interface{}

func init() {
	var res []ErrorCode
	if err := json.Unmarshal([]byte(`["Unknown","AdminAlreadyExists","AppNotFound","DuplicateRedirectURI","DuplicateShortname","EmailExistsAsDistrictUser","InvalidAccessTier","InvalidCategory","InvalidEmail","InvalidIconURL","InvalidID","InvalidLogoURL","InvalidPassword","InvalidRedirectURI","InvalidScope","InvalidVersionSettings","InvalidWebsiteURL","LastAdminPermission","OnboardingNotFound","ScopeNotAllowedForAccessTier","InvalidShortname","InvalidAppSchema"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		errorCodeEnum = append(errorCodeEnum, v)
	}
}

func (m ErrorCode) validateErrorCodeEnum(path, location string, value ErrorCode) error {
	if err := validate.Enum(path, location, value, errorCodeEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this error code
func (m ErrorCode) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateErrorCodeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
