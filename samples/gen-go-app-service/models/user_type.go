// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// UserType Valid user types
// swagger:model UserType
type UserType string

const (
	// UserTypeTeachers captures enum value "teachers"
	UserTypeTeachers UserType = "teachers"
	// UserTypeStudents captures enum value "students"
	UserTypeStudents UserType = "students"
	// UserTypeDistrictAdmins captures enum value "district_admins"
	UserTypeDistrictAdmins UserType = "district_admins"
	// UserTypeSchoolAdmins captures enum value "school_admins"
	UserTypeSchoolAdmins UserType = "school_admins"
	// UserTypeCleverUsers captures enum value "clever_users"
	UserTypeCleverUsers UserType = "clever_users"
)

// for schema
var userTypeEnum []interface{}

func init() {
	var res []UserType
	if err := json.Unmarshal([]byte(`["teachers","students","district_admins","school_admins","clever_users"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		userTypeEnum = append(userTypeEnum, v)
	}
}

func (m UserType) validateUserTypeEnum(path, location string, value UserType) error {
	if err := validate.Enum(path, location, value, userTypeEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this user type
func (m UserType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateUserTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
