// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AnalyticsApp App metadata for apps that don't exist on Clever (for p4a)
// swagger:model AnalyticsApp
type AnalyticsApp struct {

	// banner icon URL
	BannerIconURL string `json:"bannerIconURL,omitempty"`

	// categories
	Categories *ResourceCategories `json:"categories,omitempty"`

	// certifications
	Certifications *ResourceCertifications `json:"certifications,omitempty"`

	// clever ID
	CleverID string `json:"cleverID,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// devices
	Devices *ResourceDevices `json:"devices,omitempty"`

	// featured
	Featured int32 `json:"featured,omitempty"`

	// features
	Features ResourceFeatures `json:"features"`

	// grade levels
	GradeLevels *ResourceGradeLevels `json:"gradeLevels,omitempty"`

	// icon URL
	IconURL string `json:"iconURL,omitempty"`

	// id
	// Required: true
	ID *string `json:"id"`

	// insights
	Insights *InsightsMetadata `json:"insights,omitempty"`

	// install count
	InstallCount int32 `json:"installCount,omitempty"`

	// library ID
	LibraryID string `json:"libraryID,omitempty"`

	// library integration
	LibraryIntegration LibraryIntegrationType `json:"libraryIntegration,omitempty"`

	// marketing collateral status
	MarketingCollateralStatus MarketingCollateralStatus `json:"marketingCollateralStatus,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// pricing
	Pricing ResourcePricing `json:"pricing,omitempty"`

	// privacy policy URL
	PrivacyPolicyURL string `json:"privacyPolicyURL,omitempty"`

	// search tags
	SearchTags []string `json:"searchTags"`

	// shortname
	Shortname string `json:"shortname,omitempty"`

	// show in library
	ShowInLibrary bool `json:"showInLibrary,omitempty"`

	// stripe user ID
	StripeUserID string `json:"stripeUserID,omitempty"`

	// tagline
	Tagline string `json:"tagline,omitempty"`

	// tiers
	Tiers Tiers `json:"tiers"`

	// tos URL
	TosURL string `json:"tosURL,omitempty"`

	// universal d s a signatory
	UniversalDSASignatory bool `json:"universalDSASignatory,omitempty"`

	// url
	URL string `json:"url,omitempty"`
}

// Validate validates this analytics app
func (m *AnalyticsApp) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCategories(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCertifications(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateDevices(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateGradeLevels(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateInsights(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateLibraryIntegration(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateMarketingCollateralStatus(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePricing(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSearchTags(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AnalyticsApp) validateCategories(formats strfmt.Registry) error {

	if swag.IsZero(m.Categories) { // not required
		return nil
	}

	if m.Categories != nil {

		if err := m.Categories.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("categories")
			}
			return err
		}
	}

	return nil
}

func (m *AnalyticsApp) validateCertifications(formats strfmt.Registry) error {

	if swag.IsZero(m.Certifications) { // not required
		return nil
	}

	if m.Certifications != nil {

		if err := m.Certifications.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("certifications")
			}
			return err
		}
	}

	return nil
}

func (m *AnalyticsApp) validateDevices(formats strfmt.Registry) error {

	if swag.IsZero(m.Devices) { // not required
		return nil
	}

	if m.Devices != nil {

		if err := m.Devices.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("devices")
			}
			return err
		}
	}

	return nil
}

func (m *AnalyticsApp) validateGradeLevels(formats strfmt.Registry) error {

	if swag.IsZero(m.GradeLevels) { // not required
		return nil
	}

	if m.GradeLevels != nil {

		if err := m.GradeLevels.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("gradeLevels")
			}
			return err
		}
	}

	return nil
}

func (m *AnalyticsApp) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *AnalyticsApp) validateInsights(formats strfmt.Registry) error {

	if swag.IsZero(m.Insights) { // not required
		return nil
	}

	if m.Insights != nil {

		if err := m.Insights.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("insights")
			}
			return err
		}
	}

	return nil
}

func (m *AnalyticsApp) validateLibraryIntegration(formats strfmt.Registry) error {

	if swag.IsZero(m.LibraryIntegration) { // not required
		return nil
	}

	if err := m.LibraryIntegration.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("libraryIntegration")
		}
		return err
	}

	return nil
}

func (m *AnalyticsApp) validateMarketingCollateralStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.MarketingCollateralStatus) { // not required
		return nil
	}

	if err := m.MarketingCollateralStatus.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("marketingCollateralStatus")
		}
		return err
	}

	return nil
}

func (m *AnalyticsApp) validatePricing(formats strfmt.Registry) error {

	if swag.IsZero(m.Pricing) { // not required
		return nil
	}

	if err := m.Pricing.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("pricing")
		}
		return err
	}

	return nil
}

func (m *AnalyticsApp) validateSearchTags(formats strfmt.Registry) error {

	if swag.IsZero(m.SearchTags) { // not required
		return nil
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AnalyticsApp) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AnalyticsApp) UnmarshalBinary(b []byte) error {
	var res AnalyticsApp
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
