// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PatchAppRequest An update to an app
// swagger:model PatchAppRequest
type PatchAppRequest struct {

	// alt names
	AltNames []string `json:"altNames"`

	// categories
	Categories []string `json:"categories"`

	// customer solutions notes
	CustomerSolutionsNotes *string `json:"customerSolutionsNotes,omitempty"`

	// default access tier
	DefaultAccessTier *string `json:"defaultAccessTier,omitempty"`

	// description
	Description *string `json:"description,omitempty"`

	// edsurge Url
	EdsurgeURL *string `json:"edsurgeUrl,omitempty"`

	// image
	Image *Image `json:"image,omitempty"`

	// invite message
	// Max Length: 1000
	InviteMessage *string `json:"inviteMessage,omitempty"`

	// ios redirect Uri
	IosRedirectURI *string `json:"iosRedirectUri,omitempty"`

	// name
	// Min Length: 1
	Name *string `json:"name,omitempty"`

	// non owner impersonation disabled
	NonOwnerImpersonationDisabled *bool `json:"nonOwnerImpersonationDisabled,omitempty"`

	// redirect uris
	RedirectUris []string `json:"redirectUris"`

	// required scopes
	// Min Items: 1
	RequiredScopes []string `json:"requiredScopes"`

	// sales contact
	SalesContact *string `json:"salesContact,omitempty"`

	// shortname
	// Min Length: 1
	// Pattern: [0-9a-zA-Z_-]+
	Shortname *string `json:"shortname,omitempty"`

	// support contact
	SupportContact *string `json:"supportContact,omitempty"`

	// support contact name
	SupportContactName *string `json:"supportContactName,omitempty"`

	// supported user types
	SupportedUserTypes []UserType `json:"supportedUserTypes"`

	// tags
	Tags []string `json:"tags"`

	// versions
	Versions *VersionSettings `json:"versions,omitempty"`

	// website Url
	// Min Length: 1
	WebsiteURL *string `json:"websiteUrl,omitempty"`
}

// Validate validates this patch app request
func (m *PatchAppRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAltNames(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCategories(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateImage(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateInviteMessage(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateRedirectUris(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateRequiredScopes(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateShortname(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSupportedUserTypes(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTags(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateVersions(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateWebsiteURL(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PatchAppRequest) validateAltNames(formats strfmt.Registry) error {

	if swag.IsZero(m.AltNames) { // not required
		return nil
	}

	return nil
}

func (m *PatchAppRequest) validateCategories(formats strfmt.Registry) error {

	if swag.IsZero(m.Categories) { // not required
		return nil
	}

	return nil
}

func (m *PatchAppRequest) validateImage(formats strfmt.Registry) error {

	if swag.IsZero(m.Image) { // not required
		return nil
	}

	if m.Image != nil {

		if err := m.Image.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("image")
			}
			return err
		}
	}

	return nil
}

func (m *PatchAppRequest) validateInviteMessage(formats strfmt.Registry) error {

	if swag.IsZero(m.InviteMessage) { // not required
		return nil
	}

	if err := validate.MaxLength("inviteMessage", "body", string(*m.InviteMessage), 1000); err != nil {
		return err
	}

	return nil
}

func (m *PatchAppRequest) validateName(formats strfmt.Registry) error {

	if swag.IsZero(m.Name) { // not required
		return nil
	}

	if err := validate.MinLength("name", "body", string(*m.Name), 1); err != nil {
		return err
	}

	return nil
}

func (m *PatchAppRequest) validateRedirectUris(formats strfmt.Registry) error {

	if swag.IsZero(m.RedirectUris) { // not required
		return nil
	}

	return nil
}

func (m *PatchAppRequest) validateRequiredScopes(formats strfmt.Registry) error {

	if swag.IsZero(m.RequiredScopes) { // not required
		return nil
	}

	iRequiredScopesSize := int64(len(m.RequiredScopes))

	if err := validate.MinItems("requiredScopes", "body", iRequiredScopesSize, 1); err != nil {
		return err
	}

	return nil
}

func (m *PatchAppRequest) validateShortname(formats strfmt.Registry) error {

	if swag.IsZero(m.Shortname) { // not required
		return nil
	}

	if err := validate.MinLength("shortname", "body", string(*m.Shortname), 1); err != nil {
		return err
	}

	if err := validate.Pattern("shortname", "body", string(*m.Shortname), `[0-9a-zA-Z_-]+`); err != nil {
		return err
	}

	return nil
}

func (m *PatchAppRequest) validateSupportedUserTypes(formats strfmt.Registry) error {

	if swag.IsZero(m.SupportedUserTypes) { // not required
		return nil
	}

	for i := 0; i < len(m.SupportedUserTypes); i++ {

		if err := m.SupportedUserTypes[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("supportedUserTypes" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *PatchAppRequest) validateTags(formats strfmt.Registry) error {

	if swag.IsZero(m.Tags) { // not required
		return nil
	}

	return nil
}

func (m *PatchAppRequest) validateVersions(formats strfmt.Registry) error {

	if swag.IsZero(m.Versions) { // not required
		return nil
	}

	if m.Versions != nil {

		if err := m.Versions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("versions")
			}
			return err
		}
	}

	return nil
}

func (m *PatchAppRequest) validateWebsiteURL(formats strfmt.Registry) error {

	if swag.IsZero(m.WebsiteURL) { // not required
		return nil
	}

	if err := validate.MinLength("websiteUrl", "body", string(*m.WebsiteURL), 1); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PatchAppRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PatchAppRequest) UnmarshalBinary(b []byte) error {
	var res PatchAppRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
