// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package server is a generated GoMock package.
package server

import (
	context "context"
	models "github.com/Clever/wag/samples/gen-go-app-service/models"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockController is a mock of Controller interface
type MockController struct {
	ctrl     *gomock.Controller
	recorder *MockControllerMockRecorder
}

// MockControllerMockRecorder is the mock recorder for MockController
type MockControllerMockRecorder struct {
	mock *MockController
}

// NewMockController creates a new mock instance
func NewMockController(ctrl *gomock.Controller) *MockController {
	mock := &MockController{ctrl: ctrl}
	mock.recorder = &MockControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockController) EXPECT() *MockControllerMockRecorder {
	return m.recorder
}

// HealthCheck mocks base method
func (m *MockController) HealthCheck(ctx context.Context) error {
	ret := m.ctrl.Call(m, "HealthCheck", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// HealthCheck indicates an expected call of HealthCheck
func (mr *MockControllerMockRecorder) HealthCheck(ctx interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HealthCheck", reflect.TypeOf((*MockController)(nil).HealthCheck), ctx)
}

// GetAdmins mocks base method
func (m *MockController) GetAdmins(ctx context.Context, i *models.GetAdminsInput) ([]models.Admin, error) {
	ret := m.ctrl.Call(m, "GetAdmins", ctx, i)
	ret0, _ := ret[0].([]models.Admin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAdmins indicates an expected call of GetAdmins
func (mr *MockControllerMockRecorder) GetAdmins(ctx, i interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAdmins", reflect.TypeOf((*MockController)(nil).GetAdmins), ctx, i)
}

// DeleteAdmin mocks base method
func (m *MockController) DeleteAdmin(ctx context.Context, adminID string) error {
	ret := m.ctrl.Call(m, "DeleteAdmin", ctx, adminID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAdmin indicates an expected call of DeleteAdmin
func (mr *MockControllerMockRecorder) DeleteAdmin(ctx, adminID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAdmin", reflect.TypeOf((*MockController)(nil).DeleteAdmin), ctx, adminID)
}

// GetAdminByID mocks base method
func (m *MockController) GetAdminByID(ctx context.Context, adminID string) (*models.Admin, error) {
	ret := m.ctrl.Call(m, "GetAdminByID", ctx, adminID)
	ret0, _ := ret[0].(*models.Admin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAdminByID indicates an expected call of GetAdminByID
func (mr *MockControllerMockRecorder) GetAdminByID(ctx, adminID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAdminByID", reflect.TypeOf((*MockController)(nil).GetAdminByID), ctx, adminID)
}

// UpdateAdmin mocks base method
func (m *MockController) UpdateAdmin(ctx context.Context, i *models.UpdateAdminInput) (*models.Admin, error) {
	ret := m.ctrl.Call(m, "UpdateAdmin", ctx, i)
	ret0, _ := ret[0].(*models.Admin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAdmin indicates an expected call of UpdateAdmin
func (mr *MockControllerMockRecorder) UpdateAdmin(ctx, i interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAdmin", reflect.TypeOf((*MockController)(nil).UpdateAdmin), ctx, i)
}

// CreateAdmin mocks base method
func (m *MockController) CreateAdmin(ctx context.Context, i *models.CreateAdminInput) (*models.Admin, error) {
	ret := m.ctrl.Call(m, "CreateAdmin", ctx, i)
	ret0, _ := ret[0].(*models.Admin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAdmin indicates an expected call of CreateAdmin
func (mr *MockControllerMockRecorder) CreateAdmin(ctx, i interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAdmin", reflect.TypeOf((*MockController)(nil).CreateAdmin), ctx, i)
}

// GetAppsForAdminDeprecated mocks base method
func (m *MockController) GetAppsForAdminDeprecated(ctx context.Context, adminID string) ([]models.App, error) {
	ret := m.ctrl.Call(m, "GetAppsForAdminDeprecated", ctx, adminID)
	ret0, _ := ret[0].([]models.App)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAppsForAdminDeprecated indicates an expected call of GetAppsForAdminDeprecated
func (mr *MockControllerMockRecorder) GetAppsForAdminDeprecated(ctx, adminID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppsForAdminDeprecated", reflect.TypeOf((*MockController)(nil).GetAppsForAdminDeprecated), ctx, adminID)
}

// VerifyCode mocks base method
func (m *MockController) VerifyCode(ctx context.Context, i *models.VerifyCodeInput) error {
	ret := m.ctrl.Call(m, "VerifyCode", ctx, i)
	ret0, _ := ret[0].(error)
	return ret0
}

// VerifyCode indicates an expected call of VerifyCode
func (mr *MockControllerMockRecorder) VerifyCode(ctx, i interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyCode", reflect.TypeOf((*MockController)(nil).VerifyCode), ctx, i)
}

// CreateVerificationCode mocks base method
func (m *MockController) CreateVerificationCode(ctx context.Context, i *models.CreateVerificationCodeInput) (*models.VerificationCodeResponse, error) {
	ret := m.ctrl.Call(m, "CreateVerificationCode", ctx, i)
	ret0, _ := ret[0].(*models.VerificationCodeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVerificationCode indicates an expected call of CreateVerificationCode
func (mr *MockControllerMockRecorder) CreateVerificationCode(ctx, i interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVerificationCode", reflect.TypeOf((*MockController)(nil).CreateVerificationCode), ctx, i)
}

// VerifyAdminEmail mocks base method
func (m *MockController) VerifyAdminEmail(ctx context.Context, i *models.VerifyAdminEmailInput) error {
	ret := m.ctrl.Call(m, "VerifyAdminEmail", ctx, i)
	ret0, _ := ret[0].(error)
	return ret0
}

// VerifyAdminEmail indicates an expected call of VerifyAdminEmail
func (mr *MockControllerMockRecorder) VerifyAdminEmail(ctx, i interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyAdminEmail", reflect.TypeOf((*MockController)(nil).VerifyAdminEmail), ctx, i)
}

// GetAllAnalyticsApps mocks base method
func (m *MockController) GetAllAnalyticsApps(ctx context.Context) (*models.AnalyticsApps, error) {
	ret := m.ctrl.Call(m, "GetAllAnalyticsApps", ctx)
	ret0, _ := ret[0].(*models.AnalyticsApps)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllAnalyticsApps indicates an expected call of GetAllAnalyticsApps
func (mr *MockControllerMockRecorder) GetAllAnalyticsApps(ctx interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllAnalyticsApps", reflect.TypeOf((*MockController)(nil).GetAllAnalyticsApps), ctx)
}

// GetAnalyticsAppByShortname mocks base method
func (m *MockController) GetAnalyticsAppByShortname(ctx context.Context, shortname string) (*models.AnalyticsApp, error) {
	ret := m.ctrl.Call(m, "GetAnalyticsAppByShortname", ctx, shortname)
	ret0, _ := ret[0].(*models.AnalyticsApp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAnalyticsAppByShortname indicates an expected call of GetAnalyticsAppByShortname
func (mr *MockControllerMockRecorder) GetAnalyticsAppByShortname(ctx, shortname interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAnalyticsAppByShortname", reflect.TypeOf((*MockController)(nil).GetAnalyticsAppByShortname), ctx, shortname)
}

// GetAllTrackableApps mocks base method
func (m *MockController) GetAllTrackableApps(ctx context.Context) (*models.TrackableApps, error) {
	ret := m.ctrl.Call(m, "GetAllTrackableApps", ctx)
	ret0, _ := ret[0].(*models.TrackableApps)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllTrackableApps indicates an expected call of GetAllTrackableApps
func (mr *MockControllerMockRecorder) GetAllTrackableApps(ctx interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllTrackableApps", reflect.TypeOf((*MockController)(nil).GetAllTrackableApps), ctx)
}

// GetAnalyticsUsageUrls mocks base method
func (m *MockController) GetAnalyticsUsageUrls(ctx context.Context) (*models.UsageUrls, error) {
	ret := m.ctrl.Call(m, "GetAnalyticsUsageUrls", ctx)
	ret0, _ := ret[0].(*models.UsageUrls)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAnalyticsUsageUrls indicates an expected call of GetAnalyticsUsageUrls
func (mr *MockControllerMockRecorder) GetAnalyticsUsageUrls(ctx interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAnalyticsUsageUrls", reflect.TypeOf((*MockController)(nil).GetAnalyticsUsageUrls), ctx)
}

// GetAllUsageUrls mocks base method
func (m *MockController) GetAllUsageUrls(ctx context.Context) (*models.UsageUrls, error) {
	ret := m.ctrl.Call(m, "GetAllUsageUrls", ctx)
	ret0, _ := ret[0].(*models.UsageUrls)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllUsageUrls indicates an expected call of GetAllUsageUrls
func (mr *MockControllerMockRecorder) GetAllUsageUrls(ctx interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllUsageUrls", reflect.TypeOf((*MockController)(nil).GetAllUsageUrls), ctx)
}

// GetApps mocks base method
func (m *MockController) GetApps(ctx context.Context, i *models.GetAppsInput) ([]models.App, error) {
	ret := m.ctrl.Call(m, "GetApps", ctx, i)
	ret0, _ := ret[0].([]models.App)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApps indicates an expected call of GetApps
func (mr *MockControllerMockRecorder) GetApps(ctx, i interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApps", reflect.TypeOf((*MockController)(nil).GetApps), ctx, i)
}

// DeleteApp mocks base method
func (m *MockController) DeleteApp(ctx context.Context, appID string) error {
	ret := m.ctrl.Call(m, "DeleteApp", ctx, appID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteApp indicates an expected call of DeleteApp
func (mr *MockControllerMockRecorder) DeleteApp(ctx, appID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteApp", reflect.TypeOf((*MockController)(nil).DeleteApp), ctx, appID)
}

// GetAppByID mocks base method
func (m *MockController) GetAppByID(ctx context.Context, appID string) (*models.App, error) {
	ret := m.ctrl.Call(m, "GetAppByID", ctx, appID)
	ret0, _ := ret[0].(*models.App)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAppByID indicates an expected call of GetAppByID
func (mr *MockControllerMockRecorder) GetAppByID(ctx, appID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppByID", reflect.TypeOf((*MockController)(nil).GetAppByID), ctx, appID)
}

// UpdateApp mocks base method
func (m *MockController) UpdateApp(ctx context.Context, i *models.UpdateAppInput) (*models.App, error) {
	ret := m.ctrl.Call(m, "UpdateApp", ctx, i)
	ret0, _ := ret[0].(*models.App)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateApp indicates an expected call of UpdateApp
func (mr *MockControllerMockRecorder) UpdateApp(ctx, i interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateApp", reflect.TypeOf((*MockController)(nil).UpdateApp), ctx, i)
}

// CreateApp mocks base method
func (m *MockController) CreateApp(ctx context.Context, i *models.CreateAppInput) (*models.App, error) {
	ret := m.ctrl.Call(m, "CreateApp", ctx, i)
	ret0, _ := ret[0].(*models.App)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateApp indicates an expected call of CreateApp
func (mr *MockControllerMockRecorder) CreateApp(ctx, i interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateApp", reflect.TypeOf((*MockController)(nil).CreateApp), ctx, i)
}

// GetAdminsForApp mocks base method
func (m *MockController) GetAdminsForApp(ctx context.Context, appID string) ([]models.AppAdminResponse, error) {
	ret := m.ctrl.Call(m, "GetAdminsForApp", ctx, appID)
	ret0, _ := ret[0].([]models.AppAdminResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAdminsForApp indicates an expected call of GetAdminsForApp
func (mr *MockControllerMockRecorder) GetAdminsForApp(ctx, appID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAdminsForApp", reflect.TypeOf((*MockController)(nil).GetAdminsForApp), ctx, appID)
}

// UnlinkAppAdmin mocks base method
func (m *MockController) UnlinkAppAdmin(ctx context.Context, i *models.UnlinkAppAdminInput) error {
	ret := m.ctrl.Call(m, "UnlinkAppAdmin", ctx, i)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnlinkAppAdmin indicates an expected call of UnlinkAppAdmin
func (mr *MockControllerMockRecorder) UnlinkAppAdmin(ctx, i interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnlinkAppAdmin", reflect.TypeOf((*MockController)(nil).UnlinkAppAdmin), ctx, i)
}

// LinkAppAdmin mocks base method
func (m *MockController) LinkAppAdmin(ctx context.Context, i *models.LinkAppAdminInput) error {
	ret := m.ctrl.Call(m, "LinkAppAdmin", ctx, i)
	ret0, _ := ret[0].(error)
	return ret0
}

// LinkAppAdmin indicates an expected call of LinkAppAdmin
func (mr *MockControllerMockRecorder) LinkAppAdmin(ctx, i interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LinkAppAdmin", reflect.TypeOf((*MockController)(nil).LinkAppAdmin), ctx, i)
}

// GetGuideConfig mocks base method
func (m *MockController) GetGuideConfig(ctx context.Context, i *models.GetGuideConfigInput) (*models.GuideConfig, error) {
	ret := m.ctrl.Call(m, "GetGuideConfig", ctx, i)
	ret0, _ := ret[0].(*models.GuideConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGuideConfig indicates an expected call of GetGuideConfig
func (mr *MockControllerMockRecorder) GetGuideConfig(ctx, i interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGuideConfig", reflect.TypeOf((*MockController)(nil).GetGuideConfig), ctx, i)
}

// SetGuideConfig mocks base method
func (m *MockController) SetGuideConfig(ctx context.Context, i *models.SetGuideConfigInput) (*models.GuideConfig, error) {
	ret := m.ctrl.Call(m, "SetGuideConfig", ctx, i)
	ret0, _ := ret[0].(*models.GuideConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetGuideConfig indicates an expected call of SetGuideConfig
func (mr *MockControllerMockRecorder) SetGuideConfig(ctx, i interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetGuideConfig", reflect.TypeOf((*MockController)(nil).SetGuideConfig), ctx, i)
}

// GetPermissionsForAdmin mocks base method
func (m *MockController) GetPermissionsForAdmin(ctx context.Context, i *models.GetPermissionsForAdminInput) (*models.PermissionList, error) {
	ret := m.ctrl.Call(m, "GetPermissionsForAdmin", ctx, i)
	ret0, _ := ret[0].(*models.PermissionList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPermissionsForAdmin indicates an expected call of GetPermissionsForAdmin
func (mr *MockControllerMockRecorder) GetPermissionsForAdmin(ctx, i interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPermissionsForAdmin", reflect.TypeOf((*MockController)(nil).GetPermissionsForAdmin), ctx, i)
}

// VerifyAppAdmin mocks base method
func (m *MockController) VerifyAppAdmin(ctx context.Context, i *models.VerifyAppAdminInput) error {
	ret := m.ctrl.Call(m, "VerifyAppAdmin", ctx, i)
	ret0, _ := ret[0].(error)
	return ret0
}

// VerifyAppAdmin indicates an expected call of VerifyAppAdmin
func (mr *MockControllerMockRecorder) VerifyAppAdmin(ctx, i interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyAppAdmin", reflect.TypeOf((*MockController)(nil).VerifyAppAdmin), ctx, i)
}

// GenerateNewBusinessToken mocks base method
func (m *MockController) GenerateNewBusinessToken(ctx context.Context, appID string) (*models.SecretConfig, error) {
	ret := m.ctrl.Call(m, "GenerateNewBusinessToken", ctx, appID)
	ret0, _ := ret[0].(*models.SecretConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateNewBusinessToken indicates an expected call of GenerateNewBusinessToken
func (mr *MockControllerMockRecorder) GenerateNewBusinessToken(ctx, appID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateNewBusinessToken", reflect.TypeOf((*MockController)(nil).GenerateNewBusinessToken), ctx, appID)
}

// GetCertifications mocks base method
func (m *MockController) GetCertifications(ctx context.Context, i *models.GetCertificationsInput) (*models.Certifications, error) {
	ret := m.ctrl.Call(m, "GetCertifications", ctx, i)
	ret0, _ := ret[0].(*models.Certifications)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCertifications indicates an expected call of GetCertifications
func (mr *MockControllerMockRecorder) GetCertifications(ctx, i interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCertifications", reflect.TypeOf((*MockController)(nil).GetCertifications), ctx, i)
}

// SetCertifications mocks base method
func (m *MockController) SetCertifications(ctx context.Context, i *models.SetCertificationsInput) (*models.Certifications, error) {
	ret := m.ctrl.Call(m, "SetCertifications", ctx, i)
	ret0, _ := ret[0].(*models.Certifications)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetCertifications indicates an expected call of SetCertifications
func (mr *MockControllerMockRecorder) SetCertifications(ctx, i interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCertifications", reflect.TypeOf((*MockController)(nil).SetCertifications), ctx, i)
}

// GetSetupStep mocks base method
func (m *MockController) GetSetupStep(ctx context.Context, appID string) (*models.SetupStep, error) {
	ret := m.ctrl.Call(m, "GetSetupStep", ctx, appID)
	ret0, _ := ret[0].(*models.SetupStep)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSetupStep indicates an expected call of GetSetupStep
func (mr *MockControllerMockRecorder) GetSetupStep(ctx, appID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSetupStep", reflect.TypeOf((*MockController)(nil).GetSetupStep), ctx, appID)
}

// CreateSetupStep mocks base method
func (m *MockController) CreateSetupStep(ctx context.Context, i *models.CreateSetupStepInput) error {
	ret := m.ctrl.Call(m, "CreateSetupStep", ctx, i)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSetupStep indicates an expected call of CreateSetupStep
func (mr *MockControllerMockRecorder) CreateSetupStep(ctx, i interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSetupStep", reflect.TypeOf((*MockController)(nil).CreateSetupStep), ctx, i)
}

// GetDataRules mocks base method
func (m *MockController) GetDataRules(ctx context.Context, appID string) ([]models.DataRule, error) {
	ret := m.ctrl.Call(m, "GetDataRules", ctx, appID)
	ret0, _ := ret[0].([]models.DataRule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDataRules indicates an expected call of GetDataRules
func (mr *MockControllerMockRecorder) GetDataRules(ctx, appID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDataRules", reflect.TypeOf((*MockController)(nil).GetDataRules), ctx, appID)
}

// SetDataRules mocks base method
func (m *MockController) SetDataRules(ctx context.Context, i *models.SetDataRulesInput) error {
	ret := m.ctrl.Call(m, "SetDataRules", ctx, i)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetDataRules indicates an expected call of SetDataRules
func (mr *MockControllerMockRecorder) SetDataRules(ctx, i interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDataRules", reflect.TypeOf((*MockController)(nil).SetDataRules), ctx, i)
}

// GetManagers mocks base method
func (m *MockController) GetManagers(ctx context.Context, appID string) (*models.Managers, error) {
	ret := m.ctrl.Call(m, "GetManagers", ctx, appID)
	ret0, _ := ret[0].(*models.Managers)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetManagers indicates an expected call of GetManagers
func (mr *MockControllerMockRecorder) GetManagers(ctx, appID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetManagers", reflect.TypeOf((*MockController)(nil).GetManagers), ctx, appID)
}

// GetOnboarding mocks base method
func (m *MockController) GetOnboarding(ctx context.Context, appID string) (*models.Onboarding, error) {
	ret := m.ctrl.Call(m, "GetOnboarding", ctx, appID)
	ret0, _ := ret[0].(*models.Onboarding)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOnboarding indicates an expected call of GetOnboarding
func (mr *MockControllerMockRecorder) GetOnboarding(ctx, appID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOnboarding", reflect.TypeOf((*MockController)(nil).GetOnboarding), ctx, appID)
}

// UpdateOnboarding mocks base method
func (m *MockController) UpdateOnboarding(ctx context.Context, i *models.UpdateOnboardingInput) error {
	ret := m.ctrl.Call(m, "UpdateOnboarding", ctx, i)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOnboarding indicates an expected call of UpdateOnboarding
func (mr *MockControllerMockRecorder) UpdateOnboarding(ctx, i interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOnboarding", reflect.TypeOf((*MockController)(nil).UpdateOnboarding), ctx, i)
}

// InitializeOnboarding mocks base method
func (m *MockController) InitializeOnboarding(ctx context.Context, appID string) error {
	ret := m.ctrl.Call(m, "InitializeOnboarding", ctx, appID)
	ret0, _ := ret[0].(error)
	return ret0
}

// InitializeOnboarding indicates an expected call of InitializeOnboarding
func (mr *MockControllerMockRecorder) InitializeOnboarding(ctx, appID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitializeOnboarding", reflect.TypeOf((*MockController)(nil).InitializeOnboarding), ctx, appID)
}

// DeletePlatform mocks base method
func (m *MockController) DeletePlatform(ctx context.Context, i *models.DeletePlatformInput) error {
	ret := m.ctrl.Call(m, "DeletePlatform", ctx, i)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePlatform indicates an expected call of DeletePlatform
func (mr *MockControllerMockRecorder) DeletePlatform(ctx, i interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePlatform", reflect.TypeOf((*MockController)(nil).DeletePlatform), ctx, i)
}

// UpdatePlatform mocks base method
func (m *MockController) UpdatePlatform(ctx context.Context, i *models.UpdatePlatformInput) (*models.Platform, error) {
	ret := m.ctrl.Call(m, "UpdatePlatform", ctx, i)
	ret0, _ := ret[0].(*models.Platform)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePlatform indicates an expected call of UpdatePlatform
func (mr *MockControllerMockRecorder) UpdatePlatform(ctx, i interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePlatform", reflect.TypeOf((*MockController)(nil).UpdatePlatform), ctx, i)
}

// GetPlatformsByAppID mocks base method
func (m *MockController) GetPlatformsByAppID(ctx context.Context, appID string) ([]models.Platform, error) {
	ret := m.ctrl.Call(m, "GetPlatformsByAppID", ctx, appID)
	ret0, _ := ret[0].([]models.Platform)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPlatformsByAppID indicates an expected call of GetPlatformsByAppID
func (mr *MockControllerMockRecorder) GetPlatformsByAppID(ctx, appID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlatformsByAppID", reflect.TypeOf((*MockController)(nil).GetPlatformsByAppID), ctx, appID)
}

// CreatePlatform mocks base method
func (m *MockController) CreatePlatform(ctx context.Context, i *models.CreatePlatformInput) (*models.Platform, error) {
	ret := m.ctrl.Call(m, "CreatePlatform", ctx, i)
	ret0, _ := ret[0].(*models.Platform)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePlatform indicates an expected call of CreatePlatform
func (mr *MockControllerMockRecorder) CreatePlatform(ctx, i interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePlatform", reflect.TypeOf((*MockController)(nil).CreatePlatform), ctx, i)
}

// DeleteAppSchema mocks base method
func (m *MockController) DeleteAppSchema(ctx context.Context, i *models.DeleteAppSchemaInput) error {
	ret := m.ctrl.Call(m, "DeleteAppSchema", ctx, i)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAppSchema indicates an expected call of DeleteAppSchema
func (mr *MockControllerMockRecorder) DeleteAppSchema(ctx, i interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAppSchema", reflect.TypeOf((*MockController)(nil).DeleteAppSchema), ctx, i)
}

// GetAppSchema mocks base method
func (m *MockController) GetAppSchema(ctx context.Context, appID string) (*models.AppSchema, error) {
	ret := m.ctrl.Call(m, "GetAppSchema", ctx, appID)
	ret0, _ := ret[0].(*models.AppSchema)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAppSchema indicates an expected call of GetAppSchema
func (mr *MockControllerMockRecorder) GetAppSchema(ctx, appID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppSchema", reflect.TypeOf((*MockController)(nil).GetAppSchema), ctx, appID)
}

// CreateAppSchema mocks base method
func (m *MockController) CreateAppSchema(ctx context.Context, i *models.CreateAppSchemaInput) (*models.AppSchema, error) {
	ret := m.ctrl.Call(m, "CreateAppSchema", ctx, i)
	ret0, _ := ret[0].(*models.AppSchema)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAppSchema indicates an expected call of CreateAppSchema
func (mr *MockControllerMockRecorder) CreateAppSchema(ctx, i interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAppSchema", reflect.TypeOf((*MockController)(nil).CreateAppSchema), ctx, i)
}

// SetAppSchema mocks base method
func (m *MockController) SetAppSchema(ctx context.Context, i *models.SetAppSchemaInput) (*models.AppSchema, error) {
	ret := m.ctrl.Call(m, "SetAppSchema", ctx, i)
	ret0, _ := ret[0].(*models.AppSchema)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetAppSchema indicates an expected call of SetAppSchema
func (mr *MockControllerMockRecorder) SetAppSchema(ctx, i interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAppSchema", reflect.TypeOf((*MockController)(nil).SetAppSchema), ctx, i)
}

// GetSecrets mocks base method
func (m *MockController) GetSecrets(ctx context.Context, appID string) (*models.SecretConfig, error) {
	ret := m.ctrl.Call(m, "GetSecrets", ctx, appID)
	ret0, _ := ret[0].(*models.SecretConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSecrets indicates an expected call of GetSecrets
func (mr *MockControllerMockRecorder) GetSecrets(ctx, appID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecrets", reflect.TypeOf((*MockController)(nil).GetSecrets), ctx, appID)
}

// RevokeOldClientSecret mocks base method
func (m *MockController) RevokeOldClientSecret(ctx context.Context, appID string) (*models.SecretConfig, error) {
	ret := m.ctrl.Call(m, "RevokeOldClientSecret", ctx, appID)
	ret0, _ := ret[0].(*models.SecretConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RevokeOldClientSecret indicates an expected call of RevokeOldClientSecret
func (mr *MockControllerMockRecorder) RevokeOldClientSecret(ctx, appID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeOldClientSecret", reflect.TypeOf((*MockController)(nil).RevokeOldClientSecret), ctx, appID)
}

// GenerateNewClientSecret mocks base method
func (m *MockController) GenerateNewClientSecret(ctx context.Context, appID string) (*models.SecretConfig, error) {
	ret := m.ctrl.Call(m, "GenerateNewClientSecret", ctx, appID)
	ret0, _ := ret[0].(*models.SecretConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateNewClientSecret indicates an expected call of GenerateNewClientSecret
func (mr *MockControllerMockRecorder) GenerateNewClientSecret(ctx, appID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateNewClientSecret", reflect.TypeOf((*MockController)(nil).GenerateNewClientSecret), ctx, appID)
}

// ResetClientSecret mocks base method
func (m *MockController) ResetClientSecret(ctx context.Context, appID string) (*models.SecretConfig, error) {
	ret := m.ctrl.Call(m, "ResetClientSecret", ctx, appID)
	ret0, _ := ret[0].(*models.SecretConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResetClientSecret indicates an expected call of ResetClientSecret
func (mr *MockControllerMockRecorder) ResetClientSecret(ctx, appID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetClientSecret", reflect.TypeOf((*MockController)(nil).ResetClientSecret), ctx, appID)
}

// GetRecommendedSharing mocks base method
func (m *MockController) GetRecommendedSharing(ctx context.Context, appID string) (*models.SharingRecommendations, error) {
	ret := m.ctrl.Call(m, "GetRecommendedSharing", ctx, appID)
	ret0, _ := ret[0].(*models.SharingRecommendations)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecommendedSharing indicates an expected call of GetRecommendedSharing
func (mr *MockControllerMockRecorder) GetRecommendedSharing(ctx, appID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecommendedSharing", reflect.TypeOf((*MockController)(nil).GetRecommendedSharing), ctx, appID)
}

// SetRecommendedSharing mocks base method
func (m *MockController) SetRecommendedSharing(ctx context.Context, i *models.SetRecommendedSharingInput) error {
	ret := m.ctrl.Call(m, "SetRecommendedSharing", ctx, i)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetRecommendedSharing indicates an expected call of SetRecommendedSharing
func (mr *MockControllerMockRecorder) SetRecommendedSharing(ctx, i interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRecommendedSharing", reflect.TypeOf((*MockController)(nil).SetRecommendedSharing), ctx, i)
}

// UpdateAppIcon mocks base method
func (m *MockController) UpdateAppIcon(ctx context.Context, i *models.UpdateAppIconInput) (*models.Image, error) {
	ret := m.ctrl.Call(m, "UpdateAppIcon", ctx, i)
	ret0, _ := ret[0].(*models.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAppIcon indicates an expected call of UpdateAppIcon
func (mr *MockControllerMockRecorder) UpdateAppIcon(ctx, i interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAppIcon", reflect.TypeOf((*MockController)(nil).UpdateAppIcon), ctx, i)
}

// GetAllCategories mocks base method
func (m *MockController) GetAllCategories(ctx context.Context) (*models.Categories, error) {
	ret := m.ctrl.Call(m, "GetAllCategories", ctx)
	ret0, _ := ret[0].(*models.Categories)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllCategories indicates an expected call of GetAllCategories
func (mr *MockControllerMockRecorder) GetAllCategories(ctx interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllCategories", reflect.TypeOf((*MockController)(nil).GetAllCategories), ctx)
}

// GetKnownHosts mocks base method
func (m *MockController) GetKnownHosts(ctx context.Context) ([]models.KnownHost, error) {
	ret := m.ctrl.Call(m, "GetKnownHosts", ctx)
	ret0, _ := ret[0].([]models.KnownHost)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKnownHosts indicates an expected call of GetKnownHosts
func (mr *MockControllerMockRecorder) GetKnownHosts(ctx interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKnownHosts", reflect.TypeOf((*MockController)(nil).GetKnownHosts), ctx)
}

// GetAllLibraryResources mocks base method
func (m *MockController) GetAllLibraryResources(ctx context.Context, i *models.GetAllLibraryResourcesInput) (*models.LibraryResources, error) {
	ret := m.ctrl.Call(m, "GetAllLibraryResources", ctx, i)
	ret0, _ := ret[0].(*models.LibraryResources)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllLibraryResources indicates an expected call of GetAllLibraryResources
func (mr *MockControllerMockRecorder) GetAllLibraryResources(ctx, i interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllLibraryResources", reflect.TypeOf((*MockController)(nil).GetAllLibraryResources), ctx, i)
}

// SearchLibraryResource mocks base method
func (m *MockController) SearchLibraryResource(ctx context.Context, i *models.SearchLibraryResourceInput) (*models.LibraryResources, error) {
	ret := m.ctrl.Call(m, "SearchLibraryResource", ctx, i)
	ret0, _ := ret[0].(*models.LibraryResources)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchLibraryResource indicates an expected call of SearchLibraryResource
func (mr *MockControllerMockRecorder) SearchLibraryResource(ctx, i interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchLibraryResource", reflect.TypeOf((*MockController)(nil).SearchLibraryResource), ctx, i)
}

// GetLibraryResourceByShortname mocks base method
func (m *MockController) GetLibraryResourceByShortname(ctx context.Context, i *models.GetLibraryResourceByShortnameInput) (*models.LibraryResource, error) {
	ret := m.ctrl.Call(m, "GetLibraryResourceByShortname", ctx, i)
	ret0, _ := ret[0].(*models.LibraryResource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLibraryResourceByShortname indicates an expected call of GetLibraryResourceByShortname
func (mr *MockControllerMockRecorder) GetLibraryResourceByShortname(ctx, i interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLibraryResourceByShortname", reflect.TypeOf((*MockController)(nil).GetLibraryResourceByShortname), ctx, i)
}

// UpdateLibraryResourceByShortname mocks base method
func (m *MockController) UpdateLibraryResourceByShortname(ctx context.Context, i *models.UpdateLibraryResourceByShortnameInput) (*models.LibraryResource, error) {
	ret := m.ctrl.Call(m, "UpdateLibraryResourceByShortname", ctx, i)
	ret0, _ := ret[0].(*models.LibraryResource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateLibraryResourceByShortname indicates an expected call of UpdateLibraryResourceByShortname
func (mr *MockControllerMockRecorder) UpdateLibraryResourceByShortname(ctx, i interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLibraryResourceByShortname", reflect.TypeOf((*MockController)(nil).UpdateLibraryResourceByShortname), ctx, i)
}

// CreateLibraryResource mocks base method
func (m *MockController) CreateLibraryResource(ctx context.Context, i *models.CreateLibraryResourceInput) (*models.LibraryResource, error) {
	ret := m.ctrl.Call(m, "CreateLibraryResource", ctx, i)
	ret0, _ := ret[0].(*models.LibraryResource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLibraryResource indicates an expected call of CreateLibraryResource
func (mr *MockControllerMockRecorder) CreateLibraryResource(ctx, i interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLibraryResource", reflect.TypeOf((*MockController)(nil).CreateLibraryResource), ctx, i)
}

// DeleteLibraryResourceLink mocks base method
func (m *MockController) DeleteLibraryResourceLink(ctx context.Context, shortname string) error {
	ret := m.ctrl.Call(m, "DeleteLibraryResourceLink", ctx, shortname)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteLibraryResourceLink indicates an expected call of DeleteLibraryResourceLink
func (mr *MockControllerMockRecorder) DeleteLibraryResourceLink(ctx, shortname interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLibraryResourceLink", reflect.TypeOf((*MockController)(nil).DeleteLibraryResourceLink), ctx, shortname)
}

// GetValidPermissions mocks base method
func (m *MockController) GetValidPermissions(ctx context.Context) (*models.GetValidPermissionsResponse, error) {
	ret := m.ctrl.Call(m, "GetValidPermissions", ctx)
	ret0, _ := ret[0].(*models.GetValidPermissionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetValidPermissions indicates an expected call of GetValidPermissions
func (mr *MockControllerMockRecorder) GetValidPermissions(ctx interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValidPermissions", reflect.TypeOf((*MockController)(nil).GetValidPermissions), ctx)
}

// GetPlatforms mocks base method
func (m *MockController) GetPlatforms(ctx context.Context, i *models.GetPlatformsInput) ([]models.Platform, error) {
	ret := m.ctrl.Call(m, "GetPlatforms", ctx, i)
	ret0, _ := ret[0].([]models.Platform)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPlatforms indicates an expected call of GetPlatforms
func (mr *MockControllerMockRecorder) GetPlatforms(ctx, i interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlatforms", reflect.TypeOf((*MockController)(nil).GetPlatforms), ctx, i)
}

// GetPlatformByClientID mocks base method
func (m *MockController) GetPlatformByClientID(ctx context.Context, clientID string) (*models.Platform, error) {
	ret := m.ctrl.Call(m, "GetPlatformByClientID", ctx, clientID)
	ret0, _ := ret[0].(*models.Platform)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPlatformByClientID indicates an expected call of GetPlatformByClientID
func (mr *MockControllerMockRecorder) GetPlatformByClientID(ctx, clientID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlatformByClientID", reflect.TypeOf((*MockController)(nil).GetPlatformByClientID), ctx, clientID)
}

// GetAppsForAdmin mocks base method
func (m *MockController) GetAppsForAdmin(ctx context.Context, adminID string) ([]models.AppForAdminResponse, error) {
	ret := m.ctrl.Call(m, "GetAppsForAdmin", ctx, adminID)
	ret0, _ := ret[0].([]models.AppForAdminResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAppsForAdmin indicates an expected call of GetAppsForAdmin
func (mr *MockControllerMockRecorder) GetAppsForAdmin(ctx, adminID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppsForAdmin", reflect.TypeOf((*MockController)(nil).GetAppsForAdmin), ctx, adminID)
}

// OverrideConfig mocks base method
func (m *MockController) OverrideConfig(ctx context.Context, i *models.OverrideConfigInput) error {
	ret := m.ctrl.Call(m, "OverrideConfig", ctx, i)
	ret0, _ := ret[0].(error)
	return ret0
}

// OverrideConfig indicates an expected call of OverrideConfig
func (mr *MockControllerMockRecorder) OverrideConfig(ctx, i interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OverrideConfig", reflect.TypeOf((*MockController)(nil).OverrideConfig), ctx, i)
}
