swagger: '2.0'
info:
  title: swagger-test
  description: Testing Swagger Codegen
  version: 0.1.0
  x-npm-package: swagger-test
basePath: /v1
schemes:
  - http
produces:
  - application/json
consumes:
  - application/json
responses:
  BadRequest:
    description: "Bad Request"
    schema:
      $ref: "#/definitions/BadRequest"
  InternalError:
    description: "Internal Error"
    schema:
      $ref: "#/definitions/InternalError"
paths:
  /health/check:
    get:
      operationId: healthCheck
      tags:
        - Infra
      responses:
        200:
          description: OK response

  /books/{book_id}:
    get:
      operationId: getBookByID
      description: Returns a book
      parameters:
        - name: book_id
          in: path
          type: integer
          required: true
          maximum: 10000000
          minimum: 2
          # This is a silly requirement, but let's add it to show how it would work
          multipleOf: 2
        - name: authorID
          in: query
          type: string
          format: mongo-id
        - name: authorization
          in: header
          type: string
          minLength: 1
          maxLength: 24
          pattern: "[0-9a-f]+"
        - name: X-Dont-Rate-Limit-Me-Bro
          in: header
          type: string
        - name: randomBytes
          in: query
          type: string
          format: byte
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/Book"
        401:
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Unathorized"
        404:
          description: "Not found"
          schema:
            $ref: "#/definitions/Error"

  /books2/{id}:
    get:
      operationId: getBookByID2
      description: Retrieve a book
      parameters:
        - name: id
          in: path
          required: true
          type: string
          pattern: "^[0-9a-f]{24}$"
      responses:
        200:
          description: OK response
          schema:
            $ref: '#/definitions/Book'
        404:
          description: Job not found
          schema:
            $ref: "#/definitions/Error"

  /books:
    get:
      operationId: getBooks
      description: Returns a list of books
      x-paging:
        pageParameter: startingAfter
      parameters:
        - name: authors
          in: query
          type: array
          items:
            type: string
          description: "A list of authors. Must specify at least one and at most two"
          maxItems: 2
          minItems: 1
          uniqueItems: true
        - name: available
          in: query
          type: boolean
          default: true
        - name: state
          in: query
          type: string
          required: false
          enum:
            - finished
            - inprogress
          default: finished
        - name: published
          in: query
          type: string
          format: date
        - name: snake_case
          in: query
          type: string
          maxLength: 5
        - name: completed
          in: query
          type: string
          format: date-time
        - name: maxPages
          in: query
          # Probably makes more sense for this to be an integer, but I couldn't figure out
          # a good example for books that really would need a float
          type: number
          maximum: 1000
          minimum: -5
          multipleOf: 0.5
          default: 500.5
        - name: min_pages
          in: query
          type: integer
          format: int32
          default: 5
        - name: pagesToTime
          in: query
          type: number
          format: float
        - name: authorization
          in: header
          type: string
        - name: startingAfter
          in: query
          type: integer
      responses:
        200:
          description: "Success"
          schema:
            type: array
            items:
              $ref: "#/definitions/Book"
        default:
          description: "Error"
          schema:
            $ref: "#/definitions/Error"
    post:
      operationId: createBook
      description: Creates a book
      parameters:
        - name: newBook
          in: body
          schema:
            $ref: "#/definitions/Book"
          required: true
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/Book"
        default:
          description: "Error"
          schema:
            $ref: "#/definitions/Error"

    put:
      operationId: putBook
      description: Puts a book
      parameters:
        - name: newBook
          in: body
          schema:
            $ref: "#/definitions/Book"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/Book"
        default:
          description: "Error"
          schema:
            $ref: "#/definitions/Error"

  /authors:
    get:
      operationId: getAuthors
      description: Gets authors
      x-paging:
        pageParameter: startingAfter
        resourcePath: authorSet.results
      parameters:
        - name: name
          in: query
          type: string
        - name: startingAfter
          in: query
          type: string
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/AuthorsResponse"
    put:
      operationId: getAuthorsWithPut
      description: Gets authors, but needs to use the body so it's a PUT
      x-paging:
        pageParameter: startingAfter
        resourcePath: authorSet.results
      parameters:
        - name: name
          in: query
          type: string
        - name: startingAfter
          in: query
          type: string
        - name: favoriteBooks
          in: body
          schema:
            $ref: "#/definitions/Book"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/AuthorsResponse"

definitions:
  Book:
    type: object
    properties:
      id:
        type: integer
      name:
        type: string
      author:
        type: string
        format: mongo-id
      genre:
        type: string
        enum:
          - scifi
          - mystery
          - horror
      other:
        additionalProperties:
          type: string
      otherArray:
        additionalProperties:
          type: array
          items:
            type: string

  Author:
    type: object
    properties:
      id:
        type: string
      name:
        type: string

  AuthorsResponse:
    type: object
    properties:
      authorSet:
        $ref: "#/definitions/AuthorSet"
      metadata:
        $ref: "#/definitions/AuthorsResponseMetadata"

  AuthorSet:
    type: object
    properties:
      randomProp:
        type: integer
      results:
        $ref: "#/definitions/AuthorArray"

  AuthorArray:
    type: array
    items:
      $ref: "#/definitions/Author"

  AuthorsResponseMetadata:
    type: object
    properties:
      count:
        type: integer

  Error:
    type: object
    properties:
      code:
        type: integer
        format: int32
      message:
        type: string

  BadRequest:
    type: object
    properties:
      message:
        type: string

  InternalError:
    type: object
    properties:
      message:
        type: string

  Unathorized:
    type: object
    properties:
      message:
        type: string
