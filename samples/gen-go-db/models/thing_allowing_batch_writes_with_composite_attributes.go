// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ThingAllowingBatchWritesWithCompositeAttributes thing allowing batch writes with composite attributes
//
// swagger:model ThingAllowingBatchWritesWithCompositeAttributes
type ThingAllowingBatchWritesWithCompositeAttributes struct {

	// branch
	// Required: true
	Branch *string `json:"branch"`

	// date
	// Required: true
	// Format: date-time
	Date *strfmt.DateTime `json:"date"`

	// name
	// Required: true
	Name *string `json:"name"`
}

// Validate validates this thing allowing batch writes with composite attributes
func (m *ThingAllowingBatchWritesWithCompositeAttributes) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBranch(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ThingAllowingBatchWritesWithCompositeAttributes) validateBranch(formats strfmt.Registry) error {

	if err := validate.Required("branch", "body", m.Branch); err != nil {
		return err
	}

	return nil
}

func (m *ThingAllowingBatchWritesWithCompositeAttributes) validateDate(formats strfmt.Registry) error {

	if err := validate.Required("date", "body", m.Date); err != nil {
		return err
	}

	if err := validate.FormatOf("date", "body", "date-time", m.Date.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ThingAllowingBatchWritesWithCompositeAttributes) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ThingAllowingBatchWritesWithCompositeAttributes) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ThingAllowingBatchWritesWithCompositeAttributes) UnmarshalBinary(b []byte) error {
	var res ThingAllowingBatchWritesWithCompositeAttributes
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
