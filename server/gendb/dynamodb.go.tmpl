package dynamodb

import (
  "context"
  "errors"
  "time"

  "{{ .PackageName }}/models"
  "{{ .PackageName }}/server/db"
  "github.com/aws/aws-sdk-go/service/dynamodb/dynamodbiface"
  "github.com/go-openapi/strfmt"
)

// Config is used to create a new DB struct.
type Config struct {
  // DynamoDBAPI is used to communicate with DynamoDB. It is required.
  // It can be overriden on a table-by-table basis.
  DynamoDBAPI dynamodbiface.DynamoDBAPI

  // DefaultPrefix configures a prefix on all table names. It is required.
  // It can be overriden on a table-by-table basis.
  DefaultPrefix string

  // DefaultWriteCapacityUnits configures a default write capacity when creating tables. It defaults to 1.
  // It can be overriden on a table-by-table basis.
  DefaultWriteCapacityUnits int64

  // DefaultReadCapacityUnits configures a default read capacity when creating tables. It defaults to 1.
  // It can be overriden on a table-by-table basis.
  DefaultReadCapacityUnits int64

  {{- range $xdbConfig := .XDBConfigs }}
  {{- $modelName := pascalize $xdbConfig.SchemaName }}
  // {{ $modelName }}Table configuration.
  {{ $modelName }}Table {{ $modelName }}Table
  {{- end }}
}

// New creates a new DB object.
func New(config Config) (*DB, error) {
  if config.DynamoDBAPI == nil {
    return nil, errors.New("must specify DynamoDBAPI")
  }
  if config.DefaultPrefix == "" {
    return nil, errors.New("must specify DefaultPrefix")
  }

  if config.DefaultWriteCapacityUnits == 0 {
    config.DefaultWriteCapacityUnits = 1
  }
  if config.DefaultReadCapacityUnits == 0 {
    config.DefaultReadCapacityUnits = 1
  }

  {{- range $xdbConfig := .XDBConfigs }}
  {{- $modelName := pascalize $xdbConfig.SchemaName }}
  {{- $modelNameCamel := camelize $modelName }}
  // configure {{ $modelName }} table
  {{ $modelNameCamel }}Table := config.{{ $modelName }}Table
  if {{ $modelNameCamel }}Table.DynamoDBAPI == nil {
    {{ $modelNameCamel }}Table.DynamoDBAPI = config.DynamoDBAPI
  }
  if {{ $modelNameCamel }}Table.Prefix == "" {
    {{ $modelNameCamel }}Table.Prefix = config.DefaultPrefix
  }
  if {{ $modelNameCamel }}Table.ReadCapacityUnits == 0 {
    {{ $modelNameCamel }}Table.ReadCapacityUnits = config.DefaultReadCapacityUnits
  }
  if {{ $modelNameCamel }}Table.WriteCapacityUnits == 0 {
    {{ $modelNameCamel }}Table.WriteCapacityUnits = config.DefaultWriteCapacityUnits
  }
  {{- end }}

  return &DB{
    {{- range $xdbConfig := .XDBConfigs }}
    {{- $modelName := pascalize $xdbConfig.SchemaName }}
    {{- $modelNameCamel := camelize $modelName }}
    {{ $modelNameCamel }}Table: {{ $modelNameCamel }}Table,
    {{- end }}
  }, nil
}

// DB implements the database interface using DynamoDB to store data.
type DB struct {
  {{- range $xdbConfig := .XDBConfigs }}
  {{- $modelName := pascalize $xdbConfig.SchemaName }}
  {{- $modelNameCamel := camelize $modelName }}
  {{ $modelNameCamel }}Table {{ $modelName }}Table
  {{- end }}
}

var _ db.Interface = DB{}

// CreateTables creates all tables.
func (d DB) CreateTables(ctx context.Context) error {
  {{- range $xdbConfig := .XDBConfigs }}
  {{- $modelName := pascalize $xdbConfig.SchemaName }}
  {{- $modelNameCamel := camelize $modelName }}
  if err := d.{{ $modelNameCamel }}Table.create(ctx); err != nil {
    return err
  }
  {{- end }}
  return nil
}

{{- range $xdbConfig := .XDBConfigs }}
{{- $modelName := pascalize $xdbConfig.SchemaName }}
{{- $modelNameCamel := camelize $modelName }}
{{- $pkModelAttributeNames := modelAttributeNamesForIndex $xdbConfig $xdbConfig.DynamoDB.KeySchema }}
// Save{{ $modelName }} saves a {{ $modelName }} to the database.
func (d DB) Save{{ $modelName }}(ctx context.Context, m models.{{ $modelName }}) error {
  return d.{{ $modelNameCamel }}Table.save{{ $modelName }}(ctx, m)
}

// Get{{ $modelName }} retrieves a {{ $modelName }} from the database.
func (d DB) Get{{ $modelName }}(ctx context.Context,
  {{- range $_, $attributeName := $pkModelAttributeNames }}
  {{- varname $attributeName }} {{ goTypeForAttribute $xdbConfig $attributeName }},
  {{- end -}}
) (*models.{{ $modelName }}, error) {
  return d.{{ $modelNameCamel }}Table.get{{ $modelName }}(ctx,
    {{- range $_, $attributeName := $pkModelAttributeNames }}
    {{- varname $attributeName }},
    {{- end -}}
)
}

{{- if $xdbConfig.AllowPrimaryIndexScan }}
// Scan{{ $modelName }}s runs a scan on the {{ $modelName }}s table.
func (d DB) Scan{{ $modelName }}s(ctx context.Context, input db.Scan{{ $modelName }}sInput, fn func(m *models.{{ $modelName }}, last{{ $modelName }} bool) bool) error {
  return d.{{ $modelNameCamel }}Table.scan{{ $modelName }}s(ctx, input, fn)
}
{{- end }}

{{- if indexHasRangeKey $xdbConfig.DynamoDB.KeySchema }}
{{- $indexName := indexName $xdbConfig.DynamoDB.KeySchema }}
// Get{{ $modelName }}sBy{{ $indexName }} retrieves a page of {{ $modelName }}s from the database.
func (d DB) Get{{ $modelName }}sBy{{ $indexName }}(ctx context.Context, input db.Get{{ $modelName }}sBy{{ $indexName }}Input, fn func(m *models.{{ $modelName }}, last{{ $modelName }} bool) bool)  error {
  return d.{{ $modelNameCamel }}Table.get{{ $modelName }}sBy{{ $indexName }}(ctx, input, fn)
}
{{- end }}
// Delete{{ $modelName }} deletes a {{ $modelName }} from the database.
func (d DB) Delete{{ $modelName }}(ctx context.Context,
  {{- range $_, $attributeName := $pkModelAttributeNames }}
  {{- varname $attributeName }} {{ goTypeForAttribute $xdbConfig $attributeName }},
  {{- end -}}
) error {
  return d.{{ $modelNameCamel }}Table.delete{{ $modelName }}(ctx,
    {{- range $_, $attributeName := $pkModelAttributeNames }}
    {{- varname $attributeName }},
    {{- end -}}
    )
}

{{- range $gsi := $xdbConfig.DynamoDB.GlobalSecondaryIndexes }}
{{- $indexName := indexName $gsi.KeySchema }}
{{- if indexHasRangeKey $gsi.KeySchema }}
// Get{{ $modelName }}sBy{{ $indexName }} retrieves a page of {{ $modelName }}s from the database.
func (d DB) Get{{ $modelName }}sBy{{ $indexName }}(ctx context.Context, input db.Get{{ $modelName }}sBy{{ $indexName }}Input, fn func(m *models.{{ $modelName }}, last{{ $modelName }} bool) bool) error {
  return d.{{ $modelNameCamel }}Table.get{{ $modelName }}sBy{{ $indexName }}(ctx, input, fn)
}
{{- else }}
{{- $gsiModelAttributeNames := modelAttributeNamesForIndex $xdbConfig $gsi.KeySchema }}
// Get{{ $modelName }}By{{ $indexName }} retrieves a {{ $modelName }} from the database.
func (d DB) Get{{ $modelName }}By{{ $indexName }}(ctx context.Context,
  {{- range $_, $attributeName := $gsiModelAttributeNames }}
  {{- varname $attributeName }} {{ goTypeForAttribute $xdbConfig $attributeName }},
  {{- end -}}
    ) (*models.{{ $modelName }}, error) {
  return d.{{ $modelNameCamel }}Table.get{{ $modelName }}By{{ $indexName }}(ctx,
    {{- range $_, $attributeName := $gsiModelAttributeNames }}
    {{- varname $attributeName }},
    {{- end -}}
        )
}
{{- end }}
{{- end }}
{{- end }}

func toDynamoTimeString(d strfmt.DateTime) string {
  return time.Time(d).Format(time.RFC3339) // dynamodb attributevalue only supports RFC3339 resolution
}

func toDynamoTimeStringPtr(d *strfmt.DateTime) string {
  return time.Time(*d).Format(time.RFC3339) // dynamodb attributevalue only supports RFC3339 resolution
}
