package tests

import (
  "context"
  "testing"
  "fmt"
  {{- if anyTableUsesDateTime .XDBConfigs }}
    "time"
  {{- end }}

  "{{ .ModuleName }}{{.GoOutputPath}}/models{{.VersionSuffix}}"
  "{{ .PackageName }}/{{ .OutputPath }}"
  "github.com/stretchr/testify/require"
  {{- if anyTableUsesDateTime .XDBConfigs }}
  "github.com/go-openapi/strfmt"
        {{- end }}
)

{{ if anyTableUsesDateTime .XDBConfigs }}
func mustTime(s string) strfmt.DateTime {
  t, err := time.Parse(time.RFC3339, s)
  if err != nil {
    panic(err)
  }
  return strfmt.DateTime(t)
}
{{- end }}
{{ if anyTableUsesDate .XDBConfigs }}
func mustDate(s string) strfmt.Date {
  t, err := time.Parse(time.DateOnly, s)
  if err != nil {
    panic(err)
  }
  return strfmt.Date(t)
}
{{- end }}

func pointerToString(str string) *string{
  return &str
}

func RunDBTests(t *testing.T, dbFactory func() db.Interface) {
  {{- $xdbConfigs := .XDBConfigs }}
  {{- range $xdbConfig := .XDBConfigs }}
  {{- $modelName := pascalize $xdbConfig.SchemaName }}
  t.Run("Get{{ $modelName }}", Get{{ $modelName }}(dbFactory(), t))
        {{- if $xdbConfig.AllowPrimaryIndexScan }}
  t.Run("Scan{{ $modelName }}s", Scan{{ $modelName }}s(dbFactory(), t))
        {{- end }}
  {{- if indexHasRangeKey $xdbConfig.DynamoDB.KeySchema }}
  {{- $indexName := indexName $xdbConfig.DynamoDB.KeySchema }}
  t.Run("Get{{ $modelName }}sBy{{ $indexName }}", Get{{ $modelName }}sBy{{ $indexName }}(dbFactory(), t))
  {{- end }}
  t.Run("Save{{ $modelName }}", Save{{ $modelName }}(dbFactory(), t))
  t.Run("Delete{{ $modelName }}", Delete{{ $modelName }}(dbFactory(), t))
  {{- range $gsi := $xdbConfig.DynamoDB.GlobalSecondaryIndexes }}
  {{- $computedIndexName := indexName $gsi.KeySchema }}
  {{- if indexHasRangeKey $gsi.KeySchema }}
  t.Run("Get{{ $modelName }}sBy{{ $computedIndexName }}", Get{{ $modelName }}sBy{{ $computedIndexName }}(dbFactory(), t))
  {{- else }}
  t.Run("Get{{ $modelName }}By{{ $computedIndexName }}", Get{{ $modelName }}By{{ $computedIndexName }}(dbFactory(), t))
  {{- end }}
  {{- if indexAllowsScans $xdbConfig $gsi.IndexName }}
  t.Run("Scan{{ $modelName }}sBy{{ $computedIndexName }}", Scan{{ $modelName }}sBy{{ $computedIndexName }}(dbFactory(), t))
  {{- end }}
  {{- range $transactWithSchemaName := $xdbConfig.EnableTransactions }}
  {{- $transactWithModelName := pascalize $transactWithSchemaName }}
  t.Run("TransactSave{{ $modelName }}And{{ $transactWithModelName }}", TransactSave{{ $modelName }}And{{ $transactWithModelName }}(dbFactory(), t))
  {{- end }}
  {{- end }}
        {{- end }}
}

{{ range $xdbConfig := .XDBConfigs }}
{{- $modelName := pascalize $xdbConfig.SchemaName }}
{{- $compositeAttributeProperties := getCompositeAttributeAndCompositeAttributeIndexProperties $xdbConfig}}
{{- $pkModelAttributeNames := modelAttributeNamesForIndex $xdbConfig $xdbConfig.DynamoDB.KeySchema }}
{{- $nonPKSecondaryStringProperties := nonPKSecondaryStringProperties $xdbConfig }}
func Get{{ $modelName }}(s db.Interface, t *testing.T) func(t *testing.T) {
  return func(t *testing.T) {
           ctx := context.Background()
    m := models.{{ $modelName }}{
      {{- range $attributeName := modelAttributeNames $xdbConfig }}
        {{ pascalize $attributeName }}: {{ exampleValueForAttribute $xdbConfig $attributeName 1 }},
      {{- end }}
    }
    require.Nil(t, s.Save{{ $modelName }}(ctx, m))
    m2, err := s.Get{{ $modelName }}(ctx, {{ range $attributeName := $pkModelAttributeNames }}{{ attributeToModelValue $xdbConfig $attributeName "m." }},{{ end }})
    require.Nil(t, err)
    {{- range $attributeName := $pkModelAttributeNames }}
    {{- $attrGoType := goTypeForAttribute $xdbConfig $attributeName }}
                {{- if eq $attrGoType "strfmt.DateTime" }}
    require.Equal(t, m.{{ pascalize $attributeName }}.String(), m2.{{ pascalize $attributeName }}.String())
                {{- else }}
    require.Equal(t, {{ attributeToModelValue $xdbConfig $attributeName "m." }}, {{ attributeToModelValue $xdbConfig $attributeName "m2." }})
    {{- end }}
    {{- end }}

    _, err = s.Get{{ $modelName }}(ctx,
      {{- range $attributeName := $pkModelAttributeNames -}}
      {{- exampleValueNotPtrForAttribute $xdbConfig $attributeName 2 -}},
      {{- end -}}
                )
                require.NotNil(t, err)
    require.IsType(t, err, db.Err{{ $modelName }}NotFound{})
  }
}

{{- if indexHasRangeKey $xdbConfig.DynamoDB.KeySchema }}
{{- $indexName := indexName $xdbConfig.DynamoDB.KeySchema }}
{{- $hashKey := index $xdbConfig.DynamoDB.KeySchema 0 }}
{{- $hashKeyAttributes := modelAttributeNamesForKeyType $xdbConfig $xdbConfig.DynamoDB.KeySchema "HASH" }}
{{- $rangeKey := index $xdbConfig.DynamoDB.KeySchema 1 }}
{{- $rangeKeyAttributes := modelAttributeNamesForKeyType $xdbConfig $xdbConfig.DynamoDB.KeySchema "RANGE" }}
{{- $lenRangeKeyAttributes := len $rangeKeyAttributes }}
type get{{ $modelName }}sBy{{ $indexName }}Input struct {
  ctx   context.Context
  input db.Get{{ $modelName }}sBy{{ $indexName }}Input
}
type get{{ $modelName }}sBy{{ $indexName }}Output struct {
  {{ camelize $modelName }}s []models.{{ $modelName }}
  err    error
}
type get{{ $modelName }}sBy{{ $indexName }}Test struct {
  testName string
  d      db.Interface
  input  get{{ $modelName }}sBy{{ $indexName }}Input
  output get{{ $modelName }}sBy{{ $indexName }}Output
}

func (g get{{ $modelName }}sBy{{ $indexName }}Test) run(t *testing.T) {
  {{ camelize $modelName }}s := []models.{{ $modelName }}{}
  fn := func(m *models.{{ $modelName }}, last{{ $modelName }} bool) bool {
    {{ camelize $modelName }}s = append({{ camelize $modelName }}s, *m)
    if last{{ $modelName }} {
      return false
    }
    return true
  }
  err := g.d.Get{{ $modelName }}sBy{{ $indexName }}(g.input.ctx, g.input.input, fn)
  if err != nil {
    fmt.Println(err.Error())
  }
  require.Equal(t, g.output.err, err)
  require.Equal(t, g.output.{{ camelize $modelName }}s, {{ camelize $modelName }}s)
}

func Get{{ $modelName }}sBy{{ $indexName }}(d db.Interface, t *testing.T) func(t *testing.T) {
  return func(t *testing.T) {
    ctx := context.Background()
    require.Nil(t, d.Save{{ $modelName }}(ctx, models.{{ $modelName }}{
      {{- range $attributeName := $pkModelAttributeNames }}
      {{ pascalize $attributeName }}:    {{ exampleValueForAttribute $xdbConfig $attributeName 1 }},
      {{- end }}
                        {{- if len $nonPKSecondaryStringProperties }}
                        {{- range $attr := $nonPKSecondaryStringProperties }}
                          {{- if attributeIsPointer $xdbConfig $attr }}
                            {{ pascalize $attr }}: pointerToString("{{ $attr }}0"),
                          {{- else }}
                            {{ pascalize $attr }}: "{{ $attr }}0",
                          {{- end }}
                        {{- end }}
                        {{- end }}
    }))
    require.Nil(t, d.Save{{ $modelName }}(ctx, models.{{ $modelName }}{
            {{- range $attributeName := $hashKeyAttributes }}
      {{ pascalize $attributeName }}:    {{ exampleValueForAttribute $xdbConfig $attributeName 1 }},
                        {{- end }}
            {{- range $attributeName := $rangeKeyAttributes }}
      {{ pascalize $attributeName }}:    {{ exampleValueForAttribute $xdbConfig $attributeName 2 }},
                        {{- end }}
                        {{- if len $nonPKSecondaryStringProperties }}
                        {{- range $attr := $nonPKSecondaryStringProperties }}
                          {{- if attributeIsPointer $xdbConfig $attr }}
                            {{ pascalize $attr }}: pointerToString("{{ $attr }}1"),
                          {{- else }}
                            {{ pascalize $attr }}: "{{ $attr }}1",
                          {{- end }}
                        {{- end }}
                        {{- end }}
    }))
    require.Nil(t, d.Save{{ $modelName }}(ctx, models.{{ $modelName }}{
            {{- range $attributeName := $hashKeyAttributes }}
      {{ pascalize $attributeName }}:    {{ exampleValueForAttribute $xdbConfig $attributeName 1 }},
                        {{- end }}
            {{- range $attributeName := $rangeKeyAttributes }}
      {{ pascalize $attributeName }}:    {{ exampleValueForAttribute $xdbConfig $attributeName 3 }},
                        {{- end }}
                        {{- if len $nonPKSecondaryStringProperties }}
                        {{- range $attr := $nonPKSecondaryStringProperties }}
                          {{- if attributeIsPointer $xdbConfig $attr }}
                            {{ pascalize $attr }}: pointerToString("{{ $attr }}2"),
                          {{- else }}
                            {{ pascalize $attr }}: "{{ $attr }}2",
                          {{- end }}
                        {{- end }}
                        {{- end }}
    }))
    limit := int64(3)
    tests := []get{{ $modelName }}sBy{{ $indexName }}Test{
      {
        testName: "basic",
        d:    d,
        input: get{{ $modelName }}sBy{{ $indexName }}Input{
          ctx: context.Background(),
          input: db.Get{{ $modelName }}sBy{{ $indexName }}Input{
            {{- range $attributeName := $hashKeyAttributes }}
              {{ pascalize $attributeName }}: {{ exampleValueNotPtrForAttribute $xdbConfig $attributeName 1 }},
            {{- end }}
            Limit: &limit,
          },
        },
        output: get{{ $modelName }}sBy{{ $indexName }}Output{
          {{ camelize $modelName }}s: []models.{{ $modelName }}{
            models.{{ $modelName }}{
                    {{- range $attributeName := modelAttributeNamesForIndex $xdbConfig $xdbConfig.DynamoDB.KeySchema }}
              {{ pascalize $attributeName }}:    {{ exampleValueForAttribute $xdbConfig $attributeName 1 }},
                                                        {{- end }}
                                {{- if len $nonPKSecondaryStringProperties }}
                                                        {{- range $attr := $nonPKSecondaryStringProperties }}
                                                          {{- if attributeIsPointer $xdbConfig $attr }}
                                                            {{ pascalize $attr }}: pointerToString("{{ $attr }}0"),
                                                          {{- else }}
                                                            {{ pascalize $attr }}: "{{ $attr }}0",
                                                          {{- end }}
                                                        {{- end }}
                                                        {{- end }}
            },
            models.{{ $modelName }}{
                    {{- range $attributeName := $hashKeyAttributes }}
              {{ pascalize $attributeName }}:    {{ exampleValueForAttribute $xdbConfig $attributeName 1 }},
                                                        {{- end }}
                    {{- range $attributeName := $rangeKeyAttributes }}
              {{ pascalize $attributeName }}: {{ exampleValueForAttribute $xdbConfig $attributeName 2 }},
                                                        {{- end }}
                                {{- if len $nonPKSecondaryStringProperties }}
                                                        {{- range $attr := $nonPKSecondaryStringProperties }}
                                                          {{- if attributeIsPointer $xdbConfig $attr }}
                                                            {{ pascalize $attr }}: pointerToString("{{ $attr }}1"),
                                                          {{- else }}
                                                            {{ pascalize $attr }}: "{{ $attr }}1",
                                                          {{- end }}
                                                        {{- end }}
                                                        {{- end }}
            },
            models.{{ $modelName }}{
                    {{- range $attributeName := $hashKeyAttributes }}
              {{ pascalize $attributeName }}:    {{ exampleValueForAttribute $xdbConfig $attributeName 1 }},
                                                        {{- end }}
                    {{- range $attributeName := $rangeKeyAttributes }}
              {{ pascalize $attributeName }}: {{ exampleValueForAttribute $xdbConfig $attributeName 3 }},
                                                        {{- end }}
                                {{- if len $nonPKSecondaryStringProperties }}
                                                        {{- range $attr := $nonPKSecondaryStringProperties }}
                                                          {{- if attributeIsPointer $xdbConfig $attr }}
                                                            {{ pascalize $attr }}: pointerToString("{{ $attr }}2"),
                                                          {{- else }}
                                                            {{ pascalize $attr }}: "{{ $attr }}2",
                                                          {{- end }}
                                                        {{- end }}
                                                        {{- end }}
            },
          },
          err: nil,
        },
      },
      {
        testName: "descending",
        d:    d,
        input: get{{ $modelName }}sBy{{ $indexName }}Input{
          ctx: context.Background(),
          input: db.Get{{ $modelName }}sBy{{ $indexName }}Input{
                  {{- range $attributeName := $hashKeyAttributes }}
            {{ pascalize $attributeName }}: {{ exampleValueNotPtrForAttribute $xdbConfig $attributeName 1 }},
                                                {{- end }}
            Descending: true,
          },
        },
        output: get{{ $modelName }}sBy{{ $indexName }}Output{
          {{ camelize $modelName }}s: []models.{{ $modelName }}{
            models.{{ $modelName }}{
                    {{- range $attributeName := $hashKeyAttributes }}
              {{ pascalize $attributeName }}:    {{ exampleValueForAttribute $xdbConfig $attributeName 1 }},
                                                        {{- end }}
                    {{- range $attributeName := $rangeKeyAttributes }}
              {{ pascalize $attributeName }}: {{ exampleValueForAttribute $xdbConfig $attributeName 3 }},
                                                        {{- end }}
                                {{- if len $nonPKSecondaryStringProperties }}
                                                        {{- range $attr := $nonPKSecondaryStringProperties }}
                                                          {{- if attributeIsPointer $xdbConfig $attr }}
                                                            {{ pascalize $attr }}: pointerToString("{{ $attr }}2"),
                                                          {{- else }}
                                                            {{ pascalize $attr }}: "{{ $attr }}2",
                                                          {{- end }}
                                                        {{- end }}
                                                        {{- end }}
            },
            models.{{ $modelName }}{
                    {{- range $attributeName := $hashKeyAttributes }}
              {{ pascalize $attributeName }}:    {{ exampleValueForAttribute $xdbConfig $attributeName 1 }},
                                                        {{- end }}
                    {{- range $attributeName := $rangeKeyAttributes }}
              {{ pascalize $attributeName }}: {{ exampleValueForAttribute $xdbConfig $attributeName 2 }},
                                                        {{- end }}
                                {{- if len $nonPKSecondaryStringProperties }}
                                                        {{- range $attr := $nonPKSecondaryStringProperties }}
                                                          {{- if attributeIsPointer $xdbConfig $attr }}
                                                            {{ pascalize $attr }}: pointerToString("{{ $attr }}1"),
                                                          {{- else }}
                                                            {{ pascalize $attr }}: "{{ $attr }}1",
                                                          {{- end }}
                                                        {{- end }}
                                                        {{- end }}
            },
            models.{{ $modelName }}{
                    {{- range $attributeName := $hashKeyAttributes }}
              {{ pascalize $attributeName }}:    {{ exampleValueForAttribute $xdbConfig $attributeName 1 }},
                                                        {{- end }}
                    {{- range $attributeName := $rangeKeyAttributes }}
              {{ pascalize $attributeName }}: {{ exampleValueForAttribute $xdbConfig $attributeName 1 }},
                                                        {{- end }}
                                {{- if len $nonPKSecondaryStringProperties }}
                                                        {{- range $attr := $nonPKSecondaryStringProperties }}
                                                          {{- if attributeIsPointer $xdbConfig $attr }}
                                                            {{ pascalize $attr }}: pointerToString("{{ $attr }}0"),
                                                          {{- else }}
                                                            {{ pascalize $attr }}: "{{ $attr }}0",
                                                          {{- end }}
                                                        {{- end }}
                                                        {{- end }}
            },
          },
          err: nil,
        },
      },
      {
        testName: "starting after",
        d:    d,
        input: get{{ $modelName }}sBy{{ $indexName }}Input{
          ctx: context.Background(),
          input: db.Get{{ $modelName }}sBy{{ $indexName }}Input{
            {{- range $attributeName := $hashKeyAttributes }}
              {{ pascalize $attributeName }}: {{ exampleValueNotPtrForAttribute $xdbConfig $attributeName 1 }},
            {{- end }}
            StartingAfter: &models.{{ $modelName }}{
              {{- range $attributeName := $hashKeyAttributes }}
                {{ pascalize $attributeName }}:    {{ exampleValueForAttribute $xdbConfig $attributeName 1 }},
              {{- end }}
              {{- range $attributeName := $rangeKeyAttributes }}
                {{ pascalize $attributeName }}:    {{ exampleValueForAttribute $xdbConfig $attributeName 1 }},
              {{- end }}
              {{- if len $nonPKSecondaryStringProperties }}
                {{- range $attr := $nonPKSecondaryStringProperties }}
                  {{- if attributeIsPointer $xdbConfig $attr }}
                    {{ pascalize $attr }}: pointerToString("{{ $attr }}0"),
                  {{- else }}
                    {{ pascalize $attr }}: "{{ $attr }}0",
                  {{- end }}
                {{- end }}
              {{- end }}
            },
          },
        },
        output: get{{ $modelName }}sBy{{ $indexName }}Output{
          {{ camelize $modelName }}s: []models.{{ $modelName }}{
            models.{{ $modelName }}{
              {{- range $attributeName := $hashKeyAttributes }}
                {{ pascalize $attributeName }}:    {{ exampleValueForAttribute $xdbConfig $attributeName 1 }},
              {{- end }}
              {{- range $attributeName := $rangeKeyAttributes }}
                {{ pascalize $attributeName }}: {{ exampleValueForAttribute $xdbConfig $attributeName 2 }},
              {{- end }}
              {{- if len $nonPKSecondaryStringProperties }}
                {{- range $attr := $nonPKSecondaryStringProperties }}
                  {{- if attributeIsPointer $xdbConfig $attr }}
                    {{ pascalize $attr }}:pointerToString("{{ $attr }}1"),
                  {{- else }}
                    {{ pascalize $attr }}: "{{ $attr }}1",
                  {{- end }}
                {{- end }}
              {{- end }}
            },
            models.{{ $modelName }}{
              {{- range $attributeName := $hashKeyAttributes }}
                {{ pascalize $attributeName }}:    {{ exampleValueForAttribute $xdbConfig $attributeName 1 }},
              {{- end }}
              {{- range $attributeName := $rangeKeyAttributes }}
                {{ pascalize $attributeName }}: {{ exampleValueForAttribute $xdbConfig $attributeName 3 }},
              {{- end }}
              {{- if len $nonPKSecondaryStringProperties }}
                {{- range $attr := $nonPKSecondaryStringProperties }}
                  {{- if attributeIsPointer $xdbConfig $attr }}
                    {{ pascalize $attr }}: pointerToString("{{ $attr }}2"),
                  {{- else }}
                    {{ pascalize $attr }}: "{{ $attr }}2",
                  {{- end }}
                {{- end }}
              {{- end }}
            },
          },
          err: nil,
        },
      },
      {
        testName: "starting after descending",
        d:    d,
        input: get{{ $modelName }}sBy{{ $indexName }}Input{
          ctx: context.Background(),
          input: db.Get{{ $modelName }}sBy{{ $indexName }}Input{
            {{- range $attributeName := $hashKeyAttributes }}
              {{ pascalize $attributeName }}: {{ exampleValueNotPtrForAttribute $xdbConfig $attributeName 1 }},
            {{- end }}
            StartingAfter: &models.{{ $modelName }}{
              {{- range $attributeName := $hashKeyAttributes }}
                {{ pascalize $attributeName }}:    {{ exampleValueForAttribute $xdbConfig $attributeName 1 }},
              {{- end }}
              {{- range $attributeName := $rangeKeyAttributes }}
                {{ pascalize $attributeName }}:    {{ exampleValueForAttribute $xdbConfig $attributeName 3 }},
              {{- end }}
              {{- if len $nonPKSecondaryStringProperties }}
                {{- range $attr := $nonPKSecondaryStringProperties }}
                  {{- if attributeIsPointer $xdbConfig $attr }}
                    {{ pascalize $attr }}: pointerToString("{{ $attr }}2"),
                  {{- else }}
                    {{ pascalize $attr }}: "{{ $attr }}2",
                  {{- end }}
                {{- end }}
              {{- end }}
            },
            Descending: true,
          },
        },
        output: get{{ $modelName }}sBy{{ $indexName }}Output{
          {{ camelize $modelName }}s: []models.{{ $modelName }}{
            models.{{ $modelName }}{
              {{- range $attributeName := $hashKeyAttributes }}
                {{ pascalize $attributeName }}:    {{ exampleValueForAttribute $xdbConfig $attributeName 1 }},
              {{- end }}
              {{- range $attributeName := $rangeKeyAttributes }}
                {{ pascalize $attributeName }}: {{ exampleValueForAttribute $xdbConfig $attributeName 2 }},
              {{- end }}
              {{- if len $nonPKSecondaryStringProperties }}
                {{- range $attr := $nonPKSecondaryStringProperties }}
                  {{- if attributeIsPointer $xdbConfig $attr }}
                    {{ pascalize $attr }}: pointerToString("{{ $attr }}1"),
                  {{- else }}
                    {{ pascalize $attr }}: "{{ $attr }}1",
                  {{- end }}
                {{- end }}
              {{- end }}
            },
            models.{{ $modelName }}{
              {{- range $attributeName := $hashKeyAttributes }}
                {{ pascalize $attributeName }}:    {{ exampleValueForAttribute $xdbConfig $attributeName 1 }},
              {{- end }}
              {{- range $attributeName := $rangeKeyAttributes }}
                {{ pascalize $attributeName }}: {{ exampleValueForAttribute $xdbConfig $attributeName 1 }},
              {{- end }}
              {{- if len $nonPKSecondaryStringProperties }}
                {{- range $attr := $nonPKSecondaryStringProperties }}
                  {{- if attributeIsPointer $xdbConfig $attr }}
                    {{ pascalize $attr }}: pointerToString("{{ $attr }}0"),
                  {{- else }}
                    {{ pascalize $attr }}: "{{ $attr }}0",
                  {{- end }}
                {{- end }}
              {{- end }}
            },
          },
          err: nil,
        },
      },
      {
        testName: "starting at",
        d:    d,
        input: get{{ $modelName }}sBy{{ $indexName }}Input{
          ctx: context.Background(),
          input: db.Get{{ $modelName }}sBy{{ $indexName }}Input{
                  {{- range $attributeName := $hashKeyAttributes }}
            {{ pascalize $attributeName }}: {{ exampleValueNotPtrForAttribute $xdbConfig $attributeName 1 }},
                                                {{- end }}
                                                {{- if gt $lenRangeKeyAttributes 1 }}
                                                StartingAt: &db.{{ pascalizeAndJoin $rangeKeyAttributes }}{
                                                  {{- range $attributeName := $rangeKeyAttributes }}
                                                        {{ pascalize $attributeName }}: {{ exampleValueNotPtrForAttribute $xdbConfig $attributeName 2 }},
                                                        {{- end }}
                                                },
                                                {{- else }}
                  {{- $attributeName := index $rangeKeyAttributes 0 }}
            {{ pascalize $attributeName }}StartingAt: {{ exampleValuePtrForAttribute $xdbConfig $attributeName 2 }},
                                                {{- end }}
          },
        },
        output: get{{ $modelName }}sBy{{ $indexName }}Output{
          {{ camelize $modelName }}s: []models.{{ $modelName }}{
            models.{{ $modelName }}{
                    {{- range $attributeName := $hashKeyAttributes }}
              {{ pascalize $attributeName }}:    {{ exampleValueForAttribute $xdbConfig $attributeName 1 }},
                                                        {{- end }}
                    {{- range $attributeName := $rangeKeyAttributes }}
              {{ pascalize $attributeName }}: {{ exampleValueForAttribute $xdbConfig $attributeName 2 }},
                                                        {{- end }}
                                {{- if len $nonPKSecondaryStringProperties }}
                                                        {{- range $attr := $nonPKSecondaryStringProperties }}
                                                          {{- if attributeIsPointer $xdbConfig $attr }}
                                                            {{ pascalize $attr }}: pointerToString("{{ $attr }}1"),
                                                          {{- else }}
                                                            {{ pascalize $attr }}: "{{ $attr }}1",
                                                          {{- end }}
                                                        {{- end }}
                                                        {{- end }}
            },
            models.{{ $modelName }}{
                    {{- range $attributeName := $hashKeyAttributes }}
              {{ pascalize $attributeName }}:    {{ exampleValueForAttribute $xdbConfig $attributeName 1 }},
                                                        {{- end }}
                    {{- range $attributeName := $rangeKeyAttributes }}
              {{ pascalize $attributeName }}: {{ exampleValueForAttribute $xdbConfig $attributeName 3 }},
                                                        {{- end }}
                                {{- if len $nonPKSecondaryStringProperties }}
                                                        {{- range $attr := $nonPKSecondaryStringProperties }}
                                                          {{- if attributeIsPointer $xdbConfig $attr }}
                                                            {{ pascalize $attr }}: pointerToString("{{ $attr }}2"),
                                                          {{- else }}
                                                            {{ pascalize $attr }}: "{{ $attr }}2",
                                                          {{- end }}
                                                        {{- end }}
                                                        {{- end }}
            },
          },
          err: nil,
        },
      },
      {{- if len $nonPKSecondaryStringProperties }}
      {
        testName: "filtering",
        d:    d,
        input: get{{ $modelName }}sBy{{ $indexName }}Input{
          ctx: context.Background(),
          input: db.Get{{ $modelName }}sBy{{ $indexName }}Input{
            {{- range $attributeName := $hashKeyAttributes }}
              {{ pascalize $attributeName }}: {{ exampleValueNotPtrForAttribute $xdbConfig $attributeName 1 }},
            {{- end }}
            FilterValues: []db.{{ $modelName }}By{{ $indexName }}FilterValues{
            {{-  $filterAttr := index $nonPKSecondaryStringProperties 0 }}  
              db.{{ $modelName }}By{{ $indexName }}FilterValues {
                AttributeName: db.{{ $modelName }}{{ pascalize $filterAttr }},
                AttributeValues: []interface{}{"{{ $filterAttr }}0"},
              },
            },
            FilterExpression: "#{{upper $filterAttr}} = :{{$filterAttr}}_value0",
            Limit: &limit,
          },
        },
        output: get{{ $modelName }}sBy{{ $indexName }}Output{
          {{ camelize $modelName }}s: []models.{{ $modelName }}{
            models.{{ $modelName }}{
                    {{- range $attributeName := modelAttributeNamesForIndex $xdbConfig $xdbConfig.DynamoDB.KeySchema }}
              {{ pascalize $attributeName }}:    {{ exampleValueForAttribute $xdbConfig $attributeName 1 }},
                                                        {{- end }}
                                {{- if len $nonPKSecondaryStringProperties }}
                                                        {{- range $attr := $nonPKSecondaryStringProperties }}
                                                          {{- if attributeIsPointer $xdbConfig $attr }}
                                                            {{ pascalize $attr }}: pointerToString("{{ $attr }}0"),
                                                          {{- else }}
                                                            {{ pascalize $attr }}: "{{ $attr }}0",
                                                          {{- end }}
                                                        {{- end }}
                                                        {{- end }}
            },
          },
          err: nil,
        },
      },
      {{- end }}
    }
    for _, test := range tests {
      t.Run(test.testName, test.run)
    }
  }
}
{{- end }}

{{- if $xdbConfig.AllowPrimaryIndexScan }}
// The scan tests are structured differently compared to other tests in because items returned by scans
// are not returned in any particular order, so we can't simply declare what the expected arrays of items are.
func Scan{{ $modelName }}s(d db.Interface, t *testing.T) func(t *testing.T) {
  return func(t *testing.T) {
    ctx := context.Background()
    require.Nil(t, d.Save{{ $modelName }}(ctx, models.{{ $modelName }}{
      {{- range $attributeName := modelAttributeNames $xdbConfig }}
        {{ pascalize $attributeName }}: {{ exampleValueForAttribute $xdbConfig $attributeName 1 }},
      {{- end }}
    }))
    require.Nil(t, d.Save{{ $modelName }}(ctx, models.{{ $modelName }}{
      {{- range $attributeName := modelAttributeNames $xdbConfig }}
        {{ pascalize $attributeName }}: {{ exampleValueForAttribute $xdbConfig $attributeName 2 }},
      {{- end }}
    }))
    require.Nil(t, d.Save{{ $modelName }}(ctx, models.{{ $modelName }}{
      {{- range $attributeName := modelAttributeNames $xdbConfig }}
        {{ pascalize $attributeName }}: {{ exampleValueForAttribute $xdbConfig $attributeName 3 }},
      {{- end }}
    }))

    t.Run("basic", func(t *testing.T) {
      expected := []models.{{ $modelName }}{
            models.{{ $modelName }}{
              {{- range $attributeName := modelAttributeNames $xdbConfig }}
                {{ pascalize $attributeName }}: {{ exampleValueForAttribute $xdbConfig $attributeName 1 }},
              {{- end }}
            },
            models.{{ $modelName }}{
              {{- range $attributeName := modelAttributeNames $xdbConfig }}
                {{ pascalize $attributeName }}: {{ exampleValueForAttribute $xdbConfig $attributeName 2 }},
              {{- end }}
            },
            models.{{ $modelName }}{
              {{- range $attributeName := modelAttributeNames $xdbConfig }}
                {{ pascalize $attributeName }}: {{ exampleValueForAttribute $xdbConfig $attributeName 3 }},
              {{- end }}
            },
      }
      actual := []models.{{ $modelName }}{}
      err := d.Scan{{ $modelName }}s(ctx, db.Scan{{ $modelName }}sInput{}, func(m *models.{{ $modelName }}, last bool) bool {
        actual = append(actual, *m)
        return true
      })
      var errStr string
      if err != nil {
        errStr = err.Error()
      }
      require.NoError(t, err, errStr)
      // We can't use Equal here because Scan doesn't return items in any specific order.
      require.ElementsMatch(t, expected, actual)
    })

    t.Run("starting after", func(t *testing.T) {
      // Scan for everything.
      allItems := []models.{{ $modelName }}{}
      err := d.Scan{{ $modelName }}s(ctx, db.Scan{{ $modelName }}sInput{}, func(m *models.{{ $modelName }}, last bool) bool {
        allItems = append(allItems, *m)
        return true
      })
      var errStr string
      if err != nil {
        errStr = err.Error()
      }
      require.NoError(t, err, errStr)

      firstItem := allItems[0]

      // Scan for everything after the first item.
      scanInput := db.Scan{{ $modelName }}sInput{
        StartingAfter: &models.{{ $modelName }}{
          {{- range $attributeName := $pkModelAttributeNames }}
            {{ pascalize $attributeName }}:    firstItem.{{ pascalize $attributeName }},
          {{- end }}
          {{- if len $nonPKSecondaryStringProperties }}
            // must specify non-empty string values for attributes
            // in secondary indexes, since dynamodb doesn't support
            // empty strings:
            {{- range $attr := $nonPKSecondaryStringProperties }}
              {{- if attributeIsPointer $xdbConfig $attr }}
                {{ pascalize $attr }}: pointerToString("{{ $attr }}"),
              {{- else }}
                {{ pascalize $attr }}: "{{ $attr }}",
              {{- end }}
            {{- end }}
          {{- end }}
        },
      }
      actual := []models.{{ $modelName }}{}
      err = d.Scan{{ $modelName }}s(ctx, scanInput, func(m *models.{{ $modelName }}, last bool) bool {
        actual = append(actual, *m)
        return true
      })
      if err != nil {
        errStr = err.Error()
      }
      require.NoError(t, err, errStr)

      expected := allItems[1:]
      require.Equal(t, expected, actual)
    })

    t.Run("limit", func(t *testing.T) {
      limit := int64(1)
      // Scan for just the first item.
      scanInput := db.Scan{{ $modelName }}sInput{
        Limit: &limit,
      }
      actual := []models.{{ $modelName }}{}
      err := d.Scan{{ $modelName }}s(ctx, scanInput, func(m *models.{{ $modelName }}, last bool) bool {
        actual = append(actual, *m)
        return true
      })
      var errStr string
      if err != nil {
        errStr = err.Error()
      }
      require.NoError(t, err, errStr)

      require.Len(t, actual, 1)
    })
  }
}
{{- end }}


func Save{{ $modelName }}(s db.Interface, t *testing.T) func(t *testing.T) {
  return func(t *testing.T) {
    ctx := context.Background()
    m := models.{{ $modelName }}{
      {{- range $attributeName := modelAttributeNames $xdbConfig }}
        {{ pascalize $attributeName }}: {{ exampleValueForAttribute $xdbConfig $attributeName 1 }},
      {{- end }}
    }
    require.Nil(t, s.Save{{ $modelName }}(ctx, m))
                {{- if not $xdbConfig.AllowOverwrites }}
    require.IsType(t, db.Err{{ $modelName }}AlreadyExists{}, s.Save{{ $modelName }}(ctx, m))
                {{- end }}
  }
}

func Delete{{ $modelName }}(s db.Interface, t *testing.T) func(t *testing.T) {
  return func(t *testing.T) {
    ctx := context.Background()
    m := models.{{ $modelName }}{
      {{- range $attributeName := modelAttributeNames $xdbConfig }}
        {{ pascalize $attributeName }}: {{ exampleValueForAttribute $xdbConfig $attributeName 1 }},
      {{- end }}
    }
    require.Nil(t, s.Save{{ $modelName }}(ctx, m))
    require.Nil(t, s.Delete{{ $modelName }}(ctx, {{- range $attributeName := $pkModelAttributeNames }}{{ attributeToModelValue $xdbConfig $attributeName "m." }},{{- end -}}))
  }
}

{{ range $gsi := $xdbConfig.DynamoDB.GlobalSecondaryIndexes }}
{{- $computedIndexName := indexName $gsi.KeySchema }}
{{ $primaryAndSecondaryKeySchemas := unionKeySchemas $xdbConfig.DynamoDB.KeySchema $gsi.KeySchema }}
{{ $primaryKeySchemaWithoutSecondary := differenceKeySchemas $xdbConfig.DynamoDB.KeySchema $gsi.KeySchema }}
{{- $gsiModelAttributeNames := modelAttributeNamesForIndex $xdbConfig $gsi.KeySchema }}
{{- $compositeAndPkUnion := union $compositeAttributeProperties $pkModelAttributeNames}}
{{- $nonSecondaryRequiredAttributes := difference $compositeAndPkUnion $gsiModelAttributeNames}}
{{- $pkAttributeNamesWithoutSecondary := difference $pkModelAttributeNames $gsiModelAttributeNames }}
{{- if indexHasRangeKey $gsi.KeySchema }}
{{- $hashKey := index $gsi.KeySchema 0 }}
{{- $hashKeyAttributes := modelAttributeNamesForKeyType $xdbConfig $gsi.KeySchema "HASH" }}
{{- $rangeKey := index $gsi.KeySchema 1 }}
{{- $rangeKeyAttributes := modelAttributeNamesForKeyType $xdbConfig $gsi.KeySchema "RANGE" }}
{{- $lenRangeKeyAttributes := len $rangeKeyAttributes }}
type get{{ $modelName }}sBy{{ $computedIndexName }}Input struct {
  ctx   context.Context
  input db.Get{{ $modelName }}sBy{{ $computedIndexName }}Input
}
type get{{ $modelName }}sBy{{ $computedIndexName }}Output struct {
  {{ camelize $modelName }}s []models.{{ $modelName }}
  err    error
}
type get{{ $modelName }}sBy{{ $computedIndexName }}Test struct {
  testName string
  d      db.Interface
  input  get{{ $modelName }}sBy{{ $computedIndexName }}Input
  output get{{ $modelName }}sBy{{ $computedIndexName }}Output
}

func (g get{{ $modelName }}sBy{{ $computedIndexName }}Test) run(t *testing.T) {
  {{ camelize $modelName }}s := []models.{{ $modelName }}{}
  fn := func(m *models.{{ $modelName }}, last{{ $modelName }} bool) bool {
    {{ camelize $modelName }}s = append({{ camelize $modelName }}s, *m)
    if last{{ $modelName }} {
      return false
    }
    return true
  }
  err := g.d.Get{{ $modelName }}sBy{{ $computedIndexName }}(g.input.ctx, g.input.input, fn)
  if err != nil {
    fmt.Println(err.Error())
  }
  require.Equal(t, g.output.err, err)
  require.Equal(t, g.output.{{ camelize $modelName }}s, {{ camelize $modelName }}s)
}

func Get{{ $modelName }}sBy{{ $computedIndexName }}(d db.Interface, t *testing.T) func(t *testing.T) {
  return func(t *testing.T) {
    ctx := context.Background()
    require.Nil(t, d.Save{{ $modelName }}(ctx, models.{{ $modelName }}{
            {{- range $attributeName := $hashKeyAttributes }}
      {{ pascalize $attributeName }}:    {{ exampleValueForAttribute $xdbConfig $attributeName 1 }},
      {{- end }}
            {{- range $attributeName := $rangeKeyAttributes }}
      {{ pascalize $attributeName }}: {{ exampleValueForAttribute $xdbConfig $attributeName 1 }},
      {{- end }}
                        {{- range $attributeName := $nonSecondaryRequiredAttributes }}
      {{ pascalize $attributeName }}:    {{ exampleValueForAttribute $xdbConfig $attributeName 1 }},
      {{- end }}
    }))
    require.Nil(t, d.Save{{ $modelName }}(ctx, models.{{ $modelName }}{
            {{- range $attributeName := $hashKeyAttributes }}
      {{ pascalize $attributeName }}:    {{ exampleValueForAttribute $xdbConfig $attributeName 1 }},
      {{- end }}
            {{- range $attributeName := $rangeKeyAttributes }}
      {{ pascalize $attributeName }}: {{ exampleValueForAttribute $xdbConfig $attributeName 2 }},
      {{- end }}
                        {{- range $attributeName := $nonSecondaryRequiredAttributes }}
      {{ pascalize $attributeName }}:    {{ exampleValueForAttribute $xdbConfig $attributeName 3 }},
      {{- end }}
    }))
    require.Nil(t, d.Save{{ $modelName }}(ctx, models.{{ $modelName }}{
            {{- range $attributeName := $hashKeyAttributes }}
      {{ pascalize $attributeName }}:    {{ exampleValueForAttribute $xdbConfig $attributeName 1 }},
      {{- end }}
            {{- range $attributeName := $rangeKeyAttributes }}
      {{ pascalize $attributeName }}: {{ exampleValueForAttribute $xdbConfig $attributeName 3 }},
      {{- end }}
                        {{- range $attributeName := $nonSecondaryRequiredAttributes }}
      {{ pascalize $attributeName }}:    {{ exampleValueForAttribute $xdbConfig $attributeName 2 }},
      {{- end }}
    }))
    limit := int64(3)
    tests := []get{{ $modelName }}sBy{{ $computedIndexName }}Test{
      {
        testName: "basic",
        d:    d,
        input: get{{ $modelName }}sBy{{ $computedIndexName }}Input{
          ctx: context.Background(),
          input: db.Get{{ $modelName }}sBy{{ $computedIndexName }}Input{
            {{- range $attributeName := $hashKeyAttributes }}
              {{ pascalize $attributeName }}: {{ exampleValueNotPtrForAttribute $xdbConfig $attributeName 1 }},
            {{- end }}
            Limit: &limit,
          },
        },
        output: get{{ $modelName }}sBy{{ $computedIndexName }}Output{
          {{ camelize $modelName }}s: []models.{{ $modelName }}{
            models.{{ $modelName }}{
                    {{- range $attributeName := $hashKeyAttributes }}
              {{ pascalize $attributeName }}:    {{ exampleValueForAttribute $xdbConfig $attributeName 1 }},
              {{- end }}
                    {{- range $attributeName := $rangeKeyAttributes }}
              {{ pascalize $attributeName }}: {{ exampleValueForAttribute $xdbConfig $attributeName 1 }},
              {{- end }}
                                {{- range $attributeName := $nonSecondaryRequiredAttributes }}
              {{ pascalize $attributeName }}:    {{ exampleValueForAttribute $xdbConfig $attributeName 1 }},
              {{- end }}
            },
            models.{{ $modelName }}{
                    {{- range $attributeName := $hashKeyAttributes }}
              {{ pascalize $attributeName }}:    {{ exampleValueForAttribute $xdbConfig $attributeName 1 }},
              {{- end }}
                    {{- range $attributeName := $rangeKeyAttributes }}
              {{ pascalize $attributeName }}: {{ exampleValueForAttribute $xdbConfig $attributeName 2 }},
              {{- end }}
                                {{- range $attributeName := $nonSecondaryRequiredAttributes }}
              {{ pascalize $attributeName }}:    {{ exampleValueForAttribute $xdbConfig $attributeName 3 }},
              {{- end }}
            },
            models.{{ $modelName }}{
                    {{- range $attributeName := $hashKeyAttributes }}
              {{ pascalize $attributeName }}:    {{ exampleValueForAttribute $xdbConfig $attributeName 1 }},
              {{- end }}
                    {{- range $attributeName := $rangeKeyAttributes }}
              {{ pascalize $attributeName }}: {{ exampleValueForAttribute $xdbConfig $attributeName 3 }},
              {{- end }}
                                {{- range $attributeName := $nonSecondaryRequiredAttributes }}
              {{ pascalize $attributeName }}:    {{ exampleValueForAttribute $xdbConfig $attributeName 2 }},
              {{- end }}
            },
          },
          err: nil,
        },
      },
      {
        testName: "descending",
        d:    d,
        input: get{{ $modelName }}sBy{{ $computedIndexName }}Input{
          ctx: context.Background(),
          input: db.Get{{ $modelName }}sBy{{ $computedIndexName }}Input{
            {{- range $attributeName := $hashKeyAttributes }}
            {{ pascalize $attributeName }}: {{ exampleValueNotPtrForAttribute $xdbConfig $attributeName 1 }},
                                                {{- end }}
            Descending: true,
          },
        },
        output: get{{ $modelName }}sBy{{ $computedIndexName }}Output{
          {{ camelize $modelName }}s: []models.{{ $modelName }}{
            models.{{ $modelName }}{
                    {{- range $attributeName := $hashKeyAttributes }}
              {{ pascalize $attributeName }}:    {{ exampleValueForAttribute $xdbConfig $attributeName 1 }},
              {{- end }}
                    {{- range $attributeName := $rangeKeyAttributes }}
              {{ pascalize $attributeName }}: {{ exampleValueForAttribute $xdbConfig $attributeName 3 }},
              {{- end }}
                                {{- range $attributeName := $nonSecondaryRequiredAttributes }}
              {{ pascalize $attributeName }}:    {{ exampleValueForAttribute $xdbConfig $attributeName 2 }},
              {{- end }}
            },
            models.{{ $modelName }}{
                    {{- range $attributeName := $hashKeyAttributes }}
              {{ pascalize $attributeName }}:    {{ exampleValueForAttribute $xdbConfig $attributeName 1 }},
              {{- end }}
                    {{- range $attributeName := $rangeKeyAttributes }}
              {{ pascalize $attributeName }}: {{ exampleValueForAttribute $xdbConfig $attributeName 2 }},
              {{- end }}
                                {{- range $attributeName := $nonSecondaryRequiredAttributes }}
              {{ pascalize $attributeName }}:    {{ exampleValueForAttribute $xdbConfig $attributeName 3 }},
              {{- end }}
            },
            models.{{ $modelName }}{
                    {{- range $attributeName := $hashKeyAttributes }}
              {{ pascalize $attributeName }}:    {{ exampleValueForAttribute $xdbConfig $attributeName 1 }},
              {{- end }}
                    {{- range $attributeName := $rangeKeyAttributes }}
              {{ pascalize $attributeName }}: {{ exampleValueForAttribute $xdbConfig $attributeName 1 }},
              {{- end }}
                                {{- range $attributeName := $nonSecondaryRequiredAttributes }}
              {{ pascalize $attributeName }}:    {{ exampleValueForAttribute $xdbConfig $attributeName 1 }},
              {{- end }}
            },
          },
          err: nil,
        },
      },
      {
        testName: "starting after",
        d:    d,
        input: get{{ $modelName }}sBy{{ $computedIndexName }}Input{
          ctx: context.Background(),
          input: db.Get{{ $modelName }}sBy{{ $computedIndexName }}Input{
            {{- range $attributeName := $hashKeyAttributes }}
              {{ pascalize $attributeName }}: {{ exampleValueNotPtrForAttribute $xdbConfig $attributeName 1 }},
            {{- end }}
            StartingAfter: &models.{{ $modelName }}{
              {{- range $attributeName := $hashKeyAttributes }}
              {{ pascalize $attributeName }}:    {{ exampleValueForAttribute $xdbConfig $attributeName 1 }},
              {{- end }}
                    {{- range $attributeName := $rangeKeyAttributes }}
              {{ pascalize $attributeName }}: {{ exampleValueForAttribute $xdbConfig $attributeName 1 }},
              {{- end }}
                                {{- range $attributeName := $nonSecondaryRequiredAttributes }}
              {{ pascalize $attributeName }}:    {{ exampleValueForAttribute $xdbConfig $attributeName 1 }},
              {{- end }}
            },
          },
        },
        output: get{{ $modelName }}sBy{{ $computedIndexName }}Output{
          {{ camelize $modelName }}s: []models.{{ $modelName }}{
            models.{{ $modelName }}{
                    {{- range $attributeName := $hashKeyAttributes }}
              {{ pascalize $attributeName }}:    {{ exampleValueForAttribute $xdbConfig $attributeName 1 }},
              {{- end }}
                    {{- range $attributeName := $rangeKeyAttributes }}
              {{ pascalize $attributeName }}: {{ exampleValueForAttribute $xdbConfig $attributeName 2 }},
              {{- end }}
                                {{- range $attributeName := $nonSecondaryRequiredAttributes }}
              {{ pascalize $attributeName }}:    {{ exampleValueForAttribute $xdbConfig $attributeName 3 }},
              {{- end }}
            },
            models.{{ $modelName }}{
                    {{- range $attributeName := $hashKeyAttributes }}
              {{ pascalize $attributeName }}:    {{ exampleValueForAttribute $xdbConfig $attributeName 1 }},
              {{- end }}
                    {{- range $attributeName := $rangeKeyAttributes }}
              {{ pascalize $attributeName }}: {{ exampleValueForAttribute $xdbConfig $attributeName 3 }},
              {{- end }}
                                {{- range $attributeName := $nonSecondaryRequiredAttributes }}
              {{ pascalize $attributeName }}:    {{ exampleValueForAttribute $xdbConfig $attributeName 2 }},
              {{- end }}
            },
          },
          err: nil,
        },
      },
      {
        testName: "starting after descending",
        d:    d,
        input: get{{ $modelName }}sBy{{ $computedIndexName }}Input{
          ctx: context.Background(),
          input: db.Get{{ $modelName }}sBy{{ $computedIndexName }}Input{
            {{- range $attributeName := $hashKeyAttributes }}
              {{ pascalize $attributeName }}: {{ exampleValueNotPtrForAttribute $xdbConfig $attributeName 1 }},
            {{- end }}
            StartingAfter: &models.{{ $modelName }}{
              {{- range $attributeName := $hashKeyAttributes }}
              {{ pascalize $attributeName }}:    {{ exampleValueForAttribute $xdbConfig $attributeName 1 }},
              {{- end }}
                    {{- range $attributeName := $rangeKeyAttributes }}
              {{ pascalize $attributeName }}: {{ exampleValueForAttribute $xdbConfig $attributeName 3 }},
              {{- end }}
                                {{- range $attributeName := $nonSecondaryRequiredAttributes }}
              {{ pascalize $attributeName }}:    {{ exampleValueForAttribute $xdbConfig $attributeName 2 }},
              {{- end }}
            },
            Descending: true,
          },
        },
        output: get{{ $modelName }}sBy{{ $computedIndexName }}Output{
          {{ camelize $modelName }}s: []models.{{ $modelName }}{
            models.{{ $modelName }}{
                    {{- range $attributeName := $hashKeyAttributes }}
              {{ pascalize $attributeName }}:    {{ exampleValueForAttribute $xdbConfig $attributeName 1 }},
              {{- end }}
                    {{- range $attributeName := $rangeKeyAttributes }}
              {{ pascalize $attributeName }}: {{ exampleValueForAttribute $xdbConfig $attributeName 2 }},
              {{- end }}
                                {{- range $attributeName := $nonSecondaryRequiredAttributes }}
              {{ pascalize $attributeName }}:    {{ exampleValueForAttribute $xdbConfig $attributeName 3 }},
              {{- end }}
            },
            models.{{ $modelName }}{
                    {{- range $attributeName := $hashKeyAttributes }}
              {{ pascalize $attributeName }}:    {{ exampleValueForAttribute $xdbConfig $attributeName 1 }},
              {{- end }}
                    {{- range $attributeName := $rangeKeyAttributes }}
              {{ pascalize $attributeName }}: {{ exampleValueForAttribute $xdbConfig $attributeName 1 }},
              {{- end }}
                                {{- range $attributeName := $nonSecondaryRequiredAttributes }}
              {{ pascalize $attributeName }}:    {{ exampleValueForAttribute $xdbConfig $attributeName 1 }},
              {{- end }}
            },
          },
          err: nil,
        },
      },
      {
        testName: "starting at",
        d:    d,
        input: get{{ $modelName }}sBy{{ $computedIndexName }}Input{
          ctx: context.Background(),
          input: db.Get{{ $modelName }}sBy{{ $computedIndexName }}Input{
            {{- range $attributeName := $hashKeyAttributes }}
            {{ pascalize $attributeName }}: {{ exampleValueNotPtrForAttribute $xdbConfig $attributeName 1 }},
                                                {{- end }}
                                                {{- if gt $lenRangeKeyAttributes 1 }}
                                                StartingAt: &db.{{ pascalizeAndJoin $rangeKeyAttributes }}{
                                                  {{- range $attributeName := $rangeKeyAttributes }}
                                                        {{ pascalize $attributeName }}: {{ exampleValueNotPtrForAttribute $xdbConfig $attributeName 2 }},
                                                        {{- end }}
                                                },
                                                {{- else }}
                  {{- $attributeName := index $rangeKeyAttributes 0 }}
            {{ pascalize $attributeName }}StartingAt: {{ exampleValuePtrForAttribute $xdbConfig $attributeName 2 }},
                                                {{- end }}
          },
        },
        output: get{{ $modelName }}sBy{{ $computedIndexName }}Output{
          {{ camelize $modelName }}s: []models.{{ $modelName }}{
            models.{{ $modelName }}{
                    {{- range $attributeName := $hashKeyAttributes }}
              {{ pascalize $attributeName }}:    {{ exampleValueForAttribute $xdbConfig $attributeName 1 }},
              {{- end }}
                    {{- range $attributeName := $rangeKeyAttributes }}
              {{ pascalize $attributeName }}: {{ exampleValueForAttribute $xdbConfig $attributeName 2 }},
              {{- end }}
                                {{- range $attributeName := $nonSecondaryRequiredAttributes }}
              {{ pascalize $attributeName }}:    {{ exampleValueForAttribute $xdbConfig $attributeName 3 }},
              {{- end }}
            },
            models.{{ $modelName }}{
                    {{- range $attributeName := $hashKeyAttributes }}
              {{ pascalize $attributeName }}:    {{ exampleValueForAttribute $xdbConfig $attributeName 1 }},
              {{- end }}
                    {{- range $attributeName := $rangeKeyAttributes }}
              {{ pascalize $attributeName }}: {{ exampleValueForAttribute $xdbConfig $attributeName 3 }},
              {{- end }}
                                {{- range $attributeName := $nonSecondaryRequiredAttributes }}
              {{ pascalize $attributeName }}:    {{ exampleValueForAttribute $xdbConfig $attributeName 2 }},
              {{- end }}
            },
          },
          err: nil,
        },
      },
    }
    for _, test := range tests {
      t.Run(test.testName, test.run)
    }
  }
}
{{- else }}
{{- $hashKey := index $gsi.KeySchema 0 }}
func Get{{ $modelName }}By{{ $computedIndexName }}(s db.Interface, t *testing.T) func(t *testing.T) {
  return func(t *testing.T) {
    ctx := context.Background()
    m := models.{{ $modelName }}{
      {{- range $attributeName := modelAttributeNames $xdbConfig }}
        {{ pascalize $attributeName }}: {{ exampleValueForAttribute $xdbConfig $attributeName 1 }},
      {{- end }}
    }
    require.Nil(t, s.Save{{ $modelName }}(ctx, m))
    m2, err := s.Get{{ $modelName }}By{{ $computedIndexName }}(ctx, {{ range $ks := $gsi.KeySchema }}m.{{ pascalize $ks.AttributeName }},{{ end }})
    require.Nil(t, err)
     {{- range $attributeName := modelAttributeNames $xdbConfig }}
    {{- $attrGoType := goTypeForAttribute $xdbConfig $attributeName }}
                {{- if eq $attrGoType "strfmt.DateTime" }}
    require.Equal(t, m.{{ pascalize $attributeName }}.String(), m2.{{ pascalize $attributeName }}.String())
                {{- else }}
    require.Equal(t, m.{{ pascalize $attributeName }}, m2.{{ pascalize $attributeName }})
    {{- end }}
    {{- end }}

    _, err = s.Get{{ $modelName }}By{{ $computedIndexName }}(ctx, {{ exampleValueForAttribute $xdbConfig $hashKey.AttributeName 2 }})
    require.NotNil(t, err)
    require.IsType(t, err, db.Err{{ $modelName }}By{{ $computedIndexName }}NotFound{})
  }
}
{{- end }}

{{- if indexAllowsScans $xdbConfig $gsi.IndexName }}
// The scan tests are structured differently compared to other tests in because items returned by scans
// are not returned in any particular order, so we can't simply declare what the expected arrays of items are.
func Scan{{ $modelName }}sBy{{ $computedIndexName }}(d db.Interface, t *testing.T) func(t *testing.T) {
  return func(t *testing.T) {
    ctx := context.Background()
    require.Nil(t, d.Save{{ $modelName }}(ctx, models.{{ $modelName }}{
      {{- range $attributeName := $gsiModelAttributeNames }}
      {{ pascalize $attributeName }}:    {{ exampleValueForAttribute $xdbConfig $attributeName 1 }},
      {{- end }}
      {{- range $attributeName := $nonSecondaryRequiredAttributes }}
      {{ pascalize $attributeName }}:    {{ exampleValueForAttribute $xdbConfig $attributeName 1 }},
      {{- end }}
    }))
    require.Nil(t, d.Save{{ $modelName }}(ctx, models.{{ $modelName }}{
      {{- range $attributeName := $gsiModelAttributeNames }}
      {{ pascalize $attributeName }}:    {{ exampleValueForAttribute $xdbConfig $attributeName 2 }},
      {{- end }}
      {{- range $attributeName := $nonSecondaryRequiredAttributes }}
      {{ pascalize $attributeName }}:    {{ exampleValueForAttribute $xdbConfig $attributeName 2 }},
      {{- end }}
    }))
    require.Nil(t, d.Save{{ $modelName }}(ctx, models.{{ $modelName }}{
      {{- range $attributeName := $gsiModelAttributeNames }}
      {{ pascalize $attributeName }}:    {{ exampleValueForAttribute $xdbConfig $attributeName 3 }},
      {{- end }}
      {{- range $attributeName := $nonSecondaryRequiredAttributes }}
      {{ pascalize $attributeName }}:    {{ exampleValueForAttribute $xdbConfig $attributeName 3 }},
      {{- end }}
    }))

    t.Run("basic", func(t *testing.T) {
      expected := []models.{{ $modelName }}{
            models.{{ $modelName }}{
              {{- range $attributeName := $gsiModelAttributeNames }}
              {{ pascalize $attributeName }}:    {{ exampleValueForAttribute $xdbConfig $attributeName 1 }},
              {{- end }}
              {{- range $attributeName := $nonSecondaryRequiredAttributes }}
              {{ pascalize $attributeName }}:    {{ exampleValueForAttribute $xdbConfig $attributeName 1 }},
              {{- end }}
            },
            models.{{ $modelName }}{
              {{- range $attributeName := $gsiModelAttributeNames }}
              {{ pascalize $attributeName }}:    {{ exampleValueForAttribute $xdbConfig $attributeName 2 }},
              {{- end }}
              {{- range $attributeName := $nonSecondaryRequiredAttributes }}
              {{ pascalize $attributeName }}:    {{ exampleValueForAttribute $xdbConfig $attributeName 2 }},
              {{- end }}
            },
            models.{{ $modelName }}{
              {{- range $attributeName := $gsiModelAttributeNames }}
              {{ pascalize $attributeName }}:    {{ exampleValueForAttribute $xdbConfig $attributeName 3 }},
              {{- end }}
              {{- range $attributeName := $nonSecondaryRequiredAttributes }}
              {{ pascalize $attributeName }}:    {{ exampleValueForAttribute $xdbConfig $attributeName 3 }},
              {{- end }}
            },
      }
      // Consistent read must be disabled when scaning a GSI.
      scanInput := db.Scan{{ $modelName }}sBy{{ $computedIndexName }}Input{DisableConsistentRead: true}
      actual := []models.{{ $modelName }}{}
      err := d.Scan{{ $modelName }}sBy{{ $computedIndexName }}(ctx, scanInput, func(m *models.{{ $modelName }}, last bool) bool {
        actual = append(actual, *m)
        return true
      })
      var errStr string
      if err != nil {
        errStr = err.Error()
      }
      require.NoError(t, err, errStr)
      // We can't use Equal here because Scan doesn't return items in any specific order.
      require.ElementsMatch(t, expected, actual)
    })

    t.Run("starting after", func(t *testing.T) {
      // Scan for everything.
      allItems := []models.{{ $modelName }}{}
      // Consistent read must be disabled when scaning a GSI.
      scanInput := db.Scan{{ $modelName }}sBy{{ $computedIndexName }}Input{DisableConsistentRead: true}
      err := d.Scan{{ $modelName }}sBy{{ $computedIndexName }}(ctx, scanInput, func(m *models.{{ $modelName }}, last bool) bool {
        allItems = append(allItems, *m)
        return true
      })
      var errStr string
      if err != nil {
        errStr = err.Error()
      }
      require.NoError(t, err, errStr)

      firstItem := allItems[0]

      // Scan for everything after the first item.
      scanInput = db.Scan{{ $modelName }}sBy{{ $computedIndexName }}Input{
        DisableConsistentRead: true,
        StartingAfter: &models.{{ $modelName }}{
          {{- range $attributeName := $gsiModelAttributeNames }}
            {{ pascalize $attributeName }}:    firstItem.{{ pascalize $attributeName }},
          {{- end }}
          {{- range $attributeName := $pkAttributeNamesWithoutSecondary }}
            {{ pascalize $attributeName }}:    firstItem.{{ pascalize $attributeName }},
          {{- end }}
        },
      }
      actual := []models.{{ $modelName }}{}
      err = d.Scan{{ $modelName }}sBy{{ $computedIndexName }}(ctx, scanInput, func(m *models.{{ $modelName }}, last bool) bool {
        actual = append(actual, *m)
        return true
      })
      if err != nil {
        errStr = err.Error()
      }
      require.NoError(t, err, errStr)

      expected := allItems[1:]
      require.Equal(t, expected, actual)
    })

    t.Run("limit", func(t *testing.T) {
      limit := int64(1)
      // Scan for just the first item.
      scanInput := db.Scan{{ $modelName }}sInput{
        Limit: &limit,
      }
      actual := []models.{{ $modelName }}{}
      err := d.Scan{{ $modelName }}s(ctx, scanInput, func(m *models.{{ $modelName }}, last bool) bool {
        actual = append(actual, *m)
        return true
      })
      var errStr string
      if err != nil {
        errStr = err.Error()
      }
      require.NoError(t, err, errStr)

      require.Len(t, actual, 1)
    })
  }
}
{{- end }}

{{- range $transactWithSchemaName := $xdbConfig.EnableTransactions }}
{{- $transactWithModelName := pascalize $transactWithSchemaName }}
{{- $transactWithConfig := configForSchemaName $xdbConfigs $transactWithSchemaName }}
func TransactSave{{ $modelName }}And{{ $transactWithModelName }}(s db.Interface, t *testing.T) func(t *testing.T) {
  return func(t *testing.T) {
    ctx := context.Background()
    m1 := models.{{ $modelName }}{
      {{- range $attributeName := modelAttributeNames $xdbConfig }}
        {{ pascalize $attributeName }}: {{ exampleValueForAttribute $xdbConfig $attributeName 1 }},
      {{- end }}
    }
    m2 := models.{{ $transactWithModelName }}{
      {{- range $attributeName := modelAttributeNames $transactWithConfig }}
        {{ pascalize $attributeName }}: {{ exampleValueForAttribute $transactWithConfig $attributeName 1 }},
      {{- end }}
    }
    require.Nil(t, s.TransactSave{{ $modelName }}And{{ $transactWithModelName }}(ctx, m1, nil, m2, nil))
  }
}
{{- end }}

{{ end }}
{{ end }}
