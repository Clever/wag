package tests

import (
	"context"
	"testing"
	{{- if anyTableUsesDateTime .XDBConfigs }}
	"time"
        {{- end }}

	"{{ .PackageName }}/models"
	"{{ .PackageName }}/server/db"
	"github.com/stretchr/testify/require"
	{{- if anyTableUsesDateTime .XDBConfigs }}
	"github.com/go-openapi/strfmt"
        {{- end }}
)

{{ if anyTableUsesDateTime .XDBConfigs }}
func mustTime(s string) strfmt.DateTime {
	t, err := time.Parse(time.RFC3339, s)
	if err != nil {
		panic(err)
	}
	return strfmt.DateTime(t)
}
{{- end }}

func RunDBTests(t *testing.T, dbFactory func() db.Interface) {
	{{- range $xdbConfig := .XDBConfigs }}
	{{- $modelName := pascalize $xdbConfig.SchemaName }}
	t.Run("Get{{ $modelName }}", Get{{ $modelName }}(dbFactory(), t))
	{{- if indexHasRangeKey $xdbConfig.DynamoDB.KeySchema }}
	{{- $indexName := indexName $xdbConfig.DynamoDB.KeySchema }}
	t.Run("Get{{ $modelName }}sBy{{ $indexName }}", Get{{ $modelName }}sBy{{ $indexName }}(dbFactory(), t))
	{{- end }}
	t.Run("Save{{ $modelName }}", Save{{ $modelName }}(dbFactory(), t))
	t.Run("Delete{{ $modelName }}", Delete{{ $modelName }}(dbFactory(), t))
	{{- range $gsi := $xdbConfig.DynamoDB.GlobalSecondaryIndexes }}
	{{- $computedIndexName := indexName $gsi.KeySchema }}
	{{- if indexHasRangeKey $gsi.KeySchema }}
	t.Run("Get{{ $modelName }}sBy{{ $computedIndexName }}", Get{{ $modelName }}sBy{{ $computedIndexName }}(dbFactory(), t))
	{{- else }}
	t.Run("Get{{ $modelName }}By{{ $computedIndexName }}", Get{{ $modelName }}By{{ $computedIndexName }}(dbFactory(), t))
	{{- end }}
	{{- end }}
        {{- end }}
}

{{ range $xdbConfig := .XDBConfigs }}
{{- $modelName := pascalize $xdbConfig.SchemaName }}
func Get{{ $modelName }}(s db.Interface, t *testing.T) func(t *testing.T) {
	return func(t *testing.T) {
       		ctx := context.Background()
		m := models.{{ $modelName }}{
			{{- range $_, $pk := $xdbConfig.DynamoDB.KeySchema }}
			{{- $pkAttrSchema := index $xdbConfig.Schema.Properties $pk.AttributeName }}
			{{ pascalize $pk.AttributeName }}: {{ exampleValue $pkAttrSchema 1 }},
			{{- end }}
		}
		require.Nil(t, s.Save{{ $modelName }}(ctx, m))
		m2, err := s.Get{{ $modelName }}(ctx, {{ range $_, $pk := $xdbConfig.DynamoDB.KeySchema }}m.{{ pascalize $pk.AttributeName }},{{ end }})
		require.Nil(t, err)
		{{- range $_, $pk := $xdbConfig.DynamoDB.KeySchema }}
		{{- $pkAttrSchema := index $xdbConfig.Schema.Properties $pk.AttributeName }}
                {{- $pkAttrSchemaGoType := goType $pkAttrSchema }}
                {{- if eq $pkAttrSchemaGoType "strfmt.DateTime" }}
		require.Equal(t, m.{{ pascalize $pk.AttributeName }}.String(), m2.{{ pascalize $pk.AttributeName }}.String())
                {{- else }}
		require.Equal(t, m.{{ pascalize $pk.AttributeName }}, m2.{{ pascalize $pk.AttributeName }})
		{{- end }}
		{{- end }}

		_, err = s.Get{{ $modelName }}(ctx,
			{{- range $_, $pk := $xdbConfig.DynamoDB.KeySchema -}}
			{{- $pkAttrSchema := index $xdbConfig.Schema.Properties $pk.AttributeName -}}
			{{- exampleValue $pkAttrSchema 2 -}},
			{{- end -}}
                )
                require.NotNil(t, err)
		require.IsType(t, err, db.Err{{ $modelName }}NotFound{})
	}
}

{{- if indexHasRangeKey $xdbConfig.DynamoDB.KeySchema }}
{{- $indexName := indexName $xdbConfig.DynamoDB.KeySchema }}
{{- $hashKey := index $xdbConfig.DynamoDB.KeySchema 0 }}
{{- $hashKeySchema := index $xdbConfig.Schema.Properties $hashKey.AttributeName }}
{{- $rangeKey := index $xdbConfig.DynamoDB.KeySchema 1 }}
{{- $rangeKeySchema := index $xdbConfig.Schema.Properties $rangeKey.AttributeName }}
type get{{ $modelName }}sBy{{ $indexName }}Input struct {
	ctx   context.Context
	input db.Get{{ $modelName }}sBy{{ $indexName }}Input
}
type get{{ $modelName }}sBy{{ $indexName }}Output struct {
	{{ camelize $modelName }}s []models.{{ $modelName }}
	err    error
}
type get{{ $modelName }}sBy{{ $indexName }}Test struct {
	testName string
	d      db.Interface
	input  get{{ $modelName }}sBy{{ $indexName }}Input
	output get{{ $modelName }}sBy{{ $indexName }}Output
}

func (g get{{ $modelName }}sBy{{ $indexName }}Test) run(t *testing.T) {
	{{ camelize $modelName }}s, err := g.d.Get{{ $modelName }}sBy{{ $indexName }}(g.input.ctx, g.input.input)
	require.Equal(t, g.output.err, err)
	require.Equal(t, g.output.{{ camelize $modelName }}s, {{ camelize $modelName }}s)
}

func Get{{ $modelName }}sBy{{ $indexName }}(d db.Interface, t *testing.T) func(t *testing.T) {
	return func(t *testing.T) {
		ctx := context.Background()
		require.Nil(t, d.Save{{ $modelName }}(ctx, models.{{ $modelName }}{
			{{ pascalize $hashKey.AttributeName }}:    {{ exampleValue $hashKeySchema 1 }},
			{{ pascalize $rangeKey.AttributeName }}: {{ exampleValue $rangeKeySchema 1 }},
		}))
		require.Nil(t, d.Save{{ $modelName }}(ctx, models.{{ $modelName }}{
			{{ pascalize $hashKey.AttributeName }}:    {{ exampleValue $hashKeySchema 1 }},
			{{ pascalize $rangeKey.AttributeName }}: {{ exampleValue $rangeKeySchema 2 }},
		}))
		require.Nil(t, d.Save{{ $modelName }}(ctx, models.{{ $modelName }}{
			{{ pascalize $hashKey.AttributeName }}:    {{ exampleValue $hashKeySchema 1 }},
			{{ pascalize $rangeKey.AttributeName }}: {{ exampleValue $rangeKeySchema 3 }},
		}))
		tests := []get{{ $modelName }}sBy{{ $indexName }}Test{
			{
				testName: "basic",
				d:    d,
				input: get{{ $modelName }}sBy{{ $indexName }}Input{
					ctx: context.Background(),
					input: db.Get{{ $modelName }}sBy{{ $indexName }}Input{
						{{ pascalize $hashKey.AttributeName }}: {{ exampleValue $hashKeySchema 1 }},
					},
				},
				output: get{{ $modelName }}sBy{{ $indexName }}Output{
					{{ camelize $modelName }}s: []models.{{ $modelName }}{
						models.{{ $modelName }}{
							{{ pascalize $hashKey.AttributeName }}:    {{ exampleValue $hashKeySchema 1 }},
							{{ pascalize $rangeKey.AttributeName }}: {{ exampleValue $rangeKeySchema 1 }},
						},
						models.{{ $modelName }}{
							{{ pascalize $hashKey.AttributeName }}:    {{ exampleValue $hashKeySchema 1 }},
							{{ pascalize $rangeKey.AttributeName }}: {{ exampleValue $rangeKeySchema 2 }},
						},
						models.{{ $modelName }}{
							{{ pascalize $hashKey.AttributeName }}:    {{ exampleValue $hashKeySchema 1 }},
							{{ pascalize $rangeKey.AttributeName }}: {{ exampleValue $rangeKeySchema 3 }},
						},
					},
					err: nil,
				},
			},
			{
				testName: "descending",
				d:    d,
				input: get{{ $modelName }}sBy{{ $indexName }}Input{
					ctx: context.Background(),
					input: db.Get{{ $modelName }}sBy{{ $indexName }}Input{
						{{ pascalize $hashKey.AttributeName }}:       {{ exampleValue $hashKeySchema 1 }},
						Descending: true,
					},
				},
				output: get{{ $modelName }}sBy{{ $indexName }}Output{
					{{ camelize $modelName }}s: []models.{{ $modelName }}{
						models.{{ $modelName }}{
							{{ pascalize $hashKey.AttributeName }}:    {{ exampleValue $hashKeySchema 1 }},
							{{ pascalize $rangeKey.AttributeName }}: {{ exampleValue $rangeKeySchema 3 }},
						},
						models.{{ $modelName }}{
							{{ pascalize $hashKey.AttributeName }}:    {{ exampleValue $hashKeySchema 1 }},
							{{ pascalize $rangeKey.AttributeName }}: {{ exampleValue $rangeKeySchema 2 }},
						},
						models.{{ $modelName }}{
							{{ pascalize $hashKey.AttributeName }}:    {{ exampleValue $hashKeySchema 1 }},
							{{ pascalize $rangeKey.AttributeName }}: {{ exampleValue $rangeKeySchema 1 }},
						},
					},
					err: nil,
				},
			},
			{
				testName: "starting after",
				d:    d,
				input: get{{ $modelName }}sBy{{ $indexName }}Input{
					ctx: context.Background(),
					input: db.Get{{ $modelName }}sBy{{ $indexName }}Input{
						{{ pascalize $hashKey.AttributeName }}:                 {{ exampleValue $hashKeySchema 1 }},
						{{ pascalize $rangeKey.AttributeName }}StartingAt: db.{{ exampleValuePtr $rangeKeySchema 2 }},
					},
				},
				output: get{{ $modelName }}sBy{{ $indexName }}Output{
					{{ camelize $modelName }}s: []models.{{ $modelName }}{
						models.{{ $modelName }}{
							{{ pascalize $hashKey.AttributeName }}:    {{ exampleValue $hashKeySchema 1 }},
							{{ pascalize $rangeKey.AttributeName }}: {{ exampleValue $rangeKeySchema 2 }},
						},
						models.{{ $modelName }}{
							{{ pascalize $hashKey.AttributeName }}:    {{ exampleValue $hashKeySchema 1 }},
							{{ pascalize $rangeKey.AttributeName }}: {{ exampleValue $rangeKeySchema 3 }},
						},
					},
					err: nil,
				},
			},
		}
		for _, test := range tests {
			t.Run(test.testName, test.run)
		}
	}
}
{{- end }}

func Save{{ $modelName }}(s db.Interface, t *testing.T) func(t *testing.T) {
	return func(t *testing.T) {
		ctx := context.Background()
		m := models.{{ $modelName }}{
			{{- range $_, $pk := $xdbConfig.DynamoDB.KeySchema }}
			{{- $pkAttrSchema := index $xdbConfig.Schema.Properties $pk.AttributeName }}
			{{ pascalize $pk.AttributeName }}: {{ exampleValue $pkAttrSchema 1 }},
			{{- end }}
		}
		require.Nil(t, s.Save{{ $modelName }}(ctx, m))
                {{- if not $xdbConfig.AllowOverwrites }}
		require.Equal(t, db.Err{{ $modelName }}AlreadyExists{
			{{- range $_, $pk := $xdbConfig.DynamoDB.KeySchema }}
			{{- $pkAttrSchema := index $xdbConfig.Schema.Properties $pk.AttributeName }}
			{{ pascalize $pk.AttributeName }}: {{ exampleValue $pkAttrSchema 1 }},
			{{- end }}
                }, s.Save{{ $modelName }}(ctx, m))
                {{- end }}
	}
}

func Delete{{ $modelName }}(s db.Interface, t *testing.T) func(t *testing.T) {
	return func(t *testing.T) {
		ctx := context.Background()
		m := models.{{ $modelName }}{
			{{- range $_, $pk := $xdbConfig.DynamoDB.KeySchema }}
			{{- $pkAttrSchema := index $xdbConfig.Schema.Properties $pk.AttributeName }}
			{{ pascalize $pk.AttributeName }}: {{ exampleValue $pkAttrSchema 1 }},
			{{- end }}
		}
		require.Nil(t, s.Save{{ $modelName }}(ctx, m))
		require.Nil(t, s.Delete{{ $modelName }}(ctx, {{- range $_, $pk := $xdbConfig.DynamoDB.KeySchema }}m.{{ pascalize $pk.AttributeName }},{{- end -}}))
	}
}

{{ range $gsi := $xdbConfig.DynamoDB.GlobalSecondaryIndexes }}
{{- $computedIndexName := indexName $gsi.KeySchema }}
{{ $primaryAndSecondaryKeySchemas := unionKeySchemas $xdbConfig.DynamoDB.KeySchema $gsi.KeySchema }}
{{ $primaryKeySchemaWithoutSecondary := differenceKeySchemas $xdbConfig.DynamoDB.KeySchema $gsi.KeySchema }}
{{- if indexHasRangeKey $gsi.KeySchema }}
{{- $hashKey := index $gsi.KeySchema 0 }}
{{- $hashKeySchema := index $xdbConfig.Schema.Properties $hashKey.AttributeName }}
{{- $rangeKey := index $gsi.KeySchema 1 }}
{{- $rangeKeySchema := index $xdbConfig.Schema.Properties $rangeKey.AttributeName }}
type get{{ $modelName }}sBy{{ $computedIndexName }}Input struct {
	ctx   context.Context
	input db.Get{{ $modelName }}sBy{{ $computedIndexName }}Input
}
type get{{ $modelName }}sBy{{ $computedIndexName }}Output struct {
	{{ camelize $modelName }}s []models.{{ $modelName }}
	err    error
}
type get{{ $modelName }}sBy{{ $computedIndexName }}Test struct {
	testName string
	d      db.Interface
	input  get{{ $modelName }}sBy{{ $computedIndexName }}Input
	output get{{ $modelName }}sBy{{ $computedIndexName }}Output
}

func (g get{{ $modelName }}sBy{{ $computedIndexName }}Test) run(t *testing.T) {
	{{ camelize $modelName }}s, err := g.d.Get{{ $modelName }}sBy{{ $computedIndexName }}(g.input.ctx, g.input.input)
	require.Equal(t, g.output.err, err)
	require.Equal(t, g.output.{{ camelize $modelName }}s, {{ camelize $modelName }}s)
}

func Get{{ $modelName }}sBy{{ $computedIndexName }}(d db.Interface, t *testing.T) func(t *testing.T) {
	return func(t *testing.T) {
		ctx := context.Background()
		require.Nil(t, d.Save{{ $modelName }}(ctx, models.{{ $modelName }}{
			{{ pascalize $hashKey.AttributeName }}:    {{ exampleValue $hashKeySchema 1 }},
			{{ pascalize $rangeKey.AttributeName }}: {{ exampleValue $rangeKeySchema 1 }},
                        {{- range $ks := $primaryKeySchemaWithoutSecondary }}
                        {{- $ksSchema := index $xdbConfig.Schema.Properties $ks.AttributeName }}
			{{ pascalize $ks.AttributeName }}:    {{ exampleValue $ksSchema 1 }},
                        {{- end }}
		}))
		require.Nil(t, d.Save{{ $modelName }}(ctx, models.{{ $modelName }}{
			{{ pascalize $hashKey.AttributeName }}:    {{ exampleValue $hashKeySchema 1 }},
			{{ pascalize $rangeKey.AttributeName }}: {{ exampleValue $rangeKeySchema 2 }},
                        {{- range $ks := $primaryKeySchemaWithoutSecondary }}
                        {{- $ksSchema := index $xdbConfig.Schema.Properties $ks.AttributeName }}
			{{ pascalize $ks.AttributeName }}:    {{ exampleValue $ksSchema 3 }},
                        {{- end }}
		}))
		require.Nil(t, d.Save{{ $modelName }}(ctx, models.{{ $modelName }}{
			{{ pascalize $hashKey.AttributeName }}:    {{ exampleValue $hashKeySchema 1 }},
			{{ pascalize $rangeKey.AttributeName }}: {{ exampleValue $rangeKeySchema 3 }},
                        {{- range $ks := $primaryKeySchemaWithoutSecondary }}
                        {{- $ksSchema := index $xdbConfig.Schema.Properties $ks.AttributeName }}
			{{ pascalize $ks.AttributeName }}:    {{ exampleValue $ksSchema 2 }},
                        {{- end }}
		}))
		tests := []get{{ $modelName }}sBy{{ $computedIndexName }}Test{
			{
				testName: "basic",
				d:    d,
				input: get{{ $modelName }}sBy{{ $computedIndexName }}Input{
					ctx: context.Background(),
					input: db.Get{{ $modelName }}sBy{{ $computedIndexName }}Input{
						{{ pascalize $hashKey.AttributeName }}: {{ exampleValue $hashKeySchema 1 }},
					},
				},
				output: get{{ $modelName }}sBy{{ $computedIndexName }}Output{
					{{ camelize $modelName }}s: []models.{{ $modelName }}{
						models.{{ $modelName }}{
							{{ pascalize $hashKey.AttributeName }}:    {{ exampleValue $hashKeySchema 1 }},
							{{ pascalize $rangeKey.AttributeName }}: {{ exampleValue $rangeKeySchema 1 }},
				                        {{- range $ks := $primaryKeySchemaWithoutSecondary }}
				                        {{- $ksSchema := index $xdbConfig.Schema.Properties $ks.AttributeName }}
							{{ pascalize $ks.AttributeName }}:    {{ exampleValue $ksSchema 1 }},
				                        {{- end }}
						},
						models.{{ $modelName }}{
							{{ pascalize $hashKey.AttributeName }}:    {{ exampleValue $hashKeySchema 1 }},
							{{ pascalize $rangeKey.AttributeName }}: {{ exampleValue $rangeKeySchema 2 }},
				                        {{- range $ks := $primaryKeySchemaWithoutSecondary }}
				                        {{- $ksSchema := index $xdbConfig.Schema.Properties $ks.AttributeName }}
							{{ pascalize $ks.AttributeName }}:    {{ exampleValue $ksSchema 3 }},
				                        {{- end }}
						},
						models.{{ $modelName }}{
							{{ pascalize $hashKey.AttributeName }}:    {{ exampleValue $hashKeySchema 1 }},
							{{ pascalize $rangeKey.AttributeName }}: {{ exampleValue $rangeKeySchema 3 }},
				                        {{- range $ks := $primaryKeySchemaWithoutSecondary }}
				                        {{- $ksSchema := index $xdbConfig.Schema.Properties $ks.AttributeName }}
							{{ pascalize $ks.AttributeName }}:    {{ exampleValue $ksSchema 2 }},
				                        {{- end }}
						},
					},
					err: nil,
				},
			},
			{
				testName: "descending",
				d:    d,
				input: get{{ $modelName }}sBy{{ $computedIndexName }}Input{
					ctx: context.Background(),
					input: db.Get{{ $modelName }}sBy{{ $computedIndexName }}Input{
						{{ pascalize $hashKey.AttributeName }}:       {{ exampleValue $hashKeySchema 1 }},
						Descending: true,
					},
				},
				output: get{{ $modelName }}sBy{{ $computedIndexName }}Output{
					{{ camelize $modelName }}s: []models.{{ $modelName }}{
						models.{{ $modelName }}{
							{{ pascalize $hashKey.AttributeName }}:    {{ exampleValue $hashKeySchema 1 }},
							{{ pascalize $rangeKey.AttributeName }}: {{ exampleValue $rangeKeySchema 3 }},
				                        {{- range $ks := $primaryKeySchemaWithoutSecondary }}
				                        {{- $ksSchema := index $xdbConfig.Schema.Properties $ks.AttributeName }}
							{{ pascalize $ks.AttributeName }}:    {{ exampleValue $ksSchema 2 }},
				                        {{- end }}
						},
						models.{{ $modelName }}{
							{{ pascalize $hashKey.AttributeName }}:    {{ exampleValue $hashKeySchema 1 }},
							{{ pascalize $rangeKey.AttributeName }}: {{ exampleValue $rangeKeySchema 2 }},
				                        {{- range $ks := $primaryKeySchemaWithoutSecondary }}
				                        {{- $ksSchema := index $xdbConfig.Schema.Properties $ks.AttributeName }}
							{{ pascalize $ks.AttributeName }}:    {{ exampleValue $ksSchema 3 }},
				                        {{- end }}
						},
						models.{{ $modelName }}{
							{{ pascalize $hashKey.AttributeName }}:    {{ exampleValue $hashKeySchema 1 }},
							{{ pascalize $rangeKey.AttributeName }}: {{ exampleValue $rangeKeySchema 1 }},
				                        {{- range $ks := $primaryKeySchemaWithoutSecondary }}
				                        {{- $ksSchema := index $xdbConfig.Schema.Properties $ks.AttributeName }}
							{{ pascalize $ks.AttributeName }}:    {{ exampleValue $ksSchema 1 }},
				                        {{- end }}
						},
					},
					err: nil,
				},
			},
			{
				testName: "starting after",
				d:    d,
				input: get{{ $modelName }}sBy{{ $computedIndexName }}Input{
					ctx: context.Background(),
					input: db.Get{{ $modelName }}sBy{{ $computedIndexName }}Input{
						{{ pascalize $hashKey.AttributeName }}:                 {{ exampleValue $hashKeySchema 1 }},
						{{ pascalize $rangeKey.AttributeName }}StartingAt: db.{{ exampleValuePtr $rangeKeySchema 2 }},
					},
				},
				output: get{{ $modelName }}sBy{{ $computedIndexName }}Output{
					{{ camelize $modelName }}s: []models.{{ $modelName }}{
						models.{{ $modelName }}{
							{{ pascalize $hashKey.AttributeName }}:    {{ exampleValue $hashKeySchema 1 }},
							{{ pascalize $rangeKey.AttributeName }}: {{ exampleValue $rangeKeySchema 2 }},
				                        {{- range $ks := $primaryKeySchemaWithoutSecondary }}
				                        {{- $ksSchema := index $xdbConfig.Schema.Properties $ks.AttributeName }}
							{{ pascalize $ks.AttributeName }}:    {{ exampleValue $ksSchema 3 }},
				                        {{- end }}
						},
						models.{{ $modelName }}{
							{{ pascalize $hashKey.AttributeName }}:    {{ exampleValue $hashKeySchema 1 }},
							{{ pascalize $rangeKey.AttributeName }}: {{ exampleValue $rangeKeySchema 3 }},
				                        {{- range $ks := $primaryKeySchemaWithoutSecondary }}
				                        {{- $ksSchema := index $xdbConfig.Schema.Properties $ks.AttributeName }}
							{{ pascalize $ks.AttributeName }}:    {{ exampleValue $ksSchema 2 }},
				                        {{- end }}
						},
					},
					err: nil,
				},
			},
		}
		for _, test := range tests {
			t.Run(test.testName, test.run)
		}
	}
}
{{- else }}
{{- $hashKey := index $gsi.KeySchema 0 }}
{{- $hashKeyAttrSchema := index $xdbConfig.Schema.Properties $hashKey.AttributeName }}
func Get{{ $modelName }}By{{ $computedIndexName }}(s db.Interface, t *testing.T) func(t *testing.T) {
	return func(t *testing.T) {
		ctx := context.Background()
		m := models.{{ $modelName }}{
			{{- range $ks := $primaryAndSecondaryKeySchemas }}
			{{- $ksAttrSchema := index $xdbConfig.Schema.Properties $ks.AttributeName }}
			{{ pascalize $ks.AttributeName }}: {{ exampleValue $ksAttrSchema 1 }},
			{{- end }}
		}
		require.Nil(t, s.Save{{ $modelName }}(ctx, m))
		m2, err := s.Get{{ $modelName }}By{{ $computedIndexName }}(ctx, {{ range $ks := $gsi.KeySchema }}m.{{ pascalize $ks.AttributeName }},{{ end }})
		require.Nil(t, err)
		{{- range $ks := $primaryAndSecondaryKeySchemas }}
		{{- $ksAttrSchema := index $xdbConfig.Schema.Properties $ks.AttributeName }}
                {{- $ksAttrSchemaGoType := goType $ksAttrSchema }}
                {{- if eq $ksAttrSchemaGoType "strfmt.DateTime" }}
		require.Equal(t, m.{{ pascalize $ks.AttributeName }}.String(), m2.{{ pascalize $ks.AttributeName }}.String())
                {{- else }}
		require.Equal(t, m.{{ pascalize $ks.AttributeName }}, m2.{{ pascalize $ks.AttributeName }})
		{{- end }}
		{{- end }}

		_, err = s.Get{{ $modelName }}By{{ $computedIndexName }}(ctx, {{ exampleValue $hashKeyAttrSchema 2 }})
		require.NotNil(t, err)
		require.IsType(t, err, db.Err{{ $modelName }}By{{ $computedIndexName }}NotFound{})
	}
}
{{- end }}
{{ end }}
{{ end }}
