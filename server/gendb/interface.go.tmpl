package db

import (
	"context"
  "{{ .ModuleName }}{{.GoOutputPath}}/models{{.VersionSuffix}}"
	{{- if anyTableHasTransactionsEnabled .XDBConfigs }}
  "github.com/aws/aws-sdk-go-v2/feature/dynamodb/expression"
  {{- end }}
  {{- if anyTableUsesDateTime .XDBConfigs }}
	"github.com/go-openapi/strfmt"
        {{- end -}}
	{{- if anyTableAllowsScans .XDBConfigs }}
	"golang.org/x/time/rate"
        {{- end -}}
)

//go:generate mockgen -source=$GOFILE -destination=mock_db.go -package db --build_flags=--mod=mod -imports=models={{.ModuleName}}{{.GoOutputPath}}/models{{.VersionSuffix}}

// Interface for interacting with the {{.ServiceName}} database.
type Interface interface {
    {{- range $xdbConfig := .XDBConfigs }}
    {{- $modelName := pascalize $xdbConfig.SchemaName }}
    {{- $pkModelAttributeNames := modelAttributeNamesForIndex $xdbConfig $xdbConfig.DynamoDB.KeySchema }}
    // Save{{ $modelName }} saves a {{ $modelName }} to the database.
    Save{{ $modelName }}(ctx context.Context, m models.{{ $modelName }}) error
    {{- if $xdbConfig.AllowBatchWrites }}
    // SaveArrayOf{{ $modelName }} batch saves all items in []{{ $modelName }} to the database.
    SaveArrayOf{{ $modelName }}(ctx context.Context, ms []models.{{ $modelName }}) error
    // DeleteArrayOf{{ $modelName }} batch deletes all items in []{{ $modelName }} in the database.
    DeleteArrayOf{{ $modelName }}(ctx context.Context, ms []models.{{ $modelName }}) error
    {{- end }}
    // Get{{ $modelName }} retrieves a {{ $modelName }} from the database.
    Get{{ $modelName }}(ctx context.Context,
	{{- range $_, $attributeName := $pkModelAttributeNames }}
	{{- varname $attributeName }} {{ goTypeForAttribute $xdbConfig $attributeName }},
	{{- end -}}
    ) (*models.{{ $modelName }}, error)
    {{- if $xdbConfig.AllowPrimaryIndexScan }}
    // Scan{{ $modelName }}s runs a scan on the {{ $modelName }}s table.
    Scan{{ $modelName }}s(ctx context.Context, input Scan{{ $modelName }}sInput, fn func(m *models.{{ $modelName }}, last{{ $modelName }} bool) bool) error
    {{- end }}
    {{- if indexHasRangeKey $xdbConfig.DynamoDB.KeySchema }}
    {{- $indexName := indexName $xdbConfig.DynamoDB.KeySchema }}
    // Get{{ $modelName }}sBy{{ $indexName }} retrieves a page of {{ $modelName }}s from the database.
    Get{{ $modelName }}sBy{{ $indexName }}(ctx context.Context, input Get{{ $modelName }}sBy{{ $indexName }}Input, fn func(m *models.{{ $modelName }}, last{{ $modelName }} bool) bool) error
    {{- end }}
    // Delete{{ $modelName }} deletes a {{ $modelName }} from the database.
    Delete{{ $modelName }}(ctx context.Context,
	{{- range $_, $attributeName := $pkModelAttributeNames }}
	{{- varname $attributeName }} {{ goTypeForAttribute $xdbConfig $attributeName }},
	{{- end -}}
    ) error
    {{- range $gsi := $xdbConfig.DynamoDB.GlobalSecondaryIndexes }}
    {{- $indexName := indexName $gsi.KeySchema }}
    {{- if indexHasRangeKey $gsi.KeySchema }}
    // Get{{ $modelName }}sBy{{ $indexName }} retrieves a page of {{ $modelName }}s from the database.
    Get{{ $modelName }}sBy{{ $indexName }}(ctx context.Context, input Get{{ $modelName }}sBy{{ $indexName }}Input, fn func(m *models.{{ $modelName }}, last{{ $modelName }} bool) bool) error
    {{- else }}
    {{- $gsiModelAttributeNames := modelAttributeNamesForIndex $xdbConfig $gsi.KeySchema }}
    // Get{{ $modelName }}By{{ $indexName }} retrieves a {{ $modelName }} from the database.
    Get{{ $modelName }}By{{ $indexName }}(ctx context.Context,
      {{- range $_, $attributeName := $gsiModelAttributeNames }}
      {{- varname $attributeName }} {{ goTypeForAttribute $xdbConfig $attributeName }},
      {{- end -}}
    ) (*models.{{ $modelName }}, error)
    {{- end }}
    {{- if indexAllowsScans $xdbConfig $gsi.IndexName }}
    // Scan{{ $modelName }}sBy{{ $indexName }} runs a scan on the {{ $indexName }} index.
    Scan{{ $modelName }}sBy{{ $indexName }}(ctx context.Context, input Scan{{ $modelName }}sBy{{ $indexName }}Input, fn func(m *models.{{ $modelName }}, last{{ $modelName }} bool) bool) error
    {{- end }}
    {{- end }}
    {{- range $transactWithSchemaName := $xdbConfig.EnableTransactions }}
    {{- $transactWithModelName := pascalize $transactWithSchemaName }}
    // TransactSave{{ $modelName }}And{{ $transactWithModelName }} saves {{ $modelName }} and {{ $transactWithModelName }} as an atomic transaction.
    // Use the optional condition parameters to require pre-transaction conditions for each put
    TransactSave{{ $modelName }}And{{ $transactWithModelName }}(ctx context.Context, m1 models.{{ $modelName }}, m1Conditions *expression.ConditionBuilder, m2 models.{{ $transactWithModelName }}, m2Conditions *expression.ConditionBuilder) error
    {{- end }}

    {{ end }}
}

// Int64 returns a pointer to the int64 value passed in.
func Int64(i int64) *int64 { return &i }

// Int32 returns a pointer to the int32 value passed in.
func Int32(i int32) *int32 { return &i }

// String returns a pointer to the string value passed in.
func String(s string) *string { return &s }

{{- if anyTableUsesDateTime .XDBConfigs }}
// DateTime returns a pointer to the strfmt.DateTime value passed in.
func DateTime(d strfmt.DateTime) *strfmt.DateTime { return &d }
{{- end }}

{{- if anyTableUsesDate .XDBConfigs }}
// Date returns a pointer to the strfmt.Date value passed in.
func Date(d strfmt.Date) *strfmt.Date { return &d }
{{- end }}

{{- range $xdbConfig := .XDBConfigs }}
{{- $modelName := pascalize $xdbConfig.SchemaName }}
{{- if $xdbConfig.AllowPrimaryIndexScan }}
// Scan{{ $modelName }}sInput is the input to the Scan{{ $modelName }}s method.
type Scan{{ $modelName }}sInput struct {
	// StartingAfter is an optional specification of an (exclusive) starting point.
	StartingAfter *models.{{ $modelName }}
	// DisableConsistentRead turns off the default behavior of running a consistent read.
	DisableConsistentRead bool
	// Limit is an optional limit of how many items to evaluate.
	Limit *int32
	// Limiter is an optional limit on how quickly items are scanned.
	Limiter *rate.Limiter
}
{{- end }}
{{- $indexName := indexName $xdbConfig.DynamoDB.KeySchema }}
{{- $hashKey := index $xdbConfig.DynamoDB.KeySchema 0 }}
{{- $pkModelAttributeNames := modelAttributeNamesForIndex $xdbConfig $xdbConfig.DynamoDB.KeySchema }}
{{- $nonIndexAttributeNames := nonIndexModelAttributeNames $xdbConfig $pkModelAttributeNames}}
{{- $lenNonIndexAttributes := len $nonIndexAttributeNames }}
{{- if indexHasRangeKey $xdbConfig.DynamoDB.KeySchema }}
{{- $rangeKey := index $xdbConfig.DynamoDB.KeySchema 1 }}
{{- $rangeKeyAttributes := modelAttributeNamesForKeyType $xdbConfig $xdbConfig.DynamoDB.KeySchema "RANGE" }}
{{- $lenRangeKeyAttributes := len $rangeKeyAttributes }}
{{- if gt $lenNonIndexAttributes 0 }}
    // {{ $modelName }}By{{ $indexName }}FilterableAttribute represents the fields we can apply filters to for queries on this index
    type {{ $modelName }}By{{ $indexName }}FilterableAttribute string
    {{- range $attributeName := $nonIndexAttributeNames }}
      const {{ $modelName }}{{ pascalize $attributeName }} {{ $modelName }}By{{ $indexName }}FilterableAttribute = "{{ $attributeName }}"
    {{- end }}

    // {{ $modelName }}By{{ $indexName }}FilterValues represents a filter on a particular field to be included in the query
    type {{ $modelName }}By{{ $indexName }}FilterValues struct {
      // AttributeName is the attibute we are attempting to apply the filter to
      AttributeName {{ $modelName }}By{{ $indexName }}FilterableAttribute
      // AttributeValues is an optional parameter to be used when we want to compare the attibute to a single value or multiple values
      AttributeValues []interface{}
    }
{{- end }}  
// Get{{ $modelName }}sBy{{ $indexName }}Input is the query input to Get{{ $modelName }}sBy{{ $indexName }}.
type Get{{ $modelName }}sBy{{ $indexName }}Input struct {
  {{- range $attributeName := modelAttributeNamesForKeyType $xdbConfig $xdbConfig.DynamoDB.KeySchema "HASH" }}
    // {{ pascalize $attributeName }} is required
	  {{ pascalize $attributeName }} {{ goTypeForAttribute $xdbConfig $attributeName }}
  {{- end }}
  {{- if gt $lenRangeKeyAttributes 1 }}
	  StartingAt *{{ pascalizeAndJoin $rangeKeyAttributes }}
  {{- else }}
    {{- $attributeName := index $rangeKeyAttributes 0 }}
    {{- $attributeGoType := goTypeForAttribute $xdbConfig $attributeName }}
    {{- if eq $attributeGoType "[]byte" }}
    {{ pascalize $attributeName }}StartingAt {{ $attributeGoType }}
    {{- else }}
    {{ pascalize $attributeName }}StartingAt *{{ $attributeGoType }}
    {{- end }}
  {{- end }}
  // StartingAfter is a required specification of an exclusive starting point.
	StartingAfter *models.{{ $modelName }}
  Descending bool
  // DisableConsistentRead turns off the default behavior of running a consistent read.
  DisableConsistentRead bool
  // Limit is an optional limit of how many items to evaluate.
	Limit  *int32
  {{- if gt $lenNonIndexAttributes 0 }}
    // FilterValues is an optional array of filters to apply on various table attributes
    FilterValues []{{ $modelName }}By{{ $indexName }}FilterValues
    // FilterExpression is the filter expression to be applied to our fitlered attributes 
    // when referencing an attribute use #ATTRIBUTE_NAME
    // ex: if the attribute is called "created_at" in its wag definition use #CREATED_AT
    // when referencing one of the given values use :{attribute_name}_value0, :{attribute_name}_value1, etc.
    // ex: if the attribute is called "created_at" in its wag definition use :created_at_value0, created_at_value1, etc.
    // see https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Query.html#Query.KeyConditionExpressions
    // for guidance on building expressions
    FilterExpression  string
  {{- end }}  
}
{{- end }}

// Err{{ $modelName}}NotFound is returned when the database fails to find a {{ $modelName}}.
type Err{{ $modelName}}NotFound struct {
        {{- range $attributeName := $pkModelAttributeNames }}
	{{ pascalize $attributeName }} {{ goTypeForAttribute $xdbConfig $attributeName }}
        {{- end }}
}

var _ error = Err{{ $modelName}}NotFound{}

// Error returns a description of the error.
func (e Err{{ $modelName}}NotFound) Error() string {
	return "could not find {{ $modelName}}"
}

{{ range $gsi := $xdbConfig.DynamoDB.GlobalSecondaryIndexes }}
{{- $computedIndexName := indexName $gsi.KeySchema }}
{{- $hashKey := index $gsi.KeySchema 0 }}
{{- if indexHasRangeKey $gsi.KeySchema }}
{{- $rangeKey := index $gsi.KeySchema 1 }}
{{- $rangeKeyAttributes := modelAttributeNamesForKeyType $xdbConfig $gsi.KeySchema "RANGE" }}
{{- $lenRangeKeyAttributes := len $rangeKeyAttributes }}
// Get{{ $modelName }}sBy{{ $computedIndexName }}Input is the query input to Get{{ $modelName }}sBy{{ $computedIndexName }}.
type Get{{ $modelName }}sBy{{ $computedIndexName }}Input struct {
  {{- range $attributeName := modelAttributeNamesForKeyType $xdbConfig $gsi.KeySchema "HASH" }}
    // {{ pascalize $attributeName }} is required
	  {{ pascalize $attributeName }} {{ goTypeForAttribute $xdbConfig $attributeName }}
  {{- end }}
  {{- if gt $lenRangeKeyAttributes 1 }}
	  StartingAt *{{ pascalizeAndJoin $rangeKeyAttributes }}
  {{- else }}
    {{- $attributeName := index $rangeKeyAttributes 0 }}
    {{- $attributeGoType := goTypeForAttribute $xdbConfig $attributeName }}
    {{- if eq $attributeGoType "[]byte" }}
    {{ pascalize $attributeName }}StartingAt {{ $attributeGoType }}
    {{- else }}
    {{ pascalize $attributeName }}StartingAt *{{ $attributeGoType }}
    {{- end }}
  {{- end }}
	StartingAfter *models.{{ $modelName }}
  Descending bool
  // Limit is an optional limit of how many items to evaluate.
	Limit  *int32
}
{{- end }}

{{- $gsiModelAttributeNames := modelAttributeNamesForIndex $xdbConfig $gsi.KeySchema }}
// Err{{ $modelName}}By{{ $computedIndexName }}NotFound is returned when the database fails to find a {{ $modelName}}.
type Err{{ $modelName}}By{{ $computedIndexName }}NotFound struct {
        {{- range $attributeName := $gsiModelAttributeNames }}
	{{ pascalize $attributeName }} {{ goTypeForAttribute $xdbConfig $attributeName }}
        {{- end }}
}

var _ error = Err{{ $modelName}}By{{ $computedIndexName }}NotFound{}

// Error returns a description of the error.
func (e Err{{ $modelName}}By{{ $computedIndexName }}NotFound) Error() string {
	return "could not find {{ $modelName}}"
}

{{- if indexAllowsScans $xdbConfig $gsi.IndexName }}
// Scan{{ $modelName }}sBy{{ $computedIndexName }}Input is the input to the Scan{{ $modelName }}sBy{{ $computedIndexName }} method.
type Scan{{ $modelName }}sBy{{ $computedIndexName }}Input struct {
	// StartingAfter is an optional specification of an (exclusive) starting point.
	StartingAfter *models.{{ $modelName }}
	// DisableConsistentRead turns off the default behavior of running a consistent read.
	DisableConsistentRead bool
	// Limit is an optional limit of how many items to evaluate.
	Limit *int32
	// Limiter is an optional limit on how quickly items are scanned.
	Limiter *rate.Limiter
}
{{- end }}

{{ end }}

{{- if not $xdbConfig.AllowOverwrites }}
// Err{{ $modelName }}AlreadyExists is returned when trying to overwrite a {{ $modelName }}.
type Err{{ $modelName }}AlreadyExists struct {
	{{- range $_, $pk := $xdbConfig.DynamoDB.KeySchema }}
	{{ pascalize $pk.AttributeName }} {{ goTypeForAttribute $xdbConfig $pk.AttributeName }}
	{{- end }}
}

var _ error = Err{{ $modelName }}AlreadyExists{}

// Error returns a description of the error.
func (e Err{{ $modelName }}AlreadyExists) Error() string {
	return "{{ $modelName }} already exists"
}
{{- end }}

{{- range $compositeAttribute := $xdbConfig.CompositeAttributes}}
  {{if anyIndexRangeKeyContainsSpecifiedCompositeAttribute $xdbConfig $compositeAttribute.AttributeName}}
  // {{ pascalizeAndJoin $compositeAttribute.Properties }} struct.
  type {{ pascalizeAndJoin $compositeAttribute.Properties }} struct {
    {{- range $attributeName := $compositeAttribute.Properties }}
      {{ pascalize $attributeName }} {{ goTypeForAttribute $xdbConfig $attributeName }}
    {{- end }}
  }
  {{- end }}
{{- end }}

{{- end }}
