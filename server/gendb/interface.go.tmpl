package db

import (
	"context"

	"{{ .PackageName }}/models"
	{{- if anyTableUsesDateTime .XDBConfigs }}
	"github.com/go-openapi/strfmt"
        {{- end -}}
	{{- if anyTableAllowsScans .XDBConfigs }}
	"golang.org/x/time/rate"
        {{- end -}}
)

//go:generate $GOPATH/bin/mockgen -source=$GOFILE -destination=mock_db.go -package=db

// Interface for interacting with the {{.ServiceName}} database.
type Interface interface {
    {{- range $xdbConfig := .XDBConfigs }}
    {{- $modelName := pascalize $xdbConfig.SchemaName }}
    {{- $pkModelAttributeNames := modelAttributeNamesForIndex $xdbConfig $xdbConfig.DynamoDB.KeySchema }}
    // Save{{ $modelName }} saves a {{ $modelName }} to the database.
    Save{{ $modelName }}(ctx context.Context, m models.{{ $modelName }}) error
    // Get{{ $modelName }} retrieves a {{ $modelName }} from the database.
    Get{{ $modelName }}(ctx context.Context,
	{{- range $_, $attributeName := $pkModelAttributeNames }}
	{{- varname $attributeName }} {{ goTypeForAttribute $xdbConfig $attributeName }},
	{{- end -}}
    ) (*models.{{ $modelName }}, error)
    {{- if $xdbConfig.AllowPrimaryIndexScan }}
    // Scan{{ $modelName }}s runs a scan on the {{ $modelName }}s table.
    Scan{{ $modelName }}s(ctx context.Context, input Scan{{ $modelName }}sInput, fn func(m *models.{{ $modelName }}, last{{ $modelName }} bool) bool) error
    {{- end }}
    {{- if indexHasRangeKey $xdbConfig.DynamoDB.KeySchema }}
    {{- $indexName := indexName $xdbConfig.DynamoDB.KeySchema }}
    // Get{{ $modelName }}sBy{{ $indexName }} retrieves a list of {{ $modelName }}s from the database.
    Get{{ $modelName }}sBy{{ $indexName }}(ctx context.Context, input Get{{ $modelName }}sBy{{ $indexName }}Input) ([]models.{{ $modelName }}, error)
    // Get{{ $modelName }}sBy{{ $indexName }}Page retrieves a page of {{ $modelName }}s from the database.
    Get{{ $modelName }}sBy{{ $indexName }}Page(ctx context.Context, input Get{{ $modelName }}sBy{{ $indexName }}PageInput, fn func(m *models.{{ $modelName }}, last{{ $modelName }} bool) bool) error
    {{- end }}
    // Delete{{ $modelName }} deletes a {{ $modelName }} from the database.
    Delete{{ $modelName }}(ctx context.Context,
	{{- range $_, $attributeName := $pkModelAttributeNames }}
	{{- varname $attributeName }} {{ goTypeForAttribute $xdbConfig $attributeName }},
	{{- end -}}
    ) error
    {{- range $gsi := $xdbConfig.DynamoDB.GlobalSecondaryIndexes }}
    {{- $indexName := indexName $gsi.KeySchema }}
    {{- if indexHasRangeKey $gsi.KeySchema }}
    // Get{{ $modelName }}sBy{{ $indexName }} retrieves a list of {{ $modelName }}s from the database.
    Get{{ $modelName }}sBy{{ $indexName }}(ctx context.Context, input Get{{ $modelName }}sBy{{ $indexName }}Input) ([]models.{{ $modelName }}, error)
    // Get{{ $modelName }}sBy{{ $indexName }}Page retrieves a page of {{ $modelName }}s from the database.
    Get{{ $modelName }}sBy{{ $indexName }}Page(ctx context.Context, input Get{{ $modelName }}sBy{{ $indexName }}PageInput, fn func(m *models.{{ $modelName }}, last{{ $modelName }} bool) bool) error
    {{- else }}
    // Get{{ $modelName }}By{{ $indexName }} retrieves a {{ $modelName }} from the database.
    Get{{ $modelName }}By{{ $indexName }}(ctx context.Context,
      {{- range $_, $ks := $gsi.KeySchema }}
      {{- varname $ks.AttributeName }} {{ goTypeForAttribute $xdbConfig $ks.AttributeName }},
      {{- end -}}
    ) (*models.{{ $modelName }}, error)
    {{- end }}
    {{- end }}

    {{ end }}
}

// Int64 returns a pointer to the int64 value passed in.
func Int64(i int64) *int64 { return &i }

// String returns a pointer to the string value passed in.
func String(s string) *string { return &s }

{{- if anyTableUsesDateTime .XDBConfigs }}
// DateTime returns a pointer to the strfmt.DateTime value passed in.
func DateTime(d strfmt.DateTime) *strfmt.DateTime { return &d }
{{- end }}

{{- range $xdbConfig := .XDBConfigs }}
{{- $modelName := pascalize $xdbConfig.SchemaName }}
{{- if $xdbConfig.AllowPrimaryIndexScan }}
// Scan{{ $modelName }}sInput is the input to the Scan{{ $modelName }}s method.
type Scan{{ $modelName }}sInput struct {
	// StartingAfter is an optional specification of an (exclusive) starting point.
	StartingAfter *models.{{ $modelName }}
	// DisableConsistentRead turns off the default behavior of running a consistent read.
	DisableConsistentRead bool
	// Limiter is an optional limit on how quickly items are scanned.
	Limiter *rate.Limiter
}
{{- end }}
{{- $indexName := indexName $xdbConfig.DynamoDB.KeySchema }}
{{- $hashKey := index $xdbConfig.DynamoDB.KeySchema 0 }}
{{- $pkModelAttributeNames := modelAttributeNamesForIndex $xdbConfig $xdbConfig.DynamoDB.KeySchema }}
{{- if indexHasRangeKey $xdbConfig.DynamoDB.KeySchema }}
{{- $rangeKey := index $xdbConfig.DynamoDB.KeySchema 1 }}
{{- $rangeKeyAttributes := modelAttributeNamesForKeyType $xdbConfig $xdbConfig.DynamoDB.KeySchema "RANGE" }}
{{- $lenRangeKeyAttributes := len $rangeKeyAttributes }}
// Get{{ $modelName }}sBy{{ $indexName }}Input is the query input to Get{{ $modelName }}sBy{{ $indexName }}.
type Get{{ $modelName }}sBy{{ $indexName }}Input struct {
	{{- range $attributeName := modelAttributeNamesForKeyType $xdbConfig $xdbConfig.DynamoDB.KeySchema "HASH" }}
	{{ pascalize $attributeName }} {{ goTypeForAttribute $xdbConfig $attributeName }}
        {{- end }}
	{{- if gt $lenRangeKeyAttributes 1 }}
	StartingAt *{{ pascalizeAndJoin $rangeKeyAttributes }}
        {{- else }}
	{{- $attributeName := index $rangeKeyAttributes 0 }}
	{{ pascalize $attributeName }}StartingAt *{{ goTypeForAttribute $xdbConfig $attributeName }}
        {{- end }}
        Descending bool
        DisableConsistentRead bool
}
{{- if gt $lenRangeKeyAttributes 1 }}
// {{ pascalizeAndJoin $rangeKeyAttributes }} struct.
type {{ pascalizeAndJoin $rangeKeyAttributes }} struct {
	{{- range $attributeName := $rangeKeyAttributes }}
        {{ pascalize $attributeName }} {{ goTypeForAttribute $xdbConfig $attributeName }}
        {{- end }}
}
{{- end }}

// Get{{ $modelName }}sBy{{ $indexName }}PageInput is the query input to Get{{ $modelName }}sBy{{ $indexName }}Page.
type Get{{ $modelName }}sBy{{ $indexName }}PageInput struct {
  // StartingAfter is a required specification of an (exclusive) starting point.
	StartingAfter *models.{{ $modelName }}
	// Limit is a required limit on how many items to evaluate.
	Limit  *int64
  // DisableConsistentRead turns off the default behavior of running a consistent read.
  DisableConsistentRead bool
  Descending bool
}
{{- end }}

// Err{{ $modelName}}NotFound is returned when the database fails to find a {{ $modelName}}.
type Err{{ $modelName}}NotFound struct {
        {{- range $attributeName := $pkModelAttributeNames }}
	{{ pascalize $attributeName }} {{ goTypeForAttribute $xdbConfig $attributeName }}
        {{- end }}
}

var _ error = Err{{ $modelName}}NotFound{}

// Error returns a description of the error.
func (e Err{{ $modelName}}NotFound) Error() string {
	return "could not find {{ $modelName}}"
}

{{ range $gsi := $xdbConfig.DynamoDB.GlobalSecondaryIndexes }}
{{- $computedIndexName := indexName $gsi.KeySchema }}
{{- $hashKey := index $gsi.KeySchema 0 }}
{{- if indexHasRangeKey $gsi.KeySchema }}
{{- $rangeKey := index $gsi.KeySchema 1 }}
{{- $rangeKeyAttributes := modelAttributeNamesForKeyType $xdbConfig $gsi.KeySchema "RANGE" }}
{{- $lenRangeKeyAttributes := len $rangeKeyAttributes }}
// Get{{ $modelName }}sBy{{ $computedIndexName }}Input is the query input to Get{{ $modelName }}sBy{{ $computedIndexName }}.
type Get{{ $modelName }}sBy{{ $computedIndexName }}Input struct {
	{{- range $attributeName := modelAttributeNamesForKeyType $xdbConfig $gsi.KeySchema "HASH" }}
	{{ pascalize $attributeName }} {{ goTypeForAttribute $xdbConfig $attributeName }}
        {{- end }}
	{{- if gt $lenRangeKeyAttributes 1 }}
	StartingAt *{{ pascalizeAndJoin $rangeKeyAttributes }}
        {{- else }}
	{{- $attributeName := index $rangeKeyAttributes 0 }}
	{{ pascalize $attributeName }}StartingAt *{{ goTypeForAttribute $xdbConfig $attributeName }}
        {{- end }}
        Descending bool
}

// Get{{ $modelName }}sBy{{ $computedIndexName }}PageInput is the query input to Get{{ $modelName }}sBy{{ $computedIndexName }}Page.
type Get{{ $modelName }}sBy{{ $computedIndexName }}PageInput struct {
  // StartingAfter is a required specification of an (exclusive) starting point.
	StartingAfter *models.{{ $modelName }}
	// Limit is a required limit on how many items to evaluate.
	Limit  *int64
  Descending bool
}
{{- if gt $lenRangeKeyAttributes 1 }}
// {{ pascalizeAndJoin $rangeKeyAttributes }} struct.
type {{ pascalizeAndJoin $rangeKeyAttributes }} struct {
	{{- range $attributeName := $rangeKeyAttributes }}
        {{ pascalize $attributeName }} {{ goTypeForAttribute $xdbConfig $attributeName }}
        {{- end }}
}
{{- end }}
{{- end }}

{{- $gsiModelAttributeNames := modelAttributeNamesForIndex $xdbConfig $gsi.KeySchema }}
// Err{{ $modelName}}By{{ $computedIndexName }}NotFound is returned when the database fails to find a {{ $modelName}}.
type Err{{ $modelName}}By{{ $computedIndexName }}NotFound struct {
        {{- range $attributeName := $gsiModelAttributeNames }}
	{{ pascalize $attributeName }} {{ goTypeForAttribute $xdbConfig $attributeName }}
        {{- end }}
}

var _ error = Err{{ $modelName}}By{{ $computedIndexName }}NotFound{}

// Error returns a description of the error.
func (e Err{{ $modelName}}By{{ $computedIndexName }}NotFound) Error() string {
	return "could not find {{ $modelName}}"
}
{{ end }}

{{- if not $xdbConfig.AllowOverwrites }}
// Err{{ $modelName }}AlreadyExists is returned when trying to overwrite a {{ $modelName }}.
type Err{{ $modelName }}AlreadyExists struct {
	{{- range $_, $pk := $xdbConfig.DynamoDB.KeySchema }}
	{{ pascalize $pk.AttributeName }} {{ goTypeForAttribute $xdbConfig $pk.AttributeName }}
	{{- end }}
}

var _ error = Err{{ $modelName }}AlreadyExists{}

// Error returns a description of the error.
func (e Err{{ $modelName }}AlreadyExists) Error() string {
	return "{{ $modelName }} already exists"
}
{{- end }}
{{- end }}
