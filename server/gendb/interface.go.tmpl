package db

import (
	"context"
	"fmt"

	"{{ .PackageName }}/models"
	{{- if anyPrimaryKeyUsesDateTime .XDBConfigs }}
	"github.com/go-openapi/strfmt"
        {{- end -}}
)

//go:generate $GOPATH/bin/mockgen -source=$GOFILE -destination=mock_db.go -package=db

// Interface for interacting with the {{.ServiceName}} database.
type Interface interface {
    {{- range $xdbConfig := .XDBConfigs }}
    {{- $modelName := pascalize $xdbConfig.SchemaName }}
    // Save{{ $modelName }} saves a {{ $modelName }} to the database.
    Save{{ $modelName }}(ctx context.Context, m models.{{ $modelName }}) error
    // Get{{ $modelName }} retrieves a {{ $modelName }} from the database.
    Get{{ $modelName }}(ctx context.Context,
      {{- range $_, $pk := $xdbConfig.DynamoDB.KeySchema }}
      {{- $pkAttrSchema := index $xdbConfig.Schema.Properties $pk.AttributeName }}
      {{- camelize $pk.AttributeName }} {{ goType $pkAttrSchema }},
      {{- end -}}
    ) (*models.{{ $modelName }}, error)
    {{- if indexHasRangeKey $xdbConfig.DynamoDB.KeySchema }}
    {{- $indexName := indexName $xdbConfig.DynamoDB.KeySchema }}
    // Get{{ $modelName }}sBy{{ $indexName }} retrieves a list of {{ $modelName }}s from the database.
    Get{{ $modelName }}sBy{{ $indexName }}(ctx context.Context, input Get{{ $modelName }}sBy{{ $indexName }}Input) ([]models.{{ $modelName }}, error)
    {{- end }}
    // Delete{{ $modelName }} deletes a {{ $modelName }} from the database.
    Delete{{ $modelName }}(ctx context.Context,
      {{- range $_, $pk := $xdbConfig.DynamoDB.KeySchema }}
      {{- $pkAttrSchema := index $xdbConfig.Schema.Properties $pk.AttributeName }}
      {{- camelize $pk.AttributeName }} {{ goType $pkAttrSchema }},
      {{- end -}}
    ) error

    {{ end }}
}

// Int64 returns a pointer to the int64 value passed in.
func Int64(i int64) *int64 { return &i }

// String returns a pointer to the string value passed in.
func String(s string) *string { return &s }

{{- if anyPrimaryKeyUsesDateTime .XDBConfigs }}
// DateTime returns a pointer to the strfmt.DateTime value passed in.
func DateTime(d strfmt.DateTime) *strfmt.DateTime { return &d }
{{- end }}

{{- range $xdbConfig := .XDBConfigs }}
{{- $modelName := pascalize $xdbConfig.SchemaName }}
{{- $indexName := indexName $xdbConfig.DynamoDB.KeySchema }}
{{- $hashKey := index $xdbConfig.DynamoDB.KeySchema 0 }}
{{- $hashKeySchema := index $xdbConfig.Schema.Properties $hashKey.AttributeName }}
{{- if indexHasRangeKey $xdbConfig.DynamoDB.KeySchema }}
{{- $rangeKey := index $xdbConfig.DynamoDB.KeySchema 1 }}
{{- $rangeKeySchema := index $xdbConfig.Schema.Properties $rangeKey.AttributeName }}
// Get{{ $modelName }}sBy{{ $indexName }}Input is the query input to Get{{ $modelName }}sBy{{ $indexName }}.
type Get{{ $modelName }}sBy{{ $indexName }}Input struct {
	{{ pascalize $hashKey.AttributeName }} {{ goType $hashKeySchema }}
        {{ pascalize $rangeKey.AttributeName }}StartingAt *{{ goType $rangeKeySchema }}
        Descending bool
        DisableConsistentRead bool
}
{{- end }}

// Err{{ $modelName}}NotFound is returned when the database fails to find a {{ $modelName}}.
type Err{{ $modelName}}NotFound struct {
	{{- range $_, $pk := $xdbConfig.DynamoDB.KeySchema }}
	{{- $pkAttrSchema := index $xdbConfig.Schema.Properties $pk.AttributeName }}
	{{ pascalize $pk.AttributeName }} {{ goType $pkAttrSchema }}
	{{- end }}
}

var _ error = Err{{ $modelName}}NotFound{}

// Error returns a description of the error.
func (e Err{{ $modelName}}NotFound) Error() string {
	return fmt.Sprintf("could not find {{ $modelName}}: %%v", e)
}

{{- if not $xdbConfig.AllowOverwrites }}
// Err{{ $modelName }}AlreadyExists is returned when trying to overwrite a {{ $modelName }}.
type Err{{ $modelName }}AlreadyExists struct {
	{{- range $_, $pk := $xdbConfig.DynamoDB.KeySchema }}
	{{- $pkAttrSchema := index $xdbConfig.Schema.Properties $pk.AttributeName }}
	{{ pascalize $pk.AttributeName }} {{ goType $pkAttrSchema }}
	{{- end }}
}

var _ error = Err{{ $modelName }}AlreadyExists{}

// Error returns a description of the error.
func (e Err{{ $modelName }}AlreadyExists) Error() string {
	return fmt.Sprintf("{{ $modelName }} already exists: %%v", e)
}
{{- end }}
{{- end }}
