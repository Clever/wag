{{- $modelName := pascalize .XDBConfig.SchemaName }}
{{- $xdbConfig := .XDBConfig }}
{{- $lenCompositeAttrs := len $xdbConfig.CompositeAttributes }}
{{- $hasCompositeAttrs := gt $lenCompositeAttrs 0 }}
{{- $projectedIndexesWithCompositeAttributes := projectedIndexesWithCompositeAttributes $xdbConfig }}
{{- $lenProjectedIndexesWithCompositeAttributes := len $projectedIndexesWithCompositeAttributes }}
{{- $hasProjectedIndexesWithCompositeAttributes := gt $lenProjectedIndexesWithCompositeAttributes 0 }}
{{- $stringPropertiesInComposites := stringPropertiesInComposites $xdbConfig }}
{{- $lenStringPropertiesInComposites := len $stringPropertiesInComposites }}
{{- $hasStringPropertiesInComposites := gt $lenStringPropertiesInComposites 0 }}
package dynamodb

import (
	"context"
	"fmt"
        {{- if or $hasProjectedIndexesWithCompositeAttributes $hasStringPropertiesInComposites }}
        "strings"
        {{- end }}

	"{{ .PackageName }}/models"
	"{{ .PackageName }}/server/db"
	"github.com/aws/aws-sdk-go/aws"
        {{- if not $xdbConfig.AllowOverwrites }}
	"github.com/aws/aws-sdk-go/aws/awserr"
        {{- end }}
	"github.com/aws/aws-sdk-go/service/dynamodb"
	"github.com/aws/aws-sdk-go/service/dynamodb/dynamodbattribute"
	"github.com/aws/aws-sdk-go/service/dynamodb/dynamodbiface"
	"github.com/go-openapi/strfmt"
)

var _ = strfmt.DateTime{}

// {{ $modelName }}Table represents the user-configurable properties of the {{ $modelName }} table.
type {{ $modelName }}Table struct {
	DynamoDBAPI        dynamodbiface.DynamoDBAPI
	Prefix             string
	TableName          string
	ReadCapacityUnits  int64
	WriteCapacityUnits int64
}

// ddb{{ $modelName }}PrimaryKey represents the primary key of a {{ $modelName }} in DynamoDB.
type ddb{{ $modelName }}PrimaryKey struct {
	{{- /* loop over primary key attributes and add them as fields in the struct */}}
	{{- range $_, $pk := $xdbConfig.DynamoDB.KeySchema }}
	{{ pascalize $pk.AttributeName }} {{ goTypeForAttribute $xdbConfig $pk.AttributeName }} `dynamodbav:"{{ $pk.AttributeName }}"`
	{{- end }}
}

{{ range $gsi := $xdbConfig.DynamoDB.GlobalSecondaryIndexes }}
// ddb{{$modelName}}GSI{{ pascalize $gsi.IndexName }} represents the {{ $gsi.IndexName }} GSI.
type ddb{{$modelName}}GSI{{ pascalize $gsi.IndexName }} struct {
	{{ range $ks := $gsi.KeySchema }}
	{{- pascalize $ks.AttributeName }} {{ goTypeForAttribute $xdbConfig $ks.AttributeName }} `dynamodbav:"{{ $ks.AttributeName }}"`
        {{ end }}
}
{{ end }}

// ddb{{ $modelName }} represents a {{ $modelName }} as stored in DynamoDB.
type ddb{{ $modelName }} struct {
	models.{{ $modelName }}
}

func (t {{ $modelName }}Table) name() string {
	if t.TableName != "" {
		return t.TableName
	}
	return fmt.Sprintf("%%s-{{ dasherize $modelName }}s", t.Prefix)
}

func (t {{ $modelName }}Table) create(ctx context.Context) error {
	if _, err := t.DynamoDBAPI.CreateTableWithContext(ctx, &dynamodb.CreateTableInput{
		AttributeDefinitions: []*dynamodb.AttributeDefinition{
                        {{- $attrs := attributeNames $xdbConfig.DynamoDB }}
                        {{- range $attr := $attrs }}
			{
				AttributeName: aws.String("{{- $attr }}"),
				AttributeType: aws.String("{{ dynamoDBTypeForAttribute $xdbConfig $attr }}"),
			},
                        {{- end }}
		},
		KeySchema: []*dynamodb.KeySchemaElement{
                        {{- range $_, $ks := $xdbConfig.DynamoDB.KeySchema }}
			{
				AttributeName: aws.String("{{- $ks.AttributeName }}"),
                                {{- if eq $ks.KeyType "HASH" }}
				KeyType:       aws.String(dynamodb.KeyTypeHash),
                                {{- else if eq $ks.KeyType "RANGE" }}
				KeyType:       aws.String(dynamodb.KeyTypeRange),
                                {{- end }}
			},
                        {{- end }}
		},
                {{- $lenGSIs := len $xdbConfig.DynamoDB.GlobalSecondaryIndexes }}
                {{- if gt $lenGSIs 0 }}
		GlobalSecondaryIndexes: []*dynamodb.GlobalSecondaryIndex{
                        {{- range $gsi := $xdbConfig.DynamoDB.GlobalSecondaryIndexes }}
			{
				IndexName: aws.String("{{ $gsi.IndexName }}"),
				Projection: &dynamodb.Projection{
					ProjectionType: aws.String("{{ $gsi.Projection.ProjectionType }}"),
				},
				KeySchema: []*dynamodb.KeySchemaElement{
                                        {{- range $_, $ks := $gsi.KeySchema }}
					{
                                        	AttributeName: aws.String("{{- $ks.AttributeName }}"),
                                        	{{- if eq $ks.KeyType "HASH" }}
						KeyType:       aws.String(dynamodb.KeyTypeHash),
                                        	{{- else if eq $ks.KeyType "RANGE" }}
						KeyType:       aws.String(dynamodb.KeyTypeRange),
                                        	{{- end }}
					},
                                        {{- end }}
				},
				ProvisionedThroughput: &dynamodb.ProvisionedThroughput{
					ReadCapacityUnits:  aws.Int64(t.ReadCapacityUnits),
					WriteCapacityUnits: aws.Int64(t.WriteCapacityUnits),
				},
			},
                        {{- end }}
		},
                {{- end }}
		ProvisionedThroughput: &dynamodb.ProvisionedThroughput{
			ReadCapacityUnits:  aws.Int64(t.ReadCapacityUnits),
			WriteCapacityUnits: aws.Int64(t.WriteCapacityUnits),
		},
		TableName: aws.String(t.name()),
	}); err != nil {
		return err
	}
	return nil
}

func (t {{ $modelName }}Table) save{{ $modelName }}(ctx context.Context, m models.{{ $modelName }}) error {
	data, err := encode{{ $modelName }}(m)
	if err != nil {
		return err
	}
        {{- if $xdbConfig.AllowOverwrites }}
	_, err = t.DynamoDBAPI.PutItemWithContext(ctx, &dynamodb.PutItemInput{
		TableName: aws.String(t.name()),
		Item:      data,
	})
	return err
        {{- else }}
	_, err = t.DynamoDBAPI.PutItemWithContext(ctx, &dynamodb.PutItemInput{
		TableName: aws.String(t.name()),
		Item:      data,
		ExpressionAttributeNames: map[string]*string{
			{{- range $_, $pk := $xdbConfig.DynamoDB.KeySchema }}
			"#{{ upper $pk.AttributeName }}": aws.String("{{ $pk.AttributeName }}"),
			{{- end }}
		},
		ConditionExpression: aws.String("
                	{{- range $i, $pk := $xdbConfig.DynamoDB.KeySchema -}}
                	{{- if ne $i 0 }} AND {{ end -}}
                	attribute_not_exists(#{{ upper $pk.AttributeName }})
                	{{- end -}}
                        "),
	})
	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			if awsErr.Code() == dynamodb.ErrCodeConditionalCheckFailedException {
				return db.Err{{ $modelName }}AlreadyExists{
					{{- range $_, $pk := $xdbConfig.DynamoDB.KeySchema }}
					{{ pascalize $pk.AttributeName }}: {{ if isComposite $xdbConfig $pk.AttributeName }}{{ compositeValue $xdbConfig $pk.AttributeName "m" }}{{ else }}{{ attributeToModelValue $xdbConfig $pk.AttributeName "m." }}{{ end }},
					{{- end }}
				}
			}
		}
		return err
	}
	return nil
        {{- end }}
}

{{ $pkModelAttributeNames := modelAttributeNamesForIndex $xdbConfig $xdbConfig.DynamoDB.KeySchema }}
func (t {{ $modelName }}Table) get{{ $modelName }}(ctx context.Context,
	{{- range $_, $attributeName := $pkModelAttributeNames }}
	{{- varname $attributeName }} {{ goTypeForAttribute $xdbConfig $attributeName }},
	{{- end -}}
) (*models.{{ $modelName }}, error) {
	key, err := dynamodbattribute.MarshalMap(ddb{{ $modelName }}PrimaryKey{
		{{- range $_, $pk := $xdbConfig.DynamoDB.KeySchema }}
		{{ pascalize $pk.AttributeName }}: {{ if isComposite $xdbConfig $pk.AttributeName }}{{ compositeValue $xdbConfig $pk.AttributeName "" }}{{ else }}{{ varname $pk.AttributeName }}{{ end }},
		{{- end }}
	})
	if err != nil {
		return nil, err
	}
	res, err := t.DynamoDBAPI.GetItemWithContext(ctx, &dynamodb.GetItemInput{
		Key:       key,
		TableName: aws.String(t.name()),
	})
	if err != nil {
		return nil, err
	}

	if len(res.Item) == 0 {
		return nil, db.Err{{ $modelName }}NotFound{
		{{- range $_, $attributeName := $pkModelAttributeNames }}
		{{ pascalize $attributeName }}: {{ varname $attributeName }},
		{{- end }}
		}
	}

	var m models.{{ $modelName }}
	if err := decode{{ $modelName }}(res.Item, &m); err != nil {
		return nil, err
	}

	return &m, nil
}

{{ if $xdbConfig.AllowPrimaryIndexScan }}
func (t {{ $modelName }}Table) scan{{ $modelName }}s(ctx context.Context, input db.Scan{{ $modelName }}sInput, fn func(m *models.{{ $modelName }}, last{{ $modelName }} bool) bool) error {
	scanInput := &dynamodb.ScanInput{
		TableName:      aws.String(t.name()),
		ConsistentRead: aws.Bool(!input.DisableConsistentRead),
	}
	if input.StartingAfter != nil {
		exclusiveStartKey, err := dynamodbattribute.MarshalMap(input.StartingAfter)
		if err != nil {
			return fmt.Errorf("error encoding exclusive start key for scan: %%s", err.Error())
		}
		// must provide only the fields constituting the index
		scanInput.ExclusiveStartKey = map[string]*dynamodb.AttributeValue{
                	{{- range $ks := $xdbConfig.DynamoDB.KeySchema }}
			"{{ $ks.AttributeName }}":    exclusiveStartKey["{{ $ks.AttributeName }}"],
                        {{- end }}
		}
	}
	var innerErr error
	err := t.DynamoDBAPI.ScanPagesWithContext(ctx, scanInput, func(out *dynamodb.ScanOutput, lastPage bool) bool {
		ms, err := decode{{ $modelName }}s(out.Items)
		if err != nil {
			innerErr = fmt.Errorf("error decoding %%s", err.Error())
			return false
		}
		for i := range ms {
			if input.Limiter != nil {
				if err := input.Limiter.Wait(ctx); err != nil {
					innerErr = err
					return false
				}
			}
			lastModel := lastPage && i == len(ms)-1
			if continuee := fn(&ms[i], lastModel); !continuee {
				return false
			}
		}
		return true
	})
	if innerErr != nil {
		return innerErr
	}
	return err
}
{{- end }}

{{ if indexHasRangeKey $xdbConfig.DynamoDB.KeySchema }}
{{- $computedIndexName := indexName $xdbConfig.DynamoDB.KeySchema }}
{{- $hashKey := index $xdbConfig.DynamoDB.KeySchema 0 }}
{{- $rangeKey := index $xdbConfig.DynamoDB.KeySchema 1 }}
{{- $rangeKeyAttributes := modelAttributeNamesForKeyType $xdbConfig $xdbConfig.DynamoDB.KeySchema "RANGE" }}
{{- $lenRangeKeyAttributes := len $rangeKeyAttributes }}
{{- $hashKeyAttributes := modelAttributeNamesForKeyType $xdbConfig $xdbConfig.DynamoDB.KeySchema "HASH" }}
{{- $lenHashKeyAttributes := len $hashKeyAttributes }}
func (t {{ $modelName}}Table) get{{ $modelName }}sBy{{ $computedIndexName }}(ctx context.Context, input db.Get{{ $modelName }}sBy{{ $computedIndexName }}Input) ([]models.{{ $modelName }}, error) {
	queryInput := &dynamodb.QueryInput{
		TableName: aws.String(t.name()),
		ExpressionAttributeNames: map[string]*string{
			"#{{ upper $hashKey.AttributeName }}": aws.String("{{ $hashKey.AttributeName }}"),
		},
		ExpressionAttributeValues: map[string]*dynamodb.AttributeValue{
			":{{ camelize $hashKey.AttributeName }}": &dynamodb.AttributeValue{
                        	{{- $dynamoDBType := dynamoDBTypeForAttribute $xdbConfig $hashKey.AttributeName }}
                        	{{- if eq $dynamoDBType "S" }}
                                S: aws.String({{ if isComposite $xdbConfig $hashKey.AttributeName }}{{ compositeValue $xdbConfig $hashKey.AttributeName "input" }}{{ else }}input.{{ pascalize $hashKey.AttributeName }}{{ end }}),
                        	{{- else if eq $dynamoDBType "N" }}
				N: aws.String(fmt.Sprintf("%d", input.{{ pascalize $hashKey.AttributeName }})),
	                        {{- end }}
			},
		},
		ScanIndexForward: aws.Bool(!input.Descending),
		ConsistentRead:   aws.Bool(!input.DisableConsistentRead),
	}
	{{- if gt $lenRangeKeyAttributes 1 }}
	if input.StartingAt == nil {
        {{- else }}
	if input.{{ pascalize $rangeKey.AttributeName }}StartingAt == nil {
        {{- end }}
		queryInput.KeyConditionExpression = aws.String("#{{ upper $hashKey.AttributeName }} = :{{ camelize $hashKey.AttributeName }}")
	} else {
		queryInput.ExpressionAttributeNames["#{{ upper $rangeKey.AttributeName }}"] = aws.String("{{ $rangeKey.AttributeName }}")
		queryInput.ExpressionAttributeValues[":{{ camelize $rangeKey.AttributeName }}"] = &dynamodb.AttributeValue{
			{{- if gt $lenRangeKeyAttributes 1 }}
                        S: aws.String({{ compositeValue $xdbConfig $rangeKey.AttributeName "input.StartingAt" }}),
      {{- else }}
                       	{{- $attrGoType := goTypeForAttribute $xdbConfig $rangeKey.AttributeName }}
                        {{- $attrDynamoDBType := dynamoDBTypeForAttribute $xdbConfig $rangeKey.AttributeName }}
        {{- if eq $attrDynamoDBType "S" }}
          {{- if eq $attrGoType "strfmt.DateTime" }}
			S: aws.String(toDynamoTimeString(*input.{{ pascalize $rangeKey.AttributeName }}StartingAt)),
          {{- else }}
			S: aws.String(*input.{{ pascalize $rangeKey.AttributeName }}StartingAt),
          {{- end }}
        {{- else if eq $attrDynamoDBType "N" }}
			N: aws.String(fmt.Sprintf("%%d", *input.{{ pascalize $rangeKey.AttributeName }}StartingAt)),
        {{- end }}
      {{- end }}
		}
		if input.Descending {
			queryInput.KeyConditionExpression = aws.String("#{{ upper $hashKey.AttributeName }} = :{{ camelize $hashKey.AttributeName }} AND #{{ upper $rangeKey.AttributeName }} <= :{{ camelize $rangeKey.AttributeName }}")
		} else {
			queryInput.KeyConditionExpression = aws.String("#{{ upper $hashKey.AttributeName }} = :{{ camelize $hashKey.AttributeName }} AND #{{ upper $rangeKey.AttributeName }} >= :{{ camelize $rangeKey.AttributeName }}")
		}
	}

	queryOutput, err := t.DynamoDBAPI.QueryWithContext(ctx, queryInput)
	if err != nil {
		return nil, err
	}
	if len(queryOutput.Items) == 0 {
		return []models.{{ $modelName }}{}, nil
	}

	return decode{{ $modelName }}s(queryOutput.Items)
}

func (t {{ $modelName}}Table) get{{ $modelName }}sBy{{ $computedIndexName }}Page(ctx context.Context, input db.Get{{ $modelName }}sBy{{ $computedIndexName }}PageInput, fn func(m *models.{{ $modelName }}, last{{ $modelName }} bool) bool) error {
	queryInput := &dynamodb.QueryInput{
		TableName: aws.String(t.name()),
		ExpressionAttributeNames: map[string]*string{
			"#{{ upper $hashKey.AttributeName }}": aws.String("{{ $hashKey.AttributeName }}"),
      "#{{ upper $rangeKey.AttributeName }}": aws.String("{{ $rangeKey.AttributeName }}"),
		},
		ExpressionAttributeValues: map[string]*dynamodb.AttributeValue{
			":{{ camelize $hashKey.AttributeName }}": &dynamodb.AttributeValue{
                        	{{- $dynamoDBType := dynamoDBTypeForAttribute $xdbConfig $hashKey.AttributeName }}
                        	{{- if eq $dynamoDBType "S" }}
                        	    S: aws.String({{ if isComposite $xdbConfig $hashKey.AttributeName }}{{ compositeValuePage $xdbConfig $hashKey.AttributeName "input.StartingAfter" }}{{ else }}input.StartingAfter.{{ pascalize $hashKey.AttributeName }}{{ end }}),
                          {{- else if eq $dynamoDBType "N" }}
			                        N: aws.String(fmt.Sprintf("%d", input.{{ pascalize $hashKey.AttributeName }})),
                          {{- end }}
      },
      ":{{ camelize $rangeKey.AttributeName }}": &dynamodb.AttributeValue{
                          {{- if gt $lenRangeKeyAttributes 1 }}
                              S: aws.String({{- if isComposite $xdbConfig $rangeKey.AttributeName }}{{ compositeValuePage $xdbConfig $rangeKey.AttributeName "input.StartingAfter" }}{{ else }}input.StartingAfter.{{ pascalize $rangeKey.AttributeName }}{{ end }}),
                          {{- else }}
                          {{- $attrGoType := goTypeForAttribute $xdbConfig $rangeKey.AttributeName }}
                          {{- $attrDynamoDBType := dynamoDBTypeForAttribute $xdbConfig $rangeKey.AttributeName }}
                          {{- if eq $attrDynamoDBType "S" }}
                          {{- if eq $attrGoType "strfmt.DateTime" }}
                              S: aws.String(toDynamoTimeString(input.StartingAfter.{{ pascalize $rangeKey.AttributeName }})),
                          {{- else }}
                              S: aws.String(input.StartingAfter.{{ pascalize $rangeKey.AttributeName }}),
                          {{- end }}
                          {{- else if eq $attrDynamoDBType "N" }}
                              N: aws.String(fmt.Sprintf("%%d", input.StartingAfter.{{ pascalize $rangeKey.AttributeName }})),
                          {{- end }}
                          {{- end }}
			},
		},
		ScanIndexForward: aws.Bool(!input.Descending),
		ConsistentRead:   aws.Bool(!input.DisableConsistentRead),
    Limit: input.Limit,
    ExclusiveStartKey: map[string]*dynamodb.AttributeValue{
      "{{ $rangeKey.AttributeName }}": &dynamodb.AttributeValue{
    	{{- if gt $lenRangeKeyAttributes 1 }}
        S: aws.String({{ compositeValuePage $xdbConfig $rangeKey.AttributeName "input.StartingAfter" }}),
      {{- else }}
          {{- $attrGoType := goTypeForAttribute $xdbConfig $rangeKey.AttributeName }}
          {{- $attrDynamoDBType := dynamoDBTypeForAttribute $xdbConfig $rangeKey.AttributeName }}
        {{- if eq $attrDynamoDBType "S" }}
          {{- if eq $attrGoType "strfmt.DateTime" }}
			S: aws.String(toDynamoTimeString(input.StartingAfter.{{ pascalize $rangeKey.AttributeName }})),
          {{- else }}
			S: aws.String({{if attributeIsPointer $xdbConfig $rangeKey.AttributeName }}*{{end}}input.StartingAfter.{{ pascalize $rangeKey.AttributeName }}),
          {{- end }}
        {{- else if eq $attrDynamoDBType "N" }}
			N: aws.String(fmt.Sprintf("%%d", input.StartingAfter.{{ pascalize $rangeKey.AttributeName }})),
        {{- end }}
      {{- end }}
      },
      "{{ $hashKey.AttributeName }}": &dynamodb.AttributeValue{
        {{- if gt $lenHashKeyAttributes 1 }}
          S: aws.String({{ compositeValuePage $xdbConfig $hashKey.AttributeName "input.StartingAfter" }}),
        {{- else }}
              {{- $attrGoType := goTypeForAttribute $xdbConfig $hashKey.AttributeName }}
              {{- $attrDynamoDBType := dynamoDBTypeForAttribute $xdbConfig $hashKey.AttributeName }}
        {{- if eq $attrDynamoDBType "S" }}
          {{- if eq $attrGoType "strfmt.DateTime" }}
			S: aws.String(toDynamoTimeString(input.StartingAfter.{{ pascalize $hashKey.AttributeName }})),
          {{- else }}
			S: aws.String(input.StartingAfter.{{ pascalize $hashKey.AttributeName }}),
          {{- end }}
        {{- else if eq $attrDynamoDBType "N" }}
			N: aws.String(fmt.Sprintf("%%d", *input.StartingAfter.{{ pascalize $hashKey.AttributeName }})),
        {{- end }}
      {{- end }}
      },
    },
	}
  if input.Descending {
    queryInput.KeyConditionExpression = aws.String("#{{ upper $hashKey.AttributeName }} = :{{ camelize $hashKey.AttributeName }} AND #{{ upper $rangeKey.AttributeName }} <= :{{ camelize $rangeKey.AttributeName }}")
  } else {
    queryInput.KeyConditionExpression = aws.String("#{{ upper $hashKey.AttributeName }} = :{{ camelize $hashKey.AttributeName }} AND #{{ upper $rangeKey.AttributeName }} >= :{{ camelize $rangeKey.AttributeName }}")
  }

	queryOutput, err := t.DynamoDBAPI.QueryWithContext(ctx, queryInput)
	if err != nil {
		return err
	}
	if len(queryOutput.Items) == 0 {
    fn(nil, false)
		return nil
	}

  items, err := decode{{ $modelName }}s(queryOutput.Items)
	if err != nil {
		return err
	}

	for i, item := range items {
		hasMore := false
		if len(queryOutput.LastEvaluatedKey) > 0 {
			hasMore = true
		} else {
			hasMore = i < len(items)-1
		}
		if !fn(&item, !hasMore) {
			break
		}
	}

  return nil
}
{{- end }}

func (t {{ $modelName }}Table) delete{{ $modelName }}(ctx context.Context,
	{{- range $_, $attributeName := $pkModelAttributeNames }}
	{{- varname $attributeName }} {{ goTypeForAttribute $xdbConfig $attributeName }},
	{{- end -}}
) error {
	key, err := dynamodbattribute.MarshalMap(ddb{{ $modelName }}PrimaryKey{
		{{- range $_, $pk := $xdbConfig.DynamoDB.KeySchema }}
		{{ pascalize $pk.AttributeName }}: {{ if isComposite $xdbConfig $pk.AttributeName }}{{ compositeValue $xdbConfig $pk.AttributeName "" }}{{ else }}{{ varname $pk.AttributeName }}{{ end }},
		{{- end }}
	})
	if err != nil {
		return err
	}
	_, err = t.DynamoDBAPI.DeleteItemWithContext(ctx, &dynamodb.DeleteItemInput{
		Key:       key,
		TableName: aws.String(t.name()),
	})
	if err != nil {
		return err
	}
	return nil
}

{{ range $gsi := $xdbConfig.DynamoDB.GlobalSecondaryIndexes }}
{{- $computedIndexName := indexName $gsi.KeySchema }}
{{- if indexHasRangeKey $gsi.KeySchema }}
{{- $hashKey := index $gsi.KeySchema 0 }}
{{- $rangeKey := index $gsi.KeySchema 1 }}
{{- $rangeKeyAttributes := modelAttributeNamesForKeyType $xdbConfig $gsi.KeySchema "RANGE" }}
{{- $lenRangeKeyAttributes := len $rangeKeyAttributes }}
{{- $hashKeyAttributes := modelAttributeNamesForKeyType $xdbConfig $gsi.KeySchema "HASH" }}
{{- $lenHashKeyAttributes := len $hashKeyAttributes }}
{{- $primaryIndexName := indexName $xdbConfig.DynamoDB.KeySchema }}
{{- $primaryHashKey := index $xdbConfig.DynamoDB.KeySchema 0 }}
{{- $primaryRangeKey := index $xdbConfig.DynamoDB.KeySchema 1 }}
{{- $primaryRangeKeyAttributes := modelAttributeNamesForKeyType $xdbConfig $xdbConfig.DynamoDB.KeySchema "RANGE" }}
{{- $lenPrimaryRangeKeyAttributes := len $primaryRangeKeyAttributes }}
{{- $primaryHashKeyAttributes := modelAttributeNamesForKeyType $xdbConfig $xdbConfig.DynamoDB.KeySchema "HASH" }}
{{- $lenPrimaryHashKeyAttributes := len $primaryHashKeyAttributes }}
func (t {{ $modelName}}Table) get{{ $modelName }}sBy{{ $computedIndexName }}(ctx context.Context, input db.Get{{ $modelName }}sBy{{ $computedIndexName }}Input) ([]models.{{ $modelName }}, error) {
	queryInput := &dynamodb.QueryInput{
		TableName: aws.String(t.name()),
		IndexName: aws.String("{{ $gsi.IndexName }}"),
		ExpressionAttributeNames: map[string]*string{
			"#{{ upper $hashKey.AttributeName }}": aws.String("{{ $hashKey.AttributeName }}"),
		},
		ExpressionAttributeValues: map[string]*dynamodb.AttributeValue{
			":{{ camelize $hashKey.AttributeName }}": &dynamodb.AttributeValue{
                        	{{- $dynamoDBType := dynamoDBTypeForAttribute $xdbConfig $hashKey.AttributeName }}
                        	{{- if eq $dynamoDBType "S" }}
                                S: aws.String({{ if isComposite $xdbConfig $hashKey.AttributeName }}{{ compositeValue $xdbConfig $hashKey.AttributeName "input" }}{{ else }}input.{{ pascalize $hashKey.AttributeName }}{{ end }}),
                        	{{- else if eq $dynamoDBType "N" }}
				N: aws.String(fmt.Sprintf("%d", input.{{ pascalize $hashKey.AttributeName }})),
	                        {{- end }}
			},
		},
		ScanIndexForward: aws.Bool(!input.Descending),
	}
	{{- if gt $lenRangeKeyAttributes 1 }}
	if input.StartingAt == nil {
        {{- else }}
	if input.{{ pascalize $rangeKey.AttributeName }}StartingAt == nil {
        {{- end }}
		queryInput.KeyConditionExpression = aws.String("#{{ upper $hashKey.AttributeName }} = :{{ camelize $hashKey.AttributeName }}")
	} else {
		queryInput.ExpressionAttributeNames["#{{ upper $rangeKey.AttributeName }}"] = aws.String("{{ $rangeKey.AttributeName }}")
		queryInput.ExpressionAttributeValues[":{{ camelize $rangeKey.AttributeName }}"] = &dynamodb.AttributeValue{
			{{- if gt $lenRangeKeyAttributes 1 }}
                        S: aws.String({{ compositeValue $xdbConfig $rangeKey.AttributeName "input.StartingAt" }}),
                        {{- else }}
                       	{{- $attrGoType := goTypeForAttribute $xdbConfig $rangeKey.AttributeName }}
                        {{- $attrDynamoDBType := dynamoDBTypeForAttribute $xdbConfig $rangeKey.AttributeName }}
                     	{{- if eq $attrDynamoDBType "S" }}
                       	{{- if eq $attrGoType "strfmt.DateTime" }}
			S: aws.String(toDynamoTimeString(*input.{{ pascalize $rangeKey.AttributeName }}StartingAt)),
                       	{{- else }}
			S: aws.String(*input.{{ pascalize $rangeKey.AttributeName }}StartingAt),
                        {{- end }}
                       	{{- else if eq $attrDynamoDBType "N" }}
			N: aws.String(fmt.Sprintf("%%d", *input.{{ pascalize $rangeKey.AttributeName }}StartingAt)),
                        {{- end }}
                        {{- end }}
		}
		if input.Descending {
			queryInput.KeyConditionExpression = aws.String("#{{ upper $hashKey.AttributeName }} = :{{ camelize $hashKey.AttributeName }} AND #{{ upper $rangeKey.AttributeName }} <= :{{ camelize $rangeKey.AttributeName }}")
		} else {
			queryInput.KeyConditionExpression = aws.String("#{{ upper $hashKey.AttributeName }} = :{{ camelize $hashKey.AttributeName }} AND #{{ upper $rangeKey.AttributeName }} >= :{{ camelize $rangeKey.AttributeName }}")
		}
	}

	queryOutput, err := t.DynamoDBAPI.QueryWithContext(ctx, queryInput)
	if err != nil {
		return nil, err
	}
	if len(queryOutput.Items) == 0 {
		return []models.{{ $modelName }}{}, nil
	}
	return decode{{ $modelName }}s(queryOutput.Items)
}

func (t {{ $modelName}}Table) get{{ $modelName }}sBy{{ $computedIndexName }}Page(ctx context.Context, input db.Get{{ $modelName }}sBy{{ $computedIndexName }}PageInput, fn func(m *models.{{ $modelName }}, last{{ $modelName }} bool) bool) error {
	queryInput := &dynamodb.QueryInput{
		TableName: aws.String(t.name()),
    IndexName: aws.String("{{ $gsi.IndexName }}"),
		ExpressionAttributeNames: map[string]*string{
			"#{{ upper $hashKey.AttributeName }}": aws.String("{{ $hashKey.AttributeName }}"),
      "#{{ upper $rangeKey.AttributeName }}": aws.String("{{ $rangeKey.AttributeName }}"),
		},
		ExpressionAttributeValues: map[string]*dynamodb.AttributeValue{
			":{{ camelize $hashKey.AttributeName }}": &dynamodb.AttributeValue{
                        	{{- $dynamoDBType := dynamoDBTypeForAttribute $xdbConfig $hashKey.AttributeName }}
                        	{{- if eq $dynamoDBType "S" }}
                        	    S: aws.String({{ if isComposite $xdbConfig $hashKey.AttributeName }}{{ compositeValuePage $xdbConfig $hashKey.AttributeName "input.StartingAfter" }}{{ else }}input.StartingAfter.{{ pascalize $hashKey.AttributeName }}{{ end }}),
                          {{- else if eq $dynamoDBType "N" }}
			                        N: aws.String(fmt.Sprintf("%d", input.{{ pascalize $hashKey.AttributeName }})),
                          {{- end }}
      },
      ":{{ camelize $rangeKey.AttributeName }}": &dynamodb.AttributeValue{
                          {{- if gt $lenRangeKeyAttributes 1 }}
                              S: aws.String({{- if isComposite $xdbConfig $rangeKey.AttributeName }}{{ compositeValuePage $xdbConfig $rangeKey.AttributeName "input.StartingAfter" }}{{ else }}input.StartingAfter.{{ pascalize $rangeKey.AttributeName }}{{ end }}),
                          {{- else }}
                          {{- $attrGoType := goTypeForAttribute $xdbConfig $rangeKey.AttributeName }}
                          {{- $attrDynamoDBType := dynamoDBTypeForAttribute $xdbConfig $rangeKey.AttributeName }}
                          {{- if eq $attrDynamoDBType "S" }}
                          {{- if eq $attrGoType "strfmt.DateTime" }}
                              S: aws.String(toDynamoTimeString(input.StartingAfter.{{ pascalize $rangeKey.AttributeName }})),
                          {{- else }}
                              S: aws.String(input.StartingAfter.{{ pascalize $rangeKey.AttributeName }}),
                          {{- end }}
                          {{- else if eq $attrDynamoDBType "N" }}
                              N: aws.String(fmt.Sprintf("%%d", input.StartingAfter.{{ pascalize $rangeKey.AttributeName }})),
                          {{- end }}
                          {{- end }}
			},
		},
		ScanIndexForward: aws.Bool(!input.Descending),
		ConsistentRead:   aws.Bool(false),
    Limit: input.Limit,
    ExclusiveStartKey: map[string]*dynamodb.AttributeValue{
      "{{ $rangeKey.AttributeName }}": &dynamodb.AttributeValue{
    	{{- if gt $lenRangeKeyAttributes 1 }}
        S: aws.String({{ compositeValuePage $xdbConfig $rangeKey.AttributeName "input.StartingAfter" }}),
      {{- else }}
          {{- $attrGoType := goTypeForAttribute $xdbConfig $rangeKey.AttributeName }}
          {{- $attrDynamoDBType := dynamoDBTypeForAttribute $xdbConfig $rangeKey.AttributeName }}
        {{- if eq $attrDynamoDBType "S" }}
          {{- if eq $attrGoType "strfmt.DateTime" }}
			S: aws.String(toDynamoTimeString(input.StartingAfter.{{ pascalize $rangeKey.AttributeName }})),
          {{- else }}
			S: aws.String({{if attributeIsPointer $xdbConfig $rangeKey.AttributeName }}*{{end}}input.StartingAfter.{{ pascalize $rangeKey.AttributeName }}),
          {{- end }}
        {{- else if eq $attrDynamoDBType "N" }}
			N: aws.String(fmt.Sprintf("%%d", input.StartingAfter.{{ pascalize $rangeKey.AttributeName }})),
        {{- end }}
      {{- end }}
      },
      "{{ $hashKey.AttributeName }}": &dynamodb.AttributeValue{
        {{- if gt $lenHashKeyAttributes 1 }}
          S: aws.String({{ compositeValuePage $xdbConfig $hashKey.AttributeName "input.StartingAfter" }}),
        {{- else }}
              {{- $attrGoType := goTypeForAttribute $xdbConfig $hashKey.AttributeName }}
              {{- $attrDynamoDBType := dynamoDBTypeForAttribute $xdbConfig $hashKey.AttributeName }}
        {{- if eq $attrDynamoDBType "S" }}
          {{- if eq $attrGoType "strfmt.DateTime" }}
			S: aws.String(toDynamoTimeString(input.StartingAfter.{{ pascalize $hashKey.AttributeName }})),
          {{- else }}
			S: aws.String(input.StartingAfter.{{ pascalize $hashKey.AttributeName }}),
          {{- end }}
        {{- else if eq $attrDynamoDBType "N" }}
			N: aws.String(fmt.Sprintf("%%d", *input.StartingAfter.{{ pascalize $hashKey.AttributeName }})),
        {{- end }}
      {{- end }}
      },
      {{- $sameRangeKey := stringsEqual $primaryRangeKey.AttributeName $rangeKey.AttributeName }}
      {{- if not $sameRangeKey }}
     "{{ $primaryRangeKey.AttributeName }}": &dynamodb.AttributeValue{
    	{{- if gt $lenPrimaryRangeKeyAttributes 1 }}
        S: aws.String({{ compositeValuePage $xdbConfig $primaryRangeKey.AttributeName "input.StartingAfter" }}),
      {{- else }}
          {{- $attrGoType := goTypeForAttribute $xdbConfig $primaryRangeKey.AttributeName }}
          {{- $attrDynamoDBType := dynamoDBTypeForAttribute $xdbConfig $primaryRangeKey.AttributeName }}
        {{- if eq $attrDynamoDBType "S" }}
          {{- if eq $attrGoType "strfmt.DateTime" }}
			S: aws.String(toDynamoTimeString(input.StartingAfter.{{ pascalize $primaryRangeKey.AttributeName }})),
          {{- else }}
			S: aws.String({{if attributeIsPointer $xdbConfig $primaryRangeKey.AttributeName }}*{{end}}input.StartingAfter.{{ pascalize $primaryRangeKey.AttributeName }}),
          {{- end }}
        {{- else if eq $attrDynamoDBType "N" }}
			N: aws.String(fmt.Sprintf("%%d", input.StartingAfter.{{ pascalize $primaryRangeKey.AttributeName }})),
        {{- end }}
      {{- end }}
      },
      {{- end}}
      {{- $sameHashKey := stringsEqual $primaryHashKey.AttributeName $hashKey.AttributeName }}
      {{- if not $sameHashKey }}
      "{{ $primaryHashKey.AttributeName }}": &dynamodb.AttributeValue{
        {{- if gt $lenPrimaryHashKeyAttributes 1 }}
          S: aws.String({{ compositeValuePage $xdbConfig $primaryHashKey.AttributeName "input.StartingAfter" }}),
        {{- else }}
              {{- $attrGoType := goTypeForAttribute $xdbConfig $primaryHashKey.AttributeName }}
              {{- $attrDynamoDBType := dynamoDBTypeForAttribute $xdbConfig $primaryHashKey.AttributeName }}
        {{- if eq $attrDynamoDBType "S" }}
          {{- if eq $attrGoType "strfmt.DateTime" }}
			S: aws.String(toDynamoTimeString(input.StartingAfter.{{ pascalize $primaryHashKey.AttributeName }})),
          {{- else }}
			S: aws.String(input.StartingAfter.{{ pascalize $primaryHashKey.AttributeName }}),
          {{- end }}
        {{- else if eq $attrDynamoDBType "N" }}
			N: aws.String(fmt.Sprintf("%%d", *input.StartingAfter.{{ pascalize $primaryHashKey.AttributeName }})),
        {{- end }}
      {{- end }}
      },
      {{- end}}
    },
	}
  if input.Descending {
    queryInput.KeyConditionExpression = aws.String("#{{ upper $hashKey.AttributeName }} = :{{ camelize $hashKey.AttributeName }} AND #{{ upper $rangeKey.AttributeName }} <= :{{ camelize $rangeKey.AttributeName }}")
  } else {
    queryInput.KeyConditionExpression = aws.String("#{{ upper $hashKey.AttributeName }} = :{{ camelize $hashKey.AttributeName }} AND #{{ upper $rangeKey.AttributeName }} >= :{{ camelize $rangeKey.AttributeName }}")
  }

	queryOutput, err := t.DynamoDBAPI.QueryWithContext(ctx, queryInput)
	if err != nil {
		return err
	}
	if len(queryOutput.Items) == 0 {
    fn(nil, false)
		return nil
	}

  items, err := decode{{ $modelName }}s(queryOutput.Items)
	if err != nil {
		return err
	}

	for i, item := range items {
		hasMore := false
		if len(queryOutput.LastEvaluatedKey) > 0 {
			hasMore = true
		} else {
			hasMore = i < len(items)-1
		}
		if !fn(&item, !hasMore) {
			break
		}
	}

  return nil
}
{{- else }}
{{- $ks := index $gsi.KeySchema 0 }}
{{- $ksAttrDynamoDBType := dynamoDBTypeForAttribute $xdbConfig $ks.AttributeName }}
func (t {{ $modelName}}Table) get{{ $modelName }}By{{ $computedIndexName }}(ctx context.Context,
      {{- varname $ks.AttributeName }} {{ goTypeForAttribute $xdbConfig $ks.AttributeName }}) (*models.{{ $modelName }}, error) {
	queryInput := &dynamodb.QueryInput{
		TableName: aws.String(t.name()),
		IndexName: aws.String("{{ $gsi.IndexName }}"),
		ExpressionAttributeNames: map[string]*string{
			"#{{ upper $ks.AttributeName }}": aws.String("{{ $ks.AttributeName }}"),
		},
		ExpressionAttributeValues: map[string]*dynamodb.AttributeValue{
			":{{ camelize $ks.AttributeName }}": &dynamodb.AttributeValue{
                        	{{- if eq $ksAttrDynamoDBType "S" }}
				S: aws.String({{- varname $ks.AttributeName }}),
                        	{{- else if eq $ksAttrDynamoDBType "N" }}
				N: aws.String(fmt.Sprintf("%d", {{ varname $ks.AttributeName }})),
	                        {{- end }}
			},
		},
		KeyConditionExpression: aws.String("#{{ upper $ks.AttributeName }} = :{{ camelize $ks.AttributeName }}"),
	}

	queryOutput, err := t.DynamoDBAPI.QueryWithContext(ctx, queryInput)
	if err != nil {
		return nil, err
	}
	if len(queryOutput.Items) == 0 {
		return nil, db.Err{{ $modelName }}By{{ $computedIndexName }}NotFound{
                {{- pascalize $ks.AttributeName }}: {{ varname $ks.AttributeName -}}
                }
	}

	var {{ camelize $modelName }} models.{{ $modelName }}
	if err := decode{{ $modelName }}(queryOutput.Items[0], &{{ camelize $modelName }}); err != nil {
		return nil, err
	}
	return &{{ camelize $modelName }}, nil
}
{{- end }}
{{ end }}

// encode{{ $modelName }} encodes a {{ $modelName }} as a DynamoDB map of attribute values.
func encode{{ $modelName }}(m models.{{ $modelName }}) (map[string]*dynamodb.AttributeValue, error) {
{{- if not $hasCompositeAttrs }}
	return dynamodbattribute.MarshalMap(ddb{{ $modelName }}{
		{{ $modelName }}: m,
	})
{{- else }}
	val, err := dynamodbattribute.MarshalMap(ddb{{ $modelName }}{
		{{ $modelName }}: m,
	})
	if err != nil {
		return nil, err
	}
        // make sure composite attributes don't contain separator characters
        {{- $strPropertiesInComposites := stringPropertiesInComposites $xdbConfig }}
        {{- range $_, $sep := sortedKeys $strPropertiesInComposites }}
        {{- range $compositeProp := index $strPropertiesInComposites $sep }}
	if strings.Contains({{ attributeToModelValue $xdbConfig $compositeProp "m." }}, "{{ $sep }}") {
		return nil, fmt.Errorf("{{ $compositeProp }} cannot contain '{{ $sep }}': %%s", {{ attributeToModelValue $xdbConfig $compositeProp "m." }})
	}
        {{- end }}
        {{- end }}
	// add in composite attributes
        {{- if indexContainsCompositeAttribute $xdbConfig $xdbConfig.DynamoDB.KeySchema }}
	primaryKey, err := dynamodbattribute.MarshalMap(ddb{{ $modelName }}PrimaryKey{
		{{- range $_, $pk := $xdbConfig.DynamoDB.KeySchema }}
		{{ pascalize $pk.AttributeName }}: {{ if isComposite $xdbConfig $pk.AttributeName }}{{ compositeValue $xdbConfig $pk.AttributeName "m" }}{{ else }}{{ attributeToModelValue $xdbConfig $pk.AttributeName "m." }}{{ end }},
                {{- end }}
	})
	if err != nil {
		return nil, err
	}
	for k, v := range primaryKey {
		val[k] = v
	}
        {{- end }}
        {{- range $gsi := $xdbConfig.DynamoDB.GlobalSecondaryIndexes }}
        {{- if indexContainsCompositeAttribute $xdbConfig $gsi.KeySchema }}
	{{ camelize $gsi.IndexName }}, err := dynamodbattribute.MarshalMap(ddb{{ $modelName }}GSI{{ pascalize $gsi.IndexName }}{
		{{- range $_, $sk := $gsi.KeySchema }}
		{{ pascalize $sk.AttributeName }}: {{ if isComposite $xdbConfig $sk.AttributeName }}{{ compositeValue $xdbConfig $sk.AttributeName "m" }}{{ else }}{{ attributeToModelValue $xdbConfig $sk.AttributeName "m." }}{{ end }},
                {{- end }}
	})
	if err != nil {
		return nil, err
	}
	for k, v := range {{ camelize $gsi.IndexName }} {
		val[k] = v
	}
        {{- end }}
        {{- end }}
	return val, err
{{- end }}
}

// decode{{ $modelName }} translates a {{ $modelName }} stored in DynamoDB to a {{ $modelName }} struct.
func decode{{ $modelName }}(m map[string]*dynamodb.AttributeValue, out *models.{{ $modelName }}) error {
	var ddb{{ $modelName }} ddb{{ $modelName }}
	if err := dynamodbattribute.UnmarshalMap(m, &ddb{{ $modelName }}); err != nil {
		return err
	}
	*out = ddb{{ $modelName }}.{{ $modelName }}
        {{- if len $projectedIndexesWithCompositeAttributes }}
	// parse composite attributes from projected secondary indexes and fill
	// in model properties
        {{- range $projectedIndexWithCompositeAttributes := $projectedIndexesWithCompositeAttributes }}
        {{- range $ks := $projectedIndexWithCompositeAttributes }}
        {{- if isComposite $xdbConfig $ks.AttributeName }}
        {{- $ca := findCompositeAttribute $xdbConfig $ks.AttributeName }}
        if v, ok := m["{{ $ks.AttributeName }}"]; ok && v.S != nil {
		parts := strings.Split(*v.S, "{{ $ca.Separator }}")
		if len(parts) != {{ len $ca.Properties }} {
			return fmt.Errorf("expected {{ len $ca.Properties }} parts: '%%s'", *v.S)
		}
                {{- range $i, $prop := $ca.Properties }}
		out.{{ pascalize $prop }} = parts[{{ $i }}]
                {{- end }}
	}
        {{- end }}
        {{- end }}
        {{- end }}
        {{- end }}
	return nil
}

// decode{{ $modelName }}s translates a list of {{ $modelName }}s stored in DynamoDB to a slice of {{ $modelName }} structs.
func decode{{ $modelName }}s(ms []map[string]*dynamodb.AttributeValue) ([]models.{{ $modelName }}, error) {
	{{ camelize $modelName }}s := make([]models.{{ $modelName }}, len(ms))
	for i, m := range ms {
		var {{ camelize $modelName }} models.{{ $modelName }}
		if err := decode{{ $modelName }}(m, &{{ camelize $modelName }}); err != nil {
			return nil, err
		}
		{{ camelize $modelName }}s[i] = {{ camelize $modelName }}
	}
	return {{ camelize $modelName }}s, nil
}
