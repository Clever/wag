{{- $modelName := pascalize .XDBConfig.SchemaName }}
{{- $xdbConfig := .XDBConfig }}
{{- $lenCompositeAttrs := len $xdbConfig.CompositeAttributes }}
{{- $hasCompositeAttrs := gt $lenCompositeAttrs 0 }}
{{- $projectedIndexesWithCompositeAttributes := projectedIndexesWithCompositeAttributes $xdbConfig }}
{{- $lenProjectedIndexesWithCompositeAttributes := len $projectedIndexesWithCompositeAttributes }}
{{- $hasProjectedIndexesWithCompositeAttributes := gt $lenProjectedIndexesWithCompositeAttributes 0 }}
{{- $stringPropertiesInComposites := stringPropertiesInComposites $xdbConfig }}
{{- $lenStringPropertiesInComposites := len $stringPropertiesInComposites }}
{{- $hasStringPropertiesInComposites := gt $lenStringPropertiesInComposites 0 }}
package dynamodb

import (
  "context"
  "errors"
  "fmt"
        {{- if or $hasProjectedIndexesWithCompositeAttributes $hasStringPropertiesInComposites }}
        "strings"
        {{- end }}

  "{{ .ModuleName }}{{.GoOutputPath}}/models{{.VersionSuffix}}"
  "{{ .PackageName }}/{{ .OutputPath }}"
  "github.com/aws/aws-sdk-go-v2/aws"
  "github.com/aws/aws-sdk-go-v2/service/dynamodb/types"
  "github.com/aws/aws-sdk-go-v2/service/dynamodb"
  "github.com/aws/aws-sdk-go-v2/feature/dynamodb/attributevalue"
  {{- if transactionsEnabled $xdbConfig }}
  "github.com/aws/aws-sdk-go-v2/feature/dynamodb/expression"
  {{- end }}
  "github.com/go-openapi/strfmt"
)

var _ = strfmt.DateTime{}
var _ = errors.New("")
var _ = []types.AttributeValue{}

// {{ $modelName }}Table represents the user-configurable properties of the {{ $modelName }} table.
type {{ $modelName }}Table struct {
  DynamoDBAPI        *dynamodb.Client
  Prefix             string
  TableName          string
  ReadCapacityUnits  int64
  WriteCapacityUnits int64
}

// ddb{{ $modelName }}PrimaryKey represents the primary key of a {{ $modelName }} in DynamoDB.
type ddb{{ $modelName }}PrimaryKey struct {
  {{- /* loop over primary key attributes and add them as fields in the struct */}}
  {{- range $_, $pk := $xdbConfig.DynamoDB.KeySchema }}
  {{ pascalize $pk.AttributeName }} {{ goTypeForAttribute $xdbConfig $pk.AttributeName }} `dynamodbav:"{{ $pk.AttributeName }}"`
  {{- end }}
}

{{ range $gsi := $xdbConfig.DynamoDB.GlobalSecondaryIndexes }}
// ddb{{$modelName}}GSI{{ pascalize $gsi.IndexName }} represents the {{ $gsi.IndexName }} GSI.
type ddb{{$modelName}}GSI{{ pascalize $gsi.IndexName }} struct {
  {{ range $ks := $gsi.KeySchema }}
  {{- pascalize $ks.AttributeName }} {{ goTypeForAttribute $xdbConfig $ks.AttributeName }} `dynamodbav:"{{ $ks.AttributeName }}"`
        {{ end }}
}
{{ end }}

// ddb{{ $modelName }} represents a {{ $modelName }} as stored in DynamoDB.
type ddb{{ $modelName }} struct {
  models.{{ $modelName }}
}

func (t {{ $modelName }}Table) create(ctx context.Context) error {
  if _, err := t.DynamoDBAPI.CreateTable(ctx, &dynamodb.CreateTableInput{
    AttributeDefinitions: []types.AttributeDefinition{
                        {{- $attrs := attributeNames $xdbConfig.DynamoDB }}
                        {{- range $attr := $attrs }}
      {
        AttributeName: aws.String("{{- $attr }}"),
        AttributeType: types.ScalarAttributeType("{{ dynamoDBTypeForAttribute $xdbConfig $attr }}"),
      },
                        {{- end }}
    },
    KeySchema: []types.KeySchemaElement{
                        {{- range $_, $ks := $xdbConfig.DynamoDB.KeySchema }}
      {
        AttributeName: aws.String("{{- $ks.AttributeName }}"),
                                {{- if eq $ks.KeyType "HASH" }}
        KeyType:       types.KeyTypeHash,
                                {{- else if eq $ks.KeyType "RANGE" }}
        KeyType:       types.KeyTypeRange,
                                {{- end }}
      },
                        {{- end }}
    },
                {{- $lenGSIs := len $xdbConfig.DynamoDB.GlobalSecondaryIndexes }}
                {{- if gt $lenGSIs 0 }}
    GlobalSecondaryIndexes: []types.GlobalSecondaryIndex{
                        {{- range $gsi := $xdbConfig.DynamoDB.GlobalSecondaryIndexes }}
      {
        IndexName: aws.String("{{ $gsi.IndexName }}"),
        Projection: &types.Projection{
          ProjectionType: types.ProjectionType("{{ $gsi.Projection.ProjectionType }}"),
        },
        KeySchema: []types.KeySchemaElement{
                                        {{- range $_, $ks := $gsi.KeySchema }}
          {
                                          AttributeName: aws.String("{{- $ks.AttributeName }}"),
                                          {{- if eq $ks.KeyType "HASH" }}
            KeyType:       types.KeyTypeHash,
                                          {{- else if eq $ks.KeyType "RANGE" }}
            KeyType:       types.KeyTypeRange,
                                          {{- end }}
          },
                                        {{- end }}
        },
        ProvisionedThroughput: &types.ProvisionedThroughput{
          ReadCapacityUnits:  aws.Int64(t.ReadCapacityUnits),
          WriteCapacityUnits: aws.Int64(t.WriteCapacityUnits),
        },
      },
                        {{- end }}
    },
                {{- end }}
    ProvisionedThroughput: &types.ProvisionedThroughput{
      ReadCapacityUnits:  aws.Int64(t.ReadCapacityUnits),
      WriteCapacityUnits: aws.Int64(t.WriteCapacityUnits),
    },
    TableName: aws.String(t.TableName),
  }); err != nil {
    return fmt.Errorf("failed to create table %s: %w", t.TableName, err)
  }
  return nil
}

func (t {{ $modelName }}Table) save{{ $modelName }}(ctx context.Context, m models.{{ $modelName }}) error {
  data, err := encode{{ $modelName }}(m)
  if err != nil {
    return err
  }

  {{- if $xdbConfig.AllowOverwrites }}
  
  _, err = t.DynamoDBAPI.PutItem(ctx, &dynamodb.PutItemInput{
    TableName: aws.String(t.TableName),
    Item:      data,
  })
  return err

  {{- else }}

  _, err = t.DynamoDBAPI.PutItem(ctx, &dynamodb.PutItemInput{
    TableName: aws.String(t.TableName),
    Item:      data,
    ExpressionAttributeNames: map[string]string{
      {{- range $_, $pk := $xdbConfig.DynamoDB.KeySchema }}
      "#{{ upper $pk.AttributeName }}": "{{ $pk.AttributeName }}",
      {{- end }}
    },
    ConditionExpression: aws.String(
        "{{- range $i, $pk := $xdbConfig.DynamoDB.KeySchema -}}" +
            "{{- if $i }} AND {{ end }}" +
            "attribute_not_exists(#{{ upper $pk.AttributeName }})" +
        "{{- end -}}",
    ),
	})
	if err != nil {
		var resourceNotFoundErr *types.ResourceNotFoundException
		var conditionalCheckFailedErr *types.ConditionalCheckFailedException
		if errors.As(err, &resourceNotFoundErr) {
			return fmt.Errorf("table or index not found: %s", t.TableName)
		}
		if errors.As(err, &conditionalCheckFailedErr) {
			return db.Err{{ $modelName }}AlreadyExists{
				{{- range $_, $pk := $xdbConfig.DynamoDB.KeySchema }}
				{{ pascalize $pk.AttributeName }}: {{ if isComposite $xdbConfig $pk.AttributeName }}{{ compositeValue $xdbConfig $pk.AttributeName "m" }}{{ else }}{{ attributeToModelValue $xdbConfig $pk.AttributeName "m." }}{{ end }},
				{{- end }}
			}
		}
		return err
	}
	return nil

  {{- end }}
}

{{- if $xdbConfig.AllowBatchWrites }}
func (t {{ $modelName }}Table) saveArrayOf{{ $modelName }}(ctx context.Context, ms []models.{{ $modelName }}) error {
	if len(ms) > maxDynamoDBBatchItems {
		return fmt.Errorf("saveArrayOf{{ $modelName }} received %d items to save, which is greater than the maximum of %d", len(ms), maxDynamoDBBatchItems)
	}

	if len(ms) == 0 {
		return nil
	}

	batch := make([]types.WriteRequest, len(ms))
	for i := range ms {
	data, err := encode{{ $modelName }}(ms[i])
		if err != nil {
			return err
		}
		batch[i] = types.WriteRequest{
			PutRequest: &types.PutRequest{
				Item: data,
			},
		}
	}
	tname := t.TableName
	for {
		if out, err := t.DynamoDBAPI.BatchWriteItem(ctx, &dynamodb.BatchWriteItemInput{
			RequestItems: map[string][]types.WriteRequest{
				tname: batch,
			},
		}); err != nil {
			return fmt.Errorf("BatchWriteItem: %v", err)
		} else if out.UnprocessedItems != nil && len(out.UnprocessedItems[tname]) > 0 {
			batch = out.UnprocessedItems[tname]
		} else {
			break
		}
	}
	return nil
}

func (t {{ $modelName }}Table) deleteArrayOf{{ $modelName }}(ctx context.Context, ms []models.{{ $modelName }}) error {
	if len(ms) > maxDynamoDBBatchItems {
		return fmt.Errorf("deleteArrayOf{{ $modelName }} received %d items to delete, which is greater than the maximum of %d", len(ms), maxDynamoDBBatchItems)
	}
  
	if len(ms) == 0 {
		return nil
	}

	batch := make([]types.WriteRequest, len(ms))
	for i := range ms {
		key, err := attributevalue.MarshalMap(ddb{{ $modelName }}PrimaryKey{
		{{- range $_, $pk := $xdbConfig.DynamoDB.KeySchema }}
			{{ pascalize $pk.AttributeName }}: {{ if isComposite $xdbConfig $pk.AttributeName }}{{ compositeValueFromArray $xdbConfig $pk.AttributeName "ms[i]"}}{{ else }}{{ if attributeIsPointer $xdbConfig $pk.AttributeName }}*{{ end }}ms[i].{{ pascalize $pk.AttributeName }}{{ end }},
		{{- end }}
		})
		if err != nil {
			return err
		}

		batch[i] = types.WriteRequest{
			DeleteRequest: &types.DeleteRequest{
				Key: key,
			},
		}
	}
	tname := t.TableName
	for {
		if out, err := t.DynamoDBAPI.BatchWriteItem(ctx, &dynamodb.BatchWriteItemInput{
			RequestItems: map[string][]types.WriteRequest{
				tname: batch,
			},
		}); err != nil {
			return fmt.Errorf("BatchWriteItem: %v", err)
		} else if out.UnprocessedItems != nil && len(out.UnprocessedItems[tname]) > 0 {
			batch = out.UnprocessedItems[tname]
		} else {
			break
		}
	}
	return nil
}
{{- end }}

{{ $pkModelAttributeNames := modelAttributeNamesForIndex $xdbConfig $xdbConfig.DynamoDB.KeySchema }}
func (t {{ $modelName }}Table) get{{ $modelName }}(ctx context.Context,
  {{- range $_, $attributeName := $pkModelAttributeNames }}
  {{- varname $attributeName }} {{ goTypeForAttribute $xdbConfig $attributeName }},
  {{- end -}}
) (*models.{{ $modelName }}, error) {
	key, err := attributevalue.MarshalMap(ddb{{ $modelName }}PrimaryKey{
		{{- range $_, $pk := $xdbConfig.DynamoDB.KeySchema }}
		{{ pascalize $pk.AttributeName }}: {{ if isComposite $xdbConfig $pk.AttributeName }}{{ compositeValue $xdbConfig $pk.AttributeName "" }}{{ else }}{{ varname $pk.AttributeName }}{{ end }},
		{{- end }}
	})
	if err != nil {
		return nil, err
	}
	res, err := t.DynamoDBAPI.GetItem(ctx, &dynamodb.GetItemInput{
		Key:       key,
		TableName: aws.String(t.TableName),
		ConsistentRead: aws.Bool(true),
	})
	{{- if $xdbConfig.AllowOverwrites }}
	if err != nil {
		return nil, err
	}
	{{- else }}
	if err != nil {
		var resourceNotFoundErr *types.ResourceNotFoundException
		if errors.As(err, &resourceNotFoundErr) {
			return nil, fmt.Errorf("table or index not found: %s", t.TableName)
		}
		return nil, err
	}
	{{- end }}

  if len(res.Item) == 0 {
    return nil, db.Err{{ $modelName }}NotFound{
    {{- range $_, $attributeName := $pkModelAttributeNames }}
    {{ pascalize $attributeName }}: {{ varname $attributeName }},
    {{- end }}
    }
  }

  var m models.{{ $modelName }}
  if err := decode{{ $modelName }}(res.Item, &m); err != nil {
    return nil, err
  }

  return &m, nil
}

{{ if $xdbConfig.AllowPrimaryIndexScan }}
func (t {{ $modelName }}Table) scan{{ $modelName }}s(ctx context.Context, input db.Scan{{ $modelName }}sInput, fn func(m *models.{{ $modelName }}, last{{ $modelName }} bool) bool) error {
  scanInput := &dynamodb.ScanInput{
    TableName:      aws.String(t.TableName),
    ConsistentRead: aws.Bool(!input.DisableConsistentRead),
  }
  if input.Limit != nil {
    scanInput.Limit = aws.Int32(int32(*input.Limit))
  }
  if input.StartingAfter != nil {
  {{- if indexContainsNonCompositeAttribute $xdbConfig $xdbConfig.DynamoDB.KeySchema }}
    exclusiveStartKey, err := attributevalue.MarshalMap(input.StartingAfter)
    if err != nil {
      return fmt.Errorf("error encoding exclusive start key for scan: %s", err.Error())
    }
  {{- end }}
    // must provide only the fields constituting the index
    scanInput.ExclusiveStartKey = map[string]types.AttributeValue{
                  {{- range $ks := $xdbConfig.DynamoDB.KeySchema }}
                    {{- if isComposite $xdbConfig $ks.AttributeName }}
      "{{ $ks.AttributeName }}": &types.AttributeValueMemberS{
          Value: {{compositeValuePage $xdbConfig $ks.AttributeName "input.StartingAfter"}},
      },
                    {{- else }}
      "{{ $ks.AttributeName }}":    exclusiveStartKey["{{ $ks.AttributeName }}"],
                    {{- end }}
                  {{- end }}
    }
  }
  totalRecordsProcessed := int64(0)

  paginator := dynamodb.NewScanPaginator(t.DynamoDBAPI, scanInput)
  for paginator.HasMorePages() {
    out, err := paginator.NextPage(ctx)
    if err != nil {
      return fmt.Errorf("error getting next page: %s", err.Error())
    }

    items, err := decode{{ $modelName }}s(out.Items)
    if err != nil {
      return fmt.Errorf("error decoding items: %s", err.Error())
    }

    for i := range items {
      if input.Limiter != nil {
        if err := input.Limiter.Wait(ctx); err != nil {
          return err
        }
      }

      isLastModel := !paginator.HasMorePages() && i == len(items)-1
      if shouldContinue := fn(&items[i], isLastModel); !shouldContinue {
        return nil
      }

      totalRecordsProcessed++
      if input.Limit != nil && totalRecordsProcessed == *input.Limit {
        return nil
      }
    }
  }

  return nil
}
{{- end }}

{{ if indexHasRangeKey $xdbConfig.DynamoDB.KeySchema }}
{{- $computedIndexName := indexName $xdbConfig.DynamoDB.KeySchema }}
{{- $hashKey := index $xdbConfig.DynamoDB.KeySchema 0 }}
{{- $rangeKey := index $xdbConfig.DynamoDB.KeySchema 1 }}
{{- $rangeKeyAttributes := modelAttributeNamesForKeyType $xdbConfig $xdbConfig.DynamoDB.KeySchema "RANGE" }}
{{- $lenRangeKeyAttributes := len $rangeKeyAttributes }}
{{- $hashKeyAttributes := modelAttributeNamesForKeyType $xdbConfig $xdbConfig.DynamoDB.KeySchema "HASH" }}
{{- $lenHashKeyAttributes := len $hashKeyAttributes }}
{{- $pkModelAttributeNames := modelAttributeNamesForIndex $xdbConfig $xdbConfig.DynamoDB.KeySchema }}
{{- $nonIndexAttributeNames := nonIndexModelAttributeNames $xdbConfig $pkModelAttributeNames}}
{{- $lenNonIndexAttributes := len $nonIndexAttributeNames }}

{{- if gt $lenNonIndexAttributes 0 }}
  func (t {{ $modelName}}Table) get{{ $modelName }}sBy{{ $computedIndexName }}ParseFilters(queryInput *dynamodb.QueryInput, input db.Get{{ $modelName }}sBy{{ $computedIndexName }}Input) {
    for _, filterValue := range input.FilterValues {
      switch filterValue.AttributeName {
      {{- range $attributeName := $nonIndexAttributeNames}}
      case db.{{ $modelName }}{{ pascalize $attributeName }}:
        queryInput.ExpressionAttributeNames["#{{ upper $attributeName }}"] = string(db.{{ $modelName }}{{ pascalize $attributeName }})
        {{- $attrDynamoDBType := dynamoDBTypeForAttribute $xdbConfig $attributeName }}
        {{- $attrGoType := goTypeForAttribute $xdbConfig $attributeName }}
        for i, attributeValue := range filterValue.AttributeValues {
          {{- if eq $attrDynamoDBType "S" }}
            {{- if eq $attrGoType "strfmt.DateTime" }}
              queryInput.ExpressionAttributeValues[fmt.Sprintf(":%s_value%d", string(db.{{ $modelName }}{{ pascalize $attributeName }}), i)] = &types.AttributeValueMemberS{
                Value: datetimeToDynamoTimeString(attributeValue.({{$attrGoType}})),
              }
            {{- else if eq $attrGoType "strfmt.Date" }}
              queryInput.ExpressionAttributeValues[fmt.Sprintf(":%s_value%d", string(db.{{ $modelName }}{{ pascalize $attributeName }}), i)] = &types.AttributeValueMemberS{
                Value: dateToDynamoTimeString(attributeValue.({{$attrGoType}})),
              }
            {{- else }}
              queryInput.ExpressionAttributeValues[fmt.Sprintf(":%s_value%d", string(db.{{ $modelName }}{{ pascalize $attributeName }}), i)] = &types.AttributeValueMemberS{
                Value: attributeValue.(string),
              }
            {{- end }}
          {{- else if eq $attrDynamoDBType "N" }}
            queryInput.ExpressionAttributeValues[fmt.Sprintf(":%s_value%d", string(db.{{ $modelName }}{{ pascalize $attributeName }}), i)] = &types.AttributeValueMemberN{
              Value: fmt.Sprint(attributeValue.({{$attrGoType}})),
            }
          {{- else if eq $attrDynamoDBType "B" }}
            queryInput.ExpressionAttributeValues[fmt.Sprintf(":%s_value%d", string(db.{{ $modelName }}{{ pascalize $attributeName }}), i)] = &types.AttributeValueMemberB{
              Value: attributeValue.({{$attrGoType}}),
            }
          {{- end }}
        }
      {{- end }}
      }
    }
  }
{{- end }}

func (t {{ $modelName}}Table) get{{ $modelName }}sBy{{ $computedIndexName }}(ctx context.Context, input db.Get{{ $modelName }}sBy{{ $computedIndexName }}Input, fn func(m *models.{{ $modelName }}, last{{ $modelName }} bool) bool) error {
  {{- if gt $lenRangeKeyAttributes 1 }}
    if (input.StartingAt != nil && input.StartingAfter != nil) {
      return fmt.Errorf("Can specify only one of StartingAt or StartingAfter")
    }
  {{- else }}
    if input.{{ pascalize $rangeKey.AttributeName }}StartingAt != nil && input.StartingAfter != nil {
      return fmt.Errorf("Can specify only one of input.{{ pascalize $rangeKey.AttributeName }}StartingAt or input.StartingAfter")
    }
  {{- end }}
  {{- range $attributeName := modelAttributeNamesForKeyType $xdbConfig $xdbConfig.DynamoDB.KeySchema  "HASH" }}
    {{- $dynamoDBType := dynamoDBTypeForAttribute $xdbConfig $attributeName }}
    {{- $attrGoType := goTypeForAttribute $xdbConfig $attributeName }}
    {{- if eq $dynamoDBType "S" }}
    {{- if eq $attrGoType "strfmt.DateTime" }}
      if input.{{ pascalize $attributeName }} == "" {
    {{- else if eq $attrGoType "strfmt.Date" }}
      if dateToDynamoTimeString(input.{{ pascalize $attributeName }}) == "" {
    {{- else }}
      if input.{{ pascalize $attributeName }} == "" {
    {{- end }}
        return fmt.Errorf("Hash key input.{{ pascalize $attributeName }} cannot be empty")
      }
    {{- end }}
  {{- end }}
  queryInput := &dynamodb.QueryInput{
    TableName: aws.String(t.TableName),
    ExpressionAttributeNames: map[string]string{
      "#{{ upper $hashKey.AttributeName }}": "{{ $hashKey.AttributeName }}",
    },
    ExpressionAttributeValues: map[string]types.AttributeValue{
      ":{{ camelize $hashKey.AttributeName }}": &types.AttributeValueMemberS{
                          {{- $dynamoDBType := dynamoDBTypeForAttribute $xdbConfig $hashKey.AttributeName }}
                          {{- if eq $dynamoDBType "S" }}
                            {{- if isComposite $xdbConfig $hashKey.AttributeName }}
                              Value: {{ compositeValue $xdbConfig $hashKey.AttributeName "input" }},
                            {{- else if attributeIsEnum $xdbConfig $hashKey.AttributeName }}
                              Value: string(input.{{ pascalize $hashKey.AttributeName }}),
                            {{- else }}
                              Value: input.{{ pascalize $hashKey.AttributeName }},
                            {{- end }}
                          {{- else if eq $dynamoDBType "N" }}
        N: aws.String(fmt.Sprintf("%d", input.{{ pascalize $hashKey.AttributeName }})),
                          {{- end }}
      },
    },
    ScanIndexForward: aws.Bool(!input.Descending),
    ConsistentRead:   aws.Bool(!input.DisableConsistentRead),
  }
  if input.Limit != nil {
    queryInput.Limit = aws.Int32(int32(*input.Limit))
  }
  {{- if gt $lenRangeKeyAttributes 1 }}
  if input.StartingAt == nil {
        {{- else }}
  if input.{{ pascalize $rangeKey.AttributeName }}StartingAt == nil {
        {{- end }}
    queryInput.KeyConditionExpression = aws.String("#{{ upper $hashKey.AttributeName }} = :{{ camelize $hashKey.AttributeName }}")
  } else {
    queryInput.ExpressionAttributeNames["#{{ upper $rangeKey.AttributeName }}"] = "{{ $rangeKey.AttributeName }}"
    {{- $valueKey := printf ":%s" (camelize $rangeKey.AttributeName) }}
      {{- if gt $lenRangeKeyAttributes 1 }}
      queryInput.ExpressionAttributeValues["{{ $valueKey }}"] = &types.AttributeValueMemberS{
        Value: {{ compositeValue $xdbConfig $rangeKey.AttributeName "input.StartingAt" }},
      }
      {{- else }}
        {{- $attrGoType := goTypeForAttribute $xdbConfig $rangeKey.AttributeName }}
        {{- $attrDynamoDBType := dynamoDBTypeForAttribute $xdbConfig $rangeKey.AttributeName }}
        {{- if eq $attrDynamoDBType "S" }}
          {{- if eq $attrGoType "strfmt.DateTime" }}
      queryInput.ExpressionAttributeValues["{{ $valueKey }}"] = &types.AttributeValueMemberS{
        Value: datetimeToDynamoTimeString(*input.{{ pascalize $rangeKey.AttributeName }}StartingAt),
      }
          {{- else if eq $attrGoType "strfmt.Date" }}
      queryInput.ExpressionAttributeValues["{{ $valueKey }}"] = &types.AttributeValueMemberS{
        Value: dateToDynamoTimeString(*input.{{ pascalize $rangeKey.AttributeName }}StartingAt),
      }
          {{- else }}
      queryInput.ExpressionAttributeValues["{{ $valueKey }}"] = &types.AttributeValueMemberS{
        Value: string(*input.{{ pascalize $rangeKey.AttributeName }}StartingAt),
      }
          {{- end }}
        {{- else if eq $attrDynamoDBType "N" }}
      queryInput.ExpressionAttributeValues["{{ $valueKey }}"] = &types.AttributeValueMemberN{
        Value: fmt.Sprintf("%d", *input.{{ pascalize $rangeKey.AttributeName }}StartingAt),
      }
        {{- else if eq $attrDynamoDBType "B" }}
      queryInput.ExpressionAttributeValues["{{ $valueKey }}"] = &types.AttributeValueMemberB{
        Value: input.{{ pascalize $rangeKey.AttributeName }}StartingAt,
      }
        {{- end }}
      {{- end }}

    if input.Descending {
      queryInput.KeyConditionExpression = aws.String("#{{ upper $hashKey.AttributeName }} = :{{ camelize $hashKey.AttributeName }} AND #{{ upper $rangeKey.AttributeName }} <= :{{ camelize $rangeKey.AttributeName }}")
    } else {
      queryInput.KeyConditionExpression = aws.String("#{{ upper $hashKey.AttributeName }} = :{{ camelize $hashKey.AttributeName }} AND #{{ upper $rangeKey.AttributeName }} >= :{{ camelize $rangeKey.AttributeName }}")
    }
  }
  if input.StartingAfter != nil {
    queryInput.ExclusiveStartKey = map[string]types.AttributeValue{
            "{{ $rangeKey.AttributeName }}":
      {{- if gt $lenRangeKeyAttributes 1 }}
        &types.AttributeValueMemberS{
          Value: {{ compositeValuePage $xdbConfig $rangeKey.AttributeName "input.StartingAfter" }},
        },
      {{- else }}
        {{- $attrGoType := goTypeForAttribute $xdbConfig $rangeKey.AttributeName }}
        {{- $attrDynamoDBType := dynamoDBTypeForAttribute $xdbConfig $rangeKey.AttributeName }}
        {{- if eq $attrDynamoDBType "S" }}
          {{- if eq $attrGoType "strfmt.DateTime" }}
            {{- if attributeIsPointer $xdbConfig $rangeKey.AttributeName }}
        &types.AttributeValueMemberS{
          Value: datetimePtrToDynamoTimeString(input.StartingAfter.{{ pascalize $rangeKey.AttributeName }}),
        },
            {{- else }}
        &types.AttributeValueMemberS{
          Value: datetimeToDynamoTimeString(input.StartingAfter.{{ pascalize $rangeKey.AttributeName }}),
        },
            {{- end }}
          {{- else if eq $attrGoType "strfmt.Date" }}
            {{- if attributeIsPointer $xdbConfig $rangeKey.AttributeName }}
        &types.AttributeValueMemberS{
          Value: datePtrToDynamoTimeString(input.StartingAfter.{{ pascalize $rangeKey.AttributeName }}),
        },
            {{- else }}
        &types.AttributeValueMemberS{
          Value: dateToDynamoTimeString(input.StartingAfter.{{ pascalize $rangeKey.AttributeName }}),
        },
            {{- end }}
          {{- else }}
        &types.AttributeValueMemberS{
          Value: string({{ if attributeIsPointer $xdbConfig $rangeKey.AttributeName }}*{{ end }}input.StartingAfter.{{ pascalize $rangeKey.AttributeName }}),
        },
          {{- end }}
        {{- else if eq $attrDynamoDBType "N" }}
        &types.AttributeValueMemberN{
          Value: fmt.Sprintf("%d", input.StartingAfter.{{ pascalize $rangeKey.AttributeName }}),
        },
        {{- else if eq $attrDynamoDBType "B" }}
        &types.AttributeValueMemberB{
          Value: input.StartingAfter.{{ pascalize $rangeKey.AttributeName }},
        },
        {{- end }}
      {{- end }}

      "{{ $hashKey.AttributeName }}": &types.AttributeValueMemberS{
        {{- if gt $lenHashKeyAttributes 1 }}
          Value: {{ compositeValuePage $xdbConfig $hashKey.AttributeName "input.StartingAfter" }},
        {{- else }}
              {{- $attrGoType := goTypeForAttribute $xdbConfig $hashKey.AttributeName }}
              {{- $attrDynamoDBType := dynamoDBTypeForAttribute $xdbConfig $hashKey.AttributeName }}
        {{- if eq $attrDynamoDBType "S" }}
          {{- if eq $attrGoType "strfmt.DateTime" }}
            {{- if attributeIsPointer $xdbConfig $hashKey.AttributeName }}
              Value: datetimePtrToDynamoTimeString(input.StartingAfter.{{ pascalize $hashKey.AttributeName }}),
            {{- else }}
              Value: datetimeToDynamoTimeString(input.StartingAfter.{{ pascalize $hashKey.AttributeName }}),
            {{- end}}
          {{- else if eq $attrGoType "strfmt.Date" }}
            {{- if attributeIsPointer $xdbConfig $hashKey.AttributeName }}
              Value: datePtrToDynamoTimeString(input.StartingAfter.{{ pascalize $hashKey.AttributeName }}),
            {{- else }}
              Value: dateToDynamoTimeString(input.StartingAfter.{{ pascalize $hashKey.AttributeName }}),
            {{- end}}
          {{- else if attributeIsEnum $xdbConfig $hashKey.AttributeName }}
            Value: string({{if attributeIsPointer $xdbConfig $hashKey.AttributeName }}*{{end}}input.StartingAfter.{{ pascalize $hashKey.AttributeName }}),
          {{- else }}
            Value: {{if attributeIsPointer $xdbConfig $hashKey.AttributeName }}*{{end}}input.StartingAfter.{{ pascalize $hashKey.AttributeName }},
          {{- end }}
        {{- else if eq $attrDynamoDBType "N" }}
      N: aws.String(fmt.Sprintf("%d", *input.StartingAfter.{{ pascalize $hashKey.AttributeName }})),
        {{- end }}
      {{- end }}
      },
    }
  }

  {{- if gt $lenNonIndexAttributes 0 }}
    if len(input.FilterValues) > 0 && input.FilterExpression != "" {
      t.get{{ $modelName }}sBy{{ $computedIndexName }}ParseFilters(queryInput, input)
      queryInput.FilterExpression = aws.String(input.FilterExpression) 
    }
  {{- end }}

  totalRecordsProcessed := int64(0)
  var pageFnErr error
  pageFn := func(queryOutput *dynamodb.QueryOutput, lastPage bool) bool {
    if len(queryOutput.Items) == 0 {
      return false
    }
    items, err := decode{{ $modelName }}s(queryOutput.Items)
    if err != nil {
      pageFnErr = err
      return false
    }
    hasMore := true
    for i := range items {
      if lastPage == true {
        hasMore = i < len(items)-1
      }
      if !fn(&items[i], !hasMore) {
        return false
      }
      totalRecordsProcessed++
      // if the Limit of records have been passed to fn, don't pass anymore records.
      if input.Limit != nil && totalRecordsProcessed == *input.Limit {
        return false
      }
    }
    return true
  }

  paginator := dynamodb.NewQueryPaginator(t.DynamoDBAPI, queryInput)
  for paginator.HasMorePages() {
    output, err := paginator.NextPage(ctx)
    if err != nil {
      var resourceNotFoundErr *types.ResourceNotFoundException
      if errors.As(err, &resourceNotFoundErr) {
        return fmt.Errorf("table or index not found: %s", t.TableName)
      }
      return err
    }
    if !pageFn(output, !paginator.HasMorePages()) {
      break
    }
  }

  if pageFnErr != nil {
    return pageFnErr
  }

  return nil
}
{{- end }}

func (t {{ $modelName }}Table) delete{{ $modelName }}(ctx context.Context,
  {{- range $_, $attributeName := $pkModelAttributeNames }}
  {{- varname $attributeName }} {{ goTypeForAttribute $xdbConfig $attributeName }},
  {{- end -}}
) error {
  
	key, err := attributevalue.MarshalMap(ddb{{ $modelName }}PrimaryKey{
		{{- range $_, $pk := $xdbConfig.DynamoDB.KeySchema }}
		{{ pascalize $pk.AttributeName }}: {{ if isComposite $xdbConfig $pk.AttributeName }}{{ compositeValue $xdbConfig $pk.AttributeName "" }}{{ else }}{{ varname $pk.AttributeName }}{{ end }},
		{{- end }}
	})
	if err != nil {
		return err
	}
	_, err = t.DynamoDBAPI.DeleteItem(ctx, &dynamodb.DeleteItemInput{
		Key:       key,
		TableName: aws.String(t.TableName),
	})
	{{- if $xdbConfig.AllowOverwrites }}
	if err != nil {
		return err
	}
	{{- else }}
	if err != nil {
		var resourceNotFoundErr *types.ResourceNotFoundException
		if errors.As(err, &resourceNotFoundErr) {
			return fmt.Errorf("table or index not found: %s", t.TableName)
		}
		return err
	}
	{{- end }}

	return nil
}

{{ range $gsi := $xdbConfig.DynamoDB.GlobalSecondaryIndexes }}
{{- $computedIndexName := indexName $gsi.KeySchema }}
{{- if indexHasRangeKey $gsi.KeySchema }}
{{- $hashKey := index $gsi.KeySchema 0 }}
{{- $rangeKey := index $gsi.KeySchema 1 }}
{{- $rangeKeyAttributes := modelAttributeNamesForKeyType $xdbConfig $gsi.KeySchema "RANGE" }}
{{- $lenRangeKeyAttributes := len $rangeKeyAttributes }}
{{- $hashKeyAttributes := modelAttributeNamesForKeyType $xdbConfig $gsi.KeySchema "HASH" }}
{{- $lenHashKeyAttributes := len $hashKeyAttributes }}
{{- $primaryIndexName := indexName $xdbConfig.DynamoDB.KeySchema }}
{{- $primaryHashKey := index $xdbConfig.DynamoDB.KeySchema 0 }}
{{- $primaryHashKeyAttributes := modelAttributeNamesForKeyType $xdbConfig $xdbConfig.DynamoDB.KeySchema "HASH" }}
{{- $lenPrimaryHashKeyAttributes := len $primaryHashKeyAttributes }}
func (t {{ $modelName}}Table) get{{ $modelName }}sBy{{ $computedIndexName }}(ctx context.Context, input db.Get{{ $modelName }}sBy{{ $computedIndexName }}Input, fn func(m *models.{{ $modelName }}, last{{ $modelName }} bool) bool) error {
  {{- if gt $lenRangeKeyAttributes 1 }}
    if input.StartingAt != nil && input.StartingAfter != nil {
      return fmt.Errorf("Can specify only one of input.StartingAt or input.StartingAfter")
    }
  {{- else }}
    if input.{{ pascalize $rangeKey.AttributeName }}StartingAt != nil && input.StartingAfter != nil {
      return fmt.Errorf("Can specify only one of input.{{ pascalize $rangeKey.AttributeName }}StartingAt or input.StartingAfter")
    }
  {{- end }}
  {{- range $attributeName := modelAttributeNamesForKeyType $xdbConfig $gsi.KeySchema  "HASH" }}
    {{- $dynamoDBType := dynamoDBTypeForAttribute $xdbConfig $attributeName }}
    {{- $attrGoType := goTypeForAttribute $xdbConfig $attributeName }}
    {{- if eq $dynamoDBType "S" }}
    {{- if eq $attrGoType "strfmt.DateTime" }}
      if datetimeToDynamoTimeString(input.{{ pascalize $attributeName }}) == "" {
    {{- else if eq $attrGoType "strfmt.Date" }}
      if dateToDynamoTimeString(input.{{ pascalize $attributeName }}) == "" {
    {{- else }}
      if input.{{ pascalize $attributeName }} == "" {
    {{- end }}
        return fmt.Errorf("Hash key input.{{ pascalize $attributeName }} cannot be empty")
      }
    {{- end }}
  {{- end }}
  queryInput := &dynamodb.QueryInput{
    TableName: aws.String(t.TableName),
    IndexName: aws.String("{{ $gsi.IndexName }}"),
    ExpressionAttributeNames: map[string]string{
      "#{{ upper $hashKey.AttributeName }}": "{{ $hashKey.AttributeName }}",
    },
    ExpressionAttributeValues: map[string]types.AttributeValue{
    {{- $dynamoDBType := dynamoDBTypeForAttribute $xdbConfig $hashKey.AttributeName }}
    {{- if eq $dynamoDBType "S" }}
      ":{{ camelize $hashKey.AttributeName }}": &types.AttributeValueMemberS{                          
          {{- $attrGoType := goTypeForAttribute $xdbConfig $hashKey.AttributeName }}
          {{- if isComposite $xdbConfig $hashKey.AttributeName }}
            Value: {{ compositeValue $xdbConfig $hashKey.AttributeName "input" }},
          {{- else if eq $attrGoType "strfmt.DateTime" }}
            Value: datetimeToDynamoTimeString(input.{{ pascalize $hashKey.AttributeName }}),
          {{- else if eq $attrGoType "strfmt.Date" }}
            Value: dateToDynamoTimeString(input.{{ pascalize $hashKey.AttributeName }}),
          {{- else if attributeIsEnum $xdbConfig $hashKey.AttributeName }}
            Value: string(input.{{ pascalize $hashKey.AttributeName }}),
          {{- else }}
            Value: input.{{ pascalize $hashKey.AttributeName }},
          {{- end }}
    {{- else if eq $dynamoDBType "N" }}
      ":{{ camelize $hashKey.AttributeName }}": &types.AttributeValueMemberN{
        Value: fmt.Sprintf("%d", input.{{ pascalize $hashKey.AttributeName }}),
    {{- end }}

      },
    },
    ScanIndexForward: aws.Bool(!input.Descending),
    ConsistentRead:   aws.Bool(false),
  }
  if input.Limit != nil {
     queryInput.Limit = aws.Int32(int32(*input.Limit))
  }
  {{- if gt $lenRangeKeyAttributes 1 }}
  if input.StartingAt == nil {
        {{- else }}
  if input.{{ pascalize $rangeKey.AttributeName }}StartingAt == nil {
        {{- end }}
    queryInput.KeyConditionExpression = aws.String("#{{ upper $hashKey.AttributeName }} = :{{ camelize $hashKey.AttributeName }}")
  } else {
    queryInput.ExpressionAttributeNames["#{{ upper $rangeKey.AttributeName }}"] = "{{ $rangeKey.AttributeName }}"
    {{- if gt $lenRangeKeyAttributes 1 }}
      queryInput.ExpressionAttributeValues[":{{ camelize $rangeKey.AttributeName }}"] = &types.AttributeValueMemberS{
        Value: {{ compositeValue $xdbConfig $rangeKey.AttributeName "input.StartingAt" }},
      }
    {{- else }}
    {{- $attrGoType := goTypeForAttribute $xdbConfig $rangeKey.AttributeName }}
    {{- $attrDynamoDBType := dynamoDBTypeForAttribute $xdbConfig $rangeKey.AttributeName }}
    {{- if eq $attrDynamoDBType "S" }}
      queryInput.ExpressionAttributeValues[":{{ camelize $rangeKey.AttributeName }}"] = &types.AttributeValueMemberS{
          {{- if eq $attrGoType "strfmt.DateTime" }}
            Value: datetimeToDynamoTimeString(*input.{{ pascalize $rangeKey.AttributeName }}StartingAt),
          {{- else if eq $attrGoType "strfmt.Date" }}
            Value: dateToDynamoTimeString(*input.{{ pascalize $rangeKey.AttributeName }}StartingAt),
          {{- else }}
            Value: string(*input.{{ pascalize $rangeKey.AttributeName }}StartingAt),
          {{- end }}
      }
    {{- else if eq $attrDynamoDBType "N" }}
      queryInput.ExpressionAttributeValues[":{{ camelize $rangeKey.AttributeName }}"] = &types.AttributeValueMemberN{
        Value: fmt.Sprintf("%d", *input.{{ pascalize $rangeKey.AttributeName }}StartingAt),
      }
    {{- else if eq $attrDynamoDBType "B" }}
      queryInput.ExpressionAttributeValues[":{{ camelize $rangeKey.AttributeName }}"] = &types.AttributeValueMemberB{
        Value: input.{{ pascalize $rangeKey.AttributeName }}StartingAt,
      }
    {{- end }}
    {{- end }}

    if input.Descending {
      queryInput.KeyConditionExpression = aws.String("#{{ upper $hashKey.AttributeName }} = :{{ camelize $hashKey.AttributeName }} AND #{{ upper $rangeKey.AttributeName }} <= :{{ camelize $rangeKey.AttributeName }}")
    } else {
      queryInput.KeyConditionExpression = aws.String("#{{ upper $hashKey.AttributeName }} = :{{ camelize $hashKey.AttributeName }} AND #{{ upper $rangeKey.AttributeName }} >= :{{ camelize $rangeKey.AttributeName }}")
    }
  }
  if input.StartingAfter != nil {
    queryInput.ExclusiveStartKey = map[string]types.AttributeValue{
      {{- if gt $lenRangeKeyAttributes 1 }}
      "{{ $rangeKey.AttributeName }}": &types.AttributeValueMemberS{
        Value: {{ compositeValuePage $xdbConfig $rangeKey.AttributeName "input.StartingAfter" }},
      {{- else }}
          {{- $attrGoType := goTypeForAttribute $xdbConfig $rangeKey.AttributeName }}
          {{- $attrDynamoDBType := dynamoDBTypeForAttribute $xdbConfig $rangeKey.AttributeName }}
        {{- if eq $attrDynamoDBType "S" }}
        "{{ $rangeKey.AttributeName }}": &types.AttributeValueMemberS{
          {{- if eq $attrGoType "strfmt.DateTime" }}
          {{- if attributeIsPointer $xdbConfig $rangeKey.AttributeName }}
            Value: datetimePtrToDynamoTimeString(input.StartingAfter.{{ pascalize $rangeKey.AttributeName }}),
          {{- else }}
            Value: datetimeToDynamoTimeString(input.StartingAfter.{{ pascalize $rangeKey.AttributeName }}),
          {{- end}}
          {{- else if eq $attrGoType "strfmt.Date" }}
          {{- if attributeIsPointer $xdbConfig $rangeKey.AttributeName }}
            Value: datePtrToDynamoTimeString(input.StartingAfter.{{ pascalize $rangeKey.AttributeName }}),
          {{- else }}
            Value: dateToDynamoTimeString(input.StartingAfter.{{ pascalize $rangeKey.AttributeName }}),
          {{- end}}
          {{- else }}
            Value: string({{if attributeIsPointer $xdbConfig $rangeKey.AttributeName }}*{{end}}input.StartingAfter.{{ pascalize $rangeKey.AttributeName }}),
          {{- end }}
        {{- else if eq $attrDynamoDBType "N" }}
        "{{ $rangeKey.AttributeName }}": &types.AttributeValueMemberN{
          Value: fmt.Sprintf("%d", input.StartingAfter.{{ pascalize $rangeKey.AttributeName }}),
        {{- else if eq $attrDynamoDBType "B" }}
        "{{ $rangeKey.AttributeName }}": &types.AttributeValueMemberB{
          Value: input.StartingAfter.{{ pascalize $rangeKey.AttributeName }},
        {{- end }}
      {{- end }}
      },
      "{{ $hashKey.AttributeName }}": &types.AttributeValueMemberS{
        {{- if gt $lenHashKeyAttributes 1 }}
          Value: {{ compositeValuePage $xdbConfig $hashKey.AttributeName "input.StartingAfter" }},
        {{- else }}
              {{- $attrGoType := goTypeForAttribute $xdbConfig $hashKey.AttributeName }}
              {{- $attrDynamoDBType := dynamoDBTypeForAttribute $xdbConfig $hashKey.AttributeName }}
        {{- if eq $attrDynamoDBType "S" }}
          {{- if eq $attrGoType "strfmt.DateTime" }}
            {{- if attributeIsPointer $xdbConfig $hashKey.AttributeName }}
              Value: datetimePtrToDynamoTimeString(input.StartingAfter.{{ pascalize $hashKey.AttributeName }}),
            {{- else }}
              Value: datetimeToDynamoTimeString(input.StartingAfter.{{ pascalize $hashKey.AttributeName }}),
            {{- end}}
          {{- else if eq $attrGoType "strfmt.Date" }}
            {{- if attributeIsPointer $xdbConfig $hashKey.AttributeName }}
              Value: datePtrToDynamoTimeString(input.StartingAfter.{{ pascalize $hashKey.AttributeName }}),
            {{- else }}
              Value: dateToDynamoTimeString(input.StartingAfter.{{ pascalize $hashKey.AttributeName }}),
            {{- end}}
          {{- else if attributeIsEnum $xdbConfig $hashKey.AttributeName }}
            Value: string({{if attributeIsPointer $xdbConfig $hashKey.AttributeName }}*{{end}}input.StartingAfter.{{ pascalize $hashKey.AttributeName }}),
          {{- else }}
            Value: {{if attributeIsPointer $xdbConfig $hashKey.AttributeName }}*{{end}}input.StartingAfter.{{ pascalize $hashKey.AttributeName }},
          {{- end }}
        {{- else if eq $attrDynamoDBType "N" }}
      N: aws.String(fmt.Sprintf("%d", *input.StartingAfter.{{ pascalize $hashKey.AttributeName }})),
        {{- end }}
      {{- end }}
      },
      {{- if indexHasRangeKey $xdbConfig.DynamoDB.KeySchema }}
        {{- $primaryRangeKey := index $xdbConfig.DynamoDB.KeySchema 1 }}
        {{- $primaryRangeKeyAttributes := modelAttributeNamesForKeyType $xdbConfig $xdbConfig.DynamoDB.KeySchema "RANGE" }}
        {{- $lenPrimaryRangeKeyAttributes := len $primaryRangeKeyAttributes }}
        {{- $rangeIsHash := stringsEqual $primaryRangeKey.AttributeName $hashKey.AttributeName }}
        {{- $rangeIsRange := stringsEqual $primaryRangeKey.AttributeName $rangeKey.AttributeName }}
        {{- if not $rangeIsHash }}
        {{- if not $rangeIsRange }}
        {{- if gt $lenPrimaryRangeKeyAttributes 1 }}
        "{{ $primaryRangeKey.AttributeName }}": &types.AttributeValueMemberS{
          Value: {{ compositeValuePage $xdbConfig $primaryRangeKey.AttributeName "input.StartingAfter" }},
        {{- else }}
            {{- $attrGoType := goTypeForAttribute $xdbConfig $primaryRangeKey.AttributeName }}
            {{- $attrDynamoDBType := dynamoDBTypeForAttribute $xdbConfig $primaryRangeKey.AttributeName }}
          {{- if eq $attrDynamoDBType "S" }}
          "{{ $primaryRangeKey.AttributeName }}": &types.AttributeValueMemberS{
            {{- if eq $attrGoType "strfmt.DateTime" }}
              {{- if attributeIsPointer $xdbConfig $primaryRangeKey.AttributeName }}
                Value: datetimePtrToDynamoTimeString(input.StartingAfter.{{ pascalize $primaryRangeKey.AttributeName }}),
              {{- else }}
                Value: datetimeToDynamoTimeString(input.StartingAfter.{{ pascalize $primaryRangeKey.AttributeName }}),
              {{- end}}
            {{- else if eq $attrGoType "strfmt.Date" }}
              {{- if attributeIsPointer $xdbConfig $primaryRangeKey.AttributeName }}
                Value: datePtrToDynamoTimeString(input.StartingAfter.{{ pascalize $primaryRangeKey.AttributeName }}),
              {{- else }}
                Value: dateToDynamoTimeString(input.StartingAfter.{{ pascalize $primaryRangeKey.AttributeName }}),
              {{- end}}
            {{- else }}
              Value: {{if attributeIsPointer $xdbConfig $primaryRangeKey.AttributeName }}*{{end}}input.StartingAfter.{{ pascalize $primaryRangeKey.AttributeName }},
            {{- end }}
          {{- else if eq $attrDynamoDBType "N" }}
          "{{ $primaryRangeKey.AttributeName }}": &types.AttributeValueMemberN{
            Value: fmt.Sprintf("%d", input.StartingAfter.{{ pascalize $primaryRangeKey.AttributeName }}),
          {{- end }}
        {{- end }}
      },
      {{- end }}
      {{- end }}
      {{- end}}

      {{- $hashIsHash := stringsEqual $primaryHashKey.AttributeName $rangeKey.AttributeName }}
      {{- $hashIsRange := stringsEqual $primaryHashKey.AttributeName $hashKey.AttributeName }}
      {{- if not $hashIsHash }}
      {{- if not $hashIsRange }}
      "{{ $primaryHashKey.AttributeName }}": &types.AttributeValueMemberS{
        {{- if gt $lenPrimaryHashKeyAttributes 1 }}
          Value: {{ compositeValuePage $xdbConfig $primaryHashKey.AttributeName "input.StartingAfter" }},
        {{- else }}
          {{- $attrGoType := goTypeForAttribute $xdbConfig $primaryHashKey.AttributeName }}
          {{- $attrDynamoDBType := dynamoDBTypeForAttribute $xdbConfig $primaryHashKey.AttributeName }}
          {{- if eq $attrDynamoDBType "S" }}
            {{- if eq $attrGoType "strfmt.DateTime" }}
              {{- if attributeIsPointer $xdbConfig $primaryHashKey.AttributeName }}
                Value: datetimePtrToDynamoTimeString(input.StartingAfter.{{ pascalize $primaryHashKey.AttributeName }}),
              {{- else }}
                Value: datetimeToDynamoTimeString(input.StartingAfter.{{ pascalize $primaryHashKey.AttributeName }}),
              {{- end }}
            {{- else if eq $attrGoType "strfmt.Date" }}
              {{- if attributeIsPointer $xdbConfig $primaryHashKey.AttributeName }}
                Value: datePtrToDynamoTimeString(input.StartingAfter.{{ pascalize $primaryHashKey.AttributeName }}),
              {{- else }}
                Value: dateToDynamoTimeString(input.StartingAfter.{{ pascalize $primaryHashKey.AttributeName }}),
              {{- end }}
            {{- else }}
              Value: {{ if attributeIsPointer $xdbConfig $primaryHashKey.AttributeName }}*{{ end }}input.StartingAfter.{{ pascalize $primaryHashKey.AttributeName }},
            {{- end }}
          {{- else if eq $attrDynamoDBType "N" }}
            {{- /* Construct number attribute */}}
            {{- $valueStr := printf "fmt.Sprintf(\"%%d\", *input.StartingAfter.%s)" (pascalize $primaryHashKey.AttributeName) }}
      "{{ $primaryHashKey.AttributeName }}": &types.AttributeValueMemberN{
        Value: {{ $valueStr }},
      },
          {{- end }}
        {{- end }}
      },
      {{- end }}
      {{- end }}
    }
  }

  totalRecordsProcessed := int64(0)
  var pageFnErr error
  pageFn := func(queryOutput *dynamodb.QueryOutput, lastPage bool) bool {
    if len(queryOutput.Items) == 0 {
      return false
    }
    items, err := decode{{ $modelName }}s(queryOutput.Items)
    if err != nil {
      pageFnErr = err
      return false
    }
    hasMore := true
    for i := range items {
      if lastPage == true {
        hasMore = i < len(items)-1
      }
      if !fn(&items[i], !hasMore) {
        return false
      }
      totalRecordsProcessed++
      // if the Limit of records have been passed to fn, don't pass anymore records.
      if input.Limit != nil && totalRecordsProcessed == *input.Limit {
        return false
      }
    }
    return true
  }

  paginator := dynamodb.NewQueryPaginator(t.DynamoDBAPI, queryInput)
  for paginator.HasMorePages() {
    output, err := paginator.NextPage(ctx)
    if err != nil {
      var resourceNotFoundErr *types.ResourceNotFoundException
      if errors.As(err, &resourceNotFoundErr) {
        return fmt.Errorf("table or index not found: %s", t.TableName)
      }
      return err
    }
    if !pageFn(output, !paginator.HasMorePages()) {
      break
    }
  }

  if pageFnErr != nil {
    return pageFnErr
  }

  return nil
}
{{- else }}
{{- $gsiModelAttributeNames := modelAttributeNamesForIndex $xdbConfig $gsi.KeySchema }}
{{- $ks := index $gsi.KeySchema 0 }}
{{- $ksAttrDynamoDBType := dynamoDBTypeForAttribute $xdbConfig $ks.AttributeName }}
func (t {{ $modelName}}Table) get{{ $modelName }}By{{ $computedIndexName }}(ctx context.Context,
  {{- range $_, $attributeName := $gsiModelAttributeNames }}
  {{- varname $attributeName }} {{ goTypeForAttribute $xdbConfig $attributeName }},
  {{- end -}}
    ) (*models.{{ $modelName }}, error) {
  queryInput := &dynamodb.QueryInput{
    TableName: aws.String(t.TableName),
    IndexName: aws.String("{{ $gsi.IndexName }}"),
    ExpressionAttributeNames: map[string]string{
      "#{{ upper $ks.AttributeName }}": "{{ $ks.AttributeName }}",
    },
    ExpressionAttributeValues: map[string]types.AttributeValue{
    {{- if eq $ksAttrDynamoDBType "S" }}
      ":{{ camelize $ks.AttributeName }}": &types.AttributeValueMemberS{                         
        Value: {{ if isComposite $xdbConfig $ks.AttributeName }}{{ compositeValue $xdbConfig $ks.AttributeName "" }}{{ else }}{{ varname $ks.AttributeName }}{{ end }},
    {{- else if eq $ksAttrDynamoDBType "N" }}  
      ":{{ camelize $ks.AttributeName }}": &types.AttributeValueMemberN{                    
        Value: fmt.Sprintf("%d", {{ varname $ks.AttributeName }}),
    {{- end }}
      },
    },
    KeyConditionExpression: aws.String("#{{ upper $ks.AttributeName }} = :{{ camelize $ks.AttributeName }}"),
  }

	queryOutput, err := t.DynamoDBAPI.Query(ctx, queryInput)
	{{- if $xdbConfig.AllowOverwrites }}
	if err != nil {
		return nil, err
	}
	{{- else }}
	if err != nil {
		var resourceNotFoundErr *types.ResourceNotFoundException
		if errors.As(err, &resourceNotFoundErr) {
			return nil, fmt.Errorf("table or index not found: %s", t.TableName)
		}
		return nil, err
	}
	{{- end }}
	if len(queryOutput.Items) == 0 {
		return nil, db.Err{{ $modelName }}By{{ $computedIndexName }}NotFound{
    {{- range $_, $attributeName := $gsiModelAttributeNames }}
    {{ pascalize $attributeName }}: {{ varname $attributeName }},
    {{- end }}
    }
  }

  var {{ camelize $modelName }} models.{{ $modelName }}
  if err := decode{{ $modelName }}(queryOutput.Items[0], &{{ camelize $modelName }}); err != nil {
    return nil, err
  }
  return &{{ camelize $modelName }}, nil
}
{{- end }}

{{- if indexAllowsScans $xdbConfig $gsi.IndexName }}
func (t {{ $modelName }}Table) scan{{ $modelName }}sBy{{ $computedIndexName }}(ctx context.Context, input db.Scan{{ $modelName }}sBy{{ $computedIndexName }}Input, fn func(m *models.{{ $modelName }}, last{{ $modelName }} bool) bool) error {
  scanInput := &dynamodb.ScanInput{
    TableName:      aws.String(t.TableName),
    ConsistentRead: aws.Bool(!input.DisableConsistentRead),
  }
  if input.Limit != nil {
    scanInput.Limit = aws.Int32(int32(*input.Limit))
  }
  scanInput.IndexName = aws.String("{{ $gsi.IndexName }}")
  if input.StartingAfter != nil {
  {{- $primaryAndSecondaryKeySchemas := unionKeySchemas $xdbConfig.DynamoDB.KeySchema $gsi.KeySchema }}
  {{- if indexContainsNonCompositeAttribute $xdbConfig $primaryAndSecondaryKeySchemas }}
    exclusiveStartKey, err := attributevalue.MarshalMap(input.StartingAfter)
    if err != nil {
      return fmt.Errorf("error encoding exclusive start key for scan: %s", err.Error())
    }
  {{- end }}
    // must provide the fields constituting the index and the primary key
    // https://stackoverflow.com/questions/40988397/dynamodb-pagination-with-withexclusivestartkey-on-a-global-secondary-index
    scanInput.ExclusiveStartKey = map[string]types.AttributeValue{
                  {{- range $ks := $primaryAndSecondaryKeySchemas}}
                    {{- if isComposite $xdbConfig $ks.AttributeName }}
        "{{ $ks.AttributeName }}": &types.AttributeValueMemberS{
            Value: {{compositeValuePage $xdbConfig $ks.AttributeName "input.StartingAfter"}},
        },
                    {{- else }}
        "{{ $ks.AttributeName }}":    exclusiveStartKey["{{ $ks.AttributeName }}"],
                    {{- end }}
                  {{- end }}
    }
  }
  totalRecordsProcessed := int64(0)

  paginator := dynamodb.NewScanPaginator(t.DynamoDBAPI, scanInput)
  for paginator.HasMorePages() {
    out, err := paginator.NextPage(ctx)
    if err != nil {
      return fmt.Errorf("error getting next page: %s", err.Error())
    }

    items, err := decode{{ $modelName }}s(out.Items)
    if err != nil {
      return fmt.Errorf("error decoding items: %s", err.Error())
    }

    for i := range items {
      if input.Limiter != nil {
        if err := input.Limiter.Wait(ctx); err != nil {
          return err
        }
      }

      isLastModel := !paginator.HasMorePages() && i == len(items)-1
      if shouldContinue := fn(&items[i], isLastModel); !shouldContinue {
        return nil
      }

      totalRecordsProcessed++
      if input.Limit != nil && totalRecordsProcessed == *input.Limit {
        return nil
      }
    }
  }

  return nil
}
{{- end }}
{{- end }}

{{- if transactionsEnabled $xdbConfig }}
{{- range $transactWithSchemaName := $xdbConfig.EnableTransactions }}
{{- $transactWithModelName := pascalize $transactWithSchemaName }}
func (t {{ $modelName }}Table) transactSave{{ $modelName }}And{{ $transactWithModelName }}(ctx context.Context, m1 models.{{ $modelName }}, m1Conditions *expression.ConditionBuilder, m2 models.{{ $transactWithModelName }}, m2Conditions *expression.ConditionBuilder) error {
  data1, err := encode{{ $modelName }}(m1)
  if err != nil {
    return err
  }

  m1CondExpr, m1ExprVals, m1ExprNames, err := buildCondExpr(m1Conditions)
  if err != nil {
    return err
  }

  data2, err := encode{{ $transactWithModelName }}(m2)
  if err != nil {
    return err
  }

  m2CondExpr, m2ExprVals, m2ExprNames, err := buildCondExpr(m2Conditions)
  if err != nil {
    return err
  }

  // Convert map[string]*string to map[string]string for ExpressionAttributeNames
	toStringMap := func(in map[string]*string) map[string]string {
		if in == nil {
			return nil
		}
		out := make(map[string]string, len(in))
		for k, v := range in {
			if v != nil {
				out[k] = *v
			}
		}
		return out
	}

	input := &dynamodb.TransactWriteItemsInput{
		TransactItems: []types.TransactWriteItem{
			{
				Put: &types.Put{
          TableName: aws.String(t.TableName),
					Item:      data1,
					ConditionExpression:       m1CondExpr,
					ExpressionAttributeValues: m1ExprVals,
					ExpressionAttributeNames:  toStringMap(m1ExprNames),
				},
			},
			{
				Put: &types.Put{
    			TableName: aws.String(fmt.Sprintf("%s-{{ $transactWithModelName }}s", t.Prefix)),
					Item:      data2,
					ConditionExpression:       m2CondExpr,
					ExpressionAttributeValues: m2ExprVals,
					ExpressionAttributeNames:  toStringMap(m2ExprNames),
				},
			},
		},
	}  
  _, err = t.DynamoDBAPI.TransactWriteItems(ctx, input)

  return err
}
{{- end }}
{{ end }}

// encode{{ $modelName }} encodes a {{ $modelName }} as a DynamoDB map of attribute values.
func encode{{ $modelName }}(m models.{{ $modelName }}) (map[string]types.AttributeValue, error) {
{{- if not $hasCompositeAttrs }}
  // no composite attributes, marshal the model with the json tag
  val, err := attributevalue.MarshalMapWithOptions(m, func(o *attributevalue.EncoderOptions) {
    o.TagKey = "json"
  })
  if err != nil {
    return nil, err
  }
  return val, nil
{{- else }}
  // with composite attributes, marshal the model
  val, err := attributevalue.MarshalMapWithOptions(m, func(o *attributevalue.EncoderOptions) {
    o.TagKey = "json"
  })
  if err != nil {
    return nil, err
  }
        // make sure composite attributes don't contain separator characters
        {{- $strPropertiesInComposites := stringPropertiesInComposites $xdbConfig }}
        {{- range $_, $sep := sortedKeys $strPropertiesInComposites }}
        {{- range $compositeProp := index $strPropertiesInComposites $sep }}
  if strings.Contains({{ attributeToModelValue $xdbConfig $compositeProp "m." }}, "{{ $sep }}") {
    return nil, fmt.Errorf("{{ $compositeProp }} cannot contain '{{ $sep }}': %s", {{ attributeToModelValue $xdbConfig $compositeProp "m." }})
  }
        {{- end }}
        {{- end }}
  // add in composite attributes
        {{- if indexContainsCompositeAttribute $xdbConfig $xdbConfig.DynamoDB.KeySchema }}
  primaryKey, err := attributevalue.MarshalMap(ddb{{ $modelName }}PrimaryKey{
    {{- range $_, $pk := $xdbConfig.DynamoDB.KeySchema }}
    {{ pascalize $pk.AttributeName }}: {{ if isComposite $xdbConfig $pk.AttributeName }}{{ compositeValue $xdbConfig $pk.AttributeName "m" }}{{ else }}{{ attributeToModelValue $xdbConfig $pk.AttributeName "m." }}{{ end }},
                {{- end }}
  })
  if err != nil {
    return nil, err
  }
  for k, v := range primaryKey {
    val[k] = v
  }
        {{- end }}
        {{- range $gsi := $xdbConfig.DynamoDB.GlobalSecondaryIndexes }}
        {{- if indexContainsCompositeAttribute $xdbConfig $gsi.KeySchema }}
  {{ camelize $gsi.IndexName }}, err := attributevalue.MarshalMap(ddb{{ $modelName }}GSI{{ pascalize $gsi.IndexName }}{
    {{- range $_, $sk := $gsi.KeySchema }}
    {{ pascalize $sk.AttributeName }}: {{ if isComposite $xdbConfig $sk.AttributeName }}{{ compositeValue $xdbConfig $sk.AttributeName "m" }}{{ else }}{{ attributeToModelValue $xdbConfig $sk.AttributeName "m." }}{{ end }},
                {{- end }}
  })
  if err != nil {
    return nil, err
  }
  for k, v := range {{ camelize $gsi.IndexName }} {
    val[k] = v
  }
        {{- end }}
        {{- end }}
  return val, err
{{- end }}
}

// decode{{ $modelName }} translates a {{ $modelName }} stored in DynamoDB to a {{ $modelName }} struct.
func decode{{ $modelName }}(m map[string]types.AttributeValue, out *models.{{ $modelName }}) error {
  var ddb{{ $modelName }} ddb{{ $modelName }}
  if err := attributevalue.UnmarshalMapWithOptions(m, &ddb{{ $modelName }}, func(o *attributevalue.DecoderOptions) {
    o.TagKey = "json"
  }); err != nil {
    return err
  }
  *out = ddb{{ $modelName }}.{{ $modelName }}
        {{- if len $projectedIndexesWithCompositeAttributes }}
  // parse composite attributes from projected secondary indexes and fill
  // in model properties
        {{- range $projectedIndexWithCompositeAttributes := $projectedIndexesWithCompositeAttributes }}
        {{- range $ks := $projectedIndexWithCompositeAttributes }}
        {{- if isComposite $xdbConfig $ks.AttributeName }}
        {{- $ca := findCompositeAttribute $xdbConfig $ks.AttributeName }}
        if v, ok := m["{{ $ks.AttributeName }}"]; ok {
          if s, ok := v.(*types.AttributeValueMemberS); ok {
            parts := strings.Split(s.Value, "{{ $ca.Separator }}")
            if len(parts) != {{ len $ca.Properties }} {
              return fmt.Errorf("expected {{ len $ca.Properties }} parts: '%s'", s.Value)
            }
            {{- range $i, $prop := $ca.Properties }}
            out.{{ pascalize $prop }} = {{if attributeIsPointer $xdbConfig $prop }}&{{end}}parts[{{ $i }}]
            {{- end }}
          }
        }
        {{- end }}
        {{- end }}
        {{- end }}
        {{- end }}
  return nil
}

// decode{{ $modelName }}s translates a list of {{ $modelName }}s stored in DynamoDB to a slice of {{ $modelName }} structs.
func decode{{ $modelName }}s(ms []map[string]types.AttributeValue) ([]models.{{ $modelName }}, error) {
  {{ camelize $modelName }}s := make([]models.{{ $modelName }}, len(ms))
  for i, m := range ms {
    var {{ camelize $modelName }} models.{{ $modelName }}
    if err := decode{{ $modelName }}(m, &{{ camelize $modelName }}); err != nil {
      return nil, err
    }
    {{ camelize $modelName }}s[i] = {{ camelize $modelName }}
  }
  return {{ camelize $modelName }}s, nil
}