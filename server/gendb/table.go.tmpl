{{- $modelName := pascalize .XDBConfig.SchemaName }}
{{- $xdbConfig := .XDBConfig }}
package dynamodb

import (
	"context"
	"fmt"
	{{- if tableUsesDateTime $xdbConfig }}
	"time"
        {{- end }}

	"{{ .PackageName }}/models"
	"{{ .PackageName }}/server/db"
	"github.com/aws/aws-sdk-go/aws"
        {{- if not $xdbConfig.AllowOverwrites }}
	"github.com/aws/aws-sdk-go/aws/awserr"
        {{- end }}
	"github.com/aws/aws-sdk-go/service/dynamodb"
	"github.com/aws/aws-sdk-go/service/dynamodb/dynamodbattribute"
	"github.com/aws/aws-sdk-go/service/dynamodb/dynamodbiface"
	{{- if tableUsesDateTime $xdbConfig }}
	"github.com/go-openapi/strfmt"
        {{- end }}
)

// {{ $modelName }}Table represents the user-configurable properties of the {{ $modelName }} table.
type {{ $modelName }}Table struct {
	DynamoDBAPI        dynamodbiface.DynamoDBAPI
	Prefix             string
	TableName          string
	ReadCapacityUnits  int64
	WriteCapacityUnits int64
}

// ddb{{ $modelName }}PrimaryKey represents the primary key of a {{ $modelName }} in DynamoDB.
type ddb{{ $modelName }}PrimaryKey struct {
	{{- /* loop over primary key attributes and add them as fields in the struct */}}
	{{- range $_, $pk := $xdbConfig.DynamoDB.KeySchema }}
	{{ pascalize $pk.AttributeName }} {{ goTypeForAttribute $xdbConfig $pk.AttributeName }} `dynamodbav:"{{ $pk.AttributeName }}"`
	{{- end }}
}

{{ range $gsi := $xdbConfig.DynamoDB.GlobalSecondaryIndexes }}
// ddb{{$modelName}}GSI{{ pascalize $gsi.IndexName }} represents the {{ $gsi.IndexName }} GSI.
type ddb{{$modelName}}GSI{{ pascalize $gsi.IndexName }} struct {
	{{ range $ks := $gsi.KeySchema }}
	{{- pascalize $ks.AttributeName }} {{ goTypeForAttribute $xdbConfig $ks.AttributeName }} `dynamodbav:"{{ $ks.AttributeName }}"`
        {{ end }}
}
{{ end }}

// ddb{{ $modelName }} represents a {{ $modelName }} as stored in DynamoDB.
type ddb{{ $modelName }} struct {
	models.{{ $modelName }}
}

func (t {{ $modelName }}Table) name() string {
	if t.TableName != "" {
		return t.TableName
	}
	return fmt.Sprintf("%%s-{{ dasherize $modelName }}s", t.Prefix)
}

func (t {{ $modelName }}Table) create(ctx context.Context) error {
	if _, err := t.DynamoDBAPI.CreateTableWithContext(ctx, &dynamodb.CreateTableInput{
		AttributeDefinitions: []*dynamodb.AttributeDefinition{
                        {{- $attrs := attributeNames $xdbConfig.DynamoDB }}
                        {{- range $attr := $attrs }}
			{
				AttributeName: aws.String("{{- $attr }}"),
				AttributeType: aws.String("{{ dynamoDBTypeForAttribute $xdbConfig $attr }}"),
			},
                        {{- end }}
		},
		KeySchema: []*dynamodb.KeySchemaElement{
                        {{- range $_, $ks := $xdbConfig.DynamoDB.KeySchema }}
			{
				AttributeName: aws.String("{{- $ks.AttributeName }}"),
                                {{- if eq $ks.KeyType "HASH" }}
				KeyType:       aws.String(dynamodb.KeyTypeHash),
                                {{- else if eq $ks.KeyType "RANGE" }}
				KeyType:       aws.String(dynamodb.KeyTypeRange),
                                {{- end }}
			},
                        {{- end }}
		},
                {{- $lenGSIs := len $xdbConfig.DynamoDB.GlobalSecondaryIndexes }}
                {{- if gt $lenGSIs 0 }}
		GlobalSecondaryIndexes: []*dynamodb.GlobalSecondaryIndex{
                        {{- range $gsi := $xdbConfig.DynamoDB.GlobalSecondaryIndexes }}
			{
				IndexName: aws.String("{{ $gsi.IndexName }}"),
				Projection: &dynamodb.Projection{
					ProjectionType: aws.String("{{ $gsi.Projection.ProjectionType }}"),
				},
				KeySchema: []*dynamodb.KeySchemaElement{
                                        {{- range $_, $ks := $gsi.KeySchema }}
					{
                                        	AttributeName: aws.String("{{- $ks.AttributeName }}"),
                                        	{{- if eq $ks.KeyType "HASH" }}
						KeyType:       aws.String(dynamodb.KeyTypeHash),
                                        	{{- else if eq $ks.KeyType "RANGE" }}
						KeyType:       aws.String(dynamodb.KeyTypeRange),
                                        	{{- end }}
					},
                                        {{- end }}
				},
				ProvisionedThroughput: &dynamodb.ProvisionedThroughput{
					ReadCapacityUnits:  aws.Int64(t.ReadCapacityUnits),
					WriteCapacityUnits: aws.Int64(t.WriteCapacityUnits),
				},
			},
                        {{- end }}
		},
                {{- end }}
		ProvisionedThroughput: &dynamodb.ProvisionedThroughput{
			ReadCapacityUnits:  aws.Int64(t.ReadCapacityUnits),
			WriteCapacityUnits: aws.Int64(t.WriteCapacityUnits),
		},
		TableName: aws.String(t.name()),
	}); err != nil {
		return err
	}
	return nil
}

func (t {{ $modelName }}Table) save{{ $modelName }}(ctx context.Context, m models.{{ $modelName }}) error {
	data, err := encode{{ $modelName }}(m)
	if err != nil {
		return err
	}
        {{- if $xdbConfig.AllowOverwrites }}
	_, err = t.DynamoDBAPI.PutItemWithContext(ctx, &dynamodb.PutItemInput{
		TableName: aws.String(t.name()),
		Item:      data,
	})
	return err
        {{- else }}
	_, err = t.DynamoDBAPI.PutItemWithContext(ctx, &dynamodb.PutItemInput{
		TableName: aws.String(t.name()),
		Item:      data,
		ExpressionAttributeNames: map[string]*string{
			{{- range $_, $pk := $xdbConfig.DynamoDB.KeySchema }}
			"#{{ upper $pk.AttributeName }}": aws.String("{{ $pk.AttributeName }}"),
			{{- end }}
		},
		ConditionExpression: aws.String("
                	{{- range $i, $pk := $xdbConfig.DynamoDB.KeySchema -}}
                	{{- if ne $i 0 }} AND {{ end -}}
                	attribute_not_exists(#{{ upper $pk.AttributeName }})
                	{{- end -}}
                        "),
	})
	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			if awsErr.Code() == dynamodb.ErrCodeConditionalCheckFailedException {
				return db.Err{{ $modelName }}AlreadyExists{
					{{- range $_, $pk := $xdbConfig.DynamoDB.KeySchema }}
					{{ pascalize $pk.AttributeName }}: m.{{ pascalize $pk.AttributeName }},
					{{- end }}
				}
			}
		}
		return err
	}
	return nil
        {{- end }}
}

{{ $pkModelAttributeNames := modelAttributeNamesForIndex $xdbConfig $xdbConfig.DynamoDB.KeySchema }}
func (t {{ $modelName }}Table) get{{ $modelName }}(ctx context.Context,
	{{- range $_, $attributeName := $pkModelAttributeNames }}
	{{- camelize $attributeName }} {{ goTypeForAttribute $xdbConfig $attributeName }},
	{{- end -}}
) (*models.{{ $modelName }}, error) {
	key, err := dynamodbattribute.MarshalMap(ddb{{ $modelName }}PrimaryKey{
		{{- range $_, $pk := $xdbConfig.DynamoDB.KeySchema }}
		{{ pascalize $pk.AttributeName }}: {{ if isComposite $xdbConfig $pk.AttributeName }}{{ compositeValue $xdbConfig $pk.AttributeName "" }}{{ else }}{{ camelize $pk.AttributeName }}{{ end }},
		{{- end }}
	})
	if err != nil {
		return nil, err
	}
	res, err := t.DynamoDBAPI.GetItemWithContext(ctx, &dynamodb.GetItemInput{
		Key:       key,
		TableName: aws.String(t.name()),
	})
	if err != nil {
		return nil, err
	}

	if len(res.Item) == 0 {
		return nil, db.Err{{ $modelName }}NotFound{
		{{- range $_, $attributeName := $pkModelAttributeNames }}
		{{ pascalize $attributeName }}: {{ camelize $attributeName }},
		{{- end }}
		}
	}

	var m models.{{ $modelName }}
	if err := decode{{ $modelName }}(res.Item, &m); err != nil {
		return nil, err
	}

	return &m, nil
}

{{ if indexHasRangeKey $xdbConfig.DynamoDB.KeySchema }}
{{- $computedIndexName := indexName $xdbConfig.DynamoDB.KeySchema }}
{{- $hashKey := index $xdbConfig.DynamoDB.KeySchema 0 }}
{{- $rangeKey := index $xdbConfig.DynamoDB.KeySchema 1 }}
func (t {{ $modelName}}Table) get{{ $modelName }}sBy{{ $computedIndexName }}(ctx context.Context, input db.Get{{ $modelName }}sBy{{ $computedIndexName }}Input) ([]models.{{ $modelName }}, error) {
	queryInput := &dynamodb.QueryInput{
		TableName: aws.String(t.name()),
		ExpressionAttributeNames: map[string]*string{
			"#{{ upper $hashKey.AttributeName }}": aws.String("{{ $hashKey.AttributeName }}"),
		},
		ExpressionAttributeValues: map[string]*dynamodb.AttributeValue{
			":{{ camelize $hashKey.AttributeName }}": &dynamodb.AttributeValue{
                        	{{- $dynamoDBType := dynamoDBTypeForAttribute $xdbConfig $hashKey.AttributeName }}
                        	{{- if eq $dynamoDBType "S" }}
                                S: aws.String({{ if isComposite $xdbConfig $hashKey.AttributeName }}{{ compositeValue $xdbConfig $hashKey.AttributeName "input" }}{{ else }}input.{{ pascalize $hashKey.AttributeName }}{{ end }}),
                        	{{- else if eq $dynamoDBType "N" }}
				N: aws.String(fmt.Sprintf("%d", input.{{ pascalize $hashKey.AttributeName }})),
	                        {{- end }}
			},
		},
		ScanIndexForward: aws.Bool(!input.Descending),
		ConsistentRead:   aws.Bool(!input.DisableConsistentRead),
	}
	if input.{{ pascalize $rangeKey.AttributeName }}StartingAt == nil {
		queryInput.KeyConditionExpression = aws.String("#{{ upper $hashKey.AttributeName }} = :{{ camelize $hashKey.AttributeName }}")
	} else {
		queryInput.ExpressionAttributeNames["#{{ upper $rangeKey.AttributeName }}"] = aws.String("{{ $rangeKey.AttributeName }}")
		queryInput.ExpressionAttributeValues[":{{ camelize $rangeKey.AttributeName }}"] = &dynamodb.AttributeValue{
                       	{{- $attrGoType := goTypeForAttribute $xdbConfig $rangeKey.AttributeName }}
                        {{- $attrDynamoDBType := dynamoDBTypeForAttribute $xdbConfig $rangeKey.AttributeName }}
                        {{- if eq $attrDynamoDBType "S" }}
                       	{{- if eq $attrGoType "strfmt.DateTime" }}
			S: aws.String(time.Time(*input.{{ pascalize $rangeKey.AttributeName }}StartingAt).Format(time.RFC3339)), // dynamodb attributevalue only supports RFC3339 resolution
                        {{- else }}
			S: aws.String(*input.{{ pascalize $rangeKey.AttributeName }}StartingAt),
                        {{- end }}
                       	{{- else if eq $attrDynamoDBType "N" }}
			N: aws.String(fmt.Sprintf("%%d", *input.{{ pascalize $rangeKey.AttributeName }}StartingAt)),
                        {{- end }}
		}
		queryInput.KeyConditionExpression = aws.String("#{{ upper $hashKey.AttributeName }} = :{{ camelize $hashKey.AttributeName }} AND #{{ upper $rangeKey.AttributeName }} >= :{{ camelize $rangeKey.AttributeName }}")
	}

	queryOutput, err := t.DynamoDBAPI.QueryWithContext(ctx, queryInput)
	if err != nil {
		return nil, err
	}
	if len(queryOutput.Items) == 0 {
		return []models.{{ $modelName }}{}, nil
	}

	return decode{{ $modelName }}s(queryOutput.Items)
}
{{- end }}

func (t {{ $modelName }}Table) delete{{ $modelName }}(ctx context.Context,
	{{- range $_, $attributeName := $pkModelAttributeNames }}
	{{- camelize $attributeName }} {{ goTypeForAttribute $xdbConfig $attributeName }},
	{{- end -}}
) error {
	key, err := dynamodbattribute.MarshalMap(ddb{{ $modelName }}PrimaryKey{
		{{- range $_, $pk := $xdbConfig.DynamoDB.KeySchema }}
		{{ pascalize $pk.AttributeName }}: {{ if isComposite $xdbConfig $pk.AttributeName }}{{ compositeValue $xdbConfig $pk.AttributeName "" }}{{ else }}{{ camelize $pk.AttributeName }}{{ end }},
		{{- end }}
	})
	if err != nil {
		return err
	}
	_, err = t.DynamoDBAPI.DeleteItemWithContext(ctx, &dynamodb.DeleteItemInput{
		Key:       key,
		TableName: aws.String(t.name()),
	})
	if err != nil {
		return err
	}
	return nil
}

{{ range $gsi := $xdbConfig.DynamoDB.GlobalSecondaryIndexes }}
{{- $computedIndexName := indexName $gsi.KeySchema }}
{{- if indexHasRangeKey $gsi.KeySchema }}
{{- $hashKey := index $gsi.KeySchema 0 }}
{{- $rangeKey := index $gsi.KeySchema 1 }}
func (t {{ $modelName}}Table) get{{ $modelName }}sBy{{ $computedIndexName }}(ctx context.Context, input db.Get{{ $modelName }}sBy{{ $computedIndexName }}Input) ([]models.{{ $modelName }}, error) {
	queryInput := &dynamodb.QueryInput{
		TableName: aws.String(t.name()),
		IndexName: aws.String("{{ $gsi.IndexName }}"),
		ExpressionAttributeNames: map[string]*string{
			"#{{ upper $hashKey.AttributeName }}": aws.String("{{ $hashKey.AttributeName }}"),
		},
		ExpressionAttributeValues: map[string]*dynamodb.AttributeValue{
			":{{ camelize $hashKey.AttributeName }}": &dynamodb.AttributeValue{
                           	{{- $attrGoType := goTypeForAttribute $xdbConfig $hashKey.AttributeName }}
                                {{- $attrDynamoDBType := dynamoDBTypeForAttribute $xdbConfig $hashKey.AttributeName }}
                        	{{- if eq $attrDynamoDBType "S" }}
				S: aws.String(input.{{ pascalize $hashKey.AttributeName }}),
                        	{{- else if eq $attrDynamoDBType "N" }}
				N: aws.String(fmt.Sprintf("%d", input.{{ pascalize $hashKey.AttributeName }})),
	                        {{- end }}
			},
		},
		ScanIndexForward: aws.Bool(!input.Descending),
	}
	if input.{{ pascalize $rangeKey.AttributeName }}StartingAt == nil {
		queryInput.KeyConditionExpression = aws.String("#{{ upper $hashKey.AttributeName }} = :{{ camelize $hashKey.AttributeName }}")
	} else {
		queryInput.ExpressionAttributeNames["#{{ upper $rangeKey.AttributeName }}"] = aws.String("{{ $rangeKey.AttributeName }}")
		queryInput.ExpressionAttributeValues[":{{ camelize $rangeKey.AttributeName }}"] = &dynamodb.AttributeValue{
                       	{{- $attrGoType := goTypeForAttribute $xdbConfig $rangeKey.AttributeName }}
                        {{- $attrDynamoDBType := dynamoDBTypeForAttribute $xdbConfig $rangeKey.AttributeName }}
                     	{{- if eq $attrDynamoDBType "S" }}
                       	{{- if eq $attrGoType "strfmt.DateTime" }}
			S: aws.String(time.Time(*input.{{ pascalize $rangeKey.AttributeName }}StartingAt).Format(time.RFC3339)), // dynamodb attributevalue only supports RFC3339 resolution
                       	{{- else }}
			S: aws.String(*input.{{ pascalize $rangeKey.AttributeName }}StartingAt),
                        {{- end }}
                       	{{- else if eq $attrDynamoDBType "N" }}
			N: aws.String(fmt.Sprintf("%%d", *input.{{ pascalize $rangeKey.AttributeName }}StartingAt)),
                        {{- end }}
		}
		queryInput.KeyConditionExpression = aws.String("#{{ upper $hashKey.AttributeName }} = :{{ camelize $hashKey.AttributeName }} AND #{{ upper $rangeKey.AttributeName }} >= :{{ camelize $rangeKey.AttributeName }}")
	}

	queryOutput, err := t.DynamoDBAPI.QueryWithContext(ctx, queryInput)
	if err != nil {
		return nil, err
	}
	if len(queryOutput.Items) == 0 {
		return []models.{{ $modelName }}{}, nil
	}

	return decode{{ $modelName }}s(queryOutput.Items)
}
{{- else }}
{{- $ks := index $gsi.KeySchema 0 }}
{{- $ksAttrDynamoDBType := dynamoDBTypeForAttribute $xdbConfig $ks.AttributeName }}
func (t {{ $modelName}}Table) get{{ $modelName }}By{{ $computedIndexName }}(ctx context.Context,
      {{- camelize $ks.AttributeName }} {{ goTypeForAttribute $xdbConfig $ks.AttributeName }}) (*models.{{ $modelName }}, error) {
	queryInput := &dynamodb.QueryInput{
		TableName: aws.String(t.name()),
		IndexName: aws.String("{{ $gsi.IndexName }}"),
		ExpressionAttributeNames: map[string]*string{
			"#{{ upper $ks.AttributeName }}": aws.String("{{ $ks.AttributeName }}"),
		},
		ExpressionAttributeValues: map[string]*dynamodb.AttributeValue{
			":{{ camelize $ks.AttributeName }}": &dynamodb.AttributeValue{
                        	{{- if eq $ksAttrDynamoDBType "S" }}
				S: aws.String({{- camelize $ks.AttributeName }}),
                        	{{- else if eq $ksAttrDynamoDBType "N" }}
				N: aws.String(fmt.Sprintf("%d", {{ camelize $ks.AttributeName }})),
	                        {{- end }}
			},
		},
		KeyConditionExpression: aws.String("#{{ upper $ks.AttributeName }} = :{{ camelize $ks.AttributeName }}"),
	}

	queryOutput, err := t.DynamoDBAPI.QueryWithContext(ctx, queryInput)
	if err != nil {
		return nil, err
	}
	if len(queryOutput.Items) == 0 {
		return nil, db.Err{{ $modelName }}By{{ $computedIndexName }}NotFound{
                {{- pascalize $ks.AttributeName }}: {{ camelize $ks.AttributeName -}}
                }
	}

	var {{ camelize $modelName }} models.{{ $modelName }}
	if err := decode{{ $modelName }}(queryOutput.Items[0], &{{ camelize $modelName }}); err != nil {
		return nil, err
	}
	return &{{ camelize $modelName }}, nil
}
{{- end }}
{{ end }}

// encode{{ $modelName }} encodes a {{ $modelName }} as a DynamoDB map of attribute values.
func encode{{ $modelName }}(m models.{{ $modelName }}) (map[string]*dynamodb.AttributeValue, error) {
{{- $lenCompositeAttrs := len $xdbConfig.CompositeAttributes }}
{{- if eq $lenCompositeAttrs 0 }}
	return dynamodbattribute.MarshalMap(ddb{{ $modelName }}{
		{{ $modelName }}: m,
	})
{{- else }}        
	val, err := dynamodbattribute.MarshalMap(ddb{{ $modelName }}{
		{{ $modelName }}: m,
	})
	if err != nil {
		return nil, err
	}
	// add in composite attributes
        {{- if indexContainsCompositeAttribute $xdbConfig $xdbConfig.DynamoDB.KeySchema }}
	primaryKey, err := dynamodbattribute.MarshalMap(ddb{{ $modelName }}PrimaryKey{
		{{- range $_, $pk := $xdbConfig.DynamoDB.KeySchema }}
		{{ pascalize $pk.AttributeName }}: {{ if isComposite $xdbConfig $pk.AttributeName }}{{ compositeValue $xdbConfig $pk.AttributeName "m" }}{{ else }}m.{{ pascalize $pk.AttributeName }}{{ end }},
                {{- end }}
	})
	if err != nil {
		return nil, err
	}
	for k, v := range primaryKey {
		val[k] = v
	}
        {{- end }}
        {{- range $gsi := $xdbConfig.DynamoDB.GlobalSecondaryIndexes }}
        {{- if indexContainsCompositeAttribute $xdbConfig $gsi.KeySchema }}
	{{ camelize $gsi.IndexName }}, err := dynamodbattribute.MarshalMap(ddb{{ $modelName }}GSI{{ pascalize $gsi.IndexName }}{
		{{- range $_, $sk := $gsi.KeySchema }}
		{{ pascalize $sk.AttributeName }}: {{ if isComposite $xdbConfig $sk.AttributeName }}{{ compositeValue $xdbConfig $sk.AttributeName "" }}{{ else }}{{ camelize $sk.AttributeName }}{{ end }},
                {{- end }}
	})
	if err != nil {
		return nil, err
	}
	for k, v := range {{ camelize $gsi.IndexName }} {
		val[k] = v
	}
        {{- end }}
        {{- end }}
	return val, err
{{- end }}        
}

// decode{{ $modelName }} translates a {{ $modelName }} stored in DynamoDB to a {{ $modelName }} struct.
func decode{{ $modelName }}(m map[string]*dynamodb.AttributeValue, out *models.{{ $modelName }}) error {
	var ddb{{ $modelName }} ddb{{ $modelName }}
	if err := dynamodbattribute.UnmarshalMap(m, &ddb{{ $modelName }}); err != nil {
		return err
	}
	*out = ddb{{ $modelName }}.{{ $modelName }}
	return nil
}

// decode{{ $modelName }}s translates a list of {{ $modelName }}s stored in DynamoDB to a slice of {{ $modelName }} structs.
func decode{{ $modelName }}s(ms []map[string]*dynamodb.AttributeValue) ([]models.{{ $modelName }}, error) {
	{{ camelize $modelName }}s := make([]models.{{ $modelName }}, len(ms))
	for i, m := range ms {
		var {{ camelize $modelName }} models.{{ $modelName }}
		if err := decode{{ $modelName }}(m, &{{ camelize $modelName }}); err != nil {
			return nil, err
		}
		{{ camelize $modelName }}s[i] = {{ camelize $modelName }}
	}
	return {{ camelize $modelName }}s, nil
}
