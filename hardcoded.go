// Code generated by go-bindata.
// sources:
// hardcoded/_doer.go
// hardcoded/_middleware.go
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _hardcoded_doerGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x55\xc1\x6e\xdc\x36\x10\x3d\x4b\x5f\x31\x51\x51\x44\x6a\xb6\x5a\x5f\x72\x49\x1a\x14\xc5\x3a\xa9\x73\x68\x5d\xa4\x8b\xb6\x57\xae\x48\x69\x19\x4b\x24\x4b\x52\xb6\x17\xc6\xfe\x7b\x67\x48\x4a\xab\xb5\xdd\xa0\x87\xd4\x30\xa0\x25\x39\x7a\xf3\xe6\xf1\xcd\xc8\xb0\xe6\x86\x75\x02\x9a\x5e\x0a\xe5\xf3\x5c\x0e\x46\x5b\x0f\x65\x9e\x15\xed\xe0\x0b\x7c\x28\xe1\xd7\x7b\xef\x4d\x91\x57\xd3\x69\xd1\xe9\x9e\xa9\xae\xd6\xb6\x5b\xdf\xaf\x29\xa0\xd1\xca\x8b\x7b\x8c\x9f\x42\xb4\x41\x38\xcb\x1a\xa9\x3a\x0c\x97\x7e\x3f\xee\xea\x46\x0f\xeb\xc5\xfe\xf2\xf7\xf7\x9d\xc6\x77\xd7\x6b\xe0\x5a\x58\x90\x0e\x98\x02\x89\x90\xb6\x65\x8d\x80\x56\x5b\x28\xb8\xc6\xb8\x02\x88\x0a\x58\xf1\xf7\x28\x9c\x77\x60\xb4\x73\x72\xd7\x1f\xe0\x0e\x53\xc0\x9d\x65\xc6\x60\x54\xee\x0f\x46\x24\xa8\x19\xe4\x21\xcf\x2e\x75\xd9\xf8\x7b\x48\x64\xeb\x4d\x7c\xae\xa0\x81\xef\x08\xb6\xde\x04\x11\x56\x60\xd3\xfa\x53\x4c\x53\x41\x39\xad\x9d\xd1\xca\x89\x15\x08\x6b\xb5\xad\xf2\x63\x1e\x53\x69\xf3\x2b\x1b\xc4\x06\xb1\x9d\xb7\x63\xe3\x1f\x8e\xa1\x98\x1d\x73\x22\x61\x5c\x31\xc5\x7b\xe4\x63\x90\x8d\xb6\x83\x03\xbf\x17\xe1\xfc\xac\xa0\x88\x46\xdb\x97\x44\xfe\x04\xd6\x8e\xaa\x81\x92\xcf\x47\x15\x7c\xed\x5a\x48\x1f\xa4\xbc\xbd\xbe\xbc\x7e\x03\x3f\x71\x0e\x0c\xbc\x1c\x84\x1e\x3d\xec\x23\xf7\x15\x18\xab\x77\x8c\xd4\x26\x1a\x1c\xb4\x0a\xe4\xdd\x9b\xf5\xba\xd3\x5c\x37\xc1\x0f\xff\x66\x8d\x35\xb2\xa5\xe8\x6f\x2e\x75\x9e\x59\xe1\x47\xab\xa0\xa9\xb1\x8a\x28\x23\xa6\x4e\x56\x08\x95\x33\xce\xdd\xb4\x01\x5e\x9f\xdf\x7a\x54\x69\x19\x1e\x85\xa2\x12\x78\xb8\xf6\x7c\x21\xd9\x22\x2e\xa8\x96\x67\x5f\x5b\xb7\x3c\x8b\xf7\x0f\x6f\xde\x01\x62\xd7\x7f\xb0\x7e\x14\xe5\xec\x89\x87\x63\x55\x97\xc8\x10\x49\x54\x79\x76\xcb\x90\xae\x59\xf6\x47\xfd\xbb\x61\x6a\x21\x3e\xd6\x0e\x9e\x75\x0e\xeb\xed\x99\x4f\x02\x48\x65\xf0\x26\x38\xf3\xec\xc7\x3c\x93\x2d\x18\x66\x11\x80\xde\xa4\xac\x8f\xd1\x3e\x58\x3d\xa4\xca\xc8\x25\xd5\xdb\x65\xfc\x8b\x77\xa0\x64\x4f\x62\x65\x48\xe4\xd1\xcb\x9e\xd9\x10\x95\xe8\xaf\xce\x4e\x37\x7b\xd9\xf3\xeb\xb6\x3c\x81\x4d\xfa\x95\x55\x85\xb5\x1d\x41\xf4\x4e\xfc\x37\x64\x0a\x0f\x95\xa0\x8c\x54\x82\x33\xf5\x16\x43\x85\x2d\xab\xfa\xa3\xfa\x2c\x1a\x5f\xe2\xd6\x0c\xbf\x42\xcc\x25\xdc\xd5\x76\xfb\xdb\x95\x60\x5c\x58\xf7\x85\xa3\x0d\xb3\x56\x22\xa4\xad\xe3\x46\x85\x4a\x50\xbe\x85\x04\xc9\x8a\xb8\x5c\x01\x4e\xbc\xfa\x3d\xdd\x6a\x5b\x16\x8d\x1e\x7b\xae\x5e\x7a\x54\x9e\xc8\xcc\x66\xdc\x47\x64\x28\xbf\xbd\xad\x8a\x60\x82\x58\x49\xc2\xe1\x35\xaf\x63\x6b\xa2\xa5\xd0\x45\x93\xb9\xf1\xd8\x1e\xa6\x21\x40\x0b\x29\x1c\xbc\xbe\xf8\xeb\x39\x67\x87\xd8\x27\xbe\x3e\xfb\x0b\x26\xcf\xb8\x68\xd9\xd8\xfb\x4f\x09\x0e\x67\x5d\xca\xf6\x27\x4e\x43\xda\x3d\x40\xa4\x85\xf3\x14\x94\xb8\x9b\x5c\x8f\xc3\x87\xe1\x88\xbe\x45\xf2\x92\x8b\x38\x8b\xd4\x38\xec\x30\xa3\x6e\x67\x76\xe8\x3a\xae\xc3\xec\x65\x64\x1f\x2f\x9b\xb1\x67\x36\x16\x13\xe8\xd6\xb1\xc7\xe6\x64\xcf\x0f\x24\x7b\x62\x57\x3d\x3e\xa5\xca\xa6\x59\x90\x4e\x08\x2d\x36\x50\xd0\x30\x68\x91\xa2\x1f\x8e\x33\xda\x99\xac\x13\x98\x8c\x95\xdc\x88\x43\x78\x86\x33\xc2\x6d\x65\x37\x5a\xec\x24\xad\x6a\xf8\x80\xe5\x70\x31\x60\x07\xfb\xb8\x05\x66\xb4\xf8\x15\x21\x82\xfe\xa5\x83\xcf\xa3\xf3\x58\x2f\xde\x3e\x8a\x89\x09\x50\x8f\xe7\xd5\xb1\xb2\xdb\x7b\x50\xfa\xae\x5e\x5c\xda\xc4\xe4\xe9\xe0\x9e\xef\xf4\x7f\x99\xdc\xa4\xa2\x33\xab\xa9\x97\x9e\x9a\x70\x6a\xb4\xa7\xc6\x9f\x5f\x24\x17\x87\x29\xf4\xb1\x4d\xf2\x85\xb4\xd0\x30\xea\x82\x9d\x48\x95\x73\x3a\x54\x51\xa7\x04\x21\x87\x41\x70\xc9\xbc\xe8\x0f\x51\x60\xbf\xc7\xab\xc0\x8f\x05\xca\x85\xff\x58\x68\x23\x0c\xfa\x4d\xf5\x87\x90\xe0\xe7\xf7\x5b\x47\xb0\x0b\xd0\x40\xd0\xd6\xbf\x08\xbf\xd7\x9c\x58\x16\x18\x54\x7c\x81\x27\x8d\xd1\x85\xb3\x82\x8d\x68\x81\x03\xeb\xe6\x7c\x0e\x9f\x3b\x08\x47\x31\x19\x31\xe4\x7b\x81\xa1\x29\x43\xc0\x09\xc2\x9d\xb5\x54\xcc\x45\x2d\x20\x09\xf4\xe2\x2d\x3e\x7f\x98\xf2\xe2\xe2\xd5\xab\x00\x40\xdc\x91\x1e\xcd\x38\x3f\xba\x8d\xe6\x02\xa3\x5e\x5f\x5c\x84\xc3\x6c\x67\x05\xbb\xc1\x1f\xc7\x90\x6a\xba\xa6\x67\x6f\xe9\x34\x47\x4e\xe5\x1e\xf3\x7f\x02\x00\x00\xff\xff\xd8\x81\x1a\x00\xa4\x09\x00\x00")

func hardcoded_doerGoBytes() ([]byte, error) {
	return bindataRead(
		_hardcoded_doerGo,
		"hardcoded/_doer.go",
	)
}

func hardcoded_doerGo() (*asset, error) {
	bytes, err := hardcoded_doerGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "hardcoded/_doer.go", size: 2468, mode: os.FileMode(420), modTime: time.Unix(1470978048, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _hardcoded_middlewareGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x54\x41\x6f\xdb\x3a\x0c\x3e\xdb\xbf\x82\xcf\x27\xfb\x21\x4f\x39\xbc\x5b\x87\x1e\x8a\xac\x6d\x0a\x74\x6d\xd1\x64\xe8\x71\x50\x6c\xda\xd6\xe2\x48\x9e\xc4\x38\x29\x86\xfc\xf7\x51\xb2\x93\xba\x6b\x57\xec\x10\x20\xa2\x3e\x7e\xfc\x3e\x92\x56\x2b\xf3\xb5\xac\x10\x1c\xda\x0e\x6d\x1c\xab\x4d\x6b\x2c\x41\x1a\x47\x89\x46\x9a\xd6\x44\x6d\x12\xf3\xa1\x32\xed\xba\x12\x4a\x4f\x67\x0d\x32\x70\xba\x96\xcf\x1d\xe2\x7f\x95\x11\xdd\xff\xd3\xc6\x54\x15\xda\x24\x8e\xd6\xdd\x17\x55\x14\x0d\xee\xa4\x45\xf8\x38\x67\x73\x02\x7a\x7e\xd3\xa2\x26\x2b\x73\xa5\x2b\xce\x53\x54\x6f\x57\x22\x37\x9b\xe9\x28\x3e\xfe\xcf\x1c\x49\x9c\xc5\x71\xb9\xd5\x39\xec\x18\xfe\x52\x36\xb5\x66\x4b\x68\xc1\x2b\x17\x73\xa9\x39\x6c\xb3\x57\x27\xf8\xc9\x05\xeb\xe1\xff\xd9\x39\x8c\x45\x8b\x3b\xdc\x0d\x0c\x13\xe8\x6d\x85\x50\xb2\xbc\xff\x7c\x7f\x06\xb3\xf9\xc5\xdd\xf5\x25\x2c\xe7\x37\x8b\x24\xcb\x5e\x58\xce\x61\x10\x36\xd2\x31\xdc\x31\xca\x22\x6d\xad\x86\x21\x10\x1f\xe2\x78\x3a\x7d\x9b\x00\xb9\x45\x49\xe8\x40\x82\xc6\x1d\xb8\x56\x6a\xd0\x72\x83\x05\xc8\xd2\x1b\xa2\x1a\xe1\xeb\xe3\x2d\xb4\x92\x6a\x30\x65\x38\x5b\xfc\xb1\x45\x47\xc2\x13\xde\x10\xb4\x8d\xcc\x99\x80\x6a\xe5\xfa\x7c\xa5\xc7\x30\xc8\x8d\x26\xdc\xd3\x04\x4a\x63\x61\xeb\x10\x56\xcf\x60\x18\x60\x8f\xda\x1c\x74\x4a\xc2\xa8\xd1\x62\xc1\x34\x57\xd6\x6c\x66\x7d\x6a\x9a\x85\x52\x25\x8b\x0c\x05\x70\xaf\x1c\x39\x5f\xe7\x58\xa3\x46\x59\x30\xd1\x24\x14\x0e\x98\xde\x57\xe1\x8b\x05\x65\x2f\x93\xe7\xd1\x35\x0d\xac\x90\xd9\xf2\x5a\x35\x45\x6f\x4b\x52\xc8\x13\xfd\x74\xdf\x69\xec\xc7\xb3\x3d\xb5\x7b\x14\xbe\x62\xa6\xd4\xd3\xa5\xbb\x3e\xfe\x88\xae\x35\xda\xe1\x93\x55\x61\xd4\x16\xfe\x1d\xe2\xc1\x45\xe6\x79\x22\x76\x7a\x41\x84\x9b\x96\x80\x0c\x7c\x37\xec\x72\xb0\xcd\x56\x2a\x24\xf2\xdb\xea\xf5\x21\x37\xa0\x34\x50\x72\x9f\x82\xed\xa1\x07\x82\x39\x4c\x7b\xc7\x33\xf4\x6b\x66\x05\x4f\x4f\x3c\xf0\xf4\x38\xdc\x49\xcb\x4c\x6f\x3a\xcd\x37\xaa\x04\x97\x4f\x00\x6d\xd8\xcd\x31\xe0\xba\x31\x2b\xd9\x2c\x7d\x3d\x9b\x66\x9e\x3c\xba\xdc\xfb\x4b\x4a\xc7\xb0\xf9\x72\xf9\x30\x1f\x86\xe0\x31\x7f\xb8\x9b\x49\x6b\x15\x13\x59\xd1\x07\xb2\xec\x53\x28\xfa\xcf\x39\x68\xd5\x04\xff\x11\x2b\x7c\x2d\x61\x41\xd2\x92\x17\x9a\xf6\xbe\x78\xb9\xa3\x03\x60\xc3\xab\xf4\x77\x09\x93\x57\xb7\x33\x3f\xf4\xfb\x32\x75\x79\x16\x98\xf8\x57\x60\x89\xbe\x35\xe2\x4a\x69\xe5\xea\xd4\xc7\xf9\x74\x6b\xaa\xcb\x8e\x13\xd3\x64\xd8\xb3\x6f\x16\x73\x54\x1d\x16\x49\x76\xca\x0a\x03\xce\x8e\x4a\xde\xc9\x29\x03\xe7\x90\x73\x08\xdc\xfc\xa9\xcd\x68\xff\x7b\xab\x87\x6d\x7f\xe2\x97\x25\x88\xb7\xe2\xb4\xff\x13\x16\xc7\x2f\x4f\x14\xd5\x62\xe1\xdf\x4c\xdf\xd2\x74\xc7\x1b\x24\x3c\xfa\x08\xeb\x69\xbd\xab\x43\xc6\x1f\xfc\xaf\x00\x00\x00\xff\xff\xd6\x98\x0e\x95\x66\x05\x00\x00")

func hardcoded_middlewareGoBytes() ([]byte, error) {
	return bindataRead(
		_hardcoded_middlewareGo,
		"hardcoded/_middleware.go",
	)
}

func hardcoded_middlewareGo() (*asset, error) {
	bytes, err := hardcoded_middlewareGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "hardcoded/_middleware.go", size: 1382, mode: os.FileMode(420), modTime: time.Unix(1471308515, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"hardcoded/_doer.go": hardcoded_doerGo,
	"hardcoded/_middleware.go": hardcoded_middlewareGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"hardcoded": &bintree{nil, map[string]*bintree{
		"_doer.go": &bintree{hardcoded_doerGo, map[string]*bintree{}},
		"_middleware.go": &bintree{hardcoded_middlewareGo, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

