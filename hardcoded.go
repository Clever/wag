// Code generated by go-bindata.
// sources:
// hardcoded/_doer.go
// hardcoded/_middleware.go
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _hardcoded_doerGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xa4\x54\x51\x6f\xdb\x36\x10\x7e\x96\x7e\xc5\x55\xc0\x50\x69\xf5\xe4\xbc\xf4\xa5\x5d\xb1\x07\xa7\x5d\xfa\xb0\x65\xe8\x8c\x6d\xaf\xb4\x48\xc9\x6c\x24\x92\x23\xa9\x24\x46\xe0\xff\xbe\x3b\x92\x92\x65\xa7\x28\x06\x24\x08\x60\x91\x77\xfc\xee\xfb\x8e\x1f\xcf\xb0\xe6\x8e\x75\x02\x9a\x5e\x0a\xe5\xf3\x5c\x0e\x46\x5b\x0f\x65\x9e\x15\x8d\x56\x5e\x3c\xfa\x02\x3f\xdb\x21\xfc\x28\xe1\xd7\x7b\xef\x4d\x91\xe7\x99\x36\x98\x6f\x59\x23\x55\x07\x45\x27\xfd\x7e\xdc\xd5\x8d\x1e\xd6\x8b\xfd\xe5\xf7\x4f\x9d\x26\x84\x4e\xf7\x4c\x75\xb5\xb6\xdd\xfa\x71\x4d\x70\xa9\xc8\xba\xf1\x8f\x11\xb9\xca\xf3\xf5\x1a\xb8\x16\x16\xa4\x03\xa6\x40\x62\x82\x6d\x59\x23\xa0\xd5\x16\x0a\xae\x11\xad\x00\x4a\x06\x2b\xfe\x1d\x85\xf3\x0e\x8c\x76\x4e\xee\xfa\x03\x3c\x20\x11\x78\xb0\xcc\x18\xcc\xca\xfd\xc1\x88\x04\x35\x83\x3c\xe5\xd9\xb5\x2e\x1b\xf8\x91\x10\xea\x4d\x90\xbd\x02\x9b\xd6\x5f\x22\x62\x05\xe5\xb4\x76\x46\x2b\x27\x56\x20\xac\xd5\xb6\xca\x8f\x79\x44\xd5\xe6\x77\x36\x88\x8d\x7f\x04\xe7\xed\xd8\xf8\xa7\x63\xe0\xbd\x63\x4e\x24\x8c\x1b\xa6\x78\x8f\xa5\x0d\x16\xd6\x76\x70\xe0\xf7\x22\xc4\xcf\xb8\x47\x34\xda\xbe\x26\x9e\x27\xb0\x76\x54\x0d\x94\x7c\x0e\x55\xf0\x02\xda\xa4\xda\x0a\x3f\x5a\x05\xa9\xd1\x35\xa2\xd9\x7a\x13\xbb\x5f\x56\x2b\x68\x10\x2d\xc8\x43\x15\xe9\xce\x02\x23\xc6\xb9\x9b\x36\xc0\xeb\xf3\xc6\x47\xf6\xcb\xf4\x28\x80\xea\xf1\xd0\xf9\x7c\x21\x65\x91\xf7\x52\x35\x79\x86\x3a\xe0\xdd\x07\x58\x68\x20\x4f\xd2\xa5\xd0\x36\x46\xeb\xbf\x58\x3f\x8a\x72\xbe\xa8\xa7\x63\x55\x97\x48\x0f\x19\x60\xea\x3d\x43\xae\x06\x16\x0e\xad\xff\x34\x4c\xe5\x19\xca\xdf\xde\x5e\xdf\xbe\x23\xe1\xe0\x59\xe7\x50\x6c\xcf\x7c\x52\x2f\x95\x19\x3d\x70\xe6\xd9\x2f\x79\x26\x5b\x30\xcc\x22\x00\x9d\xa4\xaa\x97\x68\x9f\xac\x1e\x26\x7a\xc8\xa8\x7a\xbf\xcc\x7f\xf5\x01\x94\xec\xa9\x53\x19\x12\xb9\x38\xec\x99\x0d\x59\x89\xfe\xea\x2c\xba\xd9\xcb\x9e\xdf\xb6\xe5\x09\xec\xd4\x84\x0a\xb5\x1d\x41\xf4\x4e\xfc\x3f\x64\x4a\x0f\x4a\xb0\xb5\x24\xc1\x99\x7a\x8b\xa9\xc2\x96\x55\xfd\x59\x7d\x15\x8d\x2f\x71\xeb\xe4\x13\xc4\x5c\xc2\xdd\x6c\xb7\x7f\xdc\x08\xc6\x85\x75\xdf\x09\x6d\x98\xb5\x12\x21\x6d\x1d\x37\x2a\xec\x04\xd5\x5b\xb4\x20\xb9\x13\x97\x2b\xc0\x69\x53\x7f\xa4\x9b\x6e\x4b\x1c\x42\x63\xcf\xd5\x6b\x8f\x9d\x27\x32\xb3\x13\xf7\x11\x19\xca\x1f\xee\xab\x22\x18\x23\x2a\x49\x38\xbc\xe6\xe4\xf0\xa5\xa9\x31\x62\x0f\xd3\xa3\xa4\x85\x14\x0e\xde\x5e\xfd\xf3\x2d\x47\x87\xdc\x67\x7e\x3e\xfb\x0b\xe6\xce\xb8\x68\xd9\xd8\xfb\x2f\x09\x0e\xc7\x4c\xaa\xf6\x37\x0e\xa2\x69\x37\x72\xc2\x61\x06\x4a\x3c\x40\x9a\x78\x38\x0e\x98\x07\x7d\x8f\xcc\x25\x17\x71\x3a\xa8\x71\xd8\x61\x4d\xdd\xce\xfc\xd0\x72\x5c\x87\xc1\xc7\xc8\x3b\x5e\x36\x63\xcf\x6c\x94\x13\x08\xd7\xf1\x75\x2d\xca\x91\xd3\xa6\x22\xd3\xc5\xad\x66\x40\x64\x58\x5d\x46\x97\xd3\x21\x45\x08\x2f\xbe\x1f\x44\x8b\xa7\x0f\x29\xfb\xe9\x38\xa3\x9d\xb5\x76\x02\x93\x51\xcb\x9d\x38\x84\xdf\x10\x23\xdc\x56\x76\xa3\xc5\x87\xa4\x55\x0d\x9f\x50\x10\x17\x03\x3e\x6a\x1f\xb7\xc0\x8c\x16\x87\x38\x11\xf4\xaf\x1d\x7c\x1d\x9d\x47\xc5\x78\xf9\xd8\x50\x2c\x80\x1d\xf9\x76\x7f\xac\xec\xf6\x1e\x94\x7e\xa8\x17\x17\x37\x31\x79\x3e\x4c\xe7\x7b\x7d\xf9\xfc\xb1\xb8\xb9\x9a\x5e\xcd\x99\xdd\xa6\xd7\xf4\xdc\xdd\xf3\x19\xb2\x6a\x18\x35\x9f\xdb\xd4\xa4\x50\x11\x1a\x46\x56\xdf\x89\xa4\x8f\x53\x50\xc5\x6e\x24\x08\x39\x0c\x82\x4b\xe6\x45\x7f\x88\x6d\xf4\x7b\x6c\xb8\xb1\x1a\x9b\x82\xff\xd8\xe7\x46\x18\xf4\x95\xea\x0f\xa1\xc0\xaf\x1f\xb7\x8e\x60\x17\xa0\x81\xa0\xad\x7f\x13\x7e\xaf\x39\xb1\x2c\x30\xa9\xf8\x0e\x4f\x9a\x95\x0b\xff\x04\xb3\xd0\x02\xa7\xd2\xdd\xc5\x0c\x4e\x43\xf7\xdc\x2f\x38\x77\xc9\x76\xa1\xee\x2b\x3c\x92\x2a\x05\xbc\xd0\xbb\xb3\x47\x14\x6b\x92\xe5\x25\x81\x5f\xbd\xc7\xdf\x9f\xa7\xfa\xb8\x78\xf3\x26\x00\x90\x06\xa4\x49\x03\xcd\x8f\x6e\xa3\xb9\xc0\xac\xb7\x57\x57\x21\x98\xed\xac\x60\x77\xf8\x71\x0c\xa5\xa6\x9b\xba\xbc\xa8\xd3\xbc\x38\x29\x3e\xe6\xff\x05\x00\x00\xff\xff\xdd\x44\x5c\x92\x13\x09\x00\x00")

func hardcoded_doerGoBytes() ([]byte, error) {
	return bindataRead(
		_hardcoded_doerGo,
		"hardcoded/_doer.go",
	)
}

func hardcoded_doerGo() (*asset, error) {
	bytes, err := hardcoded_doerGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "hardcoded/_doer.go", size: 2323, mode: os.FileMode(420), modTime: time.Unix(1472585983, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _hardcoded_middlewareGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x54\x41\x6f\xdb\x3a\x0c\x3e\xdb\xbf\x82\x2f\x27\xfb\x21\x4f\xb9\xbc\xd3\x86\x1e\x86\xa0\x5d\x07\x74\x5d\xd1\x76\xe8\x71\x50\x6c\xda\xd6\xe2\x48\x1e\xc5\x38\x29\x86\xfc\xf7\x51\xb2\x93\xba\x6b\x57\xec\x10\x20\xa2\x3e\x7e\xfc\x3e\x92\x56\xa7\x8b\xb5\xae\x11\x3c\x52\x8f\x94\xa6\x66\xd3\x39\x62\xc8\xd2\x64\x66\x91\x17\x0d\x73\x37\x4b\xe5\x50\xbb\x6e\x5d\x2b\x63\x17\xcb\x16\x05\xb8\x58\xeb\xc7\x1e\xf1\xbf\xda\xa9\xfe\xff\x45\xeb\xea\x1a\x69\x96\x26\xeb\xfe\xb3\x29\xcb\x16\x77\x9a\x10\xde\xce\xd9\x9c\x80\x81\xdf\x75\x68\x99\x74\x61\x6c\x2d\x79\x86\x9b\xed\x4a\x15\x6e\xb3\x98\xc4\xa7\xff\x85\x63\x96\xe6\x69\x5a\x6d\x6d\x01\x3b\x81\x3f\x95\xcd\x82\x13\x53\xe0\xb5\xde\x88\x2b\x26\x41\xcf\x81\xdc\x96\x91\x20\xb8\x51\x97\xda\x0a\x94\xf2\x67\x27\xf8\x29\x22\x9a\xf1\xff\xbb\x33\x98\x1a\x51\xd7\xb8\xcb\x06\x86\x39\x0c\x56\x63\x68\x52\x28\xcf\x9f\xb2\xcf\x60\x14\x39\xd1\x34\xde\x09\x8a\x90\xb7\x64\x61\x0c\xa4\x87\x34\x5d\x2c\x5e\x26\x40\x41\xa8\x19\x3d\x68\xb0\xb8\x03\xdf\x69\x0b\x56\xea\x94\xa0\xab\x60\x84\x1b\x84\xaf\xb7\x57\xd0\x69\x6e\xc0\x55\xf1\x4c\xf8\x63\x8b\x9e\x55\x20\xfc\xc4\xd0\xb5\xba\x10\x02\x6e\x8c\x1f\xf2\x8d\x9d\xc2\xa0\x70\x96\x71\xcf\x73\xa8\x1c\xc1\xd6\x23\xac\x1e\xc1\x09\x80\x8e\xda\x3c\xf4\x46\xc3\xa4\xe9\xea\x4e\x68\x2e\xc8\x6d\x96\x43\x6a\x96\xc7\x52\x95\x88\x8c\x05\x70\x6f\x3c\xfb\x50\xe7\x58\xa3\x41\x5d\x0a\xd1\x3c\x16\x8e\x98\xc1\x57\x19\x8a\x45\x65\x4f\x5b\x20\x63\x6c\x5b\x58\xa1\xb0\x15\x8d\x69\xcb\xc1\x96\xe6\x98\xa7\x86\x49\xbf\xd2\xd8\xb7\x67\x7a\x6a\xf7\x24\x7c\x21\x4c\x59\xa0\xcb\x76\x43\xfc\x16\x7d\xe7\xac\xc7\x07\x32\x71\xc4\x04\xff\x8e\xf1\xe8\x22\x0f\x3c\x89\x38\xfd\xc0\x8c\x9b\x8e\x81\x1d\x7c\x77\xe2\x72\xb4\x2d\x56\x6a\x64\x0e\x9b\x1b\xf4\xa1\x34\xa0\x72\x50\x49\x9f\xa2\xed\xb1\x07\x4a\x38\x5c\x17\x97\x52\xd6\x8b\x94\x4c\x4f\xdd\xc8\xf4\x24\xdc\x6b\x12\xa6\x17\x9d\x96\x1b\x53\x81\x2f\xe6\x80\x14\x77\x72\x0a\xf8\xd8\xba\x95\x6e\xef\x43\x3d\xca\xf2\x40\x9e\x9c\xef\xc3\x25\x67\x53\xd8\xe5\xfd\xfd\xcd\xe5\x38\x84\x80\x49\xfe\x70\xb9\xd4\x44\x46\x98\x48\x0d\x81\x3c\x7f\x1f\xab\xfe\x73\x06\xd6\xb4\xb1\x01\x89\x48\x7c\xae\xe1\x8e\x35\x71\x50\x9a\x0d\xc6\x64\xbb\x93\x03\x60\x2b\xbb\xf4\x77\x09\xf3\x67\xb7\xcb\x30\xf5\x2f\x55\xe6\x8b\x3c\x32\xc9\xaf\xc4\x0a\x43\x6f\xd4\x85\xb1\xc6\x37\x59\x88\xcb\xe9\xca\xd5\xe7\xbd\x24\x66\xb3\x71\xd1\xbe\x11\x16\x68\x7a\x2c\x67\xf9\x29\x2b\x4e\x38\x3f\x2a\x79\x25\xa7\x8a\x9c\x63\xce\x21\x72\xcb\xb7\xb6\xe4\xfd\xef\xbd\x1e\xd7\xfd\x41\x9e\x99\x28\x9e\xd4\xe9\x03\x98\x8b\x38\x79\x86\x92\xa4\x51\x77\xe1\x01\x0d\x2d\xcd\x76\xb2\x42\x2a\xa0\x8f\xb0\x81\x36\xb8\x3a\xe4\xf2\xc5\xff\x0a\x00\x00\xff\xff\x43\x95\x65\x1c\x73\x05\x00\x00")

func hardcoded_middlewareGoBytes() ([]byte, error) {
	return bindataRead(
		_hardcoded_middlewareGo,
		"hardcoded/_middleware.go",
	)
}

func hardcoded_middlewareGo() (*asset, error) {
	bytes, err := hardcoded_middlewareGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "hardcoded/_middleware.go", size: 1395, mode: os.FileMode(420), modTime: time.Unix(1472181009, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"hardcoded/_doer.go":       hardcoded_doerGo,
	"hardcoded/_middleware.go": hardcoded_middlewareGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"hardcoded": &bintree{nil, map[string]*bintree{
		"_doer.go":       &bintree{hardcoded_doerGo, map[string]*bintree{}},
		"_middleware.go": &bintree{hardcoded_middlewareGo, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
