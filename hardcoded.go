// Code generated by go-bindata.
// sources:
// hardcoded/_doer.go
// hardcoded/_middleware.go
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _hardcoded_doerGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x55\xc1\x6e\xdc\x36\x10\x3d\x4b\x5f\x31\x51\x51\x44\x6a\xb6\x5a\x5f\x72\x49\x1a\x14\xc5\x3a\xa9\x73\x68\x5d\xa4\x8b\xb6\x57\xae\x48\x69\x19\x4b\x24\x4b\x52\xb6\x17\xc6\xfe\x7b\x67\x48\x4a\xab\xb5\xdd\xa0\x87\xd4\x30\xa0\x25\x39\x7a\xf3\xe6\xf1\xcd\xc8\xb0\xe6\x86\x75\x02\x9a\x5e\x0a\xe5\xf3\x5c\x0e\x46\x5b\x0f\x65\x9e\x15\xed\xe0\x0b\x7c\x28\xe1\xd7\x7b\xef\x4d\x91\x57\xd3\x69\xd1\xe9\x9e\xa9\xae\xd6\xb6\x5b\xdf\xaf\x29\xa0\xd1\xca\x8b\x7b\x8c\x9f\x42\xb4\x41\x38\xcb\x1a\xa9\x3a\x0c\x97\x7e\x3f\xee\xea\x46\x0f\xeb\xc5\xfe\xf2\xf7\xf7\x9d\xc6\x77\xd7\x6b\xe0\x5a\x58\x90\x0e\x98\x02\x89\x90\xb6\x65\x8d\x80\x56\x5b\x28\xb8\xc6\xb8\x02\x88\x0a\x58\xf1\xf7\x28\x9c\x77\x60\xb4\x73\x72\xd7\x1f\xe0\x0e\x53\xc0\x9d\x65\xc6\x60\x54\xee\x0f\x46\x24\xa8\x19\xe4\x21\xcf\x2e\x75\xd9\xf8\x7b\x48\x64\xeb\x4d\x7c\xae\xa0\x81\xef\x08\xb6\xde\x04\x11\x56\x60\xd3\xfa\x53\x4c\x53\x41\x39\xad\x9d\xd1\xca\x89\x15\x08\x6b\xb5\xad\xf2\x63\x1e\x53\x69\xf3\x2b\x1b\xc4\x06\xb1\x9d\xb7\x63\xe3\x1f\x8e\xa1\x98\x1d\x73\x22\x61\x5c\x31\xc5\x7b\xe4\x63\x90\x8d\xb6\x83\x03\xbf\x17\xe1\xfc\xac\xa0\x88\x46\xdb\x97\x44\xfe\x04\xd6\x8e\xaa\x81\x92\xcf\x47\x15\x7c\xed\x5a\x48\x1f\xa4\xbc\xbd\xbe\xbc\x7e\x03\x3f\x71\x0e\x0c\xbc\x1c\x84\x1e\x3d\xec\x23\xf7\x15\x18\xab\x77\x8c\xd4\x26\x1a\x1c\xb4\x0a\xe4\xdd\x9b\xf5\xba\xd3\x5c\x37\xc1\x0f\xff\x66\x8d\x35\xb2\xa5\xe8\x6f\x2e\x75\x9e\x59\xe1\x47\xab\xa0\xa9\xb1\x8a\x28\x23\xa6\x4e\x56\x08\x95\x33\xce\xdd\xb4\x01\x5e\x9f\xdf\x7a\x54\x69\x19\x1e\x85\xa2\x12\x78\xb8\xf6\x7c\x21\xd9\x22\x2e\xa8\x96\x67\x5f\x5b\xb7\x3c\x8b\xf7\x0f\x6f\xde\x01\x62\xd7\x7f\xb0\x7e\x14\xe5\xec\x89\x87\x63\x55\x97\xc8\x10\x49\x54\x79\x76\xcb\x90\xae\x59\xf6\x47\xfd\xbb\x61\x6a\x21\x3e\xd6\x0e\x9e\x75\x0e\xeb\xed\x99\x4f\x02\x48\x65\xf0\x26\x38\xf3\xec\xc7\x3c\x93\x2d\x18\x66\x11\x80\xde\xa4\xac\x8f\xd1\x3e\x58\x3d\xa4\xca\xc8\x25\xd5\xdb\x65\xfc\x8b\x77\xa0\x64\x4f\x62\x65\x48\xe4\xd1\xcb\x9e\xd9\x10\x95\xe8\xaf\xce\x4e\x37\x7b\xd9\xf3\xeb\xb6\x3c\x81\x4d\xfa\x95\x55\x85\xb5\x1d\x41\xf4\x4e\xfc\x37\x64\x0a\x0f\x95\xa0\x8c\x54\x82\x33\xf5\x16\x43\x85\x2d\xab\xfa\xa3\xfa\x2c\x1a\x5f\xe2\xd6\x0c\xbf\x42\xcc\x25\xdc\xd5\x76\xfb\xdb\x95\x60\x5c\x58\xf7\x85\xa3\x0d\xb3\x56\x22\xa4\xad\xe3\x46\x85\x4a\x50\xbe\x85\x04\xc9\x8a\xb8\x5c\x01\x4e\xbc\xfa\x3d\xdd\x6a\x5b\x16\x8d\x1e\x7b\xae\x5e\x7a\x54\x9e\xc8\xcc\x66\xdc\x47\x64\x28\xbf\xbd\xad\x8a\x60\x82\x58\x49\xc2\xe1\x35\xaf\x63\x6b\xa2\xa5\xd0\x45\x93\xb9\xf1\xd8\x1e\xa6\x21\x40\x0b\x29\x1c\xbc\xbe\xf8\xeb\x39\x67\x87\xd8\x27\xbe\x3e\xfb\x0b\x26\xcf\xb8\x68\xd9\xd8\xfb\x4f\x09\x0e\x67\x5d\xca\xf6\x27\x4e\x43\xda\x3d\x40\xa4\x85\xf3\x14\x94\xb8\x9b\x5c\x8f\xc3\x87\xe1\x88\xbe\x45\xf2\x92\x8b\x38\x8b\xd4\x38\xec\x30\xa3\x6e\x67\x76\xe8\x3a\xae\xc3\xec\x65\x64\x1f\x2f\x9b\xb1\x67\x36\x16\x13\xe8\xd6\xb1\xc7\xe6\x64\xcf\x0f\x24\x7b\x62\x57\x3d\x3e\xa5\xca\xa6\x59\x90\x4e\x08\x2d\x36\x50\xd0\x30\x68\x91\xa2\x1f\x8e\x33\xda\x99\xac\x13\x98\x8c\x95\xdc\x88\x43\x78\x86\x33\xc2\x6d\x65\x37\x5a\xec\x24\xad\x6a\xf8\x80\xe5\x70\x31\x60\x07\xfb\xb8\x05\x66\xb4\xf8\x15\x21\x82\xfe\xa5\x83\xcf\xa3\xf3\x58\x2f\xde\x3e\x8a\x89\x09\x50\x8f\xe7\xd5\xb1\xb2\xdb\x7b\x50\xfa\xae\x5e\x5c\xda\xc4\xe4\xe9\xe0\x9e\xef\xf4\x7f\x99\xdc\xa4\xa2\x33\xab\xa9\x97\x9e\x9a\x70\x6a\xb4\xa7\xc6\x9f\x5f\x24\x17\x87\x29\xf4\xb1\x4d\xf2\x85\xb4\xd0\x30\xea\x82\x9d\x48\x95\x73\x3a\x54\x51\xa7\x04\x21\x87\x41\x70\xc9\xbc\xe8\x0f\x51\x60\xbf\xc7\xab\xc0\x8f\x05\xca\x85\xff\x58\x68\x23\x0c\xfa\x4d\xf5\x87\x90\xe0\xe7\xf7\x5b\x47\xb0\x0b\xd0\x40\xd0\xd6\xbf\x08\xbf\xd7\x9c\x58\x16\x18\x54\x7c\x81\x27\x8d\xd1\x85\xb3\x82\x8d\x68\x81\x03\xeb\xe6\x7c\x0e\x9f\x3b\x08\x47\x31\x19\x31\xe4\x7b\x81\xa1\x29\x43\xc0\x09\xc2\x9d\xb5\x54\xcc\x45\x2d\x20\x09\xf4\xe2\x2d\x3e\x7f\x98\xf2\xe2\xe2\xd5\xab\x00\x40\xdc\x91\x1e\xcd\x38\x3f\xba\x8d\xe6\x02\xa3\x5e\x5f\x5c\x84\xc3\x6c\x67\x05\xbb\xc1\x1f\xc7\x90\x6a\xba\xa6\x67\x6f\xe9\x34\x47\x4e\xe5\x1e\xf3\x7f\x02\x00\x00\xff\xff\xd8\x81\x1a\x00\xa4\x09\x00\x00")

func hardcoded_doerGoBytes() ([]byte, error) {
	return bindataRead(
		_hardcoded_doerGo,
		"hardcoded/_doer.go",
	)
}

func hardcoded_doerGo() (*asset, error) {
	bytes, err := hardcoded_doerGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "hardcoded/_doer.go", size: 2468, mode: os.FileMode(436), modTime: time.Unix(1470961073, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _hardcoded_middlewareGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x57\x6f\x6f\xdb\x36\x13\x7f\x6d\x7f\x8a\x7b\xfc\xa6\xd2\x03\x57\x7e\xfa\x6c\xe8\x80\x0c\x41\xd0\x65\x69\x52\xac\x4b\x8a\x26\x5b\x5e\x0e\xb4\x74\x96\xd8\xc8\xa4\x46\xd2\x76\xbc\x20\xdf\x7d\x77\x24\x65\x49\xb6\x5b\x14\x1b\x30\x0c\x48\x51\x99\xba\xfb\xdd\x9f\xdf\xdd\xf1\xd4\x88\xfc\x41\x94\x08\x16\xcd\x1a\xcd\x78\x2c\x97\x8d\x36\x0e\x92\xf1\x68\xa2\xd0\xcd\x2a\xe7\x9a\xc9\x98\x7e\x94\xba\x79\x28\x33\xa9\x66\xe7\x35\x92\xe0\xec\x41\x6c\xd7\x88\x2f\x4b\x9d\xad\xbf\x99\xd5\xba\x2c\xd1\x4c\xc6\xa3\x87\xf5\xcf\xb2\x28\x6a\xdc\x08\x83\xf0\x65\x9d\xe5\x4e\x30\xe2\xd7\x42\x95\x99\x36\xe5\xec\x71\xc6\x96\x73\xad\x1c\x3e\x3a\x7e\x59\x9e\x87\x67\x42\x94\xae\x5a\xcd\xb3\x5c\x2f\x67\xa5\x36\xb2\xae\x45\x27\x37\xd2\x0d\x2a\x67\x44\x2e\x55\x39\x90\xec\x9d\xf7\x9f\xc9\x8f\xc9\x38\x1d\x8f\x67\x33\xb8\xbb\xf9\xf1\xe6\x04\xae\x11\x0b\x10\xb0\x11\x5b\x70\x1a\xe6\x2b\x59\x17\x90\xaf\xac\xd3\x4b\xe8\x9c\xcd\xb2\xac\xd3\xb8\xab\xa4\x85\x0d\x42\x2e\x14\x7c\x22\x49\xc8\x75\xb3\x05\xa1\x0a\xa8\xd1\x41\x83\xba\xa9\x11\x9a\x9a\x00\x85\xd1\x2b\x3a\xde\x90\x57\x67\x70\x63\xc0\x56\x7a\x45\xf0\xa4\xeb\xf5\x0c\x65\x05\x15\x1a\xe1\x10\x1c\x81\x9e\x9d\x9d\x8d\x17\x2b\x95\x7b\x85\x2e\xa5\x09\xa1\x38\x34\xc0\xac\x64\x57\x64\xa7\x46\x93\x0e\x7e\xc1\x13\xe5\x8b\xfc\x7b\x53\x50\x28\x75\x0d\x4a\xab\x97\x31\x43\x20\x3c\x2b\x5d\x28\xb0\x90\xc6\xba\x0c\x3e\xca\xb2\x72\x24\xb9\xf1\xa6\x81\xfe\xbc\x4f\x81\x2d\x8f\xd6\xe9\x8c\x47\x55\x34\x74\x72\x0a\x7d\xb6\xb3\x6b\xdc\x44\xf7\xa6\x10\xea\xc1\x1f\x4d\x42\xa6\xce\xaf\xde\x5c\x5f\x5e\xc0\xdd\xd5\xbb\xdb\x49\x9a\x76\x3e\xba\x8a\xb2\x17\xfc\xcb\x5a\x96\x29\xf9\x91\xdc\x17\x76\xf7\x32\xe4\x9a\xfe\x04\xcc\x25\xc5\xa2\x94\xde\x12\x89\x53\xe2\xc9\xc1\xbb\x17\x4b\xf2\xdf\x81\x5d\x99\xe0\x70\x45\xc1\x60\x6d\xd1\x63\x11\x15\x97\x3b\x3c\x76\x91\x0b\xc4\x4a\x95\xa3\x37\xdf\x9e\xb4\x81\x71\xde\x9d\xd4\xca\x42\xa1\xd5\x0b\x72\x47\x3c\x20\x48\x05\xc2\x23\xef\xfb\xe3\x25\x08\x65\xa3\x29\x97\x9c\x40\x42\x22\xe1\x78\x44\x14\x07\x43\xd2\x91\xed\x5a\xe7\xa2\x96\x7f\x20\xf3\x2e\x4d\xa1\xd0\xda\xa9\xaf\x16\xe9\x3c\x76\x2c\x8a\x39\xa5\xa4\x46\xa1\x48\x6e\xd5\x30\x58\xa9\xe1\x55\xf6\x1d\x24\x4c\xb4\x3d\x99\xcd\x06\x5d\xc0\x6d\x43\xff\xcd\xa4\xb5\x2b\xb4\xb3\x57\xdf\xbe\x7e\xfd\xbf\x74\x3c\xca\xdd\xe3\x55\xc7\x94\x28\x8a\x98\xdd\x3b\x1d\x73\x91\xc4\x78\x23\x19\xff\xcf\x3c\x1f\x47\x6a\x25\xd0\xce\xa1\x77\x90\xa7\xb0\xd4\x85\x5c\x6c\x23\xe8\xc5\xa3\x58\x52\xa9\x27\x9d\xc4\xd0\x83\x53\x88\x3d\xd7\x2b\xe5\xbe\xec\x78\x64\xd0\xad\x8c\x82\x88\x77\x6f\x44\xd3\xa0\x79\x8a\x2e\x9e\xf4\x4c\x3f\x8f\x9f\x7d\xcb\x0e\x25\x43\x61\x58\x67\x56\x39\x93\x20\xb8\x13\x15\x8d\x1c\x67\x61\x61\xa8\x7f\x99\x8e\x41\x9b\x50\x5d\xf0\x59\x44\x89\xa7\x8c\xab\x15\x66\xf0\xce\x11\xf7\x68\x43\x3f\xcc\xb7\x90\x1b\x14\xbe\x46\x04\x28\xdc\xec\x92\xb4\xa9\x50\xc1\x2d\x0f\xce\xab\xbb\xbb\x0f\xec\x03\xf1\x5b\xf3\x10\x21\x4e\x1b\x61\xad\x87\x10\x0c\xb6\x51\x0c\xce\x26\xad\xa3\x89\x9b\x8d\xdd\xb6\xc1\xfd\x20\xa2\xff\x4f\x5d\x93\xed\xf9\x47\xa1\xfb\xa9\x90\xe4\x7b\xaa\x69\xe7\x46\xb2\x09\x91\x7e\x44\xdb\x50\x11\xe3\xbd\x91\xbe\x27\x0d\xfc\x37\x9e\xff\x4e\x75\xe2\x52\x36\x43\x69\xe5\xea\x68\x6b\xfa\x07\xf2\xac\xf4\x83\x2a\x61\xfe\xb2\xe8\x45\xb6\xc3\x8e\x46\x99\xbb\x29\x6c\x08\x33\x1d\xb2\xd1\x66\x97\xd9\x50\x54\xb9\x64\x78\x21\xa8\xfa\x17\xda\xb4\xed\x65\xa1\x3f\x4e\x42\x7a\x48\x13\x55\x61\x7d\x7a\xe6\x82\xba\xf6\x52\x33\x68\x9b\x84\x0e\x87\xa7\x21\x71\xb0\x3f\x30\xf4\xfc\x13\xe6\x6e\x90\xd2\xab\x03\x5d\x0a\xf7\x30\x8e\x21\xd0\xf4\x78\xe6\x86\x79\xe3\x88\x8f\x58\x7a\xcb\xbc\x30\x39\x9c\x9c\x7d\x0f\x29\x59\x5f\x47\xca\x01\xbf\x3d\xf4\x1e\xc7\x3d\x1e\xfe\xb2\x29\xcf\xff\x21\x93\xc7\xfa\x9a\xf9\xb4\xe1\x69\x9f\x3a\x2f\x2e\xd1\x0e\x06\x39\xdc\x87\x2b\xd1\xe0\x52\xaf\x79\xf6\xf9\x4e\x61\x74\xba\xef\x2a\x41\x47\xd4\x4f\xf5\x01\xd6\xca\xee\xe1\x84\x64\x1c\x9f\x34\x7b\x09\x4a\xf7\x89\x7f\xda\x9f\x29\xbd\x4c\x26\x7f\x9b\x27\x86\xf7\xdd\xd3\x35\xcf\x3d\xd5\xe6\xaf\xa2\x5e\x61\xc8\xe9\x84\x46\x2e\x16\x3f\xe1\x76\xd2\x3e\xfb\x97\x93\x94\x15\xbf\xd8\x51\xa3\xe7\x96\x8b\x83\xa1\x19\x06\x11\xda\x38\x87\x6c\x43\x49\x56\x62\xc9\x13\x67\xc1\x7b\x01\x27\xef\x97\x8f\xef\x69\xf6\x50\x9f\xe8\x45\xb8\xde\x82\xcb\x7e\x6b\xa1\xb9\x46\xdb\x48\xde\x4e\x36\xaf\x1f\x2f\xab\x28\xd6\x86\x33\xf5\x3d\x4b\x8c\xf0\xf8\xd3\x24\xd0\x6b\xe0\xb5\x14\xd0\xdb\xa3\xb2\x5b\x82\x79\x4b\x53\xb6\x8d\x25\xf5\xa6\x16\x3c\x90\xd9\x00\x3e\x4a\x4b\x73\x58\xaa\x9d\x8d\x0a\x45\x41\x40\xd3\x30\x0f\x59\x26\xc4\x55\xb0\x31\xef\x59\xaf\x34\x36\x74\x59\xf1\x95\x48\x6d\x5f\xf1\x46\xe6\xc3\xa2\x6a\x61\xbd\x58\x21\x47\x2e\x97\x7f\x41\x79\xf0\x86\xe3\x1c\x2e\x1b\xbf\xd1\x7c\xd2\xbc\x42\x84\x68\x29\x4a\x5a\x4a\xfc\x85\xc2\xae\xf3\x76\xb1\xd0\xbd\x8b\x2a\xa4\x27\x23\x0c\xdd\x5c\x13\xbd\x3c\xa3\x4d\x46\xc4\x66\x1f\x88\x58\x3a\x5e\x0b\xba\x2c\x9a\x03\x12\xe8\x8d\x5c\x80\xcd\xa7\x80\xc6\x5f\xfb\x7d\x81\xcb\x5a\xcf\x45\x7d\xc7\xf6\x4c\x92\x32\xf8\xe8\xe2\x91\x5f\xba\xa4\x2f\xc6\x45\x79\x15\xf9\x61\x99\xd1\x67\x5e\x9e\x0b\x63\x24\x21\x99\x2c\x1c\xa4\xe9\xf7\xde\xea\x7f\x4e\x41\xc9\xda\x27\x60\x44\x2e\x0e\x7d\xb8\x75\xc2\x38\xf6\x34\x09\x81\x71\x33\x3c\x87\x45\xed\xeb\x14\xa6\x83\xb7\xe7\x5c\x10\x37\x8b\xc4\xe6\xa9\x47\xa2\x7f\x05\x2e\xf8\x22\x6d\xb2\xb7\x52\x49\x5b\xf1\x3d\x46\xa8\xd9\x7b\x5d\x5e\xac\x49\x31\x99\xc4\x1a\xfc\xcd\x60\x8e\x72\x8d\x85\x6f\xc8\xa0\xe5\x69\x4f\x5b\x4f\x8e\xe8\x2c\x3c\x66\xd4\x79\x4e\x3e\xd3\xca\x03\x0f\xe3\x2d\x4d\xb3\xc1\x47\xe1\xdb\xdc\x36\xe9\x61\xaf\x1f\xd9\xd0\xf8\xcc\x1e\xdd\x90\xc3\x85\xd7\x2e\x31\xad\x78\xbb\x96\xec\x56\x5b\xea\x1e\x5e\x63\x68\x45\x65\x0b\x16\x71\xe9\x3f\x6c\xb8\x97\x50\x58\x62\xaf\xfd\xd6\xe9\xad\xc8\xbb\x75\x98\x77\x98\x88\x68\xdb\x21\xd1\x8e\x80\xd0\x76\x47\x97\xca\xbd\x6f\x93\x7f\xbe\xed\xda\x8f\x45\x22\xc6\x25\x24\x14\xc1\x68\x12\x3f\x3d\x4f\x79\x91\x64\xda\xaa\xac\xb7\x2f\xf5\x98\xf8\x33\x00\x00\xff\xff\x71\x28\x45\xb2\x0e\x0f\x00\x00")

func hardcoded_middlewareGoBytes() ([]byte, error) {
	return bindataRead(
		_hardcoded_middlewareGo,
		"hardcoded/_middleware.go",
	)
}

func hardcoded_middlewareGo() (*asset, error) {
	bytes, err := hardcoded_middlewareGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "hardcoded/_middleware.go", size: 3854, mode: os.FileMode(436), modTime: time.Unix(1470955988, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"hardcoded/_doer.go": hardcoded_doerGo,
	"hardcoded/_middleware.go": hardcoded_middlewareGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"hardcoded": &bintree{nil, map[string]*bintree{
		"_doer.go": &bintree{hardcoded_doerGo, map[string]*bintree{}},
		"_middleware.go": &bintree{hardcoded_middlewareGo, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

