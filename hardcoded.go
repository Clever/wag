// Code generated by go-bindata.
// sources:
// hardcoded/_doer.go
// hardcoded/_middleware.go
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _hardcoded_doerGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xa4\x54\x41\x6f\xdc\x36\x13\x3d\x4b\xbf\x62\x22\xe0\x43\xa4\x2f\x5b\xad\x2f\xb9\x24\x0d\x7a\x58\x27\x75\x0e\xad\x8b\x74\xd1\xf6\xca\x15\x29\x2d\x63\x89\x64\x49\xca\xf6\xc2\xd8\xff\xde\x19\x92\xd2\x6a\xd7\x69\x50\xc0\x86\x01\x2d\xc9\xe1\x9b\xf7\x66\x1e\xc7\xb0\xe6\x8e\x75\x02\x9a\x5e\x0a\xe5\xf3\x5c\x0e\x46\x5b\x0f\x65\x9e\x15\xed\xe0\x0b\xfc\x28\xe1\xd7\x7b\xef\x4d\x91\xe3\xa2\xd3\x3d\x53\x5d\xad\x6d\xb7\x7e\x5c\xd3\x49\xa3\x95\x17\x8f\xf8\xf5\x8f\x31\xa8\x9a\x20\xfe\x35\xb6\x98\xb3\x68\x83\x39\x2d\x6b\xa4\xea\x30\x5c\xfa\xfd\xb8\xab\x1b\x3d\xac\x17\xfb\xcb\xdf\x3f\x74\x1a\xef\xae\xd7\xc0\xb5\xb0\x20\x1d\x30\x05\x12\x21\x6d\xcb\x1a\x01\xad\xb6\x50\x70\x8d\x71\x05\x10\x15\xb0\xe2\xef\x51\x38\xef\xc0\x68\xe7\xe4\xae\x3f\xc0\x03\xa6\x80\x07\xcb\x8c\xc1\xa8\xdc\x1f\x8c\x48\x50\x33\xc8\x53\x9e\x5d\xeb\xb2\x81\xff\x13\x42\xbd\x09\x45\x59\x81\x4d\xeb\x2f\x11\xb1\x82\x72\x5a\x3b\xa3\x95\x13\x2b\x10\xd6\x6a\x5b\xe5\xc7\x3c\xa2\x6a\xf3\x2b\x1b\xc4\xc6\x3f\x82\xf3\x76\x6c\xfc\xd3\x31\xf0\xde\x31\x27\x12\xc6\x0d\x53\xbc\xc7\xd4\x06\x13\x6b\x3b\x38\xf0\x7b\x11\xce\xcf\xb8\x47\x34\xda\xbe\x26\x9e\x27\xb0\x76\x54\x0d\x94\x7c\x3e\xaa\xe0\x05\xb4\x49\xb5\x15\x7e\xb4\x0a\x52\x1b\x6b\x44\xb3\xf5\x26\xf6\xab\xac\x56\xd0\x20\x5a\x90\x87\x2a\x52\x37\x02\x23\xc6\xb9\x9b\x36\xc0\xeb\xf3\xc2\x47\xf6\xcb\xf0\x28\x80\xf2\xf1\x50\xf9\x7c\x21\x65\x11\xf7\x52\x35\x79\x86\x3a\xe0\xdd\x07\x58\x68\xc8\xb3\xd8\x14\xda\xc6\xd3\xfa\x0f\xd6\x8f\xa2\x9c\x1b\xf5\x74\xac\xea\x12\xe9\x21\x03\x0c\xbd\x67\xc8\xd5\x2c\xfd\x59\xff\x6e\x98\xca\x33\x94\xbf\xbd\xbd\xbe\x7d\x47\xc2\xc1\xb3\xce\xa1\xd8\x9e\xf9\xa4\x5e\x2a\x33\x7a\xe0\xcc\xb3\x9f\xf2\x4c\xb6\x60\x98\x45\x00\xba\x49\x59\x2f\xd1\x3e\x59\x3d\x4c\xf4\x90\x51\xf5\x7e\x19\xff\xea\x03\x28\xd9\x53\xa5\x32\x24\x72\x71\xd9\x33\x1b\xa2\x12\xfd\xd5\xd9\xe9\x66\x2f\x7b\x7e\xdb\x96\x27\xb0\x53\x11\x2a\xd4\x76\x04\xd1\x3b\xf1\xdf\x90\x29\x3c\x28\xc1\xd2\x92\x04\x67\xea\x2d\x86\x0a\x5b\x56\xf5\x67\xf5\x55\x34\xbe\xc4\xad\x93\x4f\x10\x73\x09\x77\xb3\xdd\xfe\x76\x23\x18\x17\xd6\x7d\xe7\x68\xc3\xac\x95\x08\x69\xeb\xb8\x51\x61\x25\x28\xdf\xa2\x04\xc9\x9d\xb8\x5c\x01\x8e\xa5\xfa\x23\x75\xba\x2d\x8b\x46\x8f\x3d\x57\xaf\x3d\x56\x9e\xc8\xcc\x4e\xdc\x47\x64\x28\xff\x77\x5f\x15\xc1\x18\x51\x49\xc2\xe1\x35\x27\x87\x2f\x4d\x8d\x27\xf6\x30\x3d\x4a\x5a\x48\xe1\xe0\xed\xd5\x5f\xdf\x72\x74\x88\x7d\xe6\xe7\xb3\xbf\x60\xee\x8c\x8b\x96\x8d\xbd\xff\x92\xe0\x70\xcc\xa4\x6c\x7f\xe2\x20\xa2\xdd\x03\x44\x46\x38\xca\x40\x89\x07\x48\x13\x12\x87\x01\xc3\xe9\x78\x8f\xbc\x25\x17\x71\x36\xa8\x71\xd8\x61\x46\xdd\xce\xec\xd0\x70\x5c\x87\xb1\xc7\xc8\x39\x5e\x36\x63\xcf\x6c\x14\x13\xe8\xd6\xf1\x6d\xcd\xc9\xc8\x65\x53\x8a\xa9\x69\xab\x19\x0e\xd9\x55\x97\xa7\xcb\xc9\x90\x4e\x08\x2d\xbe\x1d\x44\x8b\xb7\x0f\x29\xfa\xe9\x38\xa3\x9d\x95\x75\x02\x93\x51\xc9\x9d\x38\x84\x6f\x38\x23\xdc\x56\x76\xa3\xc5\x47\xa4\x55\x0d\x9f\x50\x0e\x17\x03\x3e\x68\x1f\xb7\xc0\x8c\x16\x07\x38\x11\xf4\xaf\x1d\x7c\x1d\x9d\x47\xbd\xd8\x78\x2c\x26\x26\xc0\x7a\x7c\xbb\x3a\x56\x76\x7b\x0f\x4a\x3f\xd4\x8b\xa6\x4d\x4c\x9e\x0f\xd2\xb9\xa7\x2f\x9f\x3d\x16\x37\x57\xd3\x8b\x39\xb3\xda\xf4\x92\x9e\x3b\x7b\xbe\x43\x36\x0d\x63\xe6\x73\x9b\x8a\x14\x32\x42\xc3\xc8\xe6\x3b\x91\xf4\x71\x3a\x54\xb1\x1a\x09\x42\x0e\x83\xe0\x92\x79\xd1\x1f\x62\x19\xfd\x1e\x0b\x6e\xac\xc6\xa2\xe0\x3f\xd6\xb9\x11\x06\x5d\xa5\xfa\x43\x48\xf0\xf3\xc7\xad\x23\xd8\x05\x68\x20\x68\xeb\x5f\x84\xdf\x6b\x4e\x2c\x0b\x0c\x2a\xbe\xc3\x93\xe6\xe4\xc2\x3f\xc1\x2c\xb4\xc0\x89\x74\x77\x31\x7f\xd3\xc0\x3d\xf7\x0b\xce\x5c\xb2\x5d\xc8\xfb\x0a\xaf\xa4\x4c\x01\x2f\xd4\xee\xec\x01\xc5\x9c\x64\x78\x49\xe0\x57\xef\xf1\xfb\xe3\x94\x1f\x17\x6f\xde\x04\x00\xd2\x80\x34\x69\x98\xf9\xd1\x6d\x34\x17\x18\xf5\xf6\xea\x2a\x1c\x66\x3b\x2b\xd8\x1d\xfe\x38\x86\x54\x53\xa7\x2e\x1b\x75\x9a\x15\x27\xc5\xc7\xfc\x9f\x00\x00\x00\xff\xff\x06\x3d\x32\x3d\x2d\x09\x00\x00")

func hardcoded_doerGoBytes() ([]byte, error) {
	return bindataRead(
		_hardcoded_doerGo,
		"hardcoded/_doer.go",
	)
}

func hardcoded_doerGo() (*asset, error) {
	bytes, err := hardcoded_doerGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "hardcoded/_doer.go", size: 2349, mode: os.FileMode(420), modTime: time.Unix(1471310283, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _hardcoded_middlewareGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x54\x41\x6f\xdb\x3a\x0c\x3e\xdb\xbf\x82\xcf\x27\xfb\x21\x4f\x39\xbc\x5b\x87\x1e\x8a\xac\x6d\x0a\x74\x6d\xd1\x64\xe8\x71\x50\x6c\xda\xd6\xe2\x48\x9e\xc4\x38\x29\x86\xfc\xf7\x51\xb2\x93\xba\x6b\x57\xec\x10\x20\xa2\x3e\x7e\xfc\x3e\x92\x56\x2b\xf3\xb5\xac\x10\x1c\xda\x0e\x6d\x1c\xab\x4d\x6b\x2c\x41\x1a\x47\x89\x46\x9a\xd6\x44\x6d\x12\xf3\xa1\x32\xed\xba\x12\x4a\x4f\x67\x0d\x32\x70\xba\x96\xcf\x1d\xe2\x7f\x95\x11\xdd\xff\xd3\xc6\x54\x15\xda\x24\x8e\xd6\xdd\x17\x55\x14\x0d\xee\xa4\x45\xf8\x38\x67\x73\x02\x7a\x7e\xd3\xa2\x26\x2b\x73\xa5\x2b\xce\x53\x54\x6f\x57\x22\x37\x9b\xe9\x28\x3e\xfe\xcf\x1c\x49\x9c\xc5\x71\xb9\xd5\x39\xec\x18\xfe\x52\x36\xb5\x66\x4b\x68\xc1\x2b\x17\x73\xa9\x39\x6c\xb3\x57\x27\xf8\xc9\x05\xeb\xe1\xff\xd9\x39\x8c\x45\x8b\x3b\xdc\x0d\x0c\x13\xe8\x6d\x85\x50\xb2\xbc\xff\x7c\x7f\x06\xb3\xf9\xc5\xdd\xf5\x25\x2c\xe7\x37\x8b\x24\xcb\x5e\x58\xce\x61\x10\x36\xd2\x31\xdc\x31\xca\x22\x6d\xad\x86\x21\x10\x1f\xe2\x78\x3a\x7d\x9b\x00\xb9\x45\x49\xe8\x40\x82\xc6\x1d\xb8\x56\x6a\xd0\x72\x83\x05\xc8\xd2\x1b\xa2\x1a\xe1\xeb\xe3\x2d\xb4\x92\x6a\x30\x65\x38\x5b\xfc\xb1\x45\x47\xc2\x13\xde\x10\xb4\x8d\xcc\x99\x80\x6a\xe5\xfa\x7c\xa5\xc7\x30\xc8\x8d\x26\xdc\xd3\x04\x4a\x63\x61\xeb\x10\x56\xcf\x60\x18\x60\x8f\xda\x1c\x74\x4a\xc2\xa8\xd1\x62\xc1\x34\x57\xd6\x6c\x66\x7d\x6a\x9a\x85\x52\x25\x8b\x0c\x05\x70\xaf\x1c\x39\x5f\xe7\x58\xa3\x46\x59\x30\xd1\x24\x14\x0e\x98\xde\x57\xe1\x8b\x05\x65\x2f\x93\xe7\xd1\x35\x0d\xac\x90\xd9\xf2\x5a\x35\x45\x6f\x4b\x52\xc8\x13\xfd\x74\xdf\x69\xec\xc7\xb3\x3d\xb5\x7b\x14\xbe\x62\xa6\xd4\xd3\xa5\xbb\x3e\xfe\x88\xae\x35\xda\xe1\x93\x55\x61\xd4\x16\xfe\x1d\xe2\xc1\x45\xe6\x79\x22\x76\x7a\x41\x84\x9b\x96\x80\x0c\x7c\x37\xec\x72\xb0\xcd\x56\x2a\x24\xf2\xdb\xea\xf5\x21\x37\xa0\x34\x50\x72\x9f\x82\xed\xa1\x07\x82\x39\x4c\x7b\xc7\x33\xf4\x6b\x66\x05\x4f\x4f\x3c\xf0\xf4\x38\xdc\x49\xcb\x4c\x6f\x3a\xcd\x37\xaa\x04\x97\x4f\x00\x6d\xd8\xcd\x31\xe0\xba\x31\x2b\xd9\x2c\x7d\x3d\x9b\x66\x9e\x3c\xba\xdc\xfb\x4b\x4a\xc7\xb0\xf9\x72\xf9\x30\x1f\x86\xe0\x31\x7f\xb8\x9b\x49\x6b\x15\x13\x59\xd1\x07\xb2\xec\x53\x28\xfa\xcf\x39\x68\xd5\x04\xff\x11\x2b\x7c\x2d\x61\x41\xd2\x92\x17\x9a\xf6\xbe\x78\xb9\xa3\x03\x60\xc3\xab\xf4\x77\x09\x93\x57\xb7\x33\x3f\xf4\xfb\x32\x75\x79\x16\x98\xf8\x57\x60\x89\xbe\x35\xe2\x4a\x69\xe5\xea\xd4\xc7\xf9\x74\x6b\xaa\xcb\x8e\x13\xd3\x64\xd8\xb3\x6f\x16\x73\x54\x1d\x16\x49\x76\xca\x0a\x03\xce\x8e\x4a\xde\xc9\x29\x03\xe7\x90\x73\x08\xdc\xfc\xa9\xcd\x68\xff\x7b\xab\x87\x6d\x7f\xe2\x97\x25\x88\xb7\xe2\xb4\xff\x13\x16\xc7\x2f\x4f\x14\xd5\x62\xe1\xdf\x4c\xdf\xd2\x74\xc7\x1b\x24\x3c\xfa\x08\xeb\x69\xbd\xab\x43\xc6\x1f\xfc\xaf\x00\x00\x00\xff\xff\xd6\x98\x0e\x95\x66\x05\x00\x00")

func hardcoded_middlewareGoBytes() ([]byte, error) {
	return bindataRead(
		_hardcoded_middlewareGo,
		"hardcoded/_middleware.go",
	)
}

func hardcoded_middlewareGo() (*asset, error) {
	bytes, err := hardcoded_middlewareGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "hardcoded/_middleware.go", size: 1382, mode: os.FileMode(420), modTime: time.Unix(1471308916, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"hardcoded/_doer.go": hardcoded_doerGo,
	"hardcoded/_middleware.go": hardcoded_middlewareGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"hardcoded": &bintree{nil, map[string]*bintree{
		"_doer.go": &bintree{hardcoded_doerGo, map[string]*bintree{}},
		"_middleware.go": &bintree{hardcoded_middlewareGo, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

