// Code generated by go-bindata.
// sources:
// hardcoded/_doer.go
// hardcoded/_middleware.go
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _hardcoded_doerGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xa4\x56\x41\x6f\x1b\x37\x13\x3d\x6b\x7f\xc5\x44\xc0\x87\xec\x7e\x51\x57\xbe\xe4\x92\x34\xe8\x41\x4e\xea\x1c\x5a\x17\xa9\xd0\xf6\x4a\x2d\xb9\x12\xe3\x5d\x72\x4b\xce\xda\x16\x0c\xfd\xf7\xce\x90\x5c\x89\x92\x83\xa0\x85\x83\x00\x5a\x92\xc3\x37\xef\x0d\x1f\x87\x1e\x44\x73\x27\xb6\x0a\x9a\x4e\x2b\x83\x45\xa1\xfb\xc1\x3a\x84\xb2\x98\xcd\x1b\x6b\x50\x3d\xe2\x9c\x3e\xdb\x3e\xfc\x18\x85\xcb\x1d\xe2\xc0\xdf\xa8\x7b\x35\x2f\x8a\x99\x1d\x68\x9f\x13\x8d\x36\x5b\x98\x6f\x35\xee\xc6\x4d\xdd\xd8\x7e\x99\xcd\xe7\xdf\x3f\x6c\x2d\xef\xde\xda\x4e\x98\x6d\x6d\xdd\x76\xf9\xb8\x64\xd8\x94\x6c\xd9\xe0\x63\xcc\x50\x15\xc5\x72\x09\xd2\x2a\x07\xda\x83\x30\xa0\x29\xc0\xb5\xa2\x51\xd0\x5a\x07\x73\x69\x09\x6d\x0e\x1c\x0c\x4e\xfd\x3d\x2a\x8f\x1e\x06\xeb\xbd\xde\x74\x7b\x78\x20\x22\xf0\xe0\xc4\x30\x50\x54\x81\xfb\x41\x25\xa8\x23\xc8\x53\x31\xbb\xb6\x65\x03\xff\x67\x84\x7a\x15\xe4\x2f\xc0\xa5\xf1\x97\x88\x58\x41\x39\x8d\xfd\x60\x8d\x57\x0b\x50\xce\x59\x57\x15\x87\x22\xa2\xda\xe1\x57\xd1\xab\x15\x3e\x82\x47\x37\x36\xf8\x74\x08\xbc\x37\xc2\xab\x84\x71\x23\x8c\xec\x28\xf5\x40\x89\xad\xeb\x3d\xe0\x4e\x85\xf5\x33\xee\x11\x8d\xa7\xaf\x99\xe7\x09\xac\x1d\x4d\x03\xa5\x3c\x2e\x55\xf0\x02\xda\xac\xda\x29\x1c\x9d\x81\x54\xe8\x9a\xd0\x5c\xbd\x8a\xd5\x2f\xab\x05\x34\x84\x16\xe4\x91\x8a\x74\x66\x81\x91\x90\xd2\x4f\x13\x80\xf6\xbc\xf0\x91\x7d\x1e\x1e\x05\x70\x3e\x19\x2a\x5f\x64\x52\xb2\xb8\x97\xaa\x29\x66\xa4\x03\xde\x7d\x80\x4c\x03\x7b\x92\x0f\x85\xa7\x69\xb5\xfe\x43\x74\xa3\x2a\x8f\x07\xf5\x74\xa8\xea\x92\xe8\x11\x03\x0a\xbd\x17\xc4\x75\x80\xcc\xa1\xf5\xef\x83\x30\xc5\x8c\xe4\xaf\x6f\xaf\x6f\xdf\xb1\x70\x40\xb1\xf5\x24\xb6\x13\x98\xd4\x6b\x33\x8c\x08\x52\xa0\xf8\xa9\x98\xe9\x16\x06\xe1\x08\x80\x77\x72\xd6\x4b\xb4\x4f\xce\xf6\x13\x3d\x62\x54\xbd\xcf\xe3\x5f\x7d\x00\xa3\x3b\xae\xd4\x8c\x88\x5c\x6c\x46\xe1\x42\x54\xa2\xbf\x38\x5b\x5d\xed\x74\x27\x6f\xdb\xf2\x04\x76\x2a\x42\x45\xda\x0e\xa0\x3a\xaf\xfe\x1d\x32\x87\x07\x25\x54\x5a\x96\xe0\x87\x7a\x4d\xa1\xca\x95\x55\xfd\xd9\x7c\x55\x0d\x96\x34\x75\xf2\x09\x61\xe6\x70\x37\xeb\xf5\x6f\x37\x4a\x48\xe5\xfc\x77\x96\x56\xc2\x39\x4d\x90\xae\x8e\x13\x15\x55\x82\xf3\x65\x25\x48\xee\xa4\xe1\x02\xa8\xeb\xd4\x1f\xf9\xa4\xdb\x92\x9a\xd1\xd8\x49\xf3\x1a\xa9\xf2\x4c\xe6\xe8\xc4\x5d\x44\x86\xf2\x7f\xf7\xd5\x3c\x18\x23\x2a\x49\x38\xb2\x96\xec\xf0\xdc\xd4\xb4\xe2\xf6\xd3\xa5\xe4\x81\x56\x1e\xde\x5e\xfd\xf5\x2d\x47\x87\xd8\x67\x7e\x3e\xfb\x17\xcc\x3d\x93\xaa\x15\x63\x87\x5f\x12\x1c\xb5\x99\x94\xed\x4f\x6a\x44\xd3\x6c\xe4\x44\xcd\x0c\x8c\x7a\x80\xd4\xf1\xa8\x1d\x08\x04\x7b\x4f\xcc\xb5\x54\xb1\x3b\x98\xb1\xdf\x50\x4e\xdb\x1e\xf9\x91\xe5\xa4\x0d\x8d\x4f\xb0\x77\x50\x37\x63\x27\x5c\x94\x13\x08\xd7\xf1\x76\x65\xe9\xd8\x69\x53\x92\xe9\xe0\x16\x47\x40\x62\x58\x5d\xae\xe6\xdd\x21\xad\x30\x5e\xbc\x3f\x84\x16\x77\xef\x53\xf4\xd3\xe1\x88\x76\x56\xda\x09\x4c\x47\x2d\x77\x6a\x1f\x7e\xc3\x1a\xe3\xb6\x7a\x3b\x3a\xba\x48\xd6\xd4\xf0\x89\x04\x49\xd5\xd3\xa5\xc6\x38\x05\xc3\xe8\xa8\x89\x33\x41\x7c\xed\xe1\xeb\xe8\x91\x14\xd3\xe1\x53\x41\x29\x01\x55\xe4\xdb\xf5\x71\x7a\xbb\x43\x30\xf6\xa1\xce\x0e\x6e\x62\xf2\xbc\x99\x1e\xcf\xf5\xe5\xfd\xc7\xd1\xe4\x62\xba\x35\x67\x76\x9b\x6e\xd3\x73\x77\x1f\xf7\xb0\x55\x43\xab\xf9\xdc\xa6\x22\x85\x8c\xd0\x08\xb6\xfa\x46\x25\x7d\x92\x17\x4d\xac\x46\x82\xd0\x7d\xaf\xa4\x16\xa8\xba\x7d\x2c\x23\xee\xa8\xe0\x83\xb3\x54\x14\xfa\x4f\x75\x6e\xd4\x40\xbe\x32\xdd\x3e\x24\xf8\xf9\xe3\xda\x33\x6c\x06\x1a\x08\xba\xfa\x17\x85\x3b\x2b\x99\xe5\x9c\x82\xe6\xdf\xe1\xc9\xbd\x32\xf3\x4f\x30\x0b\x0f\xa8\x2b\xdd\x5d\xf4\xe0\xd4\x74\xcf\xfd\x42\x7d\x97\x6d\x17\xf2\xbe\xa2\x2d\x29\x53\xc0\x0b\xb5\x3b\xbb\x44\x31\x27\x5b\x5e\x33\xf8\xd5\x7b\xfa\xfd\x71\xca\x4f\x83\x37\x6f\x02\x00\x6b\x20\x9a\xdc\xd0\x70\xf4\x2b\x2b\x15\x45\xbd\xbd\xba\x0a\x8b\xb3\x8d\x53\xe2\x8e\x3e\x0e\x21\xd5\x74\x52\x97\x07\x75\xea\x17\x27\xc5\xd3\x03\xcf\x7f\xe7\xd8\x11\xff\x43\x13\x58\xc7\x1d\x61\x67\x7d\x9d\xbc\x7e\x7a\xff\x30\x87\x7c\xf1\x6b\x4e\xf2\xb1\xbe\x48\x4c\x47\x19\xe5\x87\x3b\x4b\x87\xde\xa8\x2e\x3c\x86\xd9\xa5\x4e\xb1\xe7\x6f\xff\x25\x12\x95\x86\x45\x91\xf2\x08\xc2\x6f\xeb\x8c\xcb\xe7\x02\x46\xfe\xa4\xe5\x45\xc4\xf3\xa6\xfb\x4f\x00\x00\x00\xff\xff\x89\x34\x74\x83\x63\x0a\x00\x00")

func hardcoded_doerGoBytes() ([]byte, error) {
	return bindataRead(
		_hardcoded_doerGo,
		"hardcoded/_doer.go",
	)
}

func hardcoded_doerGo() (*asset, error) {
	bytes, err := hardcoded_doerGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "hardcoded/_doer.go", size: 2659, mode: os.FileMode(420), modTime: time.Unix(1473459168, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _hardcoded_middlewareGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x55\x4d\x73\xdb\x46\x0c\x3d\x93\xbf\x02\xd5\x89\xec\xc8\xab\x4b\x4f\xcd\xf8\x90\x71\xe3\xda\x33\x49\x9a\x89\xd5\xc9\x21\x93\xe9\xac\x48\x50\xdc\x88\xda\x65\x77\x21\xc9\x99\x8e\xfe\x7b\x81\xdd\x95\x4c\xc5\xee\xc7\xc1\x16\x89\x05\x1e\xf0\x1e\x80\xe5\xa8\x9b\x8d\x5e\x23\x04\xf4\x7b\xf4\x65\x69\xb6\xa3\xf3\x04\x55\x59\xcc\x2c\xd2\xa2\x27\x1a\x67\x25\xbf\xac\xdd\xb8\x59\x2b\x63\x17\x37\x03\xb2\xe3\x62\xa3\xbf\xed\x11\xaf\xd6\x4e\xed\x7f\x5a\x0c\x6e\xbd\x46\x3f\x2b\x8b\xcd\xfe\x9d\x69\xdb\x01\x0f\xda\x23\xfc\x7b\xcc\xf6\xec\x28\xf8\x6e\x44\x4b\x5e\x37\xc6\xae\x39\xce\x50\xbf\x5b\xa9\xc6\x6d\x17\x13\xfb\xf4\x99\x31\x66\x65\x5d\x96\xdd\xce\x36\x70\x60\xf7\xa7\xb4\x95\x30\x31\x0d\xbe\xd7\x5b\x66\x45\x9e\xbd\xe7\xe0\xdd\x8e\xd0\x83\xb0\x51\x77\xda\xb2\xab\xaf\x2f\xde\xe0\xaf\xb2\xe8\xf3\xe3\xcf\xd7\x90\xd3\x4c\x50\x13\x42\x5d\x16\x8b\x05\xbc\x65\xba\x52\xe8\x13\x05\xe0\x5a\x31\xc0\xa0\x03\xcd\xc1\x28\x54\x5c\xd4\x30\xc0\x0a\xc1\xef\x2c\x74\xc6\x07\x52\x31\x74\xd9\x9b\x00\x5b\xbd\x61\x67\x43\x10\x1c\x50\xaf\x09\x1c\xf5\x9c\x77\x02\xd7\xeb\x00\xba\x69\x30\x04\x20\xf1\x41\x48\x12\x47\x8c\x18\x72\xa1\xb4\xb1\x5f\xb1\x21\x86\xb4\xd9\xdb\xe3\x9f\x3b\x0c\xc4\x65\x59\xc2\x47\xc9\x7d\x22\x77\x7d\x11\xa9\xde\xe3\xa1\xca\x47\xf3\x9c\x23\xda\x26\x22\xd6\x4c\xda\x23\xed\xbc\x85\xec\x59\x1e\xcb\x52\xea\xf8\x5e\x24\x68\x3c\x6a\x62\x6a\x1a\x2c\x1e\x20\x8c\xda\x82\x65\x84\x16\x74\x27\xf2\x4b\x65\xbf\x7f\x7c\x0b\xa3\xa6\x1e\x5c\x37\xad\x54\x09\xe0\x3d\xc1\x38\x68\x66\xcd\x27\x2c\x53\x8c\x37\xf6\x25\x42\x73\xe8\x9c\x87\x5d\x40\x58\x7d\xcb\xea\xe5\xda\x02\xec\x8d\x86\xc9\xa8\xa8\x07\x86\xb9\xf5\x6e\x7b\x93\x42\xab\x3a\xa6\xea\xb8\xc8\x98\x00\x1f\x4d\x88\xd2\x9d\x73\xf4\xa8\x5b\x06\x9a\xc7\xc4\xd1\x27\xf1\x6a\x25\x59\xac\x6c\xd2\xa9\x53\x9f\x35\x34\xbd\x19\xda\x44\x8b\xfb\x23\x71\x2a\xcd\xe7\xf3\x61\xea\xff\x63\x12\x4f\x72\x4f\xcc\xb7\x8c\x54\x09\x5c\x75\x48\xf6\x8f\x18\x46\x67\x03\x7e\xf2\x86\xa4\x79\x1e\x7e\xcc\xf6\xc8\xa2\x16\x1c\x99\x96\xd7\x44\xb8\x1d\x49\xe6\xe8\xab\x63\x96\x99\x36\x53\x59\x23\x91\x8c\xb1\xd4\x27\x33\xd4\x39\xe8\x58\xa7\x48\x3b\x6b\xc0\x83\xc3\xab\x19\x57\x89\xb7\xc2\x2b\xee\x9e\xfa\xc0\xdd\x63\xf3\x5e\x7b\x46\x7a\xa6\x34\x9f\x98\x0e\x42\x33\x07\xf4\x71\x95\xa6\x0e\xbf\x0e\x6e\xa5\x87\xa5\xe4\xf3\x55\x2d\xe0\xc5\x9b\x47\x39\xa4\x6a\xea\x76\xb7\x5c\x7e\xb8\xcb\x4d\x10\x9f\xe2\x1f\x0e\x6f\xb4\xf7\x86\x91\xbc\x4a\x86\xba\x7e\x15\xb3\xfe\x70\x0d\xd6\x0c\x51\x80\x82\x4b\xbc\xac\xe1\x81\xb4\x27\xa9\xb4\x4a\xc4\x78\xba\x8b\x23\xe0\xc0\xb3\xf4\xff\x02\xe6\x17\xa7\x37\xd2\xf5\xdf\xba\x2a\x34\x75\x44\xe2\xbf\x16\x3b\x14\x6d\xd4\xad\xb1\x26\xf4\x3c\x70\xa9\x13\x69\x4b\x93\xfc\xf7\xbf\xa4\x65\xe5\x95\x8b\x2b\xae\x4d\x3b\x1d\xc1\x16\x57\xbb\x78\xc7\x70\x24\x89\x8a\x72\x65\x54\x5b\x3d\x7e\x4e\x37\xda\x97\xf4\x53\x27\xb5\xb3\xd2\x9c\xf1\x2c\xed\x7d\xcc\x55\xb1\xe9\x3c\xf6\x97\x75\x2f\xd9\xf6\x4e\x8f\x51\xdf\x17\xec\x27\x69\xe9\xa4\xe9\xf5\x44\x53\x69\x30\x93\x30\x2d\x43\x6e\xe2\x75\xf9\x79\xe6\xe8\x2a\xce\x91\xbf\x4a\x47\xb3\x2f\xaf\xe4\x30\xfa\x17\xf9\x62\x99\x6e\xa1\x7f\x2a\xac\x56\xaf\xdb\xf6\xf4\xf6\x1c\x68\x9e\x93\x09\xd9\xa8\xef\x51\xf4\x64\x66\x7c\x0d\xbf\xd9\x73\xe5\xd5\x2c\xcb\xf6\x87\xc7\x06\xcd\x1e\xdb\x59\x7d\x6e\x43\x5c\x99\xfa\xd4\xda\x17\x62\xba\xd8\xa4\x1c\x73\xac\xe4\x3f\x5f\x5e\x37\xf4\xf8\xfd\xf0\xe6\x0a\x3f\xf1\xd7\x26\x4e\x83\x9f\x4a\x1b\xc6\xd8\xe5\x5e\x3d\xc8\x77\x54\x66\xb4\x3a\xf0\x4e\x2a\xf1\x3e\xb9\x25\x58\x19\x93\x63\xcd\x57\xe8\xdf\x01\x00\x00\xff\xff\xbc\xa4\xd7\xff\x7a\x07\x00\x00")

func hardcoded_middlewareGoBytes() ([]byte, error) {
	return bindataRead(
		_hardcoded_middlewareGo,
		"hardcoded/_middleware.go",
	)
}

func hardcoded_middlewareGo() (*asset, error) {
	bytes, err := hardcoded_middlewareGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "hardcoded/_middleware.go", size: 1914, mode: os.FileMode(420), modTime: time.Unix(1472843727, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"hardcoded/_doer.go":       hardcoded_doerGo,
	"hardcoded/_middleware.go": hardcoded_middlewareGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"hardcoded": &bintree{nil, map[string]*bintree{
		"_doer.go":       &bintree{hardcoded_doerGo, map[string]*bintree{}},
		"_middleware.go": &bintree{hardcoded_middlewareGo, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
