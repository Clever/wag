// Code generated by go-bindata.
// sources:
// hardcoded/_doer.go
// hardcoded/_middleware.go
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _hardcoded_doerGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xa4\x54\x51\x6f\xdb\x36\x10\x7e\x96\x7e\xc5\x55\xc0\x50\x69\xf5\xe4\xbc\xf4\xa5\x5d\xb1\x07\xa7\x5d\xfa\xb0\x65\xe8\x8c\x6d\xaf\xb4\x48\xc9\x6c\x24\x92\x23\xa9\x24\x46\xe0\xff\xbe\x3b\x92\x92\x65\xa7\x28\x06\x24\x08\x60\x91\x77\xfc\xee\xfb\x8e\x1f\xcf\xb0\xe6\x8e\x75\x02\x9a\x5e\x0a\xe5\xf3\x5c\x0e\x46\x5b\x0f\x65\x9e\x15\x8d\x56\x5e\x3c\xfa\x02\x3f\xdb\x21\xfc\x28\xe1\xd7\x7b\xef\x4d\x91\xe7\x99\x36\x98\x6f\x59\x23\x55\x07\x45\x27\xfd\x7e\xdc\xd5\x8d\x1e\xd6\x8b\xfd\xe5\xf7\x4f\x9d\x26\x84\x4e\xf7\x4c\x75\xb5\xb6\xdd\xfa\x71\x4d\x70\xa9\xc8\xba\xf1\x8f\x11\xb9\xca\xf3\xf5\x1a\xb8\x16\x16\xa4\x03\xa6\x40\x62\x82\x6d\x59\x23\xa0\xd5\x16\x0a\xae\x11\xad\x00\x4a\x06\x2b\xfe\x1d\x85\xf3\x0e\x8c\x76\x4e\xee\xfa\x03\x3c\x20\x11\x78\xb0\xcc\x18\xcc\xca\xfd\xc1\x88\x04\x35\x83\x3c\xe5\xd9\xb5\x2e\x1b\xf8\x91\x10\xea\x4d\x90\xbd\x02\x9b\xd6\x5f\x22\x62\x05\xe5\xb4\x76\x46\x2b\x27\x56\x20\xac\xd5\xb6\xca\x8f\x79\x44\xd5\xe6\x77\x36\x88\x8d\x7f\x04\xe7\xed\xd8\xf8\xa7\x63\xe0\xbd\x63\x4e\x24\x8c\x1b\xa6\x78\x8f\xa5\x0d\x16\xd6\x76\x70\xe0\xf7\x22\xc4\xcf\xb8\x47\x34\xda\xbe\x26\x9e\x27\xb0\x76\x54\x0d\x94\x7c\x0e\x55\xf0\x02\xda\xa4\xda\x0a\x3f\x5a\x05\xa9\xd1\x35\xa2\xd9\x7a\x13\xbb\x5f\x56\x2b\x68\x10\x2d\xc8\x43\x15\xe9\xce\x02\x23\xc6\xb9\x9b\x36\xc0\xeb\xf3\xc6\x47\xf6\xcb\xf4\x28\x80\xea\xf1\xd0\xf9\x7c\x21\x65\x91\xf7\x52\x35\x79\x86\x3a\xe0\xdd\x07\x58\x68\x20\x4f\xd2\xa5\xd0\x36\x46\xeb\xbf\x58\x3f\x8a\x72\xbe\xa8\xa7\x63\x55\x97\x48\x0f\x19\x60\xea\x3d\x43\xae\x06\x16\x0e\xad\xff\x34\x4c\xe5\x19\xca\xdf\xde\x5e\xdf\xbe\x23\xe1\xe0\x59\xe7\x50\x6c\xcf\x7c\x52\x2f\x95\x19\x3d\x70\xe6\xd9\x2f\x79\x26\x5b\x30\xcc\x22\x00\x9d\xa4\xaa\x97\x68\x9f\xac\x1e\x26\x7a\xc8\xa8\x7a\xbf\xcc\x7f\xf5\x01\x94\xec\xa9\x53\x19\x12\xb9\x38\xec\x99\x0d\x59\x89\xfe\xea\x2c\xba\xd9\xcb\x9e\xdf\xb6\xe5\x09\xec\xd4\x84\x0a\xb5\x1d\x41\xf4\x4e\xfc\x3f\x64\x4a\x0f\x4a\xb0\xb5\x24\xc1\x99\x7a\x8b\xa9\xc2\x96\x55\xfd\x59\x7d\x15\x8d\x2f\x71\xeb\xe4\x13\xc4\x5c\xc2\xdd\x6c\xb7\x7f\xdc\x08\xc6\x85\x75\xdf\x09\x6d\x98\xb5\x12\x21\x6d\x1d\x37\x2a\xec\x04\xd5\x5b\xb4\x20\xb9\x13\x97\x2b\xc0\x69\x53\x7f\xa4\x9b\x6e\x4b\x1c\x42\x63\xcf\xd5\x6b\x8f\x9d\x27\x32\xb3\x13\xf7\x11\x19\xca\x1f\xee\xab\x22\x18\x23\x2a\x49\x38\xbc\xe6\xe4\xf0\xa5\xa9\x31\x62\x0f\xd3\xa3\xa4\x85\x14\x0e\xde\x5e\xfd\xf3\x2d\x47\x87\xdc\x67\x7e\x3e\xfb\x0b\xe6\xce\xb8\x68\xd9\xd8\xfb\x2f\x09\x0e\xc7\x4c\xaa\xf6\x37\x0e\xa2\x69\x37\x72\xc2\x61\x06\x4a\x3c\x40\x9a\x78\x38\x0e\x98\x07\x7d\x8f\xcc\x25\x17\x71\x3a\xa8\x71\xd8\x61\x4d\xdd\xce\xfc\xd0\x72\x5c\x87\xc1\xc7\xc8\x3b\x5e\x36\x63\xcf\x6c\x94\x13\x08\xd7\xf1\x75\x2d\xca\x91\xd3\xa6\x22\xd3\xc5\xad\x66\x40\x64\x58\x5d\x46\x97\xd3\x21\x45\x08\x2f\xbe\x1f\x44\x8b\xa7\x0f\x29\xfb\xe9\x38\xa3\x9d\xb5\x76\x02\x93\x51\xcb\x9d\x38\x84\xdf\x10\x23\xdc\x56\x76\xa3\xc5\x87\xa4\x55\x0d\x9f\x50\x10\x17\x03\x3e\x6a\x1f\xb7\xc0\x8c\x16\x87\x38\x11\xf4\xaf\x1d\x7c\x1d\x9d\x47\xc5\x78\xf9\xd8\x50\x2c\x80\x1d\xf9\x76\x7f\xac\xec\xf6\x1e\x94\x7e\xa8\x17\x17\x37\x31\x79\x3e\x4c\xe7\x7b\x7d\xf9\xfc\xb1\xb8\xb9\x9a\x5e\xcd\x99\xdd\xa6\xd7\xf4\xdc\xdd\xf3\x19\xb2\x6a\x18\x35\x9f\xdb\xd4\xa4\x50\x11\x1a\x46\x56\xdf\x89\xa4\x8f\x53\x50\xc5\x6e\x24\x08\x39\x0c\x82\x4b\xe6\x45\x7f\x88\x6d\xf4\x7b\x6c\xb8\xb1\x1a\x9b\x82\xff\xd8\xe7\x46\x18\xf4\x95\xea\x0f\xa1\xc0\xaf\x1f\xb7\x8e\x60\x17\xa0\x81\xa0\xad\x7f\x13\x7e\xaf\x39\xb1\x2c\x30\xa9\xf8\x0e\x4f\x9a\x95\x0b\xff\x04\xb3\xd0\x02\xa7\xd2\xdd\xc5\x0c\x4e\x43\xf7\xdc\x2f\x38\x77\xc9\x76\xa1\xee\x2b\x3c\x92\x2a\x05\xbc\xd0\xbb\xb3\x47\x14\x6b\x92\xe5\x25\x81\x5f\xbd\xc7\xdf\x9f\xa7\xfa\xb8\x78\xf3\x26\x00\x90\x06\xa4\x49\x03\xcd\x8f\x6e\xa3\xb9\xc0\xac\xb7\x57\x57\x21\x98\xed\xac\x60\x77\xf8\x71\x0c\xa5\xa6\x9b\xba\xbc\xa8\xd3\xbc\x38\x29\x3e\xe6\xff\x05\x00\x00\xff\xff\xdd\x44\x5c\x92\x13\x09\x00\x00")

func hardcoded_doerGoBytes() ([]byte, error) {
	return bindataRead(
		_hardcoded_doerGo,
		"hardcoded/_doer.go",
	)
}

func hardcoded_doerGo() (*asset, error) {
	bytes, err := hardcoded_doerGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "hardcoded/_doer.go", size: 2323, mode: os.FileMode(436), modTime: time.Unix(1472740260, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _hardcoded_middlewareGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x55\x4d\x73\xdb\x46\x0c\x3d\x93\xbf\x02\xd5\x89\xec\xc8\xab\x4b\x4f\xcd\xf8\x90\x71\xe3\xda\x33\x49\x9a\x89\xd5\xc9\x21\x93\xe9\xac\x48\x50\xdc\x88\xda\x65\x77\x21\xc9\x99\x8e\xfe\x7b\x81\xdd\x95\x4c\xc5\xee\xc7\xc1\x16\x89\x05\x1e\xf0\x1e\x80\xe5\xa8\x9b\x8d\x5e\x23\x04\xf4\x7b\xf4\x65\x69\xb6\xa3\xf3\x04\x55\x59\xcc\x2c\xd2\xa2\x27\x1a\x67\x25\xbf\xac\xdd\xb8\x59\x2b\x63\x17\x37\x03\xb2\xe3\x62\xa3\xbf\xed\x11\xaf\xd6\x4e\xed\x7f\x5a\x0c\x6e\xbd\x46\x3f\x2b\x8b\xcd\xfe\x9d\x69\xdb\x01\x0f\xda\x23\xfc\x7b\xcc\xf6\xec\x28\xf8\x6e\x44\x4b\x5e\x37\xc6\xae\x39\xce\x50\xbf\x5b\xa9\xc6\x6d\x17\x13\xfb\xf4\x99\x31\x66\x65\x5d\x96\xdd\xce\x36\x70\x60\xf7\xa7\xb4\x95\x30\x31\x0d\xbe\xd7\x5b\x66\x45\x9e\xbd\xe7\xe0\xdd\x8e\xd0\x83\xb0\x51\x77\xda\xb2\xab\xaf\x2f\xde\xe0\xaf\xb2\xe8\xf3\xe3\xcf\xd7\x90\xd3\x4c\x50\x13\x42\x5d\x16\x8b\x05\xbc\x65\xba\x52\xe8\x13\x05\xe0\x5a\x31\xc0\xa0\x03\xcd\xc1\x28\x54\x5c\xd4\x30\xc0\x0a\xc1\xef\x2c\x74\xc6\x07\x52\x31\x74\xd9\x9b\x00\x5b\xbd\x61\x67\x43\x10\x1c\x50\xaf\x09\x1c\xf5\x9c\x77\x02\xd7\xeb\x00\xba\x69\x30\x04\x20\xf1\x41\x48\x12\x47\x8c\x18\x72\xa1\xb4\xb1\x5f\xb1\x21\x86\xb4\xd9\xdb\xe3\x9f\x3b\x0c\xc4\x65\x59\xc2\x47\xc9\x7d\x22\x77\x7d\x11\xa9\xde\xe3\xa1\xca\x47\xf3\x9c\x23\xda\x26\x22\xd6\x4c\xda\x23\xed\xbc\x85\xec\x59\x1e\xcb\x52\xea\xf8\x5e\x24\x68\x3c\x6a\x62\x6a\x1a\x2c\x1e\x20\x8c\xda\x82\x65\x84\x16\x74\x27\xf2\x4b\x65\xbf\x7f\x7c\x0b\xa3\xa6\x1e\x5c\x37\xad\x54\x09\xe0\x3d\xc1\x38\x68\x66\xcd\x27\x2c\x53\x8c\x37\xf6\x25\x42\x73\xe8\x9c\x87\x5d\x40\x58\x7d\xcb\xea\xe5\xda\x02\xec\x8d\x86\xc9\xa8\xa8\x07\x86\xb9\xf5\x6e\x7b\x93\x42\xab\x3a\xa6\xea\xb8\xc8\x98\x00\x1f\x4d\x88\xd2\x9d\x73\xf4\xa8\x5b\x06\x9a\xc7\xc4\xd1\x27\xf1\x6a\x25\x59\xac\x6c\xd2\xa9\x53\x9f\x35\x34\xbd\x19\xda\x44\x8b\xfb\x23\x71\x2a\xcd\xe7\xf3\x61\xea\xff\x63\x12\x4f\x72\x4f\xcc\xb7\x8c\x54\x09\x5c\x75\x48\xf6\x8f\x18\x46\x67\x03\x7e\xf2\x86\xa4\x79\x1e\x7e\xcc\xf6\xc8\xa2\x16\x1c\x99\x96\xd7\x44\xb8\x1d\x49\xe6\xe8\xab\x63\x96\x99\x36\x53\x59\x23\x91\x8c\xb1\xd4\x27\x33\xd4\x39\xe8\x58\xa7\x48\x3b\x6b\xc0\x83\xc3\xab\x19\x57\x89\xb7\xc2\x2b\xee\x9e\xfa\xc0\xdd\x63\xf3\x5e\x7b\x46\x7a\xa6\x34\x9f\x98\x0e\x42\x33\x07\xf4\x71\x95\xa6\x0e\xbf\x0e\x6e\xa5\x87\xa5\xe4\xf3\x55\x2d\xe0\xc5\x9b\x47\x39\xa4\x6a\xea\x76\xb7\x5c\x7e\xb8\xcb\x4d\x10\x9f\xe2\x1f\x0e\x6f\xb4\xf7\x86\x91\xbc\x4a\x86\xba\x7e\x15\xb3\xfe\x70\x0d\xd6\x0c\x51\x80\x82\x4b\xbc\xac\xe1\x81\xb4\x27\xa9\xb4\x4a\xc4\x78\xba\x8b\x23\xe0\xc0\xb3\xf4\xff\x02\xe6\x17\xa7\x37\xd2\xf5\xdf\xba\x2a\x34\x75\x44\xe2\xbf\x16\x3b\x14\x6d\xd4\xad\xb1\x26\xf4\x3c\x70\xa9\x13\x69\x4b\x93\xfc\xf7\xbf\xa4\x65\xe5\x95\x8b\x2b\xae\x4d\x3b\x1d\xc1\x16\x57\xbb\x78\xc7\x70\x24\x89\x8a\x72\x65\x54\x5b\x3d\x7e\x4e\x37\xda\x97\xf4\x53\x27\xb5\xb3\xd2\x9c\xf1\x2c\xed\x7d\xcc\x55\xb1\xe9\x3c\xf6\x97\x75\x2f\xd9\xf6\x4e\x8f\x51\xdf\x17\xec\x27\x69\xe9\xa4\xe9\xf5\x44\x53\x69\x30\x93\x30\x2d\x43\x6e\xe2\x75\xf9\x79\xe6\xe8\x2a\xce\x91\xbf\x4a\x47\xb3\x2f\xaf\xe4\x30\xfa\x17\xf9\x62\x99\x6e\xa1\x7f\x2a\xac\x56\xaf\xdb\xf6\xf4\xf6\x1c\x68\x9e\x93\x09\xd9\xa8\xef\x51\xf4\x64\x66\x7c\x0d\xbf\xd9\x73\xe5\xd5\x2c\xcb\xf6\x87\xc7\x06\xcd\x1e\xdb\x59\x7d\x6e\x43\x5c\x99\xfa\xd4\xda\x17\x62\xba\xd8\xa4\x1c\x73\xac\xe4\x3f\x5f\x5e\x37\xf4\xf8\xfd\xf0\xe6\x0a\x3f\xf1\xd7\x26\x4e\x83\x9f\x4a\x1b\xc6\xd8\xe5\x5e\x3d\xc8\x77\x54\x66\xb4\x3a\xf0\x4e\x2a\xf1\x3e\xb9\x25\x58\x19\x93\x63\xcd\x57\xe8\xdf\x01\x00\x00\xff\xff\xbc\xa4\xd7\xff\x7a\x07\x00\x00")

func hardcoded_middlewareGoBytes() ([]byte, error) {
	return bindataRead(
		_hardcoded_middlewareGo,
		"hardcoded/_middleware.go",
	)
}

func hardcoded_middlewareGo() (*asset, error) {
	bytes, err := hardcoded_middlewareGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "hardcoded/_middleware.go", size: 1914, mode: os.FileMode(436), modTime: time.Unix(1472769319, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"hardcoded/_doer.go":       hardcoded_doerGo,
	"hardcoded/_middleware.go": hardcoded_middlewareGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"hardcoded": &bintree{nil, map[string]*bintree{
		"_doer.go":       &bintree{hardcoded_doerGo, map[string]*bintree{}},
		"_middleware.go": &bintree{hardcoded_middlewareGo, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
