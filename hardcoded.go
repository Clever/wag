// Code generated by go-bindata.
// sources:
// hardcoded/_doer.go
// hardcoded/_middleware.go
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _hardcoded_doerGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xa4\x54\x51\x6f\xdb\x36\x10\x7e\xb6\x7e\xc5\x55\xc0\x50\x69\xf5\xe4\xbc\xf4\xa5\x5d\xb1\x07\xa7\x5d\xfa\xb0\x65\xe8\x8c\x6d\xaf\xb4\x48\xc9\x6c\x24\x92\x23\xa9\x24\x86\xe1\xff\xbe\x3b\x92\x92\x65\xa7\x0b\x0a\xa4\x28\xe0\x90\x77\xfa\xee\xfb\xee\x3e\x9e\x61\xf5\x1d\x6b\x05\xd4\x9d\x14\xca\x67\x99\xec\x8d\xb6\x1e\x8a\x6c\x91\x37\xbd\xcf\xf1\x47\x09\xbf\xda\x79\x6f\xf2\x0c\x0f\xad\xee\x98\x6a\x2b\x6d\xdb\xd5\xe3\x8a\x22\xb5\x56\x5e\x3c\x86\xc4\xff\x8b\xad\x6a\xff\x38\x02\x68\x83\x55\x2c\xab\xa5\x6a\x21\x6f\xa5\xdf\x0d\xdb\xaa\xd6\xfd\x6a\x76\x3f\xff\xfb\xa7\x56\xe7\x59\x99\x65\xab\x15\x70\x2d\x2c\x48\x07\x4c\x81\x44\x58\xdb\xb0\x5a\x40\xa3\x2d\xe4\x5c\x63\x66\x0e\x54\x02\xac\xf8\x77\x10\xce\x3b\x30\xda\x39\xb9\xed\xf6\xf0\x80\x45\xe0\xc1\x32\x63\x30\x2b\xf3\x7b\x23\x12\xd4\x04\x72\xc8\x16\xd7\xba\xa8\xe1\x47\x42\xa8\xd6\xa1\x11\x4b\xb0\xe9\xfc\x25\x22\x96\x50\x8c\x67\x67\xb4\x72\x62\x09\xc2\x5a\x6d\xcb\xec\x98\x45\x54\x6d\x7e\x67\xbd\x58\xfb\x47\x70\xde\x0e\xb5\x3f\x1c\x03\xef\x2d\x73\x22\x61\xdc\x30\xc5\x3b\x2c\x6d\xb0\xb0\xb6\xbd\x03\xbf\x13\x21\x7e\xc6\x3d\xa2\xd1\xf5\x35\xf1\x3c\x81\x35\x83\xaa\xa1\xe0\x53\xa8\x84\x17\xd0\x26\xd5\x56\xf8\xc1\x2a\x48\xe3\xa9\x10\xcd\x56\xeb\x38\xb3\xa2\x5c\x42\x8d\x68\x41\x1e\xaa\x48\xf3\x08\x8c\x18\xe7\x6e\xbc\x00\xaf\xcf\x1b\x1f\xd9\xcf\xd3\xa3\x00\xaa\xc7\x43\xe7\xb3\x99\x94\x59\xde\x4b\xd5\x64\x0b\xd4\x01\xef\x3e\xc0\x4c\x03\xf9\x8d\x86\x42\xd7\x18\xad\xfe\x62\xdd\x20\x8a\x69\x50\x87\x63\x59\x15\x48\x0f\x19\x60\xea\x3d\x43\xae\x06\x66\xee\xab\xfe\x34\x4c\x65\x0b\x94\xbf\xb9\xbd\xbe\x7d\x47\xc2\xc1\xb3\xd6\xa1\xd8\x8e\xf9\xa4\x5e\x2a\x33\x78\xe0\xcc\xb3\x5f\xb2\x85\x6c\xc0\x30\x8b\x00\xf4\x25\x55\xbd\x44\xfb\x64\x75\x3f\xd2\x43\x46\xe5\xfb\x79\xfe\xab\x0f\xa0\x64\x47\x9d\x5a\x20\x91\x8b\x8f\x3d\xb3\x21\x2b\xd1\x5f\x9e\x45\xd7\x3b\xd9\xf1\xdb\xa6\x38\x81\x9d\x9a\x50\xa2\xb6\x23\x88\xce\x89\xef\x43\xa6\xf4\xa0\x04\x5b\x4b\x12\x9c\xa9\x36\x98\x2a\x6c\x51\x56\x9f\xd5\x57\x51\xfb\x02\xaf\x4e\x3e\x41\xcc\x39\xdc\xcd\x66\xf3\xc7\x8d\x60\x5c\x58\xf7\x4c\x68\xcd\xac\x95\x08\x69\xab\x78\x51\x62\x27\xa8\xde\xac\x05\xc9\x9d\x78\x5c\x02\xae\xa2\xea\x23\x4d\xba\x29\xf2\x5a\x0f\x1d\x57\xaf\x3d\x76\x9e\xc8\x4c\x4e\xdc\x45\x64\x28\x7e\xb8\x2f\xf3\x60\x8c\xa8\x24\xe1\xf0\x8a\x93\xc3\xe7\xa6\xc6\x88\xdd\x8f\x8f\x92\x0e\x52\x38\x78\x7b\xf5\xcf\xb7\x1c\x1d\x72\x9f\xf8\xf9\xec\x5f\x30\xf7\x82\x8b\x86\x0d\x9d\xff\x92\xe0\x70\xcd\xa4\x6a\x7f\xe3\x22\xa2\xdb\x3d\x44\x46\xb8\xca\x40\x89\x07\x48\x5b\x12\x97\x01\xf3\xa0\xef\x91\xb7\xe4\x22\xee\x06\x35\xf4\x5b\xac\xa8\x9b\x89\x1d\x1a\x8e\xeb\xb0\xf6\x18\x39\xc7\xcb\x7a\xe8\x98\x8d\x62\x02\xdd\x2a\xbe\xad\xa9\x18\xb9\x6c\x2c\x31\x0e\x6d\x39\xc1\x21\xbb\xf2\x32\x3a\xdf\x0c\x29\x42\x68\xf1\xed\x20\x5a\xfc\x7a\x9f\xb2\x0f\xc7\x09\xed\xac\xad\x23\x98\x8c\x4a\xee\xc4\x3e\xfc\x86\x18\xe1\x36\xb2\x1d\x2c\x3e\x22\xad\x2a\xf8\x84\x72\xb8\xe8\xf1\x41\xfb\x78\x05\x66\xb0\xb8\xc0\x89\xa0\x7f\xed\xe0\xeb\xe0\x3c\xea\xc5\xc1\x63\x33\xb1\x00\xf6\xe3\xdb\xdd\xb1\xb2\xdd\x79\x50\xfa\xa1\x9a\x0d\x6d\x64\xf2\x74\x91\x4e\x33\x7d\xf9\xee\xb1\x78\xb9\x1c\x5f\xcc\x99\xd5\xc6\x97\xf4\xd4\xd9\xd3\x37\x64\xd3\xb0\x66\x3e\x37\xa9\x49\xa1\x22\xd4\x8c\x6c\xbe\x15\x49\x1f\xa7\xa0\x8a\xdd\x48\x10\xb2\xef\x05\x97\xcc\x8b\x6e\x1f\xdb\xe8\x77\xd8\x70\x63\x35\x36\x05\xff\x63\x9f\x6b\x61\xd0\x55\xaa\xdb\x87\x02\xbf\x7e\xdc\x38\x82\x9d\x81\x06\x82\xb6\xfa\x4d\xf8\x9d\xe6\xc4\x32\xc7\xa4\xfc\x19\x9e\xb4\x27\x67\xfe\x09\x66\xa1\x03\x6e\xa4\xbb\x8b\xfd\x9b\x16\xee\xb9\x5f\x70\xe7\x92\xed\x42\xdd\x57\xf8\x49\xaa\x14\xf0\x42\xef\xce\x1e\x50\xac\x49\x86\x97\x04\x7e\xf5\x1e\x7f\x7f\x1e\xeb\xe3\xe1\xcd\x9b\x00\x40\x1a\x90\x26\x2d\x33\x3f\xb8\xb5\xe6\x02\xb3\xde\x5e\x5d\x85\xe0\x62\x6b\x05\xbb\xc3\x3f\x8e\xa1\xd4\x38\xa9\xcb\x41\x9d\x76\xc5\x49\xf1\x31\xfb\x2f\x00\x00\xff\xff\x74\x68\xba\x23\x21\x09\x00\x00")

func hardcoded_doerGoBytes() ([]byte, error) {
	return bindataRead(
		_hardcoded_doerGo,
		"hardcoded/_doer.go",
	)
}

func hardcoded_doerGo() (*asset, error) {
	bytes, err := hardcoded_doerGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "hardcoded/_doer.go", size: 2337, mode: os.FileMode(420), modTime: time.Unix(1471457554, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _hardcoded_middlewareGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x54\x41\x6f\xdb\x3a\x0c\x3e\xdb\xbf\x82\x2f\x27\xfb\x21\x4f\x39\xbc\xdb\x86\x1e\x86\xa0\x5d\x07\x74\x5d\xd1\x76\xe8\x71\x50\x6c\xda\xd6\xe2\x48\x1e\xc5\x38\x29\x86\xfc\xf7\x51\xb2\x93\xba\x6b\x57\xec\x10\x20\xa2\x3e\x7e\xfc\x3e\x92\x56\xa7\x8b\xb5\xae\x11\x3c\x52\x8f\x94\xa6\x66\xd3\x39\x62\xc8\xd2\x64\x66\x91\x17\x0d\x73\x37\x4b\xe5\x50\xbb\x6e\x5d\x2b\x63\x17\xcb\x16\x05\xb8\x58\xeb\xc7\x1e\xf1\xbf\xda\xa9\xfe\xff\x45\xeb\xea\x1a\x69\x96\x26\xeb\xfe\xb3\x29\xcb\x16\x77\x9a\x10\xde\xce\xd9\x9c\x80\x81\xdf\x75\x68\x99\x74\x61\x6c\x2d\x79\x86\x9b\xed\x4a\x15\x6e\xb3\x98\xc4\xa7\xff\x85\x63\x96\xe6\x69\x5a\x6d\x6d\x01\x3b\x81\x3f\x95\xcd\x82\x13\x53\xe0\xb5\xde\x88\x2b\x26\x41\xcf\x81\xdc\x96\x91\x20\xb8\x51\x97\xda\x0a\x94\xf2\x67\x27\xf8\x29\x22\x9a\xf1\xff\xbb\x33\x98\x1a\x51\xd7\xb8\xcb\x06\x86\x39\x0c\x56\x63\x68\x52\x28\xcf\x9f\xb2\xcf\x60\x14\x39\xd1\x34\xde\x09\x8a\x90\xb7\x64\x61\x0c\xa4\x87\x34\x5d\x2c\x5e\x26\x40\x41\xa8\x19\x3d\x68\xb0\xb8\x03\xdf\x69\x0b\x56\xea\x94\xa0\xab\x60\x84\x1b\x84\xaf\xb7\x57\xd0\x69\x6e\xc0\x55\xf1\x4c\xf8\x63\x8b\x9e\x55\x20\xfc\xc4\xd0\xb5\xba\x10\x02\x6e\x8c\x1f\xf2\x8d\x9d\xc2\xa0\x70\x96\x71\xcf\x73\xa8\x1c\xc1\xd6\x23\xac\x1e\xc1\x09\x80\x8e\xda\x3c\xf4\x46\xc3\xa4\xe9\xea\x4e\x68\x2e\xc8\x6d\x96\x43\x6a\x96\xc7\x52\x95\x88\x8c\x05\x70\x6f\x3c\xfb\x50\xe7\x58\xa3\x41\x5d\x0a\xd1\x3c\x16\x8e\x98\xc1\x57\x19\x8a\x45\x65\x4f\x5b\x20\x63\x6c\x5b\x58\xa1\xb0\x15\x8d\x69\xcb\xc1\x96\xe6\x98\xa7\x86\x49\xbf\xd2\xd8\xb7\x67\x7a\x6a\xf7\x24\x7c\x21\x4c\x59\xa0\xcb\x76\x43\xfc\x16\x7d\xe7\xac\xc7\x07\x32\x71\xc4\x04\xff\x8e\xf1\xe8\x22\x0f\x3c\x89\x38\xfd\xc0\x8c\x9b\x8e\x81\x1d\x7c\x77\xe2\x72\xb4\x2d\x56\x6a\x64\x0e\x9b\x1b\xf4\xa1\x34\xa0\x72\x50\x49\x9f\xa2\xed\xb1\x07\x4a\x38\x5c\x17\x97\x52\xd6\x8b\x94\x4c\x4f\xdd\xc8\xf4\x24\xdc\x6b\x12\xa6\x17\x9d\x96\x1b\x53\x81\x2f\xe6\x80\x14\x77\x72\x0a\xf8\xd8\xba\x95\x6e\xef\x43\x3d\xca\xf2\x40\x9e\x9c\xef\xc3\x25\x67\x53\xd8\xe5\xfd\xfd\xcd\xe5\x38\x84\x80\xf9\xc3\xdd\x52\x13\x19\x21\x22\x35\x04\xf2\xfc\x7d\x2c\xfa\xcf\x19\x58\xd3\x46\xff\x89\x28\x7c\x2e\xe1\x8e\x35\x71\x10\x9a\x0d\xbe\x64\xb9\x93\x03\x60\x2b\xab\xf4\x77\x09\xf3\x67\xb7\xcb\x30\xf4\x2f\x55\xe6\x8b\x3c\x32\xc9\xaf\xc4\x0a\x43\x6b\xd4\x85\xb1\xc6\x37\x59\x88\xcb\xe9\xca\xd5\xe7\xbd\x24\x66\xb3\x71\xcf\xbe\x11\x16\x68\x7a\x2c\x67\xf9\x29\x2b\x0e\x38\x3f\x2a\x79\x25\xa7\x8a\x9c\x63\xce\x21\x72\xcb\xa7\xb6\xe4\xfd\xef\xad\x1e\xb7\xfd\x41\x5e\x99\x28\x9e\xd4\x69\xff\xe7\x22\x4e\x5e\xa1\x24\x69\xd4\x5d\x78\x3f\x43\x4b\xb3\x9d\x6c\x90\x0a\xe8\x23\x6c\xa0\x0d\xae\x0e\xb9\x7c\xf0\xbf\x02\x00\x00\xff\xff\xdc\x11\xd1\xea\x72\x05\x00\x00")

func hardcoded_middlewareGoBytes() ([]byte, error) {
	return bindataRead(
		_hardcoded_middlewareGo,
		"hardcoded/_middleware.go",
	)
}

func hardcoded_middlewareGo() (*asset, error) {
	bytes, err := hardcoded_middlewareGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "hardcoded/_middleware.go", size: 1394, mode: os.FileMode(420), modTime: time.Unix(1471911658, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"hardcoded/_doer.go":       hardcoded_doerGo,
	"hardcoded/_middleware.go": hardcoded_middlewareGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"hardcoded": &bintree{nil, map[string]*bintree{
		"_doer.go":       &bintree{hardcoded_doerGo, map[string]*bintree{}},
		"_middleware.go": &bintree{hardcoded_middlewareGo, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
